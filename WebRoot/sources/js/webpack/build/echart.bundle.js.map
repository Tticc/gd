{"version":3,"sources":["webpack:///webpack/bootstrap 2e7f7d59c04944ebee37?32db*","webpack:///./unit/ECharts/echarts.js?e486","webpack:///./appConfig/echart.js"],"names":["echarts","require","option","title","text","tooltip","trigger","legend","data","xAxis","type","boundaryGap","getNowFormatDate","splitNumber","yAxis","splitLine","show","series","name","domm","$","chart1","init","document","getElementById","setOption"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oCAAoC;AACpC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;;AAGA;AACA,iBAAiB;AACjB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,8CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B,iBAAiB,aAAa;AAC9B;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,8CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B,iBAAiB,aAAa;AAC9B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,cAAc;AAC9B,8CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;;AAEA;AACA;AACA,gBAAgB,cAAc;AAC9B,iDAAiD,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;;AAEA,0DAA0D,0BAA0B;;AAEpF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;;AAEd;;AAEA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;;AAEd;;AAEA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAc,mCAAmC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA,uCAAuC;AACvC;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,qBAAqB;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;;AAEA;AACA;AACA;AACA;AACA;;AAEA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA,cAAc;AACd,UAAU;AACV;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,gBAAgB,2DAA2D;AAC3E,gBAAgB,wDAAwD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,gBAAgB,2DAA2D;AAC3E,gBAAgB,wDAAwD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,iBAAiB,sCAAsC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,6CAA6C;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,eAAe;AAChC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA,+DAA+D,MAAM;AACrE,kDAAkD,MAAM;AACxD;AACA,aAAa,6DAA6D;AAC1E,yBAAyB;AACzB;AACA;AACA,gBAAgB,gBAAgB;AAChC,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;;AAGA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;;;AAGN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iDAAiD,IAAI;AACrD,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,+CAA+C;;AAE/C;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,2BAA2B;AAC3C,gBAAgB,OAAO;AACvB;AACA;;AAEA;;AAEA;AACA;;AAEA,gCAAgC;;AAEhC;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qFAAqF;AACrF;AACA;AACA;AACA,sDAAsD;AACtD,wDAAwD;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;;AAEA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,sBAAsB;AAC1C,oBAAoB,sBAAsB;AAC1C,oBAAoB,sBAAsB;AAC1C,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8BAA8B;AAC/C;AACA;AACA,iBAAiB,4CAA4C;AAC7D;AACA;AACA,iBAAiB,mBAAmB;AACpC,yCAAyC;AACzC;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO,yBAAyB,yBAAyB;AAC7E;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,iBAAiB,8BAA8B,mBAAmB;AAClE,yCAAyC;AACzC;AACA;AACA,iBAAiB,4CAA4C,mBAAmB;AAChF,yCAAyC;AACzC;AACA;AACA,oBAAoB,eAAe;AACnC;AACA,oBAAoB,SAAS;AAC7B,oBAAoB,EAAE;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B,oBAAoB,EAAE;AACtB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS;AAC7B,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS;AAC7B,oBAAoB,EAAE;AACtB;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,SAAS;AAC7B,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA,2DAA2D;AAC3D;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,sBAAsB;AACtC,iBAAiB,OAAO,OAAO,OAAO,eAAe,eAAe;AACpE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU,GAAG,UAAU,GAAG,GAAG;AAC7D,+BAA+B,GAAG,GAAG,UAAU,GAAG,UAAU;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,EAAE;AAClB,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,EAAE;AAClB,gBAAgB,EAAE;AAClB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,QAAQ;AACxB,iBAAiB,EAAE;AACnB;AACA;AACA;AACA,uDAAuD,SAAS;AAChE;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,EAAE;AAClB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,EAAE;AAClB,gBAAgB,EAAE;AAClB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,gBAAgB;AAChC,gBAAgB,gBAAgB;AAChC,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B,gBAAgB,SAAS;AACzB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,SAAS;AACzB,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,SAAS;AACzB,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,SAAS;AACzB,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iBAAiB,EAAE;AACnB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA,kCAAkC,WAAW,eAAe,eAAe;AAC3E;AACA,gBAAgB,gCAAgC;AAChD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,WAAW,eAAe,eAAe;AAC3E;AACA,gBAAgB,gCAAgC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,mBAAmB;AACnC,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA,gBAAgB,yBAAyB;AACzC,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,QAAQ;AAC5B,oBAAoB,OAAO;AAC3B,qBAAqB,OAAO;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,sDAAsD;AACtE,gBAAgB,sBAAsB;AACtC,iBAAiB,eAAe,gBAAgB,wBAAwB,IAAI;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,kBAAkB;AAChD;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,eAAe,gBAAgB,mCAAmC;AAClF,gBAAgB,eAAe,gBAAgB,mCAAmC;AAClF,iBAAiB,uCAAuC;AACxD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;;AAEA,2DAA2D,UAAU;AACrE;;AAEA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,oCAAoC;AAChG;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,yBAAyB;AACzC,gBAAgB,OAAO;AACvB;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,gBAAgB,4BAA4B;AAC5C,gBAAgB,cAAc;AAC9B,8CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,IAAI,UAAU,EAAE;AAClD;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC,iCAAiC;AACjC,iCAAiC;AACjC,mCAAmC;AACnC,kCAAkC;AAClC;;AAEA;;AAEA;AACA,kBAAkB,uDAAuD;AACzE;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,sBAAsB;AACvC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC,iBAAiB,eAAe;AAChC,iBAAiB,eAAe;AAChC,iBAAiB,QAAQ;AACzB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,eAAe;AAC/B,gBAAgB,eAAe;AAC/B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,KAAK;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,mBAAmB;AACnC,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB,iBAAiB;AACjB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,2BAA2B,QAAQ;AACnC,gCAAgC,QAAQ;AACxC,8BAA8B,QAAQ;AACtC,8BAA8B,QAAQ;AACtC,mBAAmB,SAAS;AAC5B;AACA;AACA,yBAAyB,QAAQ;AACjC,8BAA8B,QAAQ;AACtC,8BAA8B,QAAQ;AACtC,8BAA8B,QAAQ;AACtC,mBAAmB,SAAS;AAC5B;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8CAA8C,OAAO;AACriBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6EAA6E;AAC7E,wBAAwB,6CAA6C;AACrE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,gDAAgD,SAAS;AACzD;AACA;;AAEA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,iCAAiC;AACrE;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,iCAAiC;AACtD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,oBAAoB,0CAA0C;AAC9D,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,wCAAwC;AACxD,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;;AAEA;AACA,kBAAkB,4BAA4B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,qBAAqB,QAAQ;AAC7B,qBAAqB,QAAQ;AAC7B,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,qBAAqB,QAAQ;AAC7B,qBAAqB,QAAQ;AAC7B,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,2BAA2B;AAC3C,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,2BAA2B;AAC/C,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,sBAAsB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;;AAEA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,2BAA2B;AAC3C,gBAAgB,2BAA2B;AAC3C;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,cAAc,gBAAgB;AACjD;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;;AAGV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,0DAA0D;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA,oBAAoB,eAAe;AACnC,oBAAoB,SAAS;AAC7B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;AAEd,qBAAqB;AACrB;;AAEA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,+BAA+B;AAC/C,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;;AAEA;AACA;AACA,gBAAgB,+BAA+B;AAC/C,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;;AAEA;AACA;AACA,gBAAgB,+BAA+B;AAC/C,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,OAAO;AACvB,gBAAgB,cAAc;AAC9B,iBAAiB,OAAO,EAAE;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,OAAO;AACvB,gBAAgB,cAAc;AAC9B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,UAAU,GAAG;AACvB;AACA;AACA,gBAAgB,+BAA+B;AAC/C,gBAAgB,OAAO;AACvB,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,OAAO;AACvB,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,oBAAoB,cAAc;AACnE;AACA,SAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,cAAc;AAC9B,gBAAgB,QAAQ;AACxB;AACA;AACA,2CAA2C;AAC3C,iDAAiD;AACjD,kDAAkD;AAClD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd,kCAAkC,uBAAuB;AACzD,kCAAkC,WAAW,iBAAiB,WAAW;AACzE;AACA;AACA;AACA;AACA;AACA,kCAAkC,uBAAuB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA,0CAA0C;AAC1C;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD,qBAAqB,OAAO;AAC5B;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,OAAO;AAC3B,oBAAoB,aAAa;AACjC,qBAAqB,aAAa;AAClC;AACA;AACA,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,IAAI;AAC5B,yBAAyB,IAAI;AAC7B,4BAA4B,IAAI;AAChC;AACA,qBAAqB,YAAY;AACjC,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,IAAI;AAChC,6BAA6B,IAAI;AACjC;AACA,yBAAyB,YAAY;AACrC,yBAAyB,YAAY;AACrC;AACA;AACA,iBAAiB;AACjB,2BAA2B,IAAI;AAC/B;AACA,qBAAqB,QAAQ,IAAI,WAAW,aAAa;AACzD,qBAAqB,QAAQ,IAAI,WAAW,aAAa;AACzD;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,iCAAiC,SAAS,MAAM,cAAc;AAC9D,qBAAqB;AACrB;AACA,gCAAgC,6BAA6B;AAC7D,iCAAiC,SAAS,OAAO,cAAc;AAC/D,qBAAqB;AACrB;AACA,iCAAiC,SAAS,QAAQ,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,WAAW,gBAAgB,MAAM;AAClE,iCAAiC,WAAW,eAAe,MAAM;;AAEjE;;AAEA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,4BAA4B;AAChD,oBAAoB,iBAAiB;AACrC,qBAAqB,OAAO;AAC5B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,4BAA4B;AAChD,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,oBAAoB,4BAA4B;AAChD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA,+BAA+B,uBAAuB;AACtD,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;AACV;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,eAAe;AACpC;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,cAAc;AAClC,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,QAAQ;AAC5B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;;AAElB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,8DAA8D,iBAAiB;AAC/E,uCAAuC,UAAU,WAAW;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C,oBAAoB,eAAe;AACnC,oBAAoB,uCAAuC;AAC3D,qBAAqB,eAAe;AACpC;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,eAAe;AACpC;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,yCAAyC;;AAEzC,oEAAoE;;AAEpE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,yBAAyB;;AAE1E;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,uBAAuB;AAC3C,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,SAAS;AAC9B,sBAAsB;AACtB;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,SAAS;AAC9B,sBAAsB;AACtB;AACA;AACA,4BAA4B,2BAA2B;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,SAAS;AAC9B,sBAAsB;AACtB;AACA,4CAA4C;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,cAAc;AAClC,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS;AAC7B,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS;AAC7B,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0DAA0D,OAAO;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA,iCAAiC,MAAM;AACvC,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;;AAEd;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,cAAc,qCAAqC,UAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,MAAM;AACvB,iBAAiB,MAAM;AACvB,iBAAiB,OAAO;AACxB,iBAAiB,MAAM;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,aAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,MAAM;AACvB,iBAAiB,MAAM;AACvB,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,MAAM;AACvB,iBAAiB,MAAM;AACvB,iBAAiB,MAAM;AACvB,iBAAiB,MAAM;AACvB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,MAAM;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;AACV;AACA;AACA,qBAAqB,SAAS;AAC9B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA,UAAU;AACV;AACA;AACA,qBAAqB,gBAAgB;AACrC,8BAA8B;AAC9B,qBAAqB;AACrB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,8BAA8B;AAClE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,qBAAqB,SAAS;AAC9B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;;AAEV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;;AAEV;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAKA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B;AAC/B,2BAA2B;AAC3B;AACA;;AAEA,gCAAgC;AAChC,2BAA2B;AAC3B;AACA;;AAEA,gCAAgC;AAChC;AACA;;AAEA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD;AAChD;;AAEA;AACA;AACA;AACA,sDAAsD;AACtD;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,eAAe;AAC/B,iBAAiB,eAAe;AAChC;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,eAAe;AAC/B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC,sCAAsC;AACtC,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,uBAAuB;AACvC,gBAAgB,eAAe;AAC/B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,gBAAgB,SAAS;AACzB,iBAAiB,gBAAgB;AACjC,0CAA0C,wDAAwD;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA,OAAO;AACP;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;AAKA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,qBAAqB,4BAA4B;AACjD,qBAAqB,4BAA4B;AACjD;AACA,yCAAyC;;AAEzC;AACA;AACA,qBAAqB,4BAA4B;AACjD,qBAAqB,4BAA4B;AACjD,qBAAqB,4BAA4B;AACjD,qBAAqB,OAAO;AAC5B;AACA,iEAAiE;;AAEjE;AACA;AACA,qBAAqB,4BAA4B;AACjD,qBAAqB,4BAA4B;AACjD,qBAAqB,4BAA4B;AACjD,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,4BAA4B;AACjD,qBAAqB,4BAA4B;AACjD,qBAAqB,4BAA4B;AACjD,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,4BAA4B;AACjD,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,4BAA4B;AACjD,qBAAqB,4BAA4B;AACjD;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,uBAAuB;AACxC,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA,6CAA6C,yBAAyB;;AAEtE;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,iCAAiC;AACjD,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,gBAAgB,4BAA4B;AAC5C,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,uBAAuB;AACvC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,2BAA2B;AAC3C,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC,gBAAgB,OAAO;AACvB,gBAAgB,2BAA2B;AAC3C,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA,aAAa,uCAAuC,gCAAgC,EAAE;AACtF;AACA;AACA;AACA,aAAa,4BAA4B,gCAAgC,EAAE;AAC3E;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,uBAAuB;AACvC,gBAAgB,OAAO;AACvB,gBAAgB,2BAA2B;AAC3C,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD,gBAAgB,mCAAmC;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,eAAe;AAC/B,gBAAgB,eAAe;AAC/B,gBAAgB,SAAS;AACzB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,gBAAgB,SAAS;AACzB,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,cAAcqBAAqB,OAAO;AAC5B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,yDAAyD;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,cAAc;AAClC,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA,uCAAuC;;AAEvC,sCAAsC;;AAEtC;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA,yCAAyC;;AAEzC;AACA;AACA,qBAAqB;AACrB;AACA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,SAAS;AAC9B,sBAAsB;AACtB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,cAAc;AAClC,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,+BAA+B;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,sBAAsB;AAC1C,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,cAAc;AAClC,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,qBAAqB,uBAAuB;AAC5C,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,yBAAyB;AAC9C,qBAAqB;AACrB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,QAAQ;AAC7B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,yBAAyB;AAC7C,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;;AAEA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,4BAA4B,SAAS;AACrC;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,oEAAoE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA,gCAAgC,2BAA2B;AAC3D;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,iBAAiB;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,eAAe;AAChC,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,eAAe;AAChC,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,eAAe;AAChC,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;;AAEA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;;AAEA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,iBAAiB;AACzqBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,QAAQ;AAC7B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,YAAY;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA,gBAAgB,eAAe;AAC/B;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iCAAiC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,iBAAiB,OAAO;AACxB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;;AAGV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,iCAAiC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,QAAQ;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,SAAS;AACjC;AACA;;AAEA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,MAAM;AACtB;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,SAAS;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;;AAIN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;;AAEA;;AAEA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA,UAAU;;AAEV;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA,UAAU;;AAEV;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,gBAAgB,QAAQ;AACxB;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,gBAAgB,QAAQ;AACxB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,wBAAwB;;AAExB;;AAEA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,uBAAuB;AAC5C,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,cAAc;AAClC,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS;AAC7B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,UAAU;;;AAGV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC,gBAAgB,uBAAuB;AACvC,gBAAgB,gCAAgC;AAChD,gBAAgB,YAAY;AAC5B;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;;AAGA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD,aAAa;AAClE,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,mCAAmC;AACvD;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA,eAAe;AACf,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;;AAEA,yDAAyD,SAAS;AAClE;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gCAAgC,qBAAqB;AACrD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe,YAAY;AAC3B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB,aAAa;AACrC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC,YAAY;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oCAAoC,YAAY;AAChD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB,aAAa;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,4BAA4B,aAAa;AACzC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,QAAQ;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,QAAQ;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,YAAY;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,QAAQ;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAkB,OAAO;AACzB,mBAAmB,SAAS;AAC5B;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,kCAAkC;AACtD;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,kCAAkC;AACtD;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,SAAS;AACrC;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,QAAQ;AAC7B,qBAAqB,SAAS;AAC9B;AACA,qBAAqB,SAAS;AAC9B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA,yEAAyE;AACzE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA,wBAAwB,8BAA8B;AACtD;AACA;AACA;;AAEA,wBAAwB,8BAA8B;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkD,SAAS;AAC3D;AACA,kEAAkE;AAClE;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,sDAAsD;AACtD,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C;AAC1C;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;;AAEzB;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,uBAAuB;AACvC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,YAAY;;AAEvD;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;AACV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,OAAO;AACpD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,uBAAuB;AACvC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;;AAE7E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mBAAmB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mBAAmB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA,gBAAgB,2BAA2B;AAC3C;AACA;;AAEA;;AAEA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,4BAA4B;AAC5C,gBAAgB,eAAe;AAC/B,gBAAgB,SAAS;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iDAAiD,SAAS;AAC1D;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB,gBAAgB,SAAS;AACzB,gBAAgB,QAAQ;AACxB,gBAAgB,EAAE;AAClB;AACA;AACA,4CAA4C;AAC5C,sDAAsD;AACtD,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,aAAa;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB,gBAAgB,SAAS;AACzB,gBAAgB,QAAQ;AACxB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,sBAAsB;AACtC,gBAAgB,SAAS;AACzB,gBAAgB,QAAQ;AACxB,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,sBAAsB;AACtC,gBAAgB,SAAS;AACzB,gBAAgB,QAAQ;AACxB,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,yBAAyB;AACzC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA,yDAAyD;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,cAAc;AAC9B,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,uBAAuB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA,4CAA4C;AAC5C;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,6BAA6B,4BAA4B,aAAa,EAAE;;AAExE,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,8BAA8B;AAC9B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC,sBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,aAAa;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA,iBAAiB,eAAe;AAChC,iBAAiB,MAAM;AACvB,iBAAiB,eAAe;AAChC,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,4EAA4E;AAC5F,gBAAgB,yBAAyB;AACzC,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV,gCAAgC;;AAEhC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,+BAA+B;AACnD,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;;AAEd;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA,oBAAoB,+BAA+B;AACnD,oBAAoB,uBAAuB;AAC3C,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;;AAEd;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;;AAEA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,6BAA6B;AAC7C;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yBAAyB;AACzC,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB,gBAAgB,yBAAyB;AACzC,gBAAgB,OAAO;AACvB,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,yBAAyB;AAC1C,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kCAAkC,mBAAmB;AACrD,cAAc;AACd;AACA,kCAAkC,oCAAoC;AACtE,cAAc;AACd;AACA,kCAAkC,mBAAmB;AACrD,cAAc;AACd;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA,wCAAwC,kBAAkB;AAC1D,wCAAwC,kBAAkB;AAC1D,wCAAwC,kBAAkB;AAC1D,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA,sBAAsB;AACtB;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,yCAAyC;AACzD,gBAAgB,4BAA4B;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,sBAAsB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,2BAA2B;AAC3C,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,eAAe;AAC/B,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,MAAM;AAChD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,cAAc;AAClC,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,MAAM;;AAEN;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,gBAAgB,EAAE;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;;AAEA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,yBAAyB;AAC7C,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA,oBAAoB,eAAe;AACnC,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,eAAe;AACnC,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,sCAAsC;AAC1D;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,qBAAqB,cAAc;AACnC,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,uCAAuC;AAC3D,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,uCAAuC;AAC5D,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA,4BAA4B,oBAAoB;AAChD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,gBAAgB,OAAO;AACvB,gBAAgB,EAAE;AAClB,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,QAAQ;AAC7B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,QAAQ;AAC7B,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;AACV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC,yBAAyB,YAAY;AACrC;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,+BAA+B;AAC/C,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;;;AAGA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA,oBAAoB,yCAAyC;AAC7D,oBAAoB,yCAAyC;AAC7D,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA,oBAAoB,yCAAyC;AAC7D,oBAAoB,yCAAyC;AAC7D,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,4BAA4B,wBAAwB;AACpD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,iBAAiB,oEAAoE;AACrF,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA,gBAAgB,OAAO;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA,oBAAoB,yCAAyC;AAC7D,oBAAoB,yCAAyC;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,wDAAwD;AACxD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,sBAAsB;AACtB;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD;AAChD;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,MAAM;;AAEN;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;;AAEtB;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B;AACA,kBAAkB;AAClB;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,4BAA4B;AAC5C,gBAAgB,4BAA4B;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mFAAmF;;AAEnF;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;AAEd,UAAU;AACV;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;;AAEd;;AAEA;AACA;AACA,MAAM;;AAEN;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB,UAAU;AACV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA,gBAAgB,4BAA4B;AAC5C,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA,gBAAgB,8BAA8B;AAC9C,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;;AAEA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV,gCAAgC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,sBAAsB,wDAAwD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB,6CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yBAAyB;AACzD;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;;;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;AACA;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gCAAgC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;;AAKA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,iEAAiE,MAAM;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;;AAEd;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;;AAElB;AACA,gCAAgC,kBAAkB;AAClD;AACA,oCAAoC,0BAA0B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,cAAc;;AAEd;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,wCAAwC;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,sCAAsC;;AAEtC;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD;AACtD;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;;AAEN;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,gBAAgB,oEAAoE;AACpF,gBAAgB,4BAA4B;AAC5C;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,yBAAyB;AACzC,gBAAgB,2BAA2B;AAC3C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,kBAAkB;AAClB,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,cAAc;AAClC,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,eAAe;AACpC,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;;AAEA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,eAAe;AACnC;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,yBAAyB;AAC7C,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA,oBAAoB,sBAAsB;AAC1C,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;;AAEA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;;AAEA,4BAA4B,wBAAwB;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,MAAM;AACtB,gBAAgB,eAAe;AAC/B;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,gBAAgB;AACpC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,uDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,0EAA0E;AAC1E;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC,wBAAwB,sBAAsB;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc;AACd;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA,gBAAgB,4BAA4B;AAC5C,gBAAgB,QAAQ;AACxB;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,cAAc;;AAEd;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,kBAAkB;;AAElB;AACA;AACA,cAAc;AACd;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,+BAA+B;AAC/C,gBAAgB,uBAAuB;AACvC;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,aAAa;AACb,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA,0CAA0C;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,uEAAuE;AACjF;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA,cAAc,0CAA0C;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA,gBAAgB,0BAA0B;AAC1C,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B,sBAAsB;AACtB;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA,gBAAgB,iCAAiC;AACjD,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA,4BAA4B,uBAAuB;AACnD;AACA;;AAEA;AACA,4BAA4B,uBAAuB;AACnD;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB,wCAAwC;;AAExC;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,sDAAsD;AACtD;AACA;;AAEA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,0CAA0C,MAAM,EAAE;AAClD,sDAAsD,MAAM,EAAE;AAC9D,uDAAuD,MAAM,EAAE;AAC/D;AACA,oBAAoB,yCAAyC;AAC7D,gCAAgC;AAChC,iBAAiB;AACjB;AACA,oBAAoB,gBAAgB;AACpC,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,SAAS;AAC7B;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;;AAEA;AACA;;AAEA,4BAA4B,0CAA0C;AACtE;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6EAA6E,SAAS;AACtF;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,kCAAkC;AACtD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6EAA6E,SAAS;AACtF;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,QAAQ;AAC5B,qBAAqB,0CAA0C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,cAAc;AAClC,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,2BAA2B;AAC3C,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,0CAA0C,MAAM,EAAE;AAClD,sDAAsD,MAAM,EAAE;AAC9D,uDAAuD,MAAM,EAAE;AAC/D;AACA,oBAAoB,yCAAyC;AAC7D,gCAAgC;AAChC,iBAAiB;AACjB;AACA,oBAAoB,gBAAgB;AACpC,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,SAAS;AAC7B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD,SAAS;AACzD;AACA;;AAEA,gDAAgD,SAAS;AACzD;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,2BAA2B;AAC3C,gBAAgB,eAAe;AAC/B;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;;AAEA;;AAEA,+CAA+C,cAAc;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,2CAA2C;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,yBAAyB;AACzC,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO,cAAc,eAAe;AACpD,+BAA+B,+BAA+B;AAC9D;AACA,gBAAgB,OAAO,kBAAkB,eAAe;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB,8BAA8B;AAC9B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,sCAAsC;AACtE;AACA,yCAAyC,4CAA4C;AACrF,yCAAyC;AACzC;AACA;;AAEA;AACA,kBAAkB;AAClB,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;;AAEA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;;AAEA;AACA,kBAAkB;AAClB,cAAc;;AAEd;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,WAAW;AACxD,6CAA6C,WAAW;AACxD;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA,gCAAgC,wCAAwC;AACxE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,sCAAsC;AACtC;AACA;AACA,cAAc;;AAEd;AACA;;AAEA,MAAM;;AAEN;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,iDAAiD;AAC3E;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA,oCAAoC;AACpC;;AAEA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,SAAS;AACjD;AACA;AACA,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,yCAAyC;AACvF;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C,wBAAwB,QAAQ,WAAW,UAAU,aAAa;AAClE,gCAAgC,UAAU;AAC1C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C,wBAAwB,OAAO;AAC/B,wBAAwB,OAAO;AAC/B,wBAAwB,OAAO;AAC/B,wBAAwB,OAAO;AAC/B,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA,sDAAsD,SAAS;AAC/D;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB;;;AAGvB,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,wBAAwB;AAC5C,iCAAiC,2CAA2C;AAC5E;;AAEA;AACA,UAAU,gDAAgD;AAC1D;;AAEA;AACA,kBAAkB,uDAAuD;AACzE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,0BAA0B;AAC1B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA,gEAAgE;AAChE;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,yBAAyB;AAC7E;;AAEA;AACA,4CAA4C;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,gBAAgB;AAChC;AACA,gBAAgB,gBAAgB;AAChC,qDAAqD,iBAAiB;AACtE,qDAAqD,iCAAiC,KAAK;AAC3F,qDAAqD;AACrD;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,iBAAiB;AACjC;AACA;AACA,2DAA2D,4BAA4B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA,8BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,yBAAyB;AACzB;AACA,UAAU;;AAEV;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,eAAe,+BAA+B;AAC9D;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,eAAe,aAAa,iCAAiC;AAC7E;AACA,gBAAgB,QAAQ;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD,SAAS;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B;AAC1B;;AAEA;AACA;AACA;;AAEA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAqD;AAC/E;AACA;AACA,kBAAkB;AAClB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kCAAkC;AAClD,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,yBAAyB;;AAElD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA,6BAA6B;AAC7B;AACA;;AAEA,mDAAmD,SAAS;AAC5D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mDAAmD,SAAS;AAC5D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,mDAAmD,SAAS;AAC5D;AACA,sCAAsC,IAAI;AAC1C,wCAAwC,WAAW;AACnD;;AAEA;AACA,oDAAoD,iBAAiB;AACrE;AACA;;AAEA;AACA,yBAAyB,4BAA4B;;AAErD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;;AAEA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA,gCAAgC;AAChC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;;AAEd;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;;AAEd;AACA,2BAA2B;AAC3B;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,+BAA+B;AACpD,yBAAyB;AACzB,UAAU;;AAEV;AACA;;AAEA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,6CAA6C;AAC7D,gBAAgB,6CAA6C;AAC7D,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sCAAsC;AACvD,iBAAiB,sCAAsC;AACvD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,SAAS;AAC1B,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,SAAS;AAC1B,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,+BAA+B;AAC/C,gBAAgB,OAAO;AACvB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,SAAS;AACrD;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA,4CAA4C,SAAS;AACrD;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB;AACpB;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C,gBAAgB,+BAA+B;AAC/C,gBAAgB,OAAO;AACvB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,yBAAyB;AACzB;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,wBAAwB,cAAc;AACtC,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,wBAAwB,OAAO;AAC/B,yBAAyB;AACzB;AACA;AACA;AACA,cAAc;;AAEd;AACA,wBAAwB,OAAO;AAC/B,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,yBAAyB;AACzB;AACA;AACA;AACA,cAAc;;AAEd;AACA,yBAAyB;AACzB;AACA;AACA;AACA,cAAc;;AAEd;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,kBAAkB;AAClB,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,gBAAgB,yBAAyB;AACzC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,QAAQ;AAChmBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;;AAEA;AACA,gCAAgC,mCAAmC;AACnE;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yBAAyB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,OAAO;AACjE;AACA;AACA;AACA;AACA;AACA,0DAA0D,OAAO;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA,cAAc;;AAEd;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kDAAkD,MAAM;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV,gCAAgC;;AAEhC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;;AAElB;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,sBAAsB;AACtB;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;;AAEA;AACA;AACA,oCAAoC,qBAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,0BAA0B;;AAE1B;AACA;AACA;AACA,8BAA8B;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC,yBAAyB,YAAY;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA,cAAc;AACd,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA,6BAA6B;;AAE7B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;;AAEV;AACA;;AAEA,mDAAmD,eAAe;;;;AAIlE,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA,qBAAqB,4BAA4B;AACjD,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd,UAAU;;AAEV;AACA;AACA,oBAAoB,4CAA4C;AAChE,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,2CAA2C;AAChE;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,EAAE;AACtB,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,yBAAyB;AAC7C,oBAAoB,QAAQ,YAAY,OAAO;AAC/C,wCAAwC,OAAO;AAC/C,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;;AAEA,gDAAgD,SAAS;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8DAA8D,UAAU;AACxE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA,sDAAsD,UAAU;AAChE;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,eAAe;AACnC,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,gBAAgB,OAAO;AACvB,gBAAgB,EAAE;AAClB,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC,yBAAyB,YAAY;;AAErC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,oEAAoE;AACxF,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA,cAAc;AACd;;AAEA,MAAM;;;;AAIN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yDAAyD,QAAQ;AACjE;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,cAAc;AAClC;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;;AAEN;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yCAAyC;AACvD;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,cAAc,qCAAqC;AACnD;AACA;AACA;AACA;;AAEA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA,iEAAiE;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,eAAe;AACnC;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,oBAAoB,eAAe;AACnC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,QAAQ;AAC7B,qBAAqB,QAAQ;AAC7B,qBAAqB,QAAQ;AAC7B,qBAAqB,QAAQ;AAC7B;AACA;AACA;;AAEA;AACA,sCAAsC;AACtC;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,eAAe;AACnC;AACA,wBAAwB,wEAAwE;AAChG,wBAAwB,yDAAyD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,YAAY;AAChE,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA,4DAA4D,YAAY;AACxE,kBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,oBAAoB;AACrD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA,8BAA8B,aAAa;AAC3C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA,8BAA8B,aAAa;AAC3C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8BAA8B;AAC9B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qCAAqC;AACrC;AACA;AACA;;AAEA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,YAAY;AACxE,kBAAkB;AAClB,cAAc;AACd;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,gBAAgB;AACxC;AACA;;AAEA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV,gCAAgC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ,gBAAgB;AACpE;;AAEA;AACA;AACA;AACA;;AAEA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,YAAY;AACvC,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;;AAEd;;AAEA;AACA;;AAEA,MAAM;;AAEN;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA,UAAU;;AAEV;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C,gBAAgB,4BAA4B;AAC5C,iBAAiB,iCAAiC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C,UAAU;AACV;;AAEA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA,iCAAiC,KAAK;AACtC,iCAAiC,cAAc;AAC/C,6DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtC,UAAU;AACV;;AAEA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C,gBAAgB,+BAA+B;AAC/C,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C,gBAAgB,+CAA+C;AAC/D;AACA,gBAAgB,+BAA+B;AAC/C,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA,iCAAiC,KAAK;AACtC;AACA,iCAAiC,WAAW;AAC5C,cAAc;AACd,UAAU;;AAEV;AACA;AACA,6BAA6B,WAAW;AACxC,UAAU;AACV;;AAEA;AACA;AACA;AACA,gBAAgB,+CAA+C;AAC/D;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,gBAAgB,+CAA+C;AAC/D;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA,cAAc;AACd,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,+CAA+C;AAC/D;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA,cAAc;AACd,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,iCAAiC,OAAO;AACxC;AACA,cAAc;AACd;AACA,iCAAiC,OAAO;AACxC;AACA,cAAc;AACd,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,MAAM;AAC1B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;AAEd;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA,wBAAwB,MAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd,UAAU;AACV;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;;AAEA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD,4BAA4B;AAC5B;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,cAAc;AAClC,qBAAqB,OAAO;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA,gBAAgB;AAChB,gBAAgB,yBAAyB;AACzC,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,QAAQ;AACxB,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,qBAAqB,oBAAoB;AACzC;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,iBAAiB,yBAAyB;AAC1C,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,6BAA6B;AACnD;AACA;AACA;AACA;AACA,cAAc,oDAAoD;AAClE;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA,MAAM;;AAEN;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC;AAChC;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;;AAEA,MAAM;;AAEN;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA,MAAM;;AAEN;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc;AACd,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;AACV;AACA;AACA;AACA,gBAAgB,yBAAyB;AACzC,gBAAgB,OAAO;AACvB,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,yBAAyB;AAC1C,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA,oBAAoB,UAAU,GAAG,UAAU;AAC3C,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA,0BAA0B,uBAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,6BAA6B;;AAE7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAkB;AAClB,gBAAgB;AAChB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;;AAIA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;AACV;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV,gCAAgC;;AAEhC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,6FAA6F;;AAE7F;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;AACd;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,uBAAuB;AACvB;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C,KAAK;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd;;AAEA;AACA;AACA,cAAc;;AAEd;;;;AAIA;;AAEA;;AAEA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C,oBAAoB,+BAA+B;AACnD,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gCAAgC,yBAAyB;AACzD;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAoB,MAAM,IAAI;AAC9B;;AAEA,uBAAuB,OAAO,cAAc;AAC5C;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,+BAA+B;AAChD,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,gDAAgD;AACjE,iBAAiB,uBAAuB;AACxC,iBAAiB,uBAAuB;AACxC,iBAAiB,4BAA4B;AAC7C,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,KAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,8CAA8C;AAClE,oBAAoB,4BAA4B;AAChD,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,2BAA2B;AAC/C,oBAAoB,2CAA2C;AAC/D,oBAAoB,OAAO;AAC3B,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;;AAEA,UAAU;;AAEV;AACA;AACA,oBAAoB,2BAA2B;AAC/C,oBAAoB,yCAAyC;AAC7D,oBAAoB,OAAO;AAC3B,oBAAoB,eAAe;AACnC;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,oCAAoC;AACxD,oBAAoB,eAAe;AACnC,oBAAoB,eAAe;AACnC,oBAAoB,QAAQ;AAC5B,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;AAE1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,uCAAuC,cAAc,mBAAmB,mBAAmB,gBAAgB;;AAE3G;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,SAAS;AACnB;;AAEA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV,+BAA+B;AAC/B;;AAEA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,OAAO;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,uBAAuB,sBAAsB;AAClE;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,sCAAsC;AACtD,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA,gBAAgB,OAAO;AACvB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB;AACpB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,yBAAyB;AAC7C,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,eAAe;AACnC,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,eAAe;AACnC,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA,cAAc;AACd;AACA,UAAU;;AAEV;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;AAClB;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;AAClB;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,iCAAiC;AACnD;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;;AAElB;AACA,UAAU;;AAEV;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,4BAA4B;AAC5B;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C,gBAAgB,4BAA4B;AAC5C,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,sCAAsC;AACtD,gBAAgB,4BAA4B;AAC5C,gBAAgB,4BAA4B;AAC5C;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,uCAAuC;AAC1D;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,qBAAqB,sCAAsC;AAC3D,qBAAqB,4BAA4B;AACjD,qBAAqB,4BAA4B;AACjD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,4BAA4B;AACjD,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,4BAA4B;AACjD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,sCAAsC;AAC3D,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,UAAU;;AAEV;AACA,qBAAqB,uCAAuC;AAC5D,qBAAqB,OAAO;AAC5B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,eAAe;AACpC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,gBAAgB,OAAO;AACvB,gBAAgB,EAAE;AAClB,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,0BAA0B;AAC1B;AACA,sBAAsB;AACtB;;AAEA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;AAClB;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,wCAAwC;AAClE,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;;AAEA,6BAA6B;;AAE7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA,MAAM;;AAEN;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;;AAEA,uEAAuE;AACvE,8EAA8E;AAC9E;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;;AAElD;AACA,kEAAkE;AAClE;;AAEA;;AAEA;AACA,UAAU;AACV,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC,kBAAkB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,yDAAyD;AACnF;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd,UAAU;;AAEV;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,eAAe;AACnC,oBAAoB,SAAS;AAC7B,qBAAqB,OAAO;AAC5B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;AAEd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA,oBAAoB,eAAe;AACnC,oBAAoB,OAAO;AAC3B,oBAAoB,yBAAyB;AAC7C,oBAAoB,SAAS;AAC7B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO,YAAY;AACjC,cAAc,OAAO,OAAO;AAC5B;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,wDAAwD,mBAAmB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,WAAW;AAC3B,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA,6BAA6B,uCAAuC;AACpE,UAAU;;AAEV;AACA;;AAEA;AACA,gBAAgB,OAAO,SAAS;AAChC,gBAAgB,4BAA4B;AAC5C,iBAAiB,eAAe;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,wBAAwB;AAC5D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oEAAoE;;AAEpE;;AAEA;AACA,4DAA4D,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C;AAC3C,cAAc;AACd,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO,OAAO;AAC9B,gBAAgB,MAAM;AACtB,iBAAiB;AACjB;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,wBAAwB;;AAExB;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+DAA+D;AAC/D,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA,mDAAmD,cAAc;AACjE;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA,MAAM;;AAEN;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oDAAoD;AAC/D;AACA,oCAAoC,kCAAkC;AACtE;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,WAAW,4DAA4D;AACvE;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,sBAAsB,8BAA8B;;AAEpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,mBAAmB,OAAO;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;;AAEd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB;AACxB,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,SAAS;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,eAAe;AAC/D,yCAAyC,0BAA0B;AACnE;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC,iBAAiB,gBAAgB;AACjC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC;;AAEhC,gCAAgC,kBAAkB;AAClD;AACA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB,iBAAiB,SAAS,kCAAkC;AAC5D;AACA;;AAEA;AACA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,iDAAiD;AACrE,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,MAAM;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,oBAAoB,iDAAiD;AACrE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,iDAAiD;AACrE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,iDAAiD;AACrE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA,mCAAmC,yDAAyD;AAC5F,mCAAmC,yDAAyD;AAC5F;AACA;AACA;AACA,mCAAmC,kDAAkD;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;;AAEN;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA,+BAA+B;AAC/B;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+DAA+D;;AAE/D;AACA;AACA;AACA,oBAAoB;AACpB;AACA,oBAAoB;AACpB;AACA,oBAAoB;AACpB;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;AACd,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C;AACA,sBAAsB,+CAA+C;AACrE;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;;AAElB,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;;AAElB,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,gBAAgB;AACpC,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,MAAM;AAClD;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,MAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B;AACA,gBAAgB,eAAe;AAC/B;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAM;;AAEN;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS;AAC7B,oBAAoB,eAAe;AACnC,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS;AAC7B,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,4DAA4D,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,kCAAkC;AACxD,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;AACV,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;;;;;AAKA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,cAAc,qCAAqC;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;AACV;;AAEA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;AAKA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,eAAe;AACpC,qBAAqB,eAAe,GAAG,wCAAwC;AAC/E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;;AAElB,8BAA8B,iDAAiD;AAC/E,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA,sBAAsB,8BAA8B;;AAEpD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uEAAuE,OAAO;AAC9E;AACA,uEAAuE,OAAO;AAC9E;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;;AAGV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,UAAU;;AAEV;AACA;AACA,0CAA0C;AAC1C,gDAAgD;AAChD,6CAA6C;AAC7C,2DAA2D;AAC3D,2DAA2D;AAC3D;AACA,oBAAoB,sBAAsB;AAC1C,oBAAoB,QAAQ;AAC5B,oBAAoB,eAAe;AACnC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,MAAM;AACtC,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,yBAAyB;AAC7C,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB,sEAAsE;AACtE,kFAAkF;;AAElF,wCAAwC;AACxC,4CAA4C;;AAE5C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,YAAY;AAChE;AACA;AACA;AACA,qCAAqC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA,yEAAyE,YAAY;AACrF,iDAAiD;;AAEjD,6CAA6C,kBAAkB;AAC/D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA,6DAA6D;AAC7D,oDAAoD;AACpD,iEAAiE;AACjE,oDAAoD;AACpD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,0BAA0B;AAC1B;;AAEA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C,oBAAoB,OAAO;AAC3B,qBAAqB,OAAO;AAC5B;AACA;;AAEA,MAAM;;AAEN;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;;;;AAKA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8BAA8B;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,gBAAgB;AACpC,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;;AAEA;AACA;AACA;AACA,cAAc;;AAEd,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA,oBAAoB;AACpB;AACA,oBAAoB;AACpB,oBAAoB;AACpB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;;AAEN;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA,8BAA8B,qCAAqC;;AAEnE;AACA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,QAAQ;AAC5B,oBAAoB,OAAO;AAC3B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,qBAAqB,EAAE;AACvB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA,MAAM;;;;AAIN,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;AAEA;AACA,oBAAoB,kDAAkD;AACtE,oBAAoB,4BAA4B;AAChD,oBAAoB,eAAe;AACnC,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;;AAGA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gCAAgC,sCAAsC;AACtE;AACA,UAAU;;AAEV,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E,8DAA8D;AAC9D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,uCAAuC;AACzD;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB,eAAe,GAAG,wCAAwC;AAC/E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB,8BAA8B,iDAAiD;AAC/E,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,cAAc;;AAEd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;;AAEN;AACA;AACA,eAAe;AACf,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;;AAEA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;AAEd;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;;AAEA;AACA,sCAAsC;AACtC;;AAEA,6BAA6B;;AAE7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qCAAqC,QAAQ;AAC7C;AACA,wCAAwC,+BAA+B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,yBAAyB,KAAK,GAAG,eAAe;AACxF;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,cAAc;;AAEd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA,6BAA6B,QAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,OAAO,EAAE,oBAAoB;AAClD;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB,cAAc;AACd;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,MAAM;;AAEN;;;;AAIA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;AAE1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;AAEd;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA,gBAAgB,uBAAuB;AACvC,gBAAgB,4BAA4B;AAC5C,gBAAgB,2BAA2B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;;AAEA;AACA;AACA,oBAAoB,yBAAyB;AAC7C,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C,iBAAiB,uBAAuB;AACxC,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;;AAEA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;AAEd;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA,gBAAgB,uBAAuB;AACvC,gBAAgB,4BAA4B;AAC5C,gBAAgB,2BAA2B;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,gBAAgB,EAAE;AACpE;AACA;AACA;AACA,kDAAkD,gBAAgB,EAAE;AACpE;AACA;AACA;AACA,kDAAkD,gBAAgB,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;;;AAGd;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kDAAkD;;AAElD;AACA,cAAc;;AAEd;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA,gBAAgB,uBAAuB;AACvC,gBAAgB,4BAA4B;AAC5C,gBAAgB,2BAA2B;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA,6DAA6D;;AAE7D,+EAA+E;;AAE/E;AACA,kDAAkD;AAClD,6DAA6D;AAC7D,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;AACA,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA,UAAU,6EAA6E;;AAEvF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA,UAAU,2EAA2E;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB;AACvB;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,kBAAkB;AAClB;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA,MAAM;;AAEN;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2BAA2B;AAC3B;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA,UAAU;;AAEV;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA,6BAA6B,kCAAkC;;AAE/D,gDAAgD,6BAA6B;;AAE7E;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sBAAsB;AACxD,gCAAgC;AAChC,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;;AAEA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,gEAAgE;AAChE;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA,MAAM;;;;AAIN,OAAO;AACP;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,gBAAgB,OAAO;AACvB,gBAAgB,EAAE;AAClB,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kEAAkE;;AAElE;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,8BAA8B;AAC9B;AACA;AACA;AACA,kCAAkC;AAClC,8BAA8B;AAC9B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA,cAAc;AACd;AACA,UAAU;;AAEV;AACA;AACA;AACA,cAAc;AACd;AACA,MAAM;;AAEN;AACA;AACA;;;AAGA,6BAA6B;;AAE7B,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA,6BAA6B,UAAU;;;AAGvC,OAAO;AACP;AACA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,iEAAiE;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,mBAAmB;AACnB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gCAAgC;AAClD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+BAA+B;AACjD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,kBAAkB,iCAAiC;AACnD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,kBAAkB,iCAAiC;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;;AAEN;;AAEA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,oCAAoC;AACpD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,gBAAgB,oCAAoC;AACpD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA;AACA,cAAc;AACd;AACA,UAAU;AACV;;AAEA;AACA,gBAAgB;AAChB,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,wBAAwB,qBAAqB;AAC7C;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,eAAe;AAC/B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA,gBAAgB,2BAA2B;AAC3C;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,SAAS,QAAQ,WAAW,UAAU;AACvF;;AAEA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;;AAEA;AACA;AACA,iDAAiD,WAAW,gBAAgB;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,YAAY,sBAAsB,eAAe,mBAAmB;AACtH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4DAA4D,SAAS,OAAO,QAAQ;;AAEpF,wCAAwC,kBAAkB,YAAY;AACtE,+BAA+B,gBAAgB,eAAe;AAC9D;AACA;;AAEA,0BAA0B;AAC1B,0BAA0B;;AAE1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;;AAEV;AACA;AACA,UAAU;AACV,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD;;AAEhD;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,wCAAwC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,oBAAoB,4BAA4B;AAChD,oBAAoB,OAAO,cAAc;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,4BAA4B;AAChD,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,oBAAoB,4BAA4B;AAChD,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU,yBAAyB,mBAAmB;AACtD;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;;AAEA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA,MAAM;;;;AAIN,OAAO;AACP;AACA;;;;AAIA;;AAEA;;AAEA,MAAM;;;;AAIN,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;;AAGA;;;AAGA;AACA,UAAU,8DAA8D;AACxE;AACA;AACA;AACA;;AAEA;;;AAGA,OAAO;AACP;AACA;;;AAGA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,+CAA+C,OAAO,MAAM,UAAU,WAAW;AACjF;AACA;AACA;;AAEA;AACA,8CAA8C,wBAAwB;AACtkBAAkB;;AAElB;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrgCAAgC,YAAY;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,aAAa,OAAO;AAClF,8BAA8B,SAAS,YAAY,gBAAgB;AACnE;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,2DAA2D,gBAAgB,kBAAkB,YAAY,aAAa;;AAEtH,oDAAoD,OAAO,MAAM;;AAEjE;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,gCAAgC;AACpD;AACA;AACA;;AAEA;;;AAGA;AACA;AACA,CAAC;AACD,C;;;;;;;;;;ACx1+DA,IAAIA,UAAU,mBAAAC,CAAQ,CAAR,CAAd;;AAEA,IAAIC,SAAS;AACXC,QAAO;AACNC,QAAM;AADA,EADI;AAIXC,UAAS;AACRC,WAAS;;AADD,EAJE;AAQXC,SAAQ;AACPC,QAAK,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB;AADE,EARG;AAWX;AACAC,QAAO,CACN;AACCC,QAAM,UADP;AAECC,eAAa,IAFd;AAGCH,QAAK,CAACI,kBAAD,CAHN;AAICC,eAAY;;AAJb,EADM,CAZI;AAqBX;AACAC,QAAO,CACN;AACCJ,QAAM,OADP;AAECC,eAAa,CAAC,CAAD,EAAI,MAAJ,CAFd;AAGCI,aAAW;AACVC,SAAM;AADI;AAHZ,EADM,CAtBI;AA+BXC,SAAQ,CACP;AACCC,QAAK,MADN;AAECR,QAAK,MAFN;AAGCF,QAAK,CAAC,CAAD;AAHN,EADO,EAMP;AACCU,QAAK,MADN;AAECR,QAAK,MAFN;AAGCF,QAAK,CAAC,CAAD;AAHN,EANO,EAWP;AACCU,QAAK,MADN;AAECR,QAAK,MAFN;AAGCF,QAAK,CAAC,CAAD;AAHN,EAXO;AA/BG,CAAb;;AAkDA,IAAIW,OAAOC,EAAE,OAAF,CAAX;AACA,IAAIC,SAASrB,QAAQsB,IAAR,CAAaC,SAASC,cAAT,CAAwB,MAAxB,CAAb,CAAb;;AAEAH,OAAOI,SAAP,CAAiBvB,MAAjB,E","file":"echart.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2e7f7d59c04944ebee37","(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory();\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine([], factory);\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"echarts\"] = factory();\r\n\telse\r\n\t\troot[\"echarts\"] = factory();\r\n})(this, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId])\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\texports: {},\r\n/******/ \t\t\tid: moduleId,\r\n/******/ \t\t\tloaded: false\r\n/******/ \t\t};\r\n\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.loaded = true;\r\n\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n\r\n\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(0);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Export echarts as CommonJS module\r\n\t */\r\n\tmodule.exports = __webpack_require__(1);\r\n\r\n\t// Import all charts and components\r\n\t__webpack_require__(99);\r\n\t__webpack_require__(134);\r\n\t__webpack_require__(139);\r\n\t__webpack_require__(148);\r\n\t__webpack_require__(152);\r\n\r\n\t__webpack_require__(162);\r\n\t__webpack_require__(183);\r\n\t__webpack_require__(195);\r\n\t__webpack_require__(216);\r\n\t__webpack_require__(220);\r\n\t__webpack_require__(224);\r\n\t__webpack_require__(239);\r\n\t__webpack_require__(245);\r\n\t__webpack_require__(252);\r\n\t__webpack_require__(258);\r\n\t__webpack_require__(262);\r\n\t__webpack_require__(270);\r\n\r\n\t__webpack_require__(112);\r\n\t__webpack_require__(274);\r\n\t__webpack_require__(280);\r\n\t__webpack_require__(284);\r\n\t__webpack_require__(295);\r\n\t__webpack_require__(225);\r\n\t__webpack_require__(298);\r\n\t__webpack_require__(304);\r\n\r\n\t__webpack_require__(316);\r\n\r\n\t__webpack_require__(317);\r\n\t__webpack_require__(331);\r\n\r\n\t__webpack_require__(346);\r\n\t__webpack_require__(352);\r\n\t__webpack_require__(355);\r\n\r\n\t__webpack_require__(358);\r\n\t__webpack_require__(367);\r\n\r\n\t__webpack_require__(380);\r\n\r\n\r\n/***/ },\r\n/* 1 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// Enable DEV mode when using source code without build. which has no __DEV__ variable\r\n\t// In build process 'typeof __DEV__' will be replace with 'boolean'\r\n\t// So this code will be removed or disabled anyway after built.\r\n\tif (false) {\r\n\t    // In browser\r\n\t    if (typeof window !== 'undefined') {\r\n\t        window.__DEV__ = true;\r\n\t    }\r\n\t    // In node\r\n\t    else if (typeof global !== 'undefined') {\r\n\t        global.__DEV__ = true;\r\n\t    }\r\n\t}\r\n\r\n\t/*!\r\n\t * ECharts, a javascript interactive chart library.\r\n\t *\r\n\t * Copyright (c) 2015, Baidu Inc.\r\n\t * All rights reserved.\r\n\t *\r\n\t * LICENSE\r\n\t * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt\r\n\t */\r\n\r\n\t/**\r\n\t * @module echarts\r\n\t */\r\n\r\n\r\n\t    var env = __webpack_require__(2);\r\n\r\n\t    var GlobalModel = __webpack_require__(3);\r\n\t    var ExtensionAPI = __webpack_require__(25);\r\n\t    var CoordinateSystemManager = __webpack_require__(26);\r\n\t    var OptionManager = __webpack_require__(27);\r\n\r\n\t    var ComponentModel = __webpack_require__(19);\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\r\n\t    var ComponentView = __webpack_require__(29);\r\n\t    var ChartView = __webpack_require__(42);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\r\n\t    var zrender = __webpack_require__(81);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var colorTool = __webpack_require__(39);\r\n\t    var Eventful = __webpack_require__(33);\r\n\t    var timsort = __webpack_require__(85);\r\n\r\n\t    var each = zrUtil.each;\r\n\r\n\t    var PRIORITY_PROCESSOR_FILTER = 1000;\r\n\t    var PRIORITY_PROCESSOR_STATISTIC = 5000;\r\n\r\n\r\n\t    var PRIORITY_VISUAL_LAYOUT = 1000;\r\n\t    var PRIORITY_VISUAL_GLOBAL = 2000;\r\n\t    var PRIORITY_VISUAL_CHART = 3000;\r\n\t    var PRIORITY_VISUAL_COMPONENT = 4000;\r\n\t    var PRIORITY_VISUAL_BRUSH = 5000;\r\n\r\n\t    // Main process have three entries: `setOption`, `dispatchAction` and `resize`,\r\n\t    // where they must not be invoked nestedly, except the only case: invoke\r\n\t    // dispatchAction with updateMethod \"none\" in main process.\r\n\t    // This flag is used to carry out this rule.\r\n\t    // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).\r\n\t    var IN_MAIN_PROCESS = '__flag_in_main_process';\r\n\t    var HAS_GRADIENT_OR_PATTERN_BG = '_hasGradientOrPatternBg';\r\n\r\n\r\n\t    var OPTION_UPDATED = '_optionUpdated';\r\n\r\n\t    function createRegisterEventWithLowercaseName(method) {\r\n\t        return function (eventName, handler, context) {\r\n\t            // Event name is all lowercase\r\n\t            eventName = eventName && eventName.toLowerCase();\r\n\t            Eventful.prototype[method].call(this, eventName, handler, context);\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @module echarts~MessageCenter\r\n\t     */\r\n\t    function MessageCenter() {\r\n\t        Eventful.call(this);\r\n\t    }\r\n\t    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');\r\n\t    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');\r\n\t    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');\r\n\t    zrUtil.mixin(MessageCenter, Eventful);\r\n\r\n\t    /**\r\n\t     * @module echarts~ECharts\r\n\t     */\r\n\t    function ECharts (dom, theme, opts) {\r\n\t        opts = opts || {};\r\n\r\n\t        // Get theme by name\r\n\t        if (typeof theme === 'string') {\r\n\t            theme = themeStorage[theme];\r\n\t        }\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.id;\r\n\t        /**\r\n\t         * Group id\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.group;\r\n\t        /**\r\n\t         * @type {HTMLDomElement}\r\n\t         * @private\r\n\t         */\r\n\t        this._dom = dom;\r\n\t        /**\r\n\t         * @type {module:zrender/ZRender}\r\n\t         * @private\r\n\t         */\r\n\t        this._zr = zrender.init(dom, {\r\n\t            renderer: opts.renderer || 'canvas',\r\n\t            devicePixelRatio: opts.devicePixelRatio,\r\n\t            width: opts.width,\r\n\t            height: opts.height\r\n\t        });\r\n\r\n\t        /**\r\n\t         * @type {Object}\r\n\t         * @private\r\n\t         */\r\n\t        this._theme = zrUtil.clone(theme);\r\n\r\n\t        /**\r\n\t         * @type {Array.<module:echarts/view/Chart>}\r\n\t         * @private\r\n\t         */\r\n\t        this._chartsViews = [];\r\n\r\n\t        /**\r\n\t         * @type {Object.<string, module:echarts/view/Chart>}\r\n\t         * @private\r\n\t         */\r\n\t        this._chartsMap = {};\r\n\r\n\t        /**\r\n\t         * @type {Array.<module:echarts/view/Component>}\r\n\t         * @private\r\n\t         */\r\n\t        this._componentsViews = [];\r\n\r\n\t        /**\r\n\t         * @type {Object.<string, module:echarts/view/Component>}\r\n\t         * @private\r\n\t         */\r\n\t        this._componentsMap = {};\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/ExtensionAPI}\r\n\t         * @private\r\n\t         */\r\n\t        this._api = new ExtensionAPI(this);\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/CoordinateSystem}\r\n\t         * @private\r\n\t         */\r\n\t        this._coordSysMgr = new CoordinateSystemManager();\r\n\r\n\t        Eventful.call(this);\r\n\r\n\t        /**\r\n\t         * @type {module:echarts~MessageCenter}\r\n\t         * @private\r\n\t         */\r\n\t        this._messageCenter = new MessageCenter();\r\n\r\n\t        // Init mouse events\r\n\t        this._initEvents();\r\n\r\n\t        // In case some people write `window.onresize = chart.resize`\r\n\t        this.resize = zrUtil.bind(this.resize, this);\r\n\r\n\t        // Can't dispatch action during rendering procedure\r\n\t        this._pendingActions = [];\r\n\t        // Sort on demand\r\n\t        function prioritySortFunc(a, b) {\r\n\t            return a.prio - b.prio;\r\n\t        }\r\n\t        timsort(visualFuncs, prioritySortFunc);\r\n\t        timsort(dataProcessorFuncs, prioritySortFunc);\r\n\r\n\t        this._zr.animation.on('frame', this._onframe, this);\r\n\t    }\r\n\r\n\t    var echartsProto = ECharts.prototype;\r\n\r\n\t    echartsProto._onframe = function () {\r\n\t        // Lazy update\r\n\t        if (this[OPTION_UPDATED]) {\r\n\r\n\t            this[IN_MAIN_PROCESS] = true;\r\n\r\n\t            updateMethods.prepareAndUpdate.call(this);\r\n\r\n\t            this[IN_MAIN_PROCESS] = false;\r\n\r\n\t            this[OPTION_UPDATED] = false;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * @return {HTMLDomElement}\r\n\t     */\r\n\t    echartsProto.getDom = function () {\r\n\t        return this._dom;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @return {module:zrender~ZRender}\r\n\t     */\r\n\t    echartsProto.getZr = function () {\r\n\t        return this._zr;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {Object} option\r\n\t     * @param {boolean} notMerge\r\n\t     * @param {boolean} [lazyUpdate=false] Useful when setOption frequently.\r\n\t     */\r\n\t    echartsProto.setOption = function (option, notMerge, lazyUpdate) {\r\n\t        if (true) {\r\n\t            zrUtil.assert(!this[IN_MAIN_PROCESS], '`setOption` should not be called during main process.');\r\n\t        }\r\n\r\n\t        this[IN_MAIN_PROCESS] = true;\r\n\r\n\t        if (!this._model || notMerge) {\r\n\t            var optionManager = new OptionManager(this._api);\r\n\t            var theme = this._theme;\r\n\t            var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);\r\n\t            ecModel.init(null, null, theme, optionManager);\r\n\t        }\r\n\r\n\t        this._model.setOption(option, optionPreprocessorFuncs);\r\n\r\n\t        if (lazyUpdate) {\r\n\t            this[OPTION_UPDATED] = true;\r\n\t        }\r\n\t        else {\r\n\t            updateMethods.prepareAndUpdate.call(this);\r\n\t            this._zr.refreshImmediately();\r\n\t            this[OPTION_UPDATED] = false;\r\n\t        }\r\n\r\n\t        this[IN_MAIN_PROCESS] = false;\r\n\r\n\t        this._flushPendingActions();\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @DEPRECATED\r\n\t     */\r\n\t    echartsProto.setTheme = function () {\r\n\t        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @return {module:echarts/model/Global}\r\n\t     */\r\n\t    echartsProto.getModel = function () {\r\n\t        return this._model;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @return {Object}\r\n\t     */\r\n\t    echartsProto.getOption = function () {\r\n\t        return this._model && this._model.getOption();\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @return {number}\r\n\t     */\r\n\t    echartsProto.getWidth = function () {\r\n\t        return this._zr.getWidth();\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @return {number}\r\n\t     */\r\n\t    echartsProto.getHeight = function () {\r\n\t        return this._zr.getHeight();\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get canvas which has all thing rendered\r\n\t     * @param {Object} opts\r\n\t     * @param {string} [opts.backgroundColor]\r\n\t     */\r\n\t    echartsProto.getRenderedCanvas = function (opts) {\r\n\t        if (!env.canvasSupported) {\r\n\t            return;\r\n\t        }\r\n\t        opts = opts || {};\r\n\t        opts.pixelRatio = opts.pixelRatio || 1;\r\n\t        opts.backgroundColor = opts.backgroundColor\r\n\t            || this._model.get('backgroundColor');\r\n\t        var zr = this._zr;\r\n\t        var list = zr.storage.getDisplayList();\r\n\t        // Stop animations\r\n\t        zrUtil.each(list, function (el) {\r\n\t            el.stopAnimation(true);\r\n\t        });\r\n\t        return zr.painter.getRenderedCanvas(opts);\r\n\t    };\r\n\t    /**\r\n\t     * @return {string}\r\n\t     * @param {Object} opts\r\n\t     * @param {string} [opts.type='png']\r\n\t     * @param {string} [opts.pixelRatio=1]\r\n\t     * @param {string} [opts.backgroundColor]\r\n\t     */\r\n\t    echartsProto.getDataURL = function (opts) {\r\n\t        opts = opts || {};\r\n\t        var excludeComponents = opts.excludeComponents;\r\n\t        var ecModel = this._model;\r\n\t        var excludesComponentViews = [];\r\n\t        var self = this;\r\n\r\n\t        each(excludeComponents, function (componentType) {\r\n\t            ecModel.eachComponent({\r\n\t                mainType: componentType\r\n\t            }, function (component) {\r\n\t                var view = self._componentsMap[component.__viewId];\r\n\t                if (!view.group.ignore) {\r\n\t                    excludesComponentViews.push(view);\r\n\t                    view.group.ignore = true;\r\n\t                }\r\n\t            });\r\n\t        });\r\n\r\n\t        var url = this.getRenderedCanvas(opts).toDataURL(\r\n\t            'image/' + (opts && opts.type || 'png')\r\n\t        );\r\n\r\n\t        each(excludesComponentViews, function (view) {\r\n\t            view.group.ignore = false;\r\n\t        });\r\n\t        return url;\r\n\t    };\r\n\r\n\r\n\t    /**\r\n\t     * @return {string}\r\n\t     * @param {Object} opts\r\n\t     * @param {string} [opts.type='png']\r\n\t     * @param {string} [opts.pixelRatio=1]\r\n\t     * @param {string} [opts.backgroundColor]\r\n\t     */\r\n\t    echartsProto.getConnectedDataURL = function (opts) {\r\n\t        if (!env.canvasSupported) {\r\n\t            return;\r\n\t        }\r\n\t        var groupId = this.group;\r\n\t        var mathMin = Math.min;\r\n\t        var mathMax = Math.max;\r\n\t        var MAX_NUMBER = Infinity;\r\n\t        if (connectedGroups[groupId]) {\r\n\t            var left = MAX_NUMBER;\r\n\t            var top = MAX_NUMBER;\r\n\t            var right = -MAX_NUMBER;\r\n\t            var bottom = -MAX_NUMBER;\r\n\t            var canvasList = [];\r\n\t            var dpr = (opts && opts.pixelRatio) || 1;\r\n\r\n\t            zrUtil.each(instances, function (chart, id) {\r\n\t                if (chart.group === groupId) {\r\n\t                    var canvas = chart.getRenderedCanvas(\r\n\t                        zrUtil.clone(opts)\r\n\t                    );\r\n\t                    var boundingRect = chart.getDom().getBoundingClientRect();\r\n\t                    left = mathMin(boundingRect.left, left);\r\n\t                    top = mathMin(boundingRect.top, top);\r\n\t                    right = mathMax(boundingRect.right, right);\r\n\t                    bottom = mathMax(boundingRect.bottom, bottom);\r\n\t                    canvasList.push({\r\n\t                        dom: canvas,\r\n\t                        left: boundingRect.left,\r\n\t                        top: boundingRect.top\r\n\t                    });\r\n\t                }\r\n\t            });\r\n\r\n\t            left *= dpr;\r\n\t            top *= dpr;\r\n\t            right *= dpr;\r\n\t            bottom *= dpr;\r\n\t            var width = right - left;\r\n\t            var height = bottom - top;\r\n\t            var targetCanvas = zrUtil.createCanvas();\r\n\t            targetCanvas.width = width;\r\n\t            targetCanvas.height = height;\r\n\t            var zr = zrender.init(targetCanvas);\r\n\r\n\t            each(canvasList, function (item) {\r\n\t                var img = new graphic.Image({\r\n\t                    style: {\r\n\t                        x: item.left * dpr - left,\r\n\t                        y: item.top * dpr - top,\r\n\t                        image: item.dom\r\n\t                    }\r\n\t                });\r\n\t                zr.add(img);\r\n\t            });\r\n\t            zr.refreshImmediately();\r\n\r\n\t            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));\r\n\t        }\r\n\t        else {\r\n\t            return this.getDataURL(opts);\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Convert from logical coordinate system to pixel coordinate system.\r\n\t     * See CoordinateSystem#convertToPixel.\r\n\t     * @param {string|Object} finder\r\n\t     *        If string, e.g., 'geo', means {geoIndex: 0}.\r\n\t     *        If Object, could contain some of these properties below:\r\n\t     *        {\r\n\t     *            seriesIndex / seriesId / seriesName,\r\n\t     *            geoIndex / geoId, geoName,\r\n\t     *            bmapIndex / bmapId / bmapName,\r\n\t     *            xAxisIndex / xAxisId / xAxisName,\r\n\t     *            yAxisIndex / yAxisId / yAxisName,\r\n\t     *            gridIndex / gridId / gridName,\r\n\t     *            ... (can be extended)\r\n\t     *        }\r\n\t     * @param {Array|number} value\r\n\t     * @return {Array|number} result\r\n\t     */\r\n\t    echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');\r\n\r\n\t    /**\r\n\t     * Convert from pixel coordinate system to logical coordinate system.\r\n\t     * See CoordinateSystem#convertFromPixel.\r\n\t     * @param {string|Object} finder\r\n\t     *        If string, e.g., 'geo', means {geoIndex: 0}.\r\n\t     *        If Object, could contain some of these properties below:\r\n\t     *        {\r\n\t     *            seriesIndex / seriesId / seriesName,\r\n\t     *            geoIndex / geoId / geoName,\r\n\t     *            bmapIndex / bmapId / bmapName,\r\n\t     *            xAxisIndex / xAxisId / xAxisName,\r\n\t     *            yAxisIndex / yAxisId / yAxisName\r\n\t     *            gridIndex / gridId / gridName,\r\n\t     *            ... (can be extended)\r\n\t     *        }\r\n\t     * @param {Array|number} value\r\n\t     * @return {Array|number} result\r\n\t     */\r\n\t    echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');\r\n\r\n\t    function doConvertPixel(methodName, finder, value) {\r\n\t        var ecModel = this._model;\r\n\t        var coordSysList = this._coordSysMgr.getCoordinateSystems();\r\n\t        var result;\r\n\r\n\t        finder = modelUtil.parseFinder(ecModel, finder);\r\n\r\n\t        for (var i = 0; i < coordSysList.length; i++) {\r\n\t            var coordSys = coordSysList[i];\r\n\t            if (coordSys[methodName]\r\n\t                && (result = coordSys[methodName](ecModel, finder, value)) != null\r\n\t            ) {\r\n\t                return result;\r\n\t            }\r\n\t        }\r\n\r\n\t        if (true) {\r\n\t            console.warn(\r\n\t                'No coordinate system that supports ' + methodName + ' found by the given finder.'\r\n\t            );\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Is the specified coordinate systems or components contain the given pixel point.\r\n\t     * @param {string|Object} finder\r\n\t     *        If string, e.g., 'geo', means {geoIndex: 0}.\r\n\t     *        If Object, could contain some of these properties below:\r\n\t     *        {\r\n\t     *            seriesIndex / seriesId / seriesName,\r\n\t     *            geoIndex / geoId / geoName,\r\n\t     *            bmapIndex / bmapId / bmapName,\r\n\t     *            xAxisIndex / xAxisId / xAxisName,\r\n\t     *            yAxisIndex / yAxisId / yAxisName\r\n\t     *            gridIndex / gridId / gridName,\r\n\t     *            ... (can be extended)\r\n\t     *        }\r\n\t     * @param {Array|number} value\r\n\t     * @return {boolean} result\r\n\t     */\r\n\t    echartsProto.containPixel = function (finder, value) {\r\n\t        var ecModel = this._model;\r\n\t        var result;\r\n\r\n\t        finder = modelUtil.parseFinder(ecModel, finder);\r\n\r\n\t        zrUtil.each(finder, function (models, key) {\r\n\t            key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {\r\n\t                var coordSys = model.coordinateSystem;\r\n\t                if (coordSys && coordSys.containPoint) {\r\n\t                    result |= !!coordSys.containPoint(value);\r\n\t                }\r\n\t                else if (key === 'seriesModels') {\r\n\t                    var view = this._chartsMap[model.__viewId];\r\n\t                    if (view && view.containPoint) {\r\n\t                        result |= view.containPoint(value, model);\r\n\t                    }\r\n\t                    else {\r\n\t                        if (true) {\r\n\t                            console.warn(key + ': ' + (view\r\n\t                                ? 'The found component do not support containPoint.'\r\n\t                                : 'No view mapping to the found component.'\r\n\t                            ));\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    if (true) {\r\n\t                        console.warn(key + ': containPoint is not supported');\r\n\t                    }\r\n\t                }\r\n\t            }, this);\r\n\t        }, this);\r\n\r\n\t        return !!result;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get visual from series or data.\r\n\t     * @param {string|Object} finder\r\n\t     *        If string, e.g., 'series', means {seriesIndex: 0}.\r\n\t     *        If Object, could contain some of these properties below:\r\n\t     *        {\r\n\t     *            seriesIndex / seriesId / seriesName,\r\n\t     *            dataIndex / dataIndexInside\r\n\t     *        }\r\n\t     *        If dataIndex is not specified, series visual will be fetched,\r\n\t     *        but not data item visual.\r\n\t     *        If all of seriesIndex, seriesId, seriesName are not specified,\r\n\t     *        visual will be fetched from first series.\r\n\t     * @param {string} visualType 'color', 'symbol', 'symbolSize'\r\n\t     */\r\n\t    echartsProto.getVisual = function (finder, visualType) {\r\n\t        var ecModel = this._model;\r\n\r\n\t        finder = modelUtil.parseFinder(ecModel, finder, {defaultMainType: 'series'});\r\n\r\n\t        var seriesModel = finder.seriesModel;\r\n\r\n\t        if (true) {\r\n\t            if (!seriesModel) {\r\n\t                console.warn('There is no specified seires model');\r\n\t            }\r\n\t        }\r\n\r\n\t        var data = seriesModel.getData();\r\n\r\n\t        var dataIndexInside = finder.hasOwnProperty('dataIndexInside')\r\n\t            ? finder.dataIndexInside\r\n\t            : finder.hasOwnProperty('dataIndex')\r\n\t            ? data.indexOfRawIndex(finder.dataIndex)\r\n\t            : null;\r\n\r\n\t        return dataIndexInside != null\r\n\t            ? data.getItemVisual(dataIndexInside, visualType)\r\n\t            : data.getVisual(visualType);\r\n\t    };\r\n\r\n\r\n\t    var updateMethods = {\r\n\r\n\t        /**\r\n\t         * @param {Object} payload\r\n\t         * @private\r\n\t         */\r\n\t        update: function (payload) {\r\n\t            // console.time && console.time('update');\r\n\r\n\t            var ecModel = this._model;\r\n\t            var api = this._api;\r\n\t            var coordSysMgr = this._coordSysMgr;\r\n\t            var zr = this._zr;\r\n\t            // update before setOption\r\n\t            if (!ecModel) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            // Fixme First time update ?\r\n\t            ecModel.restoreData();\r\n\r\n\t            // TODO\r\n\t            // Save total ecModel here for undo/redo (after restoring data and before processing data).\r\n\t            // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.\r\n\r\n\t            // Create new coordinate system each update\r\n\t            // In LineView may save the old coordinate system and use it to get the orignal point\r\n\t            coordSysMgr.create(this._model, this._api);\r\n\r\n\t            processData.call(this, ecModel, api);\r\n\r\n\t            stackSeriesData.call(this, ecModel);\r\n\r\n\t            coordSysMgr.update(ecModel, api);\r\n\r\n\t            doVisualEncoding.call(this, ecModel, payload);\r\n\r\n\t            doRender.call(this, ecModel, payload);\r\n\r\n\t            // Set background\r\n\t            var backgroundColor = ecModel.get('backgroundColor') || 'transparent';\r\n\r\n\t            var painter = zr.painter;\r\n\t            // TODO all use clearColor ?\r\n\t            if (painter.isSingleCanvas && painter.isSingleCanvas()) {\r\n\t                zr.configLayer(0, {\r\n\t                    clearColor: backgroundColor\r\n\t                });\r\n\t            }\r\n\t            else {\r\n\t                // In IE8\r\n\t                if (!env.canvasSupported) {\r\n\t                    var colorArr = colorTool.parse(backgroundColor);\r\n\t                    backgroundColor = colorTool.stringify(colorArr, 'rgb');\r\n\t                    if (colorArr[3] === 0) {\r\n\t                        backgroundColor = 'transparent';\r\n\t                    }\r\n\t                }\r\n\t                if (backgroundColor.colorStops || backgroundColor.image) {\r\n\t                    // Gradient background\r\n\t                    // FIXME Fixed layer？\r\n\t                    zr.configLayer(0, {\r\n\t                        clearColor: backgroundColor\r\n\t                    });\r\n\t                    this[HAS_GRADIENT_OR_PATTERN_BG] = true;\r\n\r\n\t                    this._dom.style.background = 'transparent';\r\n\t                }\r\n\t                else {\r\n\t                    if (this[HAS_GRADIENT_OR_PATTERN_BG]) {\r\n\t                        zr.configLayer(0, {\r\n\t                            clearColor: null\r\n\t                        });\r\n\t                    }\r\n\t                    this[HAS_GRADIENT_OR_PATTERN_BG] = false;\r\n\r\n\t                    this._dom.style.background = backgroundColor;\r\n\t                }\r\n\t            }\r\n\r\n\t            // console.time && console.timeEnd('update');\r\n\t        },\r\n\r\n\t        // PENDING\r\n\t        /**\r\n\t         * @param {Object} payload\r\n\t         * @private\r\n\t         */\r\n\t        updateView: function (payload) {\r\n\t            var ecModel = this._model;\r\n\r\n\t            // update before setOption\r\n\t            if (!ecModel) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\t                seriesModel.getData().clearAllVisual();\r\n\t            });\r\n\r\n\t            doVisualEncoding.call(this, ecModel, payload);\r\n\r\n\t            invokeUpdateMethod.call(this, 'updateView', ecModel, payload);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Object} payload\r\n\t         * @private\r\n\t         */\r\n\t        updateVisual: function (payload) {\r\n\t            var ecModel = this._model;\r\n\r\n\t            // update before setOption\r\n\t            if (!ecModel) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\t                seriesModel.getData().clearAllVisual();\r\n\t            });\r\n\r\n\t            doVisualEncoding.call(this, ecModel, payload);\r\n\r\n\t            invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Object} payload\r\n\t         * @private\r\n\t         */\r\n\t        updateLayout: function (payload) {\r\n\t            var ecModel = this._model;\r\n\r\n\t            // update before setOption\r\n\t            if (!ecModel) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            doLayout.call(this, ecModel, payload);\r\n\r\n\t            invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Object} payload\r\n\t         * @private\r\n\t         */\r\n\t        highlight: function (payload) {\r\n\t            toggleHighlight.call(this, 'highlight', payload);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Object} payload\r\n\t         * @private\r\n\t         */\r\n\t        downplay: function (payload) {\r\n\t            toggleHighlight.call(this, 'downplay', payload);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Object} payload\r\n\t         * @private\r\n\t         */\r\n\t        prepareAndUpdate: function (payload) {\r\n\t            var ecModel = this._model;\r\n\r\n\t            prepareView.call(this, 'component', ecModel);\r\n\r\n\t            prepareView.call(this, 'chart', ecModel);\r\n\r\n\t            updateMethods.update.call(this, payload);\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {Object} payload\r\n\t     * @private\r\n\t     */\r\n\t    function toggleHighlight(method, payload) {\r\n\t        var ecModel = this._model;\r\n\r\n\t        // dispatchAction before setOption\r\n\t        if (!ecModel) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        ecModel.eachComponent(\r\n\t            {mainType: 'series', query: payload},\r\n\t            function (seriesModel, index) {\r\n\t                var chartView = this._chartsMap[seriesModel.__viewId];\r\n\t                if (chartView && chartView.__alive) {\r\n\t                    chartView[method](\r\n\t                        seriesModel, ecModel, this._api, payload\r\n\t                    );\r\n\t                }\r\n\t            },\r\n\t            this\r\n\t        );\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Resize the chart\r\n\t     * @param {Object} opts\r\n\t     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\r\n\t     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\r\n\t     */\r\n\t    echartsProto.resize = function (opts) {\r\n\t        if (true) {\r\n\t            zrUtil.assert(!this[IN_MAIN_PROCESS], '`resize` should not be called during main process.');\r\n\t        }\r\n\r\n\t        this[IN_MAIN_PROCESS] = true;\r\n\r\n\t        this._zr.resize(opts);\r\n\r\n\t        var optionChanged = this._model && this._model.resetOption('media');\r\n\t        updateMethods[optionChanged ? 'prepareAndUpdate' : 'update'].call(this);\r\n\r\n\t        // Resize loading effect\r\n\t        this._loadingFX && this._loadingFX.resize();\r\n\r\n\t        this[IN_MAIN_PROCESS] = false;\r\n\r\n\t        this._flushPendingActions();\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Show loading effect\r\n\t     * @param  {string} [name='default']\r\n\t     * @param  {Object} [cfg]\r\n\t     */\r\n\t    echartsProto.showLoading = function (name, cfg) {\r\n\t        if (zrUtil.isObject(name)) {\r\n\t            cfg = name;\r\n\t            name = '';\r\n\t        }\r\n\t        name = name || 'default';\r\n\r\n\t        this.hideLoading();\r\n\t        if (!loadingEffects[name]) {\r\n\t            if (true) {\r\n\t                console.warn('Loading effects ' + name + ' not exists.');\r\n\t            }\r\n\t            return;\r\n\t        }\r\n\t        var el = loadingEffects[name](this._api, cfg);\r\n\t        var zr = this._zr;\r\n\t        this._loadingFX = el;\r\n\r\n\t        zr.add(el);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Hide loading effect\r\n\t     */\r\n\t    echartsProto.hideLoading = function () {\r\n\t        this._loadingFX && this._zr.remove(this._loadingFX);\r\n\t        this._loadingFX = null;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {Object} eventObj\r\n\t     * @return {Object}\r\n\t     */\r\n\t    echartsProto.makeActionFromEvent = function (eventObj) {\r\n\t        var payload = zrUtil.extend({}, eventObj);\r\n\t        payload.type = eventActionMap[eventObj.type];\r\n\t        return payload;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @pubilc\r\n\t     * @param {Object} payload\r\n\t     * @param {string} [payload.type] Action type\r\n\t     * @param {boolean} [silent=false] Whether trigger event.\r\n\t     */\r\n\t    echartsProto.dispatchAction = function (payload, silent) {\r\n\t        var actionWrap = actions[payload.type];\r\n\t        if (!actionWrap) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var actionInfo = actionWrap.actionInfo;\r\n\t        var updateMethod = actionInfo.update || 'update';\r\n\r\n\t        // if (__DEV__) {\r\n\t        //     zrUtil.assert(\r\n\t        //         !this[IN_MAIN_PROCESS],\r\n\t        //         '`dispatchAction` should not be called during main process.'\r\n\t        //         + 'unless updateMathod is \"none\".'\r\n\t        //     );\r\n\t        // }\r\n\r\n\t        // May dispatchAction in rendering procedure\r\n\t        if (this[IN_MAIN_PROCESS]) {\r\n\t            this._pendingActions.push(payload);\r\n\t            return;\r\n\t        }\r\n\r\n\t        this[IN_MAIN_PROCESS] = true;\r\n\r\n\t        var payloads = [payload];\r\n\t        var batched = false;\r\n\t        // Batch action\r\n\t        if (payload.batch) {\r\n\t            batched = true;\r\n\t            payloads = zrUtil.map(payload.batch, function (item) {\r\n\t                item = zrUtil.defaults(zrUtil.extend({}, item), payload);\r\n\t                item.batch = null;\r\n\t                return item;\r\n\t            });\r\n\t        }\r\n\r\n\t        var eventObjBatch = [];\r\n\t        var eventObj;\r\n\t        var isHighlightOrDownplay = payload.type === 'highlight' || payload.type === 'downplay';\r\n\t        for (var i = 0; i < payloads.length; i++) {\r\n\t            var batchItem = payloads[i];\r\n\t            // Action can specify the event by return it.\r\n\t            eventObj = actionWrap.action(batchItem, this._model);\r\n\t            // Emit event outside\r\n\t            eventObj = eventObj || zrUtil.extend({}, batchItem);\r\n\t            // Convert type to eventType\r\n\t            eventObj.type = actionInfo.event || eventObj.type;\r\n\t            eventObjBatch.push(eventObj);\r\n\r\n\t            // Highlight and downplay are special.\r\n\t            isHighlightOrDownplay && updateMethods[updateMethod].call(this, batchItem);\r\n\t        }\r\n\r\n\t        if (updateMethod !== 'none' && !isHighlightOrDownplay) {\r\n\t            // Still dirty\r\n\t            if (this[OPTION_UPDATED]) {\r\n\t                // FIXME Pass payload ?\r\n\t                updateMethods.prepareAndUpdate.call(this, payload);\r\n\t                this[OPTION_UPDATED] = false;\r\n\t            }\r\n\t            else {\r\n\t                updateMethods[updateMethod].call(this, payload);\r\n\t            }\r\n\t        }\r\n\r\n\t        // Follow the rule of action batch\r\n\t        if (batched) {\r\n\t            eventObj = {\r\n\t                type: actionInfo.event || payload.type,\r\n\t                batch: eventObjBatch\r\n\t            };\r\n\t        }\r\n\t        else {\r\n\t            eventObj = eventObjBatch[0];\r\n\t        }\r\n\r\n\t        this[IN_MAIN_PROCESS] = false;\r\n\r\n\t        !silent && this._messageCenter.trigger(eventObj.type, eventObj);\r\n\r\n\t        this._flushPendingActions();\r\n\r\n\t    };\r\n\r\n\t    echartsProto._flushPendingActions = function () {\r\n\t        var pendingActions = this._pendingActions;\r\n\t        while (pendingActions.length) {\r\n\t            var payload = pendingActions.shift();\r\n\t            this.dispatchAction(payload);\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Register event\r\n\t     * @method\r\n\t     */\r\n\t    echartsProto.on = createRegisterEventWithLowercaseName('on');\r\n\t    echartsProto.off = createRegisterEventWithLowercaseName('off');\r\n\t    echartsProto.one = createRegisterEventWithLowercaseName('one');\r\n\r\n\t    /**\r\n\t     * @param {string} methodName\r\n\t     * @private\r\n\t     */\r\n\t    function invokeUpdateMethod(methodName, ecModel, payload) {\r\n\t        var api = this._api;\r\n\r\n\t        // Update all components\r\n\t        each(this._componentsViews, function (component) {\r\n\t            var componentModel = component.__model;\r\n\t            component[methodName](componentModel, ecModel, api, payload);\r\n\r\n\t            updateZ(componentModel, component);\r\n\t        }, this);\r\n\r\n\t        // Upate all charts\r\n\t        ecModel.eachSeries(function (seriesModel, idx) {\r\n\t            var chart = this._chartsMap[seriesModel.__viewId];\r\n\t            chart[methodName](seriesModel, ecModel, api, payload);\r\n\r\n\t            updateZ(seriesModel, chart);\r\n\r\n\t            updateProgressiveAndBlend(seriesModel, chart);\r\n\t        }, this);\r\n\r\n\t        // If use hover layer\r\n\t        updateHoverLayerStatus(this._zr, ecModel);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Prepare view instances of charts and components\r\n\t     * @param  {module:echarts/model/Global} ecModel\r\n\t     * @private\r\n\t     */\r\n\t    function prepareView(type, ecModel) {\r\n\t        var isComponent = type === 'component';\r\n\t        var viewList = isComponent ? this._componentsViews : this._chartsViews;\r\n\t        var viewMap = isComponent ? this._componentsMap : this._chartsMap;\r\n\t        var zr = this._zr;\r\n\r\n\t        for (var i = 0; i < viewList.length; i++) {\r\n\t            viewList[i].__alive = false;\r\n\t        }\r\n\r\n\t        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {\r\n\t            if (isComponent) {\r\n\t                if (componentType === 'series') {\r\n\t                    return;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                model = componentType;\r\n\t            }\r\n\r\n\t            // Consider: id same and type changed.\r\n\t            var viewId = model.id + '_' + model.type;\r\n\t            var view = viewMap[viewId];\r\n\t            if (!view) {\r\n\t                var classType = ComponentModel.parseClassType(model.type);\r\n\t                var Clazz = isComponent\r\n\t                    ? ComponentView.getClass(classType.main, classType.sub)\r\n\t                    : ChartView.getClass(classType.sub);\r\n\t                if (Clazz) {\r\n\t                    view = new Clazz();\r\n\t                    view.init(ecModel, this._api);\r\n\t                    viewMap[viewId] = view;\r\n\t                    viewList.push(view);\r\n\t                    zr.add(view.group);\r\n\t                }\r\n\t                else {\r\n\t                    // Error\r\n\t                    return;\r\n\t                }\r\n\t            }\r\n\r\n\t            model.__viewId = viewId;\r\n\t            view.__alive = true;\r\n\t            view.__id = viewId;\r\n\t            view.__model = model;\r\n\t        }, this);\r\n\r\n\t        for (var i = 0; i < viewList.length;) {\r\n\t            var view = viewList[i];\r\n\t            if (!view.__alive) {\r\n\t                zr.remove(view.group);\r\n\t                view.dispose(ecModel, this._api);\r\n\t                viewList.splice(i, 1);\r\n\t                delete viewMap[view.__id];\r\n\t            }\r\n\t            else {\r\n\t                i++;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Processor data in each series\r\n\t     *\r\n\t     * @param {module:echarts/model/Global} ecModel\r\n\t     * @private\r\n\t     */\r\n\t    function processData(ecModel, api) {\r\n\t        each(dataProcessorFuncs, function (process) {\r\n\t            process.func(ecModel, api);\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @private\r\n\t     */\r\n\t    function stackSeriesData(ecModel) {\r\n\t        var stackedDataMap = {};\r\n\t        ecModel.eachSeries(function (series) {\r\n\t            var stack = series.get('stack');\r\n\t            var data = series.getData();\r\n\t            if (stack && data.type === 'list') {\r\n\t                var previousStack = stackedDataMap[stack];\r\n\t                if (previousStack) {\r\n\t                    data.stackedOn = previousStack;\r\n\t                }\r\n\t                stackedDataMap[stack] = data;\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Layout before each chart render there series, special visual encoding stage\r\n\t     *\r\n\t     * @param {module:echarts/model/Global} ecModel\r\n\t     * @private\r\n\t     */\r\n\t    function doLayout(ecModel, payload) {\r\n\t        var api = this._api;\r\n\t        each(visualFuncs, function (visual) {\r\n\t            if (visual.isLayout) {\r\n\t                visual.func(ecModel, api, payload);\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Encode visual infomation from data after data processing\r\n\t     *\r\n\t     * @param {module:echarts/model/Global} ecModel\r\n\t     * @private\r\n\t     */\r\n\t    function doVisualEncoding(ecModel, payload) {\r\n\t        var api = this._api;\r\n\t        ecModel.clearColorPalette();\r\n\t        ecModel.eachSeries(function (seriesModel) {\r\n\t            seriesModel.clearColorPalette();\r\n\t        });\r\n\t        each(visualFuncs, function (visual) {\r\n\t            visual.func(ecModel, api, payload);\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Render each chart and component\r\n\t     * @private\r\n\t     */\r\n\t    function doRender(ecModel, payload) {\r\n\t        var api = this._api;\r\n\t        // Render all components\r\n\t        each(this._componentsViews, function (componentView) {\r\n\t            var componentModel = componentView.__model;\r\n\t            componentView.render(componentModel, ecModel, api, payload);\r\n\r\n\t            updateZ(componentModel, componentView);\r\n\t        }, this);\r\n\r\n\t        each(this._chartsViews, function (chart) {\r\n\t            chart.__alive = false;\r\n\t        }, this);\r\n\r\n\t        // Render all charts\r\n\t        ecModel.eachSeries(function (seriesModel, idx) {\r\n\t            var chartView = this._chartsMap[seriesModel.__viewId];\r\n\t            chartView.__alive = true;\r\n\t            chartView.render(seriesModel, ecModel, api, payload);\r\n\r\n\t            chartView.group.silent = !!seriesModel.get('silent');\r\n\r\n\t            updateZ(seriesModel, chartView);\r\n\r\n\t            updateProgressiveAndBlend(seriesModel, chartView);\r\n\r\n\t        }, this);\r\n\r\n\t        // If use hover layer\r\n\t        updateHoverLayerStatus(this._zr, ecModel);\r\n\r\n\t        // Remove groups of unrendered charts\r\n\t        each(this._chartsViews, function (chart) {\r\n\t            if (!chart.__alive) {\r\n\t                chart.remove(ecModel, api);\r\n\t            }\r\n\t        }, this);\r\n\t    }\r\n\r\n\t    var MOUSE_EVENT_NAMES = [\r\n\t        'click', 'dblclick', 'mouseover', 'mouseout', 'mousemove',\r\n\t        'mousedown', 'mouseup', 'globalout', 'contextmenu'\r\n\t    ];\r\n\t    /**\r\n\t     * @private\r\n\t     */\r\n\t    echartsProto._initEvents = function () {\r\n\t        each(MOUSE_EVENT_NAMES, function (eveName) {\r\n\t            this._zr.on(eveName, function (e) {\r\n\t                var ecModel = this.getModel();\r\n\t                var el = e.target;\r\n\t                var params;\r\n\r\n\t                // no e.target when 'globalout'.\r\n\t                if (eveName === 'globalout') {\r\n\t                    params = {};\r\n\t                }\r\n\t                else if (el && el.dataIndex != null) {\r\n\t                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\r\n\t                    params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};\r\n\t                }\r\n\t                // If element has custom eventData of components\r\n\t                else if (el && el.eventData) {\r\n\t                    params = zrUtil.extend({}, el.eventData);\r\n\t                }\r\n\r\n\t                if (params) {\r\n\t                    params.event = e;\r\n\t                    params.type = eveName;\r\n\t                    this.trigger(eveName, params);\r\n\t                }\r\n\r\n\t            }, this);\r\n\t        }, this);\r\n\r\n\t        each(eventActionMap, function (actionType, eventType) {\r\n\t            this._messageCenter.on(eventType, function (event) {\r\n\t                this.trigger(eventType, event);\r\n\t            }, this);\r\n\t        }, this);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    echartsProto.isDisposed = function () {\r\n\t        return this._disposed;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Clear\r\n\t     */\r\n\t    echartsProto.clear = function () {\r\n\t        this.setOption({ series: [] }, true);\r\n\t    };\r\n\t    /**\r\n\t     * Dispose instance\r\n\t     */\r\n\t    echartsProto.dispose = function () {\r\n\t        if (this._disposed) {\r\n\t            if (true) {\r\n\t                console.warn('Instance ' + this.id + ' has been disposed');\r\n\t            }\r\n\t            return;\r\n\t        }\r\n\t        this._disposed = true;\r\n\r\n\t        var api = this._api;\r\n\t        var ecModel = this._model;\r\n\r\n\t        each(this._componentsViews, function (component) {\r\n\t            component.dispose(ecModel, api);\r\n\t        });\r\n\t        each(this._chartsViews, function (chart) {\r\n\t            chart.dispose(ecModel, api);\r\n\t        });\r\n\r\n\t        // Dispose after all views disposed\r\n\t        this._zr.dispose();\r\n\r\n\t        delete instances[this.id];\r\n\t    };\r\n\r\n\t    zrUtil.mixin(ECharts, Eventful);\r\n\r\n\t    function updateHoverLayerStatus(zr, ecModel) {\r\n\t        var storage = zr.storage;\r\n\t        var elCount = 0;\r\n\t        storage.traverse(function (el) {\r\n\t            if (!el.isGroup) {\r\n\t                elCount++;\r\n\t            }\r\n\t        });\r\n\t        if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {\r\n\t            storage.traverse(function (el) {\r\n\t                if (!el.isGroup) {\r\n\t                    el.useHoverLayer = true;\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t    }\r\n\t    /**\r\n\t     * Update chart progressive and blend.\r\n\t     * @param {module:echarts/model/Series|module:echarts/model/Component} model\r\n\t     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\r\n\t     */\r\n\t    function updateProgressiveAndBlend(seriesModel, chartView) {\r\n\t        // Progressive configuration\r\n\t        var elCount = 0;\r\n\t        chartView.group.traverse(function (el) {\r\n\t            if (el.type !== 'group' && !el.ignore) {\r\n\t                elCount++;\r\n\t            }\r\n\t        });\r\n\t        var frameDrawNum = +seriesModel.get('progressive');\r\n\t        var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;\r\n\t        if (needProgressive) {\r\n\t            chartView.group.traverse(function (el) {\r\n\t                // FIXME marker and other components\r\n\t                if (!el.isGroup) {\r\n\t                    el.progressive = needProgressive ?\r\n\t                        Math.floor(elCount++ / frameDrawNum) : -1;\r\n\t                    if (needProgressive) {\r\n\t                        el.stopAnimation(true);\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\t        }\r\n\r\n\t        // Blend configration\r\n\t        var blendMode = seriesModel.get('blendMode') || null;\r\n\t        if (true) {\r\n\t            if (!env.canvasSupported && blendMode && blendMode !== 'source-over') {\r\n\t                console.warn('Only canvas support blendMode');\r\n\t            }\r\n\t        }\r\n\t        chartView.group.traverse(function (el) {\r\n\t            // FIXME marker and other components\r\n\t            if (!el.isGroup) {\r\n\t                el.setStyle('blend', blendMode);\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    /**\r\n\t     * @param {module:echarts/model/Series|module:echarts/model/Component} model\r\n\t     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\r\n\t     */\r\n\t    function updateZ(model, view) {\r\n\t        var z = model.get('z');\r\n\t        var zlevel = model.get('zlevel');\r\n\t        // Set z and zlevel\r\n\t        view.group.traverse(function (el) {\r\n\t            if (el.type !== 'group') {\r\n\t                z != null && (el.z = z);\r\n\t                zlevel != null && (el.zlevel = zlevel);\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    /**\r\n\t     * @type {Array.<Function>}\r\n\t     * @inner\r\n\t     */\r\n\t    var actions = [];\r\n\r\n\t    /**\r\n\t     * Map eventType to actionType\r\n\t     * @type {Object}\r\n\t     */\r\n\t    var eventActionMap = {};\r\n\r\n\t    /**\r\n\t     * Data processor functions of each stage\r\n\t     * @type {Array.<Object.<string, Function>>}\r\n\t     * @inner\r\n\t     */\r\n\t    var dataProcessorFuncs = [];\r\n\r\n\t    /**\r\n\t     * @type {Array.<Function>}\r\n\t     * @inner\r\n\t     */\r\n\t    var optionPreprocessorFuncs = [];\r\n\r\n\t    /**\r\n\t     * Visual encoding functions of each stage\r\n\t     * @type {Array.<Object.<string, Function>>}\r\n\t     * @inner\r\n\t     */\r\n\t    var visualFuncs = [];\r\n\t    /**\r\n\t     * Theme storage\r\n\t     * @type {Object.<key, Object>}\r\n\t     */\r\n\t    var themeStorage = {};\r\n\t    /**\r\n\t     * Loading effects\r\n\t     */\r\n\t    var loadingEffects = {};\r\n\r\n\r\n\t    var instances = {};\r\n\t    var connectedGroups = {};\r\n\r\n\t    var idBase = new Date() - 0;\r\n\t    var groupIdBase = new Date() - 0;\r\n\t    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';\r\n\t    /**\r\n\t     * @alias module:echarts\r\n\t     */\r\n\t    var echarts = {\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        version: '3.3.1',\r\n\t        dependencies: {\r\n\t            zrender: '3.2.1'\r\n\t        }\r\n\t    };\r\n\r\n\t    function enableConnect(chart) {\r\n\r\n\t        var STATUS_PENDING = 0;\r\n\t        var STATUS_UPDATING = 1;\r\n\t        var STATUS_UPDATED = 2;\r\n\t        var STATUS_KEY = '__connectUpdateStatus';\r\n\t        function updateConnectedChartsStatus(charts, status) {\r\n\t            for (var i = 0; i < charts.length; i++) {\r\n\t                var otherChart = charts[i];\r\n\t                otherChart[STATUS_KEY] = status;\r\n\t            }\r\n\t        }\r\n\t        zrUtil.each(eventActionMap, function (actionType, eventType) {\r\n\t            chart._messageCenter.on(eventType, function (event) {\r\n\t                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {\r\n\t                    var action = chart.makeActionFromEvent(event);\r\n\t                    var otherCharts = [];\r\n\r\n\t                    zrUtil.each(instances, function (otherChart) {\r\n\t                        if (otherChart !== chart && otherChart.group === chart.group) {\r\n\t                            otherCharts.push(otherChart);\r\n\t                        }\r\n\t                    });\r\n\r\n\t                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);\r\n\t                    each(otherCharts, function (otherChart) {\r\n\t                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {\r\n\t                            otherChart.dispatchAction(action);\r\n\t                        }\r\n\t                    });\r\n\t                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);\r\n\t                }\r\n\t            });\r\n\t        });\r\n\r\n\t    }\r\n\t    /**\r\n\t     * @param {HTMLDomElement} dom\r\n\t     * @param {Object} [theme]\r\n\t     * @param {Object} opts\r\n\t     * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default\r\n\t     * @param {string} [opts.renderer] Currently only 'canvas' is supported.\r\n\t     * @param {number} [opts.width] Use clientWidth of the input `dom` by default.\r\n\t     *                              Can be 'auto' (the same as null/undefined)\r\n\t     * @param {number} [opts.height] Use clientHeight of the input `dom` by default.\r\n\t     *                               Can be 'auto' (the same as null/undefined)\r\n\t     */\r\n\t    echarts.init = function (dom, theme, opts) {\r\n\t        if (true) {\r\n\t            // Check version\r\n\t            if ((zrender.version.replace('.', '') - 0) < (echarts.dependencies.zrender.replace('.', '') - 0)) {\r\n\t                throw new Error(\r\n\t                    'ZRender ' + zrender.version\r\n\t                    + ' is too old for ECharts ' + echarts.version\r\n\t                    + '. Current version need ZRender '\r\n\t                    + echarts.dependencies.zrender + '+'\r\n\t                );\r\n\t            }\r\n\t            if (!dom) {\r\n\t                throw new Error('Initialize failed: invalid dom.');\r\n\t            }\r\n\t            if (zrUtil.isDom(dom) && dom.nodeName.toUpperCase() !== 'CANVAS' && (!dom.clientWidth || !dom.clientHeight)) {\r\n\t                console.warn('Can\\'t get dom width or height');\r\n\t            }\r\n\t        }\r\n\r\n\t        var chart = new ECharts(dom, theme, opts);\r\n\t        chart.id = 'ec_' + idBase++;\r\n\t        instances[chart.id] = chart;\r\n\r\n\t        dom.setAttribute &&\r\n\t            dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);\r\n\r\n\t        enableConnect(chart);\r\n\r\n\t        return chart;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @return {string|Array.<module:echarts~ECharts>} groupId\r\n\t     */\r\n\t    echarts.connect = function (groupId) {\r\n\t        // Is array of charts\r\n\t        if (zrUtil.isArray(groupId)) {\r\n\t            var charts = groupId;\r\n\t            groupId = null;\r\n\t            // If any chart has group\r\n\t            zrUtil.each(charts, function (chart) {\r\n\t                if (chart.group != null) {\r\n\t                    groupId = chart.group;\r\n\t                }\r\n\t            });\r\n\t            groupId = groupId || ('g_' + groupIdBase++);\r\n\t            zrUtil.each(charts, function (chart) {\r\n\t                chart.group = groupId;\r\n\t            });\r\n\t        }\r\n\t        connectedGroups[groupId] = true;\r\n\t        return groupId;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @return {string} groupId\r\n\t     */\r\n\t    echarts.disConnect = function (groupId) {\r\n\t        connectedGroups[groupId] = false;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Dispose a chart instance\r\n\t     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart\r\n\t     */\r\n\t    echarts.dispose = function (chart) {\r\n\t        if (zrUtil.isDom(chart)) {\r\n\t            chart = echarts.getInstanceByDom(chart);\r\n\t        }\r\n\t        else if (typeof chart === 'string') {\r\n\t            chart = instances[chart];\r\n\t        }\r\n\t        if ((chart instanceof ECharts) && !chart.isDisposed()) {\r\n\t            chart.dispose();\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param  {HTMLDomElement} dom\r\n\t     * @return {echarts~ECharts}\r\n\t     */\r\n\t    echarts.getInstanceByDom = function (dom) {\r\n\t        var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);\r\n\t        return instances[key];\r\n\t    };\r\n\t    /**\r\n\t     * @param {string} key\r\n\t     * @return {echarts~ECharts}\r\n\t     */\r\n\t    echarts.getInstanceById = function (key) {\r\n\t        return instances[key];\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Register theme\r\n\t     */\r\n\t    echarts.registerTheme = function (name, theme) {\r\n\t        themeStorage[name] = theme;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Register option preprocessor\r\n\t     * @param {Function} preprocessorFunc\r\n\t     */\r\n\t    echarts.registerPreprocessor = function (preprocessorFunc) {\r\n\t        optionPreprocessorFuncs.push(preprocessorFunc);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {number} [priority=1000]\r\n\t     * @param {Function} processorFunc\r\n\t     */\r\n\t    echarts.registerProcessor = function (priority, processorFunc) {\r\n\t        if (typeof priority === 'function') {\r\n\t            processorFunc = priority;\r\n\t            priority = PRIORITY_PROCESSOR_FILTER;\r\n\t        }\r\n\t        if (true) {\r\n\t            if (isNaN(priority)) {\r\n\t                throw new Error('Unkown processor priority');\r\n\t            }\r\n\t        }\r\n\t        dataProcessorFuncs.push({\r\n\t            prio: priority,\r\n\t            func: processorFunc\r\n\t        });\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Usage:\r\n\t     * registerAction('someAction', 'someEvent', function () { ... });\r\n\t     * registerAction('someAction', function () { ... });\r\n\t     * registerAction(\r\n\t     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},\r\n\t     *     function () { ... }\r\n\t     * );\r\n\t     *\r\n\t     * @param {(string|Object)} actionInfo\r\n\t     * @param {string} actionInfo.type\r\n\t     * @param {string} [actionInfo.event]\r\n\t     * @param {string} [actionInfo.update]\r\n\t     * @param {string} [eventName]\r\n\t     * @param {Function} action\r\n\t     */\r\n\t    echarts.registerAction = function (actionInfo, eventName, action) {\r\n\t        if (typeof eventName === 'function') {\r\n\t            action = eventName;\r\n\t            eventName = '';\r\n\t        }\r\n\t        var actionType = zrUtil.isObject(actionInfo)\r\n\t            ? actionInfo.type\r\n\t            : ([actionInfo, actionInfo = {\r\n\t                event: eventName\r\n\t            }][0]);\r\n\r\n\t        // Event name is all lowercase\r\n\t        actionInfo.event = (actionInfo.event || actionType).toLowerCase();\r\n\t        eventName = actionInfo.event;\r\n\r\n\t        if (!actions[actionType]) {\r\n\t            actions[actionType] = {action: action, actionInfo: actionInfo};\r\n\t        }\r\n\t        eventActionMap[eventName] = actionType;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {string} type\r\n\t     * @param {*} CoordinateSystem\r\n\t     */\r\n\t    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {\r\n\t        CoordinateSystemManager.register(type, CoordinateSystem);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Layout is a special stage of visual encoding\r\n\t     * Most visual encoding like color are common for different chart\r\n\t     * But each chart has it's own layout algorithm\r\n\t     *\r\n\t     * @param {number} [priority=1000]\r\n\t     * @param {Function} layoutFunc\r\n\t     */\r\n\t    echarts.registerLayout = function (priority, layoutFunc) {\r\n\t        if (typeof priority === 'function') {\r\n\t            layoutFunc = priority;\r\n\t            priority = PRIORITY_VISUAL_LAYOUT;\r\n\t        }\r\n\t        if (true) {\r\n\t            if (isNaN(priority)) {\r\n\t                throw new Error('Unkown layout priority');\r\n\t            }\r\n\t        }\r\n\t        visualFuncs.push({\r\n\t            prio: priority,\r\n\t            func: layoutFunc,\r\n\t            isLayout: true\r\n\t        });\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {number} [priority=3000]\r\n\t     * @param {Function} visualFunc\r\n\t     */\r\n\t    echarts.registerVisual = function (priority, visualFunc) {\r\n\t        if (typeof priority === 'function') {\r\n\t            visualFunc = priority;\r\n\t            priority = PRIORITY_VISUAL_CHART;\r\n\t        }\r\n\t        if (true) {\r\n\t            if (isNaN(priority)) {\r\n\t                throw new Error('Unkown visual priority');\r\n\t            }\r\n\t        }\r\n\t        visualFuncs.push({\r\n\t            prio: priority,\r\n\t            func: visualFunc\r\n\t        });\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {string} name\r\n\t     */\r\n\t    echarts.registerLoading = function (name, loadingFx) {\r\n\t        loadingEffects[name] = loadingFx;\r\n\t    };\r\n\r\n\r\n\t    var parseClassType = ComponentModel.parseClassType;\r\n\t    /**\r\n\t     * @param {Object} opts\r\n\t     * @param {string} [superClass]\r\n\t     */\r\n\t    echarts.extendComponentModel = function (opts, superClass) {\r\n\t        var Clazz = ComponentModel;\r\n\t        if (superClass) {\r\n\t            var classType = parseClassType(superClass);\r\n\t            Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\r\n\t        }\r\n\t        return Clazz.extend(opts);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {Object} opts\r\n\t     * @param {string} [superClass]\r\n\t     */\r\n\t    echarts.extendComponentView = function (opts, superClass) {\r\n\t        var Clazz = ComponentView;\r\n\t        if (superClass) {\r\n\t            var classType = parseClassType(superClass);\r\n\t            Clazz = ComponentView.getClass(classType.main, classType.sub, true);\r\n\t        }\r\n\t        return Clazz.extend(opts);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {Object} opts\r\n\t     * @param {string} [superClass]\r\n\t     */\r\n\t    echarts.extendSeriesModel = function (opts, superClass) {\r\n\t        var Clazz = SeriesModel;\r\n\t        if (superClass) {\r\n\t            superClass = 'series.' + superClass.replace('series.', '');\r\n\t            var classType = parseClassType(superClass);\r\n\t            Clazz = SeriesModel.getClass(classType.main, classType.sub, true);\r\n\t        }\r\n\t        return Clazz.extend(opts);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {Object} opts\r\n\t     * @param {string} [superClass]\r\n\t     */\r\n\t    echarts.extendChartView = function (opts, superClass) {\r\n\t        var Clazz = ChartView;\r\n\t        if (superClass) {\r\n\t            superClass.replace('series.', '');\r\n\t            var classType = parseClassType(superClass);\r\n\t            Clazz = ChartView.getClass(classType.main, true);\r\n\t        }\r\n\t        return Clazz.extend(opts);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * ZRender need a canvas context to do measureText.\r\n\t     * But in node environment canvas may be created by node-canvas.\r\n\t     * So we need to specify how to create a canvas instead of using document.createElement('canvas')\r\n\t     *\r\n\t     * Be careful of using it in the browser.\r\n\t     *\r\n\t     * @param {Function} creator\r\n\t     * @example\r\n\t     *     var Canvas = require('canvas');\r\n\t     *     var echarts = require('echarts');\r\n\t     *     echarts.setCanvasCreator(function () {\r\n\t     *         // Small size is enough.\r\n\t     *         return new Canvas(32, 32);\r\n\t     *     });\r\n\t     */\r\n\t    echarts.setCanvasCreator = function (creator) {\r\n\t        zrUtil.createCanvas = creator;\r\n\t    };\r\n\r\n\t    echarts.registerVisual(PRIORITY_VISUAL_GLOBAL, __webpack_require__(93));\r\n\t    echarts.registerPreprocessor(__webpack_require__(94));\r\n\t    echarts.registerLoading('default', __webpack_require__(96));\r\n\r\n\t    // Default action\r\n\t    echarts.registerAction({\r\n\t        type: 'highlight',\r\n\t        event: 'highlight',\r\n\t        update: 'highlight'\r\n\t    }, zrUtil.noop);\r\n\t    echarts.registerAction({\r\n\t        type: 'downplay',\r\n\t        event: 'downplay',\r\n\t        update: 'downplay'\r\n\t    }, zrUtil.noop);\r\n\r\n\r\n\t    // --------\r\n\t    // Exports\r\n\t    // --------\r\n\t    //\r\n\t    echarts.List = __webpack_require__(97);\r\n\t    echarts.Model = __webpack_require__(12);\r\n\r\n\t    echarts.graphic = __webpack_require__(43);\r\n\t    echarts.number = __webpack_require__(7);\r\n\t    echarts.format = __webpack_require__(6);\r\n\t    echarts.matrix = __webpack_require__(11);\r\n\t    echarts.vector = __webpack_require__(10);\r\n\t    echarts.color = __webpack_require__(39);\r\n\r\n\t    echarts.util = {};\r\n\t    each([\r\n\t            'map', 'each', 'filter', 'indexOf', 'inherits',\r\n\t            'reduce', 'filter', 'bind', 'curry', 'isArray',\r\n\t            'isString', 'isObject', 'isFunction', 'extend', 'defaults'\r\n\t        ],\r\n\t        function (name) {\r\n\t            echarts.util[name] = zrUtil[name];\r\n\t        }\r\n\t    );\r\n\r\n\t    // PRIORITY\r\n\t    echarts.PRIORITY = {\r\n\t        PROCESSOR: {\r\n\t            FILTER: PRIORITY_PROCESSOR_FILTER,\r\n\t            STATISTIC: PRIORITY_PROCESSOR_STATISTIC\r\n\t        },\r\n\t        VISUAL: {\r\n\t            LAYOUT: PRIORITY_VISUAL_LAYOUT,\r\n\t            GLOBAL: PRIORITY_VISUAL_GLOBAL,\r\n\t            CHART: PRIORITY_VISUAL_CHART,\r\n\t            COMPONENT: PRIORITY_VISUAL_COMPONENT,\r\n\t            BRUSH: PRIORITY_VISUAL_BRUSH\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = echarts;\r\n\r\n\r\n/***/ },\r\n/* 2 */\r\n/***/ function(module, exports) {\r\n\r\n\t/**\r\n\t * echarts设备环境识别\r\n\t *\r\n\t * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。\r\n\t * @author firede[firede@firede.us]\r\n\t * @desc thanks zepto.\r\n\t */\r\n\r\n\t    var env = {};\r\n\t    if (typeof navigator === 'undefined') {\r\n\t        // In node\r\n\t        env = {\r\n\t            browser: {},\r\n\t            os: {},\r\n\t            node: true,\r\n\t            // Assume canvas is supported\r\n\t            canvasSupported: true\r\n\t        };\r\n\t    }\r\n\t    else {\r\n\t        env = detect(navigator.userAgent);\r\n\t    }\r\n\r\n\t    module.exports = env;\r\n\r\n\t    // Zepto.js\r\n\t    // (c) 2010-2013 Thomas Fuchs\r\n\t    // Zepto.js may be freely distributed under the MIT license.\r\n\r\n\t    function detect(ua) {\r\n\t        var os = {};\r\n\t        var browser = {};\r\n\t        // var webkit = ua.match(/Web[kK]it[\\/]{0,1}([\\d.]+)/);\r\n\t        // var android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\r\n\t        // var ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\r\n\t        // var ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\r\n\t        // var iphone = !ipad && ua.match(/(iPhone\\sOS)\\s([\\d_]+)/);\r\n\t        // var webos = ua.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/);\r\n\t        // var touchpad = webos && ua.match(/TouchPad/);\r\n\t        // var kindle = ua.match(/Kindle\\/([\\d.]+)/);\r\n\t        // var silk = ua.match(/Silk\\/([\\d._]+)/);\r\n\t        // var blackberry = ua.match(/(BlackBerry).*Version\\/([\\d.]+)/);\r\n\t        // var bb10 = ua.match(/(BB10).*Version\\/([\\d.]+)/);\r\n\t        // var rimtabletos = ua.match(/(RIM\\sTablet\\sOS)\\s([\\d.]+)/);\r\n\t        // var playbook = ua.match(/PlayBook/);\r\n\t        // var chrome = ua.match(/Chrome\\/([\\d.]+)/) || ua.match(/CriOS\\/([\\d.]+)/);\r\n\t        var firefox = ua.match(/Firefox\\/([\\d.]+)/);\r\n\t        // var safari = webkit && ua.match(/Mobile\\//) && !chrome;\r\n\t        // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;\r\n\t        var ie = ua.match(/MSIE\\s([\\d.]+)/)\r\n\t            // IE 11 Trident/7.0; rv:11.0\r\n\t            || ua.match(/Trident\\/.+?rv:(([\\d.]+))/);\r\n\t        var edge = ua.match(/Edge\\/([\\d.]+)/); // IE 12 and 12+\r\n\r\n\t        // Todo: clean this up with a better OS/browser seperation:\r\n\t        // - discern (more) between multiple browsers on android\r\n\t        // - decide if kindle fire in silk mode is android or not\r\n\t        // - Firefox on Android doesn't specify the Android version\r\n\t        // - possibly devide in os, device and browser hashes\r\n\r\n\t        // if (browser.webkit = !!webkit) browser.version = webkit[1];\r\n\r\n\t        // if (android) os.android = true, os.version = android[2];\r\n\t        // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');\r\n\t        // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');\r\n\t        // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;\r\n\t        // if (webos) os.webos = true, os.version = webos[2];\r\n\t        // if (touchpad) os.touchpad = true;\r\n\t        // if (blackberry) os.blackberry = true, os.version = blackberry[2];\r\n\t        // if (bb10) os.bb10 = true, os.version = bb10[2];\r\n\t        // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];\r\n\t        // if (playbook) browser.playbook = true;\r\n\t        // if (kindle) os.kindle = true, os.version = kindle[1];\r\n\t        // if (silk) browser.silk = true, browser.version = silk[1];\r\n\t        // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;\r\n\t        // if (chrome) browser.chrome = true, browser.version = chrome[1];\r\n\t        if (firefox) browser.firefox = true, browser.version = firefox[1];\r\n\t        // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;\r\n\t        // if (webview) browser.webview = true;\r\n\t        \r\n\t        if (ie) {\r\n\t            browser.ie = true;\r\n\t            browser.version = ie[1];\r\n\t        }\r\n\t        \r\n\t        if (edge) {\r\n\t            browser.edge = true;\r\n\t            browser.version = edge[1];\r\n\t        }\r\n\r\n\t        // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||\r\n\t        //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));\r\n\t        // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||\r\n\t        //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\\/([\\d.]+)/)) ||\r\n\t        //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));\r\n\r\n\t        return {\r\n\t            browser: browser,\r\n\t            os: os,\r\n\t            node: false,\r\n\t            // 原生canvas支持，改极端点了\r\n\t            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)\r\n\t            canvasSupported : document.createElement('canvas').getContext ? true : false,\r\n\t            // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>\r\n\t            // works on most browsers\r\n\t            // IE10/11 does not support touch event, and MS Edge supports them but not by\r\n\t            // default, so we dont check navigator.maxTouchPoints for them here.\r\n\t            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,\r\n\t            // <http://caniuse.com/#search=pointer%20event>.\r\n\t            pointerEventsSupported: 'onpointerdown' in window\r\n\t                // Firefox supports pointer but not by default,\r\n\t                // only MS browsers are reliable on pointer events currently.\r\n\t                && (browser.edge || (browser.ie && browser.version >= 10))\r\n\t        };\r\n\t    }\r\n\r\n\r\n/***/ },\r\n/* 3 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * ECharts global model\r\n\t *\r\n\t * @module {echarts/model/Global}\r\n\t */\r\n\r\n\r\n\r\n\t    /**\r\n\t     * Caution: If the mechanism should be changed some day, these cases\r\n\t     * should be considered:\r\n\t     *\r\n\t     * (1) In `merge option` mode, if using the same option to call `setOption`\r\n\t     * many times, the result should be the same (try our best to ensure that).\r\n\t     * (2) In `merge option` mode, if a component has no id/name specified, it\r\n\t     * will be merged by index, and the result sequence of the components is\r\n\t     * consistent to the original sequence.\r\n\t     * (3) `reset` feature (in toolbox). Find detailed info in comments about\r\n\t     * `mergeOption` in module:echarts/model/OptionManager.\r\n\t     */\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var Model = __webpack_require__(12);\r\n\t    var each = zrUtil.each;\r\n\t    var filter = zrUtil.filter;\r\n\t    var map = zrUtil.map;\r\n\t    var isArray = zrUtil.isArray;\r\n\t    var indexOf = zrUtil.indexOf;\r\n\t    var isObject = zrUtil.isObject;\r\n\r\n\t    var ComponentModel = __webpack_require__(19);\r\n\r\n\t    var globalDefault = __webpack_require__(23);\r\n\r\n\t    var OPTION_INNER_KEY = '\\0_ec_inner';\r\n\r\n\t    /**\r\n\t     * @alias module:echarts/model/Global\r\n\t     *\r\n\t     * @param {Object} option\r\n\t     * @param {module:echarts/model/Model} parentModel\r\n\t     * @param {Object} theme\r\n\t     */\r\n\t    var GlobalModel = Model.extend({\r\n\r\n\t        constructor: GlobalModel,\r\n\r\n\t        init: function (option, parentModel, theme, optionManager) {\r\n\t            theme = theme || {};\r\n\r\n\t            this.option = null; // Mark as not initialized.\r\n\r\n\t            /**\r\n\t             * @type {module:echarts/model/Model}\r\n\t             * @private\r\n\t             */\r\n\t            this._theme = new Model(theme);\r\n\r\n\t            /**\r\n\t             * @type {module:echarts/model/OptionManager}\r\n\t             */\r\n\t            this._optionManager = optionManager;\r\n\t        },\r\n\r\n\t        setOption: function (option, optionPreprocessorFuncs) {\r\n\t            zrUtil.assert(\r\n\t                !(OPTION_INNER_KEY in option),\r\n\t                'please use chart.getOption()'\r\n\t            );\r\n\r\n\t            this._optionManager.setOption(option, optionPreprocessorFuncs);\r\n\r\n\t            this.resetOption();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} type null/undefined: reset all.\r\n\t         *                      'recreate': force recreate all.\r\n\t         *                      'timeline': only reset timeline option\r\n\t         *                      'media': only reset media query option\r\n\t         * @return {boolean} Whether option changed.\r\n\t         */\r\n\t        resetOption: function (type) {\r\n\t            var optionChanged = false;\r\n\t            var optionManager = this._optionManager;\r\n\r\n\t            if (!type || type === 'recreate') {\r\n\t                var baseOption = optionManager.mountOption(type === 'recreate');\r\n\r\n\t                if (!this.option || type === 'recreate') {\r\n\t                    initBase.call(this, baseOption);\r\n\t                }\r\n\t                else {\r\n\t                    this.restoreData();\r\n\t                    this.mergeOption(baseOption);\r\n\t                }\r\n\t                optionChanged = true;\r\n\t            }\r\n\r\n\t            if (type === 'timeline' || type === 'media') {\r\n\t                this.restoreData();\r\n\t            }\r\n\r\n\t            if (!type || type === 'recreate' || type === 'timeline') {\r\n\t                var timelineOption = optionManager.getTimelineOption(this);\r\n\t                timelineOption && (this.mergeOption(timelineOption), optionChanged = true);\r\n\t            }\r\n\r\n\t            if (!type || type === 'recreate' || type === 'media') {\r\n\t                var mediaOptions = optionManager.getMediaOption(this, this._api);\r\n\t                if (mediaOptions.length) {\r\n\t                    each(mediaOptions, function (mediaOption) {\r\n\t                        this.mergeOption(mediaOption, optionChanged = true);\r\n\t                    }, this);\r\n\t                }\r\n\t            }\r\n\r\n\t            return optionChanged;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        mergeOption: function (newOption) {\r\n\t            var option = this.option;\r\n\t            var componentsMap = this._componentsMap;\r\n\t            var newCptTypes = [];\r\n\r\n\t            // 如果不存在对应的 component model 则直接 merge\r\n\t            each(newOption, function (componentOption, mainType) {\r\n\t                if (componentOption == null) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                if (!ComponentModel.hasClass(mainType)) {\r\n\t                    option[mainType] = option[mainType] == null\r\n\t                        ? zrUtil.clone(componentOption)\r\n\t                        : zrUtil.merge(option[mainType], componentOption, true);\r\n\t                }\r\n\t                else {\r\n\t                    newCptTypes.push(mainType);\r\n\t                }\r\n\t            });\r\n\r\n\t            // FIXME OPTION 同步是否要改回原来的\r\n\t            ComponentModel.topologicalTravel(\r\n\t                newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this\r\n\t            );\r\n\r\n\t            this._seriesIndices = this._seriesIndices || [];\r\n\r\n\t            function visitComponent(mainType, dependencies) {\r\n\t                var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);\r\n\r\n\t                var mapResult = modelUtil.mappingToExists(\r\n\t                    componentsMap[mainType], newCptOptionList\r\n\t                );\r\n\r\n\t                makeKeyInfo(mainType, mapResult);\r\n\r\n\t                var dependentModels = getComponentsByTypes(\r\n\t                    componentsMap, dependencies\r\n\t                );\r\n\r\n\t                option[mainType] = [];\r\n\t                componentsMap[mainType] = [];\r\n\r\n\t                each(mapResult, function (resultItem, index) {\r\n\t                    var componentModel = resultItem.exist;\r\n\t                    var newCptOption = resultItem.option;\r\n\r\n\t                    zrUtil.assert(\r\n\t                        isObject(newCptOption) || componentModel,\r\n\t                        'Empty component definition'\r\n\t                    );\r\n\r\n\t                    // Consider where is no new option and should be merged using {},\r\n\t                    // see removeEdgeAndAdd in topologicalTravel and\r\n\t                    // ComponentModel.getAllClassMainTypes.\r\n\t                    if (!newCptOption) {\r\n\t                        componentModel.mergeOption({}, this);\r\n\t                        componentModel.optionUpdated({}, false);\r\n\t                    }\r\n\t                    else {\r\n\t                        var ComponentModelClass = ComponentModel.getClass(\r\n\t                            mainType, resultItem.keyInfo.subType, true\r\n\t                        );\r\n\r\n\t                        if (componentModel && componentModel instanceof ComponentModelClass) {\r\n\t                            componentModel.name = resultItem.keyInfo.name;\r\n\t                            componentModel.mergeOption(newCptOption, this);\r\n\t                            componentModel.optionUpdated(newCptOption, false);\r\n\t                        }\r\n\t                        else {\r\n\t                            // PENDING Global as parent ?\r\n\t                            var extraOpt = zrUtil.extend(\r\n\t                                {\r\n\t                                    dependentModels: dependentModels,\r\n\t                                    componentIndex: index\r\n\t                                },\r\n\t                                resultItem.keyInfo\r\n\t                            );\r\n\t                            componentModel = new ComponentModelClass(\r\n\t                                newCptOption, this, this, extraOpt\r\n\t                            );\r\n\t                            zrUtil.extend(componentModel, extraOpt);\r\n\t                            componentModel.init(newCptOption, this, this, extraOpt);\r\n\t                            // Call optionUpdated after init.\r\n\t                            // newCptOption has been used as componentModel.option\r\n\t                            // and may be merged with theme and default, so pass null\r\n\t                            // to avoid confusion.\r\n\t                            componentModel.optionUpdated(null, true);\r\n\t                        }\r\n\t                    }\r\n\r\n\t                    componentsMap[mainType][index] = componentModel;\r\n\t                    option[mainType][index] = componentModel.option;\r\n\t                }, this);\r\n\r\n\t                // Backup series for filtering.\r\n\t                if (mainType === 'series') {\r\n\t                    this._seriesIndices = createSeriesIndices(componentsMap.series);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get option for output (cloned option and inner info removed)\r\n\t         * @public\r\n\t         * @return {Object}\r\n\t         */\r\n\t        getOption: function () {\r\n\t            var option = zrUtil.clone(this.option);\r\n\r\n\t            each(option, function (opts, mainType) {\r\n\t                if (ComponentModel.hasClass(mainType)) {\r\n\t                    var opts = modelUtil.normalizeToArray(opts);\r\n\t                    for (var i = opts.length - 1; i >= 0; i--) {\r\n\t                        // Remove options with inner id.\r\n\t                        if (modelUtil.isIdInner(opts[i])) {\r\n\t                            opts.splice(i, 1);\r\n\t                        }\r\n\t                    }\r\n\t                    option[mainType] = opts;\r\n\t                }\r\n\t            });\r\n\r\n\t            delete option[OPTION_INNER_KEY];\r\n\r\n\t            return option;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:echarts/model/Model}\r\n\t         */\r\n\t        getTheme: function () {\r\n\t            return this._theme;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} mainType\r\n\t         * @param {number} [idx=0]\r\n\t         * @return {module:echarts/model/Component}\r\n\t         */\r\n\t        getComponent: function (mainType, idx) {\r\n\t            var list = this._componentsMap[mainType];\r\n\t            if (list) {\r\n\t                return list[idx || 0];\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Object} condition\r\n\t         * @param {string} condition.mainType\r\n\t         * @param {string} [condition.subType] If ignore, only query by mainType\r\n\t         * @param {number|Array.<number>} [condition.index] Either input index or id or name.\r\n\t         * @param {string|Array.<string>} [condition.id] Either input index or id or name.\r\n\t         * @param {string|Array.<string>} [condition.name] Either input index or id or name.\r\n\t         * @return {Array.<module:echarts/model/Component>}\r\n\t         */\r\n\t        queryComponents: function (condition) {\r\n\t            var mainType = condition.mainType;\r\n\t            if (!mainType) {\r\n\t                return [];\r\n\t            }\r\n\r\n\t            var index = condition.index;\r\n\t            var id = condition.id;\r\n\t            var name = condition.name;\r\n\r\n\t            var cpts = this._componentsMap[mainType];\r\n\r\n\t            if (!cpts || !cpts.length) {\r\n\t                return [];\r\n\t            }\r\n\r\n\t            var result;\r\n\r\n\t            if (index != null) {\r\n\t                if (!isArray(index)) {\r\n\t                    index = [index];\r\n\t                }\r\n\t                result = filter(map(index, function (idx) {\r\n\t                    return cpts[idx];\r\n\t                }), function (val) {\r\n\t                    return !!val;\r\n\t                });\r\n\t            }\r\n\t            else if (id != null) {\r\n\t                var isIdArray = isArray(id);\r\n\t                result = filter(cpts, function (cpt) {\r\n\t                    return (isIdArray && indexOf(id, cpt.id) >= 0)\r\n\t                        || (!isIdArray && cpt.id === id);\r\n\t                });\r\n\t            }\r\n\t            else if (name != null) {\r\n\t                var isNameArray = isArray(name);\r\n\t                result = filter(cpts, function (cpt) {\r\n\t                    return (isNameArray && indexOf(name, cpt.name) >= 0)\r\n\t                        || (!isNameArray && cpt.name === name);\r\n\t                });\r\n\t            }\r\n\t            else {\r\n\t                // Return all components with mainType\r\n\t                result = cpts;\r\n\t            }\r\n\r\n\t            return filterBySubType(result, condition);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * The interface is different from queryComponents,\r\n\t         * which is convenient for inner usage.\r\n\t         *\r\n\t         * @usage\r\n\t         * var result = findComponents(\r\n\t         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}\r\n\t         * );\r\n\t         * var result = findComponents(\r\n\t         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}\r\n\t         * );\r\n\t         * var result = findComponents(\r\n\t         *     {mainType: 'series'},\r\n\t         *     function (model, index) {...}\r\n\t         * );\r\n\t         * // result like [component0, componnet1, ...]\r\n\t         *\r\n\t         * @param {Object} condition\r\n\t         * @param {string} condition.mainType Mandatory.\r\n\t         * @param {string} [condition.subType] Optional.\r\n\t         * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},\r\n\t         *        where xxx is mainType.\r\n\t         *        If query attribute is null/undefined or has no index/id/name,\r\n\t         *        do not filtering by query conditions, which is convenient for\r\n\t         *        no-payload situations or when target of action is global.\r\n\t         * @param {Function} [condition.filter] parameter: component, return boolean.\r\n\t         * @return {Array.<module:echarts/model/Component>}\r\n\t         */\r\n\t        findComponents: function (condition) {\r\n\t            var query = condition.query;\r\n\t            var mainType = condition.mainType;\r\n\r\n\t            var queryCond = getQueryCond(query);\r\n\t            var result = queryCond\r\n\t                ? this.queryComponents(queryCond)\r\n\t                : this._componentsMap[mainType];\r\n\r\n\t            return doFilter(filterBySubType(result, condition));\r\n\r\n\t            function getQueryCond(q) {\r\n\t                var indexAttr = mainType + 'Index';\r\n\t                var idAttr = mainType + 'Id';\r\n\t                var nameAttr = mainType + 'Name';\r\n\t                return q && (\r\n\t                        q.hasOwnProperty(indexAttr)\r\n\t                        || q.hasOwnProperty(idAttr)\r\n\t                        || q.hasOwnProperty(nameAttr)\r\n\t                    )\r\n\t                    ? {\r\n\t                        mainType: mainType,\r\n\t                        // subType will be filtered finally.\r\n\t                        index: q[indexAttr],\r\n\t                        id: q[idAttr],\r\n\t                        name: q[nameAttr]\r\n\t                    }\r\n\t                    : null;\r\n\t            }\r\n\r\n\t            function doFilter(res) {\r\n\t                return condition.filter\r\n\t                     ? filter(res, condition.filter)\r\n\t                     : res;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @usage\r\n\t         * eachComponent('legend', function (legendModel, index) {\r\n\t         *     ...\r\n\t         * });\r\n\t         * eachComponent(function (componentType, model, index) {\r\n\t         *     // componentType does not include subType\r\n\t         *     // (componentType is 'xxx' but not 'xxx.aa')\r\n\t         * });\r\n\t         * eachComponent(\r\n\t         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},\r\n\t         *     function (model, index) {...}\r\n\t         * );\r\n\t         * eachComponent(\r\n\t         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},\r\n\t         *     function (model, index) {...}\r\n\t         * );\r\n\t         *\r\n\t         * @param {string|Object=} mainType When mainType is object, the definition\r\n\t         *                                  is the same as the method 'findComponents'.\r\n\t         * @param {Function} cb\r\n\t         * @param {*} context\r\n\t         */\r\n\t        eachComponent: function (mainType, cb, context) {\r\n\t            var componentsMap = this._componentsMap;\r\n\r\n\t            if (typeof mainType === 'function') {\r\n\t                context = cb;\r\n\t                cb = mainType;\r\n\t                each(componentsMap, function (components, componentType) {\r\n\t                    each(components, function (component, index) {\r\n\t                        cb.call(context, componentType, component, index);\r\n\t                    });\r\n\t                });\r\n\t            }\r\n\t            else if (zrUtil.isString(mainType)) {\r\n\t                each(componentsMap[mainType], cb, context);\r\n\t            }\r\n\t            else if (isObject(mainType)) {\r\n\t                var queryResult = this.findComponents(mainType);\r\n\t                each(queryResult, cb, context);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} name\r\n\t         * @return {Array.<module:echarts/model/Series>}\r\n\t         */\r\n\t        getSeriesByName: function (name) {\r\n\t            var series = this._componentsMap.series;\r\n\t            return filter(series, function (oneSeries) {\r\n\t                return oneSeries.name === name;\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {number} seriesIndex\r\n\t         * @return {module:echarts/model/Series}\r\n\t         */\r\n\t        getSeriesByIndex: function (seriesIndex) {\r\n\t            return this._componentsMap.series[seriesIndex];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} subType\r\n\t         * @return {Array.<module:echarts/model/Series>}\r\n\t         */\r\n\t        getSeriesByType: function (subType) {\r\n\t            var series = this._componentsMap.series;\r\n\t            return filter(series, function (oneSeries) {\r\n\t                return oneSeries.subType === subType;\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {Array.<module:echarts/model/Series>}\r\n\t         */\r\n\t        getSeries: function () {\r\n\t            return this._componentsMap.series.slice();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * After filtering, series may be different\r\n\t         * frome raw series.\r\n\t         *\r\n\t         * @param {Function} cb\r\n\t         * @param {*} context\r\n\t         */\r\n\t        eachSeries: function (cb, context) {\r\n\t            assertSeriesInitialized(this);\r\n\t            each(this._seriesIndices, function (rawSeriesIndex) {\r\n\t                var series = this._componentsMap.series[rawSeriesIndex];\r\n\t                cb.call(context, series, rawSeriesIndex);\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Iterate raw series before filtered.\r\n\t         *\r\n\t         * @param {Function} cb\r\n\t         * @param {*} context\r\n\t         */\r\n\t        eachRawSeries: function (cb, context) {\r\n\t            each(this._componentsMap.series, cb, context);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * After filtering, series may be different.\r\n\t         * frome raw series.\r\n\t         *\r\n\t         * @parma {string} subType\r\n\t         * @param {Function} cb\r\n\t         * @param {*} context\r\n\t         */\r\n\t        eachSeriesByType: function (subType, cb, context) {\r\n\t            assertSeriesInitialized(this);\r\n\t            each(this._seriesIndices, function (rawSeriesIndex) {\r\n\t                var series = this._componentsMap.series[rawSeriesIndex];\r\n\t                if (series.subType === subType) {\r\n\t                    cb.call(context, series, rawSeriesIndex);\r\n\t                }\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Iterate raw series before filtered of given type.\r\n\t         *\r\n\t         * @parma {string} subType\r\n\t         * @param {Function} cb\r\n\t         * @param {*} context\r\n\t         */\r\n\t        eachRawSeriesByType: function (subType, cb, context) {\r\n\t            return each(this.getSeriesByType(subType), cb, context);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/model/Series} seriesModel\r\n\t         */\r\n\t        isSeriesFiltered: function (seriesModel) {\r\n\t            assertSeriesInitialized(this);\r\n\t            return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Function} cb\r\n\t         * @param {*} context\r\n\t         */\r\n\t        filterSeries: function (cb, context) {\r\n\t            assertSeriesInitialized(this);\r\n\t            var filteredSeries = filter(\r\n\t                this._componentsMap.series, cb, context\r\n\t            );\r\n\t            this._seriesIndices = createSeriesIndices(filteredSeries);\r\n\t        },\r\n\r\n\t        restoreData: function () {\r\n\t            var componentsMap = this._componentsMap;\r\n\r\n\t            this._seriesIndices = createSeriesIndices(componentsMap.series);\r\n\r\n\t            var componentTypes = [];\r\n\t            each(componentsMap, function (components, componentType) {\r\n\t                componentTypes.push(componentType);\r\n\t            });\r\n\r\n\t            ComponentModel.topologicalTravel(\r\n\t                componentTypes,\r\n\t                ComponentModel.getAllClassMainTypes(),\r\n\t                function (componentType, dependencies) {\r\n\t                    each(componentsMap[componentType], function (component) {\r\n\t                        component.restoreData();\r\n\t                    });\r\n\t                }\r\n\t            );\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function mergeTheme(option, theme) {\r\n\t        zrUtil.each(theme, function (themeItem, name) {\r\n\t            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理\r\n\t            if (!ComponentModel.hasClass(name)) {\r\n\t                if (typeof themeItem === 'object') {\r\n\t                    option[name] = !option[name]\r\n\t                        ? zrUtil.clone(themeItem)\r\n\t                        : zrUtil.merge(option[name], themeItem, false);\r\n\t                }\r\n\t                else {\r\n\t                    if (option[name] == null) {\r\n\t                        option[name] = themeItem;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    function initBase(baseOption) {\r\n\t        baseOption = baseOption;\r\n\r\n\t        // Using OPTION_INNER_KEY to mark that this option can not be used outside,\r\n\t        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.\r\n\t        this.option = {};\r\n\t        this.option[OPTION_INNER_KEY] = 1;\r\n\r\n\t        /**\r\n\t         * @type {Object.<string, Array.<module:echarts/model/Model>>}\r\n\t         * @private\r\n\t         */\r\n\t        this._componentsMap = {};\r\n\r\n\t        /**\r\n\t         * Mapping between filtered series list and raw series list.\r\n\t         * key: filtered series indices, value: raw series indices.\r\n\t         * @type {Array.<nubmer>}\r\n\t         * @private\r\n\t         */\r\n\t        this._seriesIndices = null;\r\n\r\n\t        mergeTheme(baseOption, this._theme.option);\r\n\r\n\t        // TODO Needs clone when merging to the unexisted property\r\n\t        zrUtil.merge(baseOption, globalDefault, false);\r\n\r\n\t        this.mergeOption(baseOption);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     * @param {Array.<string>|string} types model types\r\n\t     * @return {Object} key: {string} type, value: {Array.<Object>} models\r\n\t     */\r\n\t    function getComponentsByTypes(componentsMap, types) {\r\n\t        if (!zrUtil.isArray(types)) {\r\n\t            types = types ? [types] : [];\r\n\t        }\r\n\r\n\t        var ret = {};\r\n\t        each(types, function (type) {\r\n\t            ret[type] = (componentsMap[type] || []).slice();\r\n\t        });\r\n\r\n\t        return ret;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function makeKeyInfo(mainType, mapResult) {\r\n\t        // We use this id to hash component models and view instances\r\n\t        // in echarts. id can be specified by user, or auto generated.\r\n\r\n\t        // The id generation rule ensures new view instance are able\r\n\t        // to mapped to old instance when setOption are called in\r\n\t        // no-merge mode. So we generate model id by name and plus\r\n\t        // type in view id.\r\n\r\n\t        // name can be duplicated among components, which is convenient\r\n\t        // to specify multi components (like series) by one name.\r\n\r\n\t        // Ensure that each id is distinct.\r\n\t        var idMap = {};\r\n\r\n\t        each(mapResult, function (item, index) {\r\n\t            var existCpt = item.exist;\r\n\t            existCpt && (idMap[existCpt.id] = item);\r\n\t        });\r\n\r\n\t        each(mapResult, function (item, index) {\r\n\t            var opt = item.option;\r\n\r\n\t            zrUtil.assert(\r\n\t                !opt || opt.id == null || !idMap[opt.id] || idMap[opt.id] === item,\r\n\t                'id duplicates: ' + (opt && opt.id)\r\n\t            );\r\n\r\n\t            opt && opt.id != null && (idMap[opt.id] = item);\r\n\r\n\t            // Complete subType\r\n\t            if (isObject(opt)) {\r\n\t                var subType = determineSubType(mainType, opt, item.exist);\r\n\t                item.keyInfo = {mainType: mainType, subType: subType};\r\n\t            }\r\n\t        });\r\n\r\n\t        // Make name and id.\r\n\t        each(mapResult, function (item, index) {\r\n\t            var existCpt = item.exist;\r\n\t            var opt = item.option;\r\n\t            var keyInfo = item.keyInfo;\r\n\r\n\t            if (!isObject(opt)) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            // name can be overwitten. Consider case: axis.name = '20km'.\r\n\t            // But id generated by name will not be changed, which affect\r\n\t            // only in that case: setOption with 'not merge mode' and view\r\n\t            // instance will be recreated, which can be accepted.\r\n\t            keyInfo.name = opt.name != null\r\n\t                ? opt.name + ''\r\n\t                : existCpt\r\n\t                ? existCpt.name\r\n\t                : '\\0-';\r\n\r\n\t            if (existCpt) {\r\n\t                keyInfo.id = existCpt.id;\r\n\t            }\r\n\t            else if (opt.id != null) {\r\n\t                keyInfo.id = opt.id + '';\r\n\t            }\r\n\t            else {\r\n\t                // Consider this situatoin:\r\n\t                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]\r\n\t                //  optionB [{..}, {name: 'a'}, {name: 'a'}]\r\n\t                // Series with the same name between optionA and optionB\r\n\t                // should be mapped.\r\n\t                var idNum = 0;\r\n\t                do {\r\n\t                    keyInfo.id = '\\0' + keyInfo.name + '\\0' + idNum++;\r\n\t                }\r\n\t                while (idMap[keyInfo.id]);\r\n\t            }\r\n\r\n\t            idMap[keyInfo.id] = item;\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function determineSubType(mainType, newCptOption, existComponent) {\r\n\t        var subType = newCptOption.type\r\n\t            ? newCptOption.type\r\n\t            : existComponent\r\n\t            ? existComponent.subType\r\n\t            // Use determineSubType only when there is no existComponent.\r\n\t            : ComponentModel.determineSubType(mainType, newCptOption);\r\n\r\n\t        // tooltip, markline, markpoint may always has no subType\r\n\t        return subType;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function createSeriesIndices(seriesModels) {\r\n\t        return map(seriesModels, function (series) {\r\n\t            return series.componentIndex;\r\n\t        }) || [];\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function filterBySubType(components, condition) {\r\n\t        // Using hasOwnProperty for restrict. Consider\r\n\t        // subType is undefined in user payload.\r\n\t        return condition.hasOwnProperty('subType')\r\n\t            ? filter(components, function (cpt) {\r\n\t                return cpt.subType === condition.subType;\r\n\t            })\r\n\t            : components;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function assertSeriesInitialized(ecModel) {\r\n\t        // Components that use _seriesIndices should depends on series component,\r\n\t        // which make sure that their initialization is after series.\r\n\t        if (true) {\r\n\t            if (!ecModel._seriesIndices) {\r\n\t                throw new Error('Series has not been initialized yet.');\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    zrUtil.mixin(GlobalModel, __webpack_require__(24));\r\n\r\n\t    module.exports = GlobalModel;\r\n\r\n\r\n/***/ },\r\n/* 4 */\r\n/***/ function(module, exports) {\r\n\r\n\t/**\r\n\t * @module zrender/core/util\r\n\t */\r\n\r\n\r\n\t    // 用于处理merge时无法遍历Date等对象的问题\r\n\t    var BUILTIN_OBJECT = {\r\n\t        '[object Function]': 1,\r\n\t        '[object RegExp]': 1,\r\n\t        '[object Date]': 1,\r\n\t        '[object Error]': 1,\r\n\t        '[object CanvasGradient]': 1,\r\n\t        '[object CanvasPattern]': 1,\r\n\t        // In node-canvas Image can be Canvas.Image\r\n\t        '[object Image]': 1\r\n\t    };\r\n\r\n\t    var objToString = Object.prototype.toString;\r\n\r\n\t    var arrayProto = Array.prototype;\r\n\t    var nativeForEach = arrayProto.forEach;\r\n\t    var nativeFilter = arrayProto.filter;\r\n\t    var nativeSlice = arrayProto.slice;\r\n\t    var nativeMap = arrayProto.map;\r\n\t    var nativeReduce = arrayProto.reduce;\r\n\r\n\t    /**\r\n\t     * @param {*} source\r\n\t     * @return {*} 拷贝后的新对象\r\n\t     */\r\n\t    function clone(source) {\r\n\t        if (typeof source == 'object' && source !== null) {\r\n\t            var result = source;\r\n\t            if (source instanceof Array) {\r\n\t                result = [];\r\n\t                for (var i = 0, len = source.length; i < len; i++) {\r\n\t                    result[i] = clone(source[i]);\r\n\t                }\r\n\t            }\r\n\t            else if (\r\n\t                !isBuildInObject(source)\r\n\t                // 是否为 dom 对象\r\n\t                && !isDom(source)\r\n\t            ) {\r\n\t                result = {};\r\n\t                for (var key in source) {\r\n\t                    if (source.hasOwnProperty(key)) {\r\n\t                        result[key] = clone(source[key]);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            return result;\r\n\t        }\r\n\r\n\t        return source;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {*} target\r\n\t     * @param {*} source\r\n\t     * @param {boolean} [overwrite=false]\r\n\t     */\r\n\t    function merge(target, source, overwrite) {\r\n\t        // We should escapse that source is string\r\n\t        // and enter for ... in ...\r\n\t        if (!isObject(source) || !isObject(target)) {\r\n\t            return overwrite ? clone(source) : target;\r\n\t        }\r\n\r\n\t        for (var key in source) {\r\n\t            if (source.hasOwnProperty(key)) {\r\n\t                var targetProp = target[key];\r\n\t                var sourceProp = source[key];\r\n\r\n\t                if (isObject(sourceProp)\r\n\t                    && isObject(targetProp)\r\n\t                    && !isArray(sourceProp)\r\n\t                    && !isArray(targetProp)\r\n\t                    && !isDom(sourceProp)\r\n\t                    && !isDom(targetProp)\r\n\t                    && !isBuildInObject(sourceProp)\r\n\t                    && !isBuildInObject(targetProp)\r\n\t                ) {\r\n\t                    // 如果需要递归覆盖，就递归调用merge\r\n\t                    merge(targetProp, sourceProp, overwrite);\r\n\t                }\r\n\t                else if (overwrite || !(key in target)) {\r\n\t                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况\r\n\t                    // NOTE，在 target[key] 不存在的时候也是直接覆盖\r\n\t                    target[key] = clone(source[key], true);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        return target;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {Array} targetAndSources The first item is target, and the rests are source.\r\n\t     * @param {boolean} [overwrite=false]\r\n\t     * @return {*} target\r\n\t     */\r\n\t    function mergeAll(targetAndSources, overwrite) {\r\n\t        var result = targetAndSources[0];\r\n\t        for (var i = 1, len = targetAndSources.length; i < len; i++) {\r\n\t            result = merge(result, targetAndSources[i], overwrite);\r\n\t        }\r\n\t        return result;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {*} target\r\n\t     * @param {*} source\r\n\t     * @memberOf module:zrender/core/util\r\n\t     */\r\n\t    function extend(target, source) {\r\n\t        for (var key in source) {\r\n\t            if (source.hasOwnProperty(key)) {\r\n\t                target[key] = source[key];\r\n\t            }\r\n\t        }\r\n\t        return target;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {*} target\r\n\t     * @param {*} source\r\n\t     * @param {boolen} [overlay=false]\r\n\t     * @memberOf module:zrender/core/util\r\n\t     */\r\n\t    function defaults(target, source, overlay) {\r\n\t        for (var key in source) {\r\n\t            if (source.hasOwnProperty(key)\r\n\t                && (overlay ? source[key] != null : target[key] == null)\r\n\t            ) {\r\n\t                target[key] = source[key];\r\n\t            }\r\n\t        }\r\n\t        return target;\r\n\t    }\r\n\r\n\t    function createCanvas() {\r\n\t        return document.createElement('canvas');\r\n\t    }\r\n\t    // FIXME\r\n\t    var _ctx;\r\n\t    function getContext() {\r\n\t        if (!_ctx) {\r\n\t            // Use util.createCanvas instead of createCanvas\r\n\t            // because createCanvas may be overwritten in different environment\r\n\t            _ctx = util.createCanvas().getContext('2d');\r\n\t        }\r\n\t        return _ctx;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 查询数组中元素的index\r\n\t     * @memberOf module:zrender/core/util\r\n\t     */\r\n\t    function indexOf(array, value) {\r\n\t        if (array) {\r\n\t            if (array.indexOf) {\r\n\t                return array.indexOf(value);\r\n\t            }\r\n\t            for (var i = 0, len = array.length; i < len; i++) {\r\n\t                if (array[i] === value) {\r\n\t                    return i;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return -1;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 构造类继承关系\r\n\t     *\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {Function} clazz 源类\r\n\t     * @param {Function} baseClazz 基类\r\n\t     */\r\n\t    function inherits(clazz, baseClazz) {\r\n\t        var clazzPrototype = clazz.prototype;\r\n\t        function F() {}\r\n\t        F.prototype = baseClazz.prototype;\r\n\t        clazz.prototype = new F();\r\n\r\n\t        for (var prop in clazzPrototype) {\r\n\t            clazz.prototype[prop] = clazzPrototype[prop];\r\n\t        }\r\n\t        clazz.prototype.constructor = clazz;\r\n\t        clazz.superClass = baseClazz;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {Object|Function} target\r\n\t     * @param {Object|Function} sorce\r\n\t     * @param {boolean} overlay\r\n\t     */\r\n\t    function mixin(target, source, overlay) {\r\n\t        target = 'prototype' in target ? target.prototype : target;\r\n\t        source = 'prototype' in source ? source.prototype : source;\r\n\r\n\t        defaults(target, source, overlay);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {Array|TypedArray} data\r\n\t     */\r\n\t    function isArrayLike(data) {\r\n\t        if (! data) {\r\n\t            return;\r\n\t        }\r\n\t        if (typeof data == 'string') {\r\n\t            return false;\r\n\t        }\r\n\t        return typeof data.length == 'number';\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 数组或对象遍历\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {Object|Array} obj\r\n\t     * @param {Function} cb\r\n\t     * @param {*} [context]\r\n\t     */\r\n\t    function each(obj, cb, context) {\r\n\t        if (!(obj && cb)) {\r\n\t            return;\r\n\t        }\r\n\t        if (obj.forEach && obj.forEach === nativeForEach) {\r\n\t            obj.forEach(cb, context);\r\n\t        }\r\n\t        else if (obj.length === +obj.length) {\r\n\t            for (var i = 0, len = obj.length; i < len; i++) {\r\n\t                cb.call(context, obj[i], i, obj);\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            for (var key in obj) {\r\n\t                if (obj.hasOwnProperty(key)) {\r\n\t                    cb.call(context, obj[key], key, obj);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 数组映射\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {Array} obj\r\n\t     * @param {Function} cb\r\n\t     * @param {*} [context]\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function map(obj, cb, context) {\r\n\t        if (!(obj && cb)) {\r\n\t            return;\r\n\t        }\r\n\t        if (obj.map && obj.map === nativeMap) {\r\n\t            return obj.map(cb, context);\r\n\t        }\r\n\t        else {\r\n\t            var result = [];\r\n\t            for (var i = 0, len = obj.length; i < len; i++) {\r\n\t                result.push(cb.call(context, obj[i], i, obj));\r\n\t            }\r\n\t            return result;\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {Array} obj\r\n\t     * @param {Function} cb\r\n\t     * @param {Object} [memo]\r\n\t     * @param {*} [context]\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function reduce(obj, cb, memo, context) {\r\n\t        if (!(obj && cb)) {\r\n\t            return;\r\n\t        }\r\n\t        if (obj.reduce && obj.reduce === nativeReduce) {\r\n\t            return obj.reduce(cb, memo, context);\r\n\t        }\r\n\t        else {\r\n\t            for (var i = 0, len = obj.length; i < len; i++) {\r\n\t                memo = cb.call(context, memo, obj[i], i, obj);\r\n\t            }\r\n\t            return memo;\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 数组过滤\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {Array} obj\r\n\t     * @param {Function} cb\r\n\t     * @param {*} [context]\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function filter(obj, cb, context) {\r\n\t        if (!(obj && cb)) {\r\n\t            return;\r\n\t        }\r\n\t        if (obj.filter && obj.filter === nativeFilter) {\r\n\t            return obj.filter(cb, context);\r\n\t        }\r\n\t        else {\r\n\t            var result = [];\r\n\t            for (var i = 0, len = obj.length; i < len; i++) {\r\n\t                if (cb.call(context, obj[i], i, obj)) {\r\n\t                    result.push(obj[i]);\r\n\t                }\r\n\t            }\r\n\t            return result;\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 数组项查找\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {Array} obj\r\n\t     * @param {Function} cb\r\n\t     * @param {*} [context]\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function find(obj, cb, context) {\r\n\t        if (!(obj && cb)) {\r\n\t            return;\r\n\t        }\r\n\t        for (var i = 0, len = obj.length; i < len; i++) {\r\n\t            if (cb.call(context, obj[i], i, obj)) {\r\n\t                return obj[i];\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {Function} func\r\n\t     * @param {*} context\r\n\t     * @return {Function}\r\n\t     */\r\n\t    function bind(func, context) {\r\n\t        var args = nativeSlice.call(arguments, 2);\r\n\t        return function () {\r\n\t            return func.apply(context, args.concat(nativeSlice.call(arguments)));\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {Function} func\r\n\t     * @return {Function}\r\n\t     */\r\n\t    function curry(func) {\r\n\t        var args = nativeSlice.call(arguments, 1);\r\n\t        return function () {\r\n\t            return func.apply(this, args.concat(nativeSlice.call(arguments)));\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {*} value\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isArray(value) {\r\n\t        return objToString.call(value) === '[object Array]';\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {*} value\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isFunction(value) {\r\n\t        return typeof value === 'function';\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {*} value\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isString(value) {\r\n\t        return objToString.call(value) === '[object String]';\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {*} value\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isObject(value) {\r\n\t        // Avoid a V8 JIT bug in Chrome 19-20.\r\n\t        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\r\n\t        var type = typeof value;\r\n\t        return type === 'function' || (!!value && type == 'object');\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {*} value\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isBuildInObject(value) {\r\n\t        return !!BUILTIN_OBJECT[objToString.call(value)];\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {*} value\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isDom(value) {\r\n\t        return value && value.nodeType === 1\r\n\t               && typeof(value.nodeName) == 'string';\r\n\t    }\r\n\r\n\t    /**\r\n\t     * If value1 is not null, then return value1, otherwise judget rest of values.\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @return {*} Final value\r\n\t     */\r\n\t    function retrieve(values) {\r\n\t        for (var i = 0, len = arguments.length; i < len; i++) {\r\n\t            if (arguments[i] != null) {\r\n\t                return arguments[i];\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {Array} arr\r\n\t     * @param {number} startIndex\r\n\t     * @param {number} endIndex\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function slice() {\r\n\t        return Function.call.apply(nativeSlice, arguments);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {boolean} condition\r\n\t     * @param {string} message\r\n\t     */\r\n\t    function assert(condition, message) {\r\n\t        if (!condition) {\r\n\t            throw new Error(message);\r\n\t        }\r\n\t    }\r\n\r\n\t    var util = {\r\n\t        inherits: inherits,\r\n\t        mixin: mixin,\r\n\t        clone: clone,\r\n\t        merge: merge,\r\n\t        mergeAll: mergeAll,\r\n\t        extend: extend,\r\n\t        defaults: defaults,\r\n\t        getContext: getContext,\r\n\t        createCanvas: createCanvas,\r\n\t        indexOf: indexOf,\r\n\t        slice: slice,\r\n\t        find: find,\r\n\t        isArrayLike: isArrayLike,\r\n\t        each: each,\r\n\t        map: map,\r\n\t        reduce: reduce,\r\n\t        filter: filter,\r\n\t        bind: bind,\r\n\t        curry: curry,\r\n\t        isArray: isArray,\r\n\t        isString: isString,\r\n\t        isObject: isObject,\r\n\t        isFunction: isFunction,\r\n\t        isBuildInObject: isBuildInObject,\r\n\t        isDom: isDom,\r\n\t        retrieve: retrieve,\r\n\t        assert: assert,\r\n\t        noop: function () {}\r\n\t    };\r\n\t    module.exports = util;\r\n\r\n\r\n\r\n/***/ },\r\n/* 5 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var nubmerUtil = __webpack_require__(7);\r\n\t    var Model = __webpack_require__(12);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var modelUtil = {};\r\n\r\n\t    /**\r\n\t     * If value is not array, then translate it to array.\r\n\t     * @param  {*} value\r\n\t     * @return {Array} [value] or value\r\n\t     */\r\n\t    modelUtil.normalizeToArray = function (value) {\r\n\t        return value instanceof Array\r\n\t            ? value\r\n\t            : value == null\r\n\t            ? []\r\n\t            : [value];\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Sync default option between normal and emphasis like `position` and `show`\r\n\t     * In case some one will write code like\r\n\t     *     label: {\r\n\t     *         normal: {\r\n\t     *             show: false,\r\n\t     *             position: 'outside',\r\n\t     *             textStyle: {\r\n\t     *                 fontSize: 18\r\n\t     *             }\r\n\t     *         },\r\n\t     *         emphasis: {\r\n\t     *             show: true\r\n\t     *         }\r\n\t     *     }\r\n\t     * @param {Object} opt\r\n\t     * @param {Array.<string>} subOpts\r\n\t     */\r\n\t     modelUtil.defaultEmphasis = function (opt, subOpts) {\r\n\t        if (opt) {\r\n\t            var emphasisOpt = opt.emphasis = opt.emphasis || {};\r\n\t            var normalOpt = opt.normal = opt.normal || {};\r\n\r\n\t            // Default emphasis option from normal\r\n\t            zrUtil.each(subOpts, function (subOptName) {\r\n\t                var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);\r\n\t                if (val != null) {\r\n\t                    emphasisOpt[subOptName] = val;\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t    };\r\n\r\n\t    modelUtil.LABEL_OPTIONS = ['position', 'show', 'textStyle', 'distance', 'formatter'];\r\n\r\n\t    /**\r\n\t     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\r\n\t     * This helper method retieves value from data.\r\n\t     * @param {string|number|Date|Array|Object} dataItem\r\n\t     * @return {number|string|Date|Array.<number|string|Date>}\r\n\t     */\r\n\t    modelUtil.getDataItemValue = function (dataItem) {\r\n\t        // Performance sensitive.\r\n\t        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\r\n\t     * This helper method determine if dataItem has extra option besides value\r\n\t     * @param {string|number|Date|Array|Object} dataItem\r\n\t     */\r\n\t    modelUtil.isDataItemOption = function (dataItem) {\r\n\t        return zrUtil.isObject(dataItem)\r\n\t            && !(dataItem instanceof Array);\r\n\t            // // markLine data can be array\r\n\t            // && !(dataItem[0] && zrUtil.isObject(dataItem[0]) && !(dataItem[0] instanceof Array));\r\n\t    };\r\n\r\n\t    /**\r\n\t     * This helper method convert value in data.\r\n\t     * @param {string|number|Date} value\r\n\t     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.\r\n\t     */\r\n\t    modelUtil.converDataValue = function (value, dimInfo) {\r\n\t        // Performance sensitive.\r\n\t        var dimType = dimInfo && dimInfo.type;\r\n\t        if (dimType === 'ordinal') {\r\n\t            return value;\r\n\t        }\r\n\r\n\t        if (dimType === 'time' && !isFinite(value) && value != null && value !== '-') {\r\n\t            value = +nubmerUtil.parseDate(value);\r\n\t        }\r\n\r\n\t        // dimType defaults 'number'.\r\n\t        // If dimType is not ordinal and value is null or undefined or NaN or '-',\r\n\t        // parse to NaN.\r\n\t        return (value == null || value === '')\r\n\t            ? NaN : +value; // If string (like '-'), using '+' parse to NaN\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.\r\n\t     * @param {module:echarts/data/List} data\r\n\t     * @param {Object} opt\r\n\t     * @param {string} [opt.seriesIndex]\r\n\t     * @param {Object} [opt.name]\r\n\t     * @param {Object} [opt.mainType]\r\n\t     * @param {Object} [opt.subType]\r\n\t     */\r\n\t    modelUtil.createDataFormatModel = function (data, opt) {\r\n\t        var model = new Model();\r\n\t        zrUtil.mixin(model, modelUtil.dataFormatMixin);\r\n\t        model.seriesIndex = opt.seriesIndex;\r\n\t        model.name = opt.name || '';\r\n\t        model.mainType = opt.mainType;\r\n\t        model.subType = opt.subType;\r\n\r\n\t        model.getData = function () {\r\n\t            return data;\r\n\t        };\r\n\t        return model;\r\n\t    };\r\n\r\n\t    // PENDING A little ugly\r\n\t    modelUtil.dataFormatMixin = {\r\n\t        /**\r\n\t         * Get params for formatter\r\n\t         * @param {number} dataIndex\r\n\t         * @param {string} [dataType]\r\n\t         * @return {Object}\r\n\t         */\r\n\t        getDataParams: function (dataIndex, dataType) {\r\n\t            var data = this.getData(dataType);\r\n\r\n\t            var seriesIndex = this.seriesIndex;\r\n\t            var seriesName = this.name;\r\n\r\n\t            var rawValue = this.getRawValue(dataIndex, dataType);\r\n\t            var rawDataIndex = data.getRawIndex(dataIndex);\r\n\t            var name = data.getName(dataIndex, true);\r\n\t            var itemOpt = data.getRawDataItem(dataIndex);\r\n\r\n\t            return {\r\n\t                componentType: this.mainType,\r\n\t                componentSubType: this.subType,\r\n\t                seriesType: this.mainType === 'series' ? this.subType : null,\r\n\t                seriesIndex: seriesIndex,\r\n\t                seriesName: seriesName,\r\n\t                name: name,\r\n\t                dataIndex: rawDataIndex,\r\n\t                data: itemOpt,\r\n\t                dataType: dataType,\r\n\t                value: rawValue,\r\n\t                color: data.getItemVisual(dataIndex, 'color'),\r\n\r\n\t                // Param name list for mapping `a`, `b`, `c`, `d`, `e`\r\n\t                $vars: ['seriesName', 'name', 'value']\r\n\t            };\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Format label\r\n\t         * @param {number} dataIndex\r\n\t         * @param {string} [status='normal'] 'normal' or 'emphasis'\r\n\t         * @param {string} [dataType]\r\n\t         * @param {number} [dimIndex]\r\n\t         * @return {string}\r\n\t         */\r\n\t        getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {\r\n\t            status = status || 'normal';\r\n\t            var data = this.getData(dataType);\r\n\t            var itemModel = data.getItemModel(dataIndex);\r\n\r\n\t            var params = this.getDataParams(dataIndex, dataType);\r\n\t            if (dimIndex != null && (params.value instanceof Array)) {\r\n\t                params.value = params.value[dimIndex];\r\n\t            }\r\n\r\n\t            var formatter = itemModel.get(['label', status, 'formatter']);\r\n\r\n\t            if (typeof formatter === 'function') {\r\n\t                params.status = status;\r\n\t                return formatter(params);\r\n\t            }\r\n\t            else if (typeof formatter === 'string') {\r\n\t                return formatUtil.formatTpl(formatter, params);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get raw value in option\r\n\t         * @param {number} idx\r\n\t         * @param {string} [dataType]\r\n\t         * @return {Object}\r\n\t         */\r\n\t        getRawValue: function (idx, dataType) {\r\n\t            var data = this.getData(dataType);\r\n\t            var dataItem = data.getRawDataItem(idx);\r\n\t            if (dataItem != null) {\r\n\t                return (zrUtil.isObject(dataItem) && !(dataItem instanceof Array))\r\n\t                    ? dataItem.value : dataItem;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Should be implemented.\r\n\t         * @param {number} dataIndex\r\n\t         * @param {boolean} [multipleSeries=false]\r\n\t         * @param {number} [dataType]\r\n\t         * @return {string} tooltip string\r\n\t         */\r\n\t        formatTooltip: zrUtil.noop\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Mapping to exists for merge.\r\n\t     *\r\n\t     * @public\r\n\t     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists\r\n\t     * @param {Object|Array.<Object>} newCptOptions\r\n\t     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\r\n\t     *                          which order is the same as exists.\r\n\t     */\r\n\t    modelUtil.mappingToExists = function (exists, newCptOptions) {\r\n\t        // Mapping by the order by original option (but not order of\r\n\t        // new option) in merge mode. Because we should ensure\r\n\t        // some specified index (like xAxisIndex) is consistent with\r\n\t        // original option, which is easy to understand, espatially in\r\n\t        // media query. And in most case, merge option is used to\r\n\t        // update partial option but not be expected to change order.\r\n\t        newCptOptions = (newCptOptions || []).slice();\r\n\r\n\t        var result = zrUtil.map(exists || [], function (obj, index) {\r\n\t            return {exist: obj};\r\n\t        });\r\n\r\n\t        // Mapping by id or name if specified.\r\n\t        zrUtil.each(newCptOptions, function (cptOption, index) {\r\n\t            if (!zrUtil.isObject(cptOption)) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            // id has highest priority.\r\n\t            for (var i = 0; i < result.length; i++) {\r\n\t                if (!result[i].option // Consider name: two map to one.\r\n\t                    && cptOption.id != null\r\n\t                    && result[i].exist.id === cptOption.id + ''\r\n\t                ) {\r\n\t                    result[i].option = cptOption;\r\n\t                    newCptOptions[index] = null;\r\n\t                    return;\r\n\t                }\r\n\t            }\r\n\r\n\t            for (var i = 0; i < result.length; i++) {\r\n\t                var exist = result[i].exist;\r\n\t                if (!result[i].option // Consider name: two map to one.\r\n\t                    // Can not match when both ids exist but different.\r\n\t                    && (exist.id == null || cptOption.id == null)\r\n\t                    && cptOption.name != null\r\n\t                    && !modelUtil.isIdInner(cptOption)\r\n\t                    && !modelUtil.isIdInner(exist)\r\n\t                    && exist.name === cptOption.name + ''\r\n\t                ) {\r\n\t                    result[i].option = cptOption;\r\n\t                    newCptOptions[index] = null;\r\n\t                    return;\r\n\t                }\r\n\t            }\r\n\t        });\r\n\r\n\t        // Otherwise mapping by index.\r\n\t        zrUtil.each(newCptOptions, function (cptOption, index) {\r\n\t            if (!zrUtil.isObject(cptOption)) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var i = 0;\r\n\t            for (; i < result.length; i++) {\r\n\t                var exist = result[i].exist;\r\n\t                if (!result[i].option\r\n\t                    && !modelUtil.isIdInner(exist)\r\n\t                    // Caution:\r\n\t                    // Do not overwrite id. But name can be overwritten,\r\n\t                    // because axis use name as 'show label text'.\r\n\t                    // 'exist' always has id and name and we dont\r\n\t                    // need to check it.\r\n\t                    && cptOption.id == null\r\n\t                ) {\r\n\t                    result[i].option = cptOption;\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (i >= result.length) {\r\n\t                result.push({option: cptOption});\r\n\t            }\r\n\t        });\r\n\r\n\t        return result;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @public\r\n\t     * @param {Object} cptOption\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    modelUtil.isIdInner = function (cptOption) {\r\n\t        return zrUtil.isObject(cptOption)\r\n\t            && cptOption.id\r\n\t            && (cptOption.id + '').indexOf('\\0_ec_\\0') === 0;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * A helper for removing duplicate items between batchA and batchB,\r\n\t     * and in themselves, and categorize by series.\r\n\t     *\r\n\t     * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\r\n\t     * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\r\n\t     * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]\r\n\t     */\r\n\t    modelUtil.compressBatches = function (batchA, batchB) {\r\n\t        var mapA = {};\r\n\t        var mapB = {};\r\n\r\n\t        makeMap(batchA || [], mapA);\r\n\t        makeMap(batchB || [], mapB, mapA);\r\n\r\n\t        return [mapToArray(mapA), mapToArray(mapB)];\r\n\r\n\t        function makeMap(sourceBatch, map, otherMap) {\r\n\t            for (var i = 0, len = sourceBatch.length; i < len; i++) {\r\n\t                var seriesId = sourceBatch[i].seriesId;\r\n\t                var dataIndices = modelUtil.normalizeToArray(sourceBatch[i].dataIndex);\r\n\t                var otherDataIndices = otherMap && otherMap[seriesId];\r\n\r\n\t                for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {\r\n\t                    var dataIndex = dataIndices[j];\r\n\r\n\t                    if (otherDataIndices && otherDataIndices[dataIndex]) {\r\n\t                        otherDataIndices[dataIndex] = null;\r\n\t                    }\r\n\t                    else {\r\n\t                        (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        function mapToArray(map, isData) {\r\n\t            var result = [];\r\n\t            for (var i in map) {\r\n\t                if (map.hasOwnProperty(i) && map[i] != null) {\r\n\t                    if (isData) {\r\n\t                        result.push(+i);\r\n\t                    }\r\n\t                    else {\r\n\t                        var dataIndices = mapToArray(map[i], true);\r\n\t                        dataIndices.length && result.push({seriesId: i, dataIndex: dataIndices});\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            return result;\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {module:echarts/data/List} data\r\n\t     * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name\r\n\t     *                         each of which can be Array or primary type.\r\n\t     * @return {number|Array.<number>} dataIndex If not found, return undefined/null.\r\n\t     */\r\n\t    modelUtil.queryDataIndex = function (data, payload) {\r\n\t        if (payload.dataIndexInside != null) {\r\n\t            return payload.dataIndexInside;\r\n\t        }\r\n\t        else if (payload.dataIndex != null) {\r\n\t            return zrUtil.isArray(payload.dataIndex)\r\n\t                ? zrUtil.map(payload.dataIndex, function (value) {\r\n\t                    return data.indexOfRawIndex(value);\r\n\t                })\r\n\t                : data.indexOfRawIndex(payload.dataIndex);\r\n\t        }\r\n\t        else if (payload.name != null) {\r\n\t            return zrUtil.isArray(payload.name)\r\n\t                ? zrUtil.map(payload.name, function (value) {\r\n\t                    return data.indexOfName(value);\r\n\t                })\r\n\t                : data.indexOfName(payload.name);\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {module:echarts/model/Global} ecModel\r\n\t     * @param {string|Object} finder\r\n\t     *        If string, e.g., 'geo', means {geoIndex: 0}.\r\n\t     *        If Object, could contain some of these properties below:\r\n\t     *        {\r\n\t     *            seriesIndex, seriesId, seriesName,\r\n\t     *            geoIndex, geoId, goeName,\r\n\t     *            bmapIndex, bmapId, bmapName,\r\n\t     *            xAxisIndex, xAxisId, xAxisName,\r\n\t     *            yAxisIndex, yAxisId, yAxisName,\r\n\t     *            gridIndex, gridId, gridName,\r\n\t     *            ... (can be extended)\r\n\t     *        }\r\n\t     *        Each properties can be number|string|Array.<number>|Array.<string>\r\n\t     *        For example, a finder could be\r\n\t     *        {\r\n\t     *            seriesIndex: 3,\r\n\t     *            geoId: ['aa', 'cc'],\r\n\t     *            gridName: ['xx', 'rr']\r\n\t     *        }\r\n\t     * @param {Object} [opt]\r\n\t     * @param {string} [opt.defaultMainType]\r\n\t     * @return {Object} result like:\r\n\t     *        {\r\n\t     *            seriesModels: [seriesModel1, seriesModel2],\r\n\t     *            seriesModel: seriesModel1, // The first model\r\n\t     *            geoModels: [geoModel1, geoModel2],\r\n\t     *            geoModel: geoModel1, // The first model\r\n\t     *            ...\r\n\t     *        }\r\n\t     */\r\n\t    modelUtil.parseFinder = function (ecModel, finder, opt) {\r\n\t        if (zrUtil.isString(finder)) {\r\n\t            var obj = {};\r\n\t            obj[finder + 'Index'] = 0;\r\n\t            finder = obj;\r\n\t        }\r\n\r\n\t        var defaultMainType = opt && opt.defaultMainType;\r\n\t        if (defaultMainType\r\n\t            && !has(finder, defaultMainType + 'Index')\r\n\t            && !has(finder, defaultMainType + 'Id')\r\n\t            && !has(finder, defaultMainType + 'Name')\r\n\t        ) {\r\n\t            finder[defaultMainType + 'Index'] = 0;\r\n\t        }\r\n\r\n\t        var result = {};\r\n\r\n\t        zrUtil.each(finder, function (value, key) {\r\n\t            var value = finder[key];\r\n\r\n\t            // Exclude 'dataIndex' and other illgal keys.\r\n\t            if (key === 'dataIndex' || key === 'dataIndexInside') {\r\n\t                result[key] = value;\r\n\t                return;\r\n\t            }\r\n\r\n\t            var parsedKey = key.match(/^(\\w+)(Index|Id|Name)$/) || [];\r\n\t            var mainType = parsedKey[1];\r\n\t            var queryType = parsedKey[2];\r\n\r\n\t            if (!mainType || !queryType) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var queryParam = {mainType: mainType};\r\n\t            queryParam[queryType.toLowerCase()] = value;\r\n\t            var models = ecModel.queryComponents(queryParam);\r\n\t            result[mainType + 'Models'] = models;\r\n\t            result[mainType + 'Model'] = models[0];\r\n\t        });\r\n\r\n\t        return result;\r\n\t    };\r\n\r\n\t    function has(obj, prop) {\r\n\t        return obj && obj.hasOwnProperty(prop);\r\n\t    }\r\n\r\n\t    module.exports = modelUtil;\r\n\r\n\r\n/***/ },\r\n/* 6 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var textContain = __webpack_require__(8);\r\n\r\n\t    var formatUtil = {};\r\n\t    /**\r\n\t     * 每三位默认加,格式化\r\n\t     * @type {string|number} x\r\n\t     */\r\n\t    formatUtil.addCommas = function (x) {\r\n\t        if (isNaN(x)) {\r\n\t            return '-';\r\n\t        }\r\n\t        x = (x + '').split('.');\r\n\t        return x[0].replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g,'$1,')\r\n\t               + (x.length > 1 ? ('.' + x[1]) : '');\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {string} str\r\n\t     * @return {string} str\r\n\t     */\r\n\t    formatUtil.toCamelCase = function (str) {\r\n\t        return str.toLowerCase().replace(/-(.)/g, function(match, group1) {\r\n\t            return group1.toUpperCase();\r\n\t        });\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Normalize css liked array configuration\r\n\t     * e.g.\r\n\t     *  3 => [3, 3, 3, 3]\r\n\t     *  [4, 2] => [4, 2, 4, 2]\r\n\t     *  [4, 3, 2] => [4, 3, 2, 3]\r\n\t     * @param {number|Array.<number>} val\r\n\t     */\r\n\t    formatUtil.normalizeCssArray = function (val) {\r\n\t        var len = val.length;\r\n\t        if (typeof (val) === 'number') {\r\n\t            return [val, val, val, val];\r\n\t        }\r\n\t        else if (len === 2) {\r\n\t            // vertical | horizontal\r\n\t            return [val[0], val[1], val[0], val[1]];\r\n\t        }\r\n\t        else if (len === 3) {\r\n\t            // top | horizontal | bottom\r\n\t            return [val[0], val[1], val[2], val[1]];\r\n\t        }\r\n\t        return val;\r\n\t    };\r\n\r\n\t    formatUtil.encodeHTML = function (source) {\r\n\t        return String(source)\r\n\t            .replace(/&/g, '&amp;')\r\n\t            .replace(/</g, '&lt;')\r\n\t            .replace(/>/g, '&gt;')\r\n\t            .replace(/\"/g, '&quot;')\r\n\t            .replace(/'/g, '&#39;');\r\n\t    };\r\n\r\n\t    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\r\n\r\n\t    var wrapVar = function (varName, seriesIdx) {\r\n\t        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Template formatter\r\n\t     * @param  {string} tpl\r\n\t     * @param  {Array.<Object>|Object} paramsList\r\n\t     * @return {string}\r\n\t     */\r\n\t    formatUtil.formatTpl = function (tpl, paramsList) {\r\n\t        if (!zrUtil.isArray(paramsList)) {\r\n\t            paramsList = [paramsList];\r\n\t        }\r\n\t        var seriesLen = paramsList.length;\r\n\t        if (!seriesLen) {\r\n\t            return '';\r\n\t        }\r\n\r\n\t        var $vars = paramsList[0].$vars || [];\r\n\t        for (var i = 0; i < $vars.length; i++) {\r\n\t            var alias = TPL_VAR_ALIAS[i];\r\n\t            tpl = tpl.replace(wrapVar(alias),  wrapVar(alias, 0));\r\n\t        }\r\n\t        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\r\n\t            for (var k = 0; k < $vars.length; k++) {\r\n\t                tpl = tpl.replace(\r\n\t                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\r\n\t                    paramsList[seriesIdx][$vars[k]]\r\n\t                );\r\n\t            }\r\n\t        }\r\n\r\n\t        return tpl;\r\n\t    };\r\n\r\n\r\n\t    /**\r\n\t     * @param {string} str\r\n\t     * @return {string}\r\n\t     * @inner\r\n\t     */\r\n\t    var s2d = function (str) {\r\n\t        return str < 10 ? ('0' + str) : str;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * ISO Date format\r\n\t     * @param {string} tpl\r\n\t     * @param {number} value\r\n\t     * @inner\r\n\t     */\r\n\t    formatUtil.formatTime = function (tpl, value) {\r\n\t        if (tpl === 'week'\r\n\t            || tpl === 'month'\r\n\t            || tpl === 'quarter'\r\n\t            || tpl === 'half-year'\r\n\t            || tpl === 'year'\r\n\t        ) {\r\n\t            tpl = 'MM-dd\\nyyyy';\r\n\t        }\r\n\r\n\t        var date = numberUtil.parseDate(value);\r\n\t        var y = date.getFullYear();\r\n\t        var M = date.getMonth() + 1;\r\n\t        var d = date.getDate();\r\n\t        var h = date.getHours();\r\n\t        var m = date.getMinutes();\r\n\t        var s = date.getSeconds();\r\n\r\n\t        tpl = tpl.replace('MM', s2d(M))\r\n\t            .toLowerCase()\r\n\t            .replace('yyyy', y)\r\n\t            .replace('yy', y % 100)\r\n\t            .replace('dd', s2d(d))\r\n\t            .replace('d', d)\r\n\t            .replace('hh', s2d(h))\r\n\t            .replace('h', h)\r\n\t            .replace('mm', s2d(m))\r\n\t            .replace('m', m)\r\n\t            .replace('ss', s2d(s))\r\n\t            .replace('s', s);\r\n\r\n\t        return tpl;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Capital first\r\n\t     * @param {string} str\r\n\t     * @return {string}\r\n\t     */\r\n\t    formatUtil.capitalFirst = function (str) {\r\n\t        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;\r\n\t    };\r\n\r\n\t    formatUtil.truncateText = textContain.truncateText;\r\n\r\n\t    module.exports = formatUtil;\r\n\r\n\r\n/***/ },\r\n/* 7 */\r\n/***/ function(module, exports) {\r\n\r\n\t/**\r\n\t * 数值处理模块\r\n\t * @module echarts/util/number\r\n\t */\r\n\r\n\r\n\r\n\t    var number = {};\r\n\r\n\t    var RADIAN_EPSILON = 1e-4;\r\n\r\n\t    function _trim(str) {\r\n\t        return str.replace(/^\\s+/, '').replace(/\\s+$/, '');\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Linear mapping a value from domain to range\r\n\t     * @memberOf module:echarts/util/number\r\n\t     * @param  {(number|Array.<number>)} val\r\n\t     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\r\n\t     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\r\n\t     * @param  {boolean} clamp\r\n\t     * @return {(number|Array.<number>}\r\n\t     */\r\n\t    number.linearMap = function (val, domain, range, clamp) {\r\n\t        var subDomain = domain[1] - domain[0];\r\n\t        var subRange = range[1] - range[0];\r\n\r\n\t        if (subDomain === 0) {\r\n\t            return subRange === 0\r\n\t                ? range[0]\r\n\t                : (range[0] + range[1]) / 2;\r\n\t        }\r\n\r\n\t        // Avoid accuracy problem in edge, such as\r\n\t        // 146.39 - 62.83 === 83.55999999999999.\r\n\t        // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\r\n\t        // It is a little verbose for efficiency considering this method\r\n\t        // is a hotspot.\r\n\t        if (clamp) {\r\n\t            if (subDomain > 0) {\r\n\t                if (val <= domain[0]) {\r\n\t                    return range[0];\r\n\t                }\r\n\t                else if (val >= domain[1]) {\r\n\t                    return range[1];\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                if (val >= domain[0]) {\r\n\t                    return range[0];\r\n\t                }\r\n\t                else if (val <= domain[1]) {\r\n\t                    return range[1];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            if (val === domain[0]) {\r\n\t                return range[0];\r\n\t            }\r\n\t            if (val === domain[1]) {\r\n\t                return range[1];\r\n\t            }\r\n\t        }\r\n\r\n\t        return (val - domain[0]) / subDomain * subRange + range[0];\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Convert a percent string to absolute number.\r\n\t     * Returns NaN if percent is not a valid string or number\r\n\t     * @memberOf module:echarts/util/number\r\n\t     * @param {string|number} percent\r\n\t     * @param {number} all\r\n\t     * @return {number}\r\n\t     */\r\n\t    number.parsePercent = function(percent, all) {\r\n\t        switch (percent) {\r\n\t            case 'center':\r\n\t            case 'middle':\r\n\t                percent = '50%';\r\n\t                break;\r\n\t            case 'left':\r\n\t            case 'top':\r\n\t                percent = '0%';\r\n\t                break;\r\n\t            case 'right':\r\n\t            case 'bottom':\r\n\t                percent = '100%';\r\n\t                break;\r\n\t        }\r\n\t        if (typeof percent === 'string') {\r\n\t            if (_trim(percent).match(/%$/)) {\r\n\t                return parseFloat(percent) / 100 * all;\r\n\t            }\r\n\r\n\t            return parseFloat(percent);\r\n\t        }\r\n\r\n\t        return percent == null ? NaN : +percent;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Fix rounding error of float numbers\r\n\t     * @param {number} x\r\n\t     * @return {number}\r\n\t     */\r\n\t    number.round = function (x, precision) {\r\n\t        if (precision == null) {\r\n\t            precision = 10;\r\n\t        }\r\n\t        // Avoid range error\r\n\t        precision = Math.min(Math.max(0, precision), 20);\r\n\t        return +(+x).toFixed(precision);\r\n\t    };\r\n\r\n\t    number.asc = function (arr) {\r\n\t        arr.sort(function (a, b) {\r\n\t            return a - b;\r\n\t        });\r\n\t        return arr;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get precision\r\n\t     * @param {number} val\r\n\t     */\r\n\t    number.getPrecision = function (val) {\r\n\t        val = +val;\r\n\t        if (isNaN(val)) {\r\n\t            return 0;\r\n\t        }\r\n\t        // It is much faster than methods converting number to string as follows\r\n\t        //      var tmp = val.toString();\r\n\t        //      return tmp.length - 1 - tmp.indexOf('.');\r\n\t        // especially when precision is low\r\n\t        var e = 1;\r\n\t        var count = 0;\r\n\t        while (Math.round(val * e) / e !== val) {\r\n\t            e *= 10;\r\n\t            count++;\r\n\t        }\r\n\t        return count;\r\n\t    };\r\n\r\n\t    number.getPrecisionSafe = function (val) {\r\n\t        var str = val.toString();\r\n\t        var dotIndex = str.indexOf('.');\r\n\t        if (dotIndex < 0) {\r\n\t            return 0;\r\n\t        }\r\n\t        return str.length - 1 - dotIndex;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {Array.<number>} dataExtent\r\n\t     * @param {Array.<number>} pixelExtent\r\n\t     * @return {number}  precision\r\n\t     */\r\n\t    number.getPixelPrecision = function (dataExtent, pixelExtent) {\r\n\t        var log = Math.log;\r\n\t        var LN10 = Math.LN10;\r\n\t        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\r\n\t        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);\r\n\t        return Math.max(\r\n\t            -dataQuantity + sizeQuantity,\r\n\t            0\r\n\t        );\r\n\t    };\r\n\r\n\t    // Number.MAX_SAFE_INTEGER, ie do not support.\r\n\t    number.MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n\t    /**\r\n\t     * To 0 - 2 * PI, considering negative radian.\r\n\t     * @param {number} radian\r\n\t     * @return {number}\r\n\t     */\r\n\t    number.remRadian = function (radian) {\r\n\t        var pi2 = Math.PI * 2;\r\n\t        return (radian % pi2 + pi2) % pi2;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {type} radian\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    number.isRadianAroundZero = function (val) {\r\n\t        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {string|Date|number} value\r\n\t     * @return {Date} date\r\n\t     */\r\n\t    number.parseDate = function (value) {\r\n\t        if (value instanceof Date) {\r\n\t            return value;\r\n\t        }\r\n\t        else if (typeof value === 'string') {\r\n\t            // Treat as ISO format. See issue #3623\r\n\t            var ret = new Date(value);\r\n\t            if (isNaN(+ret)) {\r\n\t                // FIXME new Date('1970-01-01') is UTC, new Date('1970/01/01') is local\r\n\t                ret = new Date(new Date(value.replace(/-/g, '/')) - new Date('1970/01/01'));\r\n\t            }\r\n\t            return ret;\r\n\t        }\r\n\r\n\t        return new Date(Math.round(value));\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Quantity of a number. e.g. 0.1, 1, 10, 100\r\n\t     * @param  {number} val\r\n\t     * @return {number}\r\n\t     */\r\n\t    number.quantity = function (val) {\r\n\t        return Math.pow(10, Math.floor(Math.log(val) / Math.LN10));\r\n\t    };\r\n\r\n\t    // \"Nice Numbers for Graph Labels\" of Graphic Gems\r\n\t    /**\r\n\t     * find a “nice” number approximately equal to x. Round the number if round = true, take ceiling if round = false\r\n\t     * The primary observation is that the “nicest” numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\r\n\t     * @param  {number} val\r\n\t     * @param  {boolean} round\r\n\t     * @return {number}\r\n\t     */\r\n\t    number.nice = function (val, round) {\r\n\t        var exp10 = number.quantity(val);\r\n\t        var f = val / exp10; // between 1 and 10\r\n\t        var nf;\r\n\t        if (round) {\r\n\t            if (f < 1.5) { nf = 1; }\r\n\t            else if (f < 2.5) { nf = 2; }\r\n\t            else if (f < 4) { nf = 3; }\r\n\t            else if (f < 7) { nf = 5; }\r\n\t            else { nf = 10; }\r\n\t        }\r\n\t        else {\r\n\t            if (f < 1) { nf = 1; }\r\n\t            else if (f < 2) { nf = 2; }\r\n\t            else if (f < 3) { nf = 3; }\r\n\t            else if (f < 5) { nf = 5; }\r\n\t            else { nf = 10; }\r\n\t        }\r\n\t        return nf * exp10;\r\n\t    };\r\n\r\n\t    module.exports = number;\r\n\r\n\r\n/***/ },\r\n/* 8 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var textWidthCache = {};\r\n\t    var textWidthCacheCounter = 0;\r\n\t    var TEXT_CACHE_MAX = 5000;\r\n\r\n\t    var util = __webpack_require__(4);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\t    var retrieve = util.retrieve;\r\n\r\n\t    function getTextWidth(text, textFont) {\r\n\t        var key = text + ':' + textFont;\r\n\t        if (textWidthCache[key]) {\r\n\t            return textWidthCache[key];\r\n\t        }\r\n\r\n\t        var textLines = (text + '').split('\\n');\r\n\t        var width = 0;\r\n\r\n\t        for (var i = 0, l = textLines.length; i < l; i++) {\r\n\t            // measureText 可以被覆盖以兼容不支持 Canvas 的环境\r\n\t            width = Math.max(textContain.measureText(textLines[i], textFont).width, width);\r\n\t        }\r\n\r\n\t        if (textWidthCacheCounter > TEXT_CACHE_MAX) {\r\n\t            textWidthCacheCounter = 0;\r\n\t            textWidthCache = {};\r\n\t        }\r\n\t        textWidthCacheCounter++;\r\n\t        textWidthCache[key] = width;\r\n\r\n\t        return width;\r\n\t    }\r\n\r\n\t    function getTextRect(text, textFont, textAlign, textBaseline) {\r\n\t        var textLineLen = ((text || '') + '').split('\\n').length;\r\n\r\n\t        var width = getTextWidth(text, textFont);\r\n\t        // FIXME 高度计算比较粗暴\r\n\t        var lineHeight = getTextWidth('国', textFont);\r\n\t        var height = textLineLen * lineHeight;\r\n\r\n\t        var rect = new BoundingRect(0, 0, width, height);\r\n\t        // Text has a special line height property\r\n\t        rect.lineHeight = lineHeight;\r\n\r\n\t        switch (textBaseline) {\r\n\t            case 'bottom':\r\n\t            case 'alphabetic':\r\n\t                rect.y -= lineHeight;\r\n\t                break;\r\n\t            case 'middle':\r\n\t                rect.y -= lineHeight / 2;\r\n\t                break;\r\n\t            // case 'hanging':\r\n\t            // case 'top':\r\n\t        }\r\n\r\n\t        // FIXME Right to left language\r\n\t        switch (textAlign) {\r\n\t            case 'end':\r\n\t            case 'right':\r\n\t                rect.x -= rect.width;\r\n\t                break;\r\n\t            case 'center':\r\n\t                rect.x -= rect.width / 2;\r\n\t                break;\r\n\t            // case 'start':\r\n\t            // case 'left':\r\n\t        }\r\n\r\n\t        return rect;\r\n\t    }\r\n\r\n\t    function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {\r\n\r\n\t        var x = rect.x;\r\n\t        var y = rect.y;\r\n\r\n\t        var height = rect.height;\r\n\t        var width = rect.width;\r\n\r\n\t        var textHeight = textRect.height;\r\n\r\n\t        var halfHeight = height / 2 - textHeight / 2;\r\n\r\n\t        var textAlign = 'left';\r\n\r\n\t        switch (textPosition) {\r\n\t            case 'left':\r\n\t                x -= distance;\r\n\t                y += halfHeight;\r\n\t                textAlign = 'right';\r\n\t                break;\r\n\t            case 'right':\r\n\t                x += distance + width;\r\n\t                y += halfHeight;\r\n\t                textAlign = 'left';\r\n\t                break;\r\n\t            case 'top':\r\n\t                x += width / 2;\r\n\t                y -= distance + textHeight;\r\n\t                textAlign = 'center';\r\n\t                break;\r\n\t            case 'bottom':\r\n\t                x += width / 2;\r\n\t                y += height + distance;\r\n\t                textAlign = 'center';\r\n\t                break;\r\n\t            case 'inside':\r\n\t                x += width / 2;\r\n\t                y += halfHeight;\r\n\t                textAlign = 'center';\r\n\t                break;\r\n\t            case 'insideLeft':\r\n\t                x += distance;\r\n\t                y += halfHeight;\r\n\t                textAlign = 'left';\r\n\t                break;\r\n\t            case 'insideRight':\r\n\t                x += width - distance;\r\n\t                y += halfHeight;\r\n\t                textAlign = 'right';\r\n\t                break;\r\n\t            case 'insideTop':\r\n\t                x += width / 2;\r\n\t                y += distance;\r\n\t                textAlign = 'center';\r\n\t                break;\r\n\t            case 'insideBottom':\r\n\t                x += width / 2;\r\n\t                y += height - textHeight - distance;\r\n\t                textAlign = 'center';\r\n\t                break;\r\n\t            case 'insideTopLeft':\r\n\t                x += distance;\r\n\t                y += distance;\r\n\t                textAlign = 'left';\r\n\t                break;\r\n\t            case 'insideTopRight':\r\n\t                x += width - distance;\r\n\t                y += distance;\r\n\t                textAlign = 'right';\r\n\t                break;\r\n\t            case 'insideBottomLeft':\r\n\t                x += distance;\r\n\t                y += height - textHeight - distance;\r\n\t                break;\r\n\t            case 'insideBottomRight':\r\n\t                x += width - distance;\r\n\t                y += height - textHeight - distance;\r\n\t                textAlign = 'right';\r\n\t                break;\r\n\t        }\r\n\r\n\t        return {\r\n\t            x: x,\r\n\t            y: y,\r\n\t            textAlign: textAlign,\r\n\t            textBaseline: 'top'\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Show ellipsis if overflow.\r\n\t     *\r\n\t     * @param  {string} text\r\n\t     * @param  {string} containerWidth\r\n\t     * @param  {string} textFont\r\n\t     * @param  {number} [ellipsis='...']\r\n\t     * @param  {Object} [options]\r\n\t     * @param  {number} [options.maxIterations=3]\r\n\t     * @param  {number} [options.minChar=0] If truncate result are less\r\n\t     *                  then minChar, ellipsis will not show, which is\r\n\t     *                  better for user hint in some cases.\r\n\t     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.\r\n\t     * @return {string}\r\n\t     */\r\n\t    function truncateText(text, containerWidth, textFont, ellipsis, options) {\r\n\t        if (!containerWidth) {\r\n\t            return '';\r\n\t        }\r\n\r\n\t        options = options || {};\r\n\r\n\t        ellipsis = retrieve(ellipsis, '...');\r\n\t        var maxIterations = retrieve(options.maxIterations, 2);\r\n\t        var minChar = retrieve(options.minChar, 0);\r\n\t        // FIXME\r\n\t        // Other languages?\r\n\t        var cnCharWidth = getTextWidth('国', textFont);\r\n\t        // FIXME\r\n\t        // Consider proportional font?\r\n\t        var ascCharWidth = getTextWidth('a', textFont);\r\n\t        var placeholder = retrieve(options.placeholder, '');\r\n\r\n\t        // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.\r\n\t        // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.\r\n\t        var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.\r\n\t        for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {\r\n\t            contentWidth -= ascCharWidth;\r\n\t        }\r\n\r\n\t        var ellipsisWidth = getTextWidth(ellipsis);\r\n\t        if (ellipsisWidth > contentWidth) {\r\n\t            ellipsis = '';\r\n\t            ellipsisWidth = 0;\r\n\t        }\r\n\r\n\t        contentWidth = containerWidth - ellipsisWidth;\r\n\r\n\t        var textLines = (text + '').split('\\n');\r\n\r\n\t        for (var i = 0, len = textLines.length; i < len; i++) {\r\n\t            var textLine = textLines[i];\r\n\t            var lineWidth = getTextWidth(textLine, textFont);\r\n\r\n\t            if (lineWidth <= containerWidth) {\r\n\t                continue;\r\n\t            }\r\n\r\n\t            for (var j = 0;; j++) {\r\n\t                if (lineWidth <= contentWidth || j >= maxIterations) {\r\n\t                    textLine += ellipsis;\r\n\t                    break;\r\n\t                }\r\n\r\n\t                var subLength = j === 0\r\n\t                    ? estimateLength(textLine, contentWidth, ascCharWidth, cnCharWidth)\r\n\t                    : lineWidth > 0\r\n\t                    ? Math.floor(textLine.length * contentWidth / lineWidth)\r\n\t                    : 0;\r\n\r\n\t                textLine = textLine.substr(0, subLength);\r\n\t                lineWidth = getTextWidth(textLine, textFont);\r\n\t            }\r\n\r\n\t            if (textLine === '') {\r\n\t                textLine = placeholder;\r\n\t            }\r\n\r\n\t            textLines[i] = textLine;\r\n\t        }\r\n\r\n\t        return textLines.join('\\n');\r\n\t    }\r\n\r\n\t    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {\r\n\t        var width = 0;\r\n\t        var i = 0;\r\n\t        for (var len = text.length; i < len && width < contentWidth; i++) {\r\n\t            var charCode = text.charCodeAt(i);\r\n\t            width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;\r\n\t        }\r\n\t        return i;\r\n\t    }\r\n\r\n\t    var textContain = {\r\n\r\n\t        getWidth: getTextWidth,\r\n\r\n\t        getBoundingRect: getTextRect,\r\n\r\n\t        adjustTextPositionOnRect: adjustTextPositionOnRect,\r\n\r\n\t        truncateText: truncateText,\r\n\r\n\t        measureText: function (text, textFont) {\r\n\t            var ctx = util.getContext();\r\n\t            ctx.font = textFont || '12px sans-serif';\r\n\t            return ctx.measureText(text);\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = textContain;\r\n\r\n\r\n/***/ },\r\n/* 9 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * @module echarts/core/BoundingRect\r\n\t */\r\n\r\n\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    var matrix = __webpack_require__(11);\r\n\r\n\t    var v2ApplyTransform = vec2.applyTransform;\r\n\t    var mathMin = Math.min;\r\n\t    var mathAbs = Math.abs;\r\n\t    var mathMax = Math.max;\r\n\t    /**\r\n\t     * @alias module:echarts/core/BoundingRect\r\n\t     */\r\n\t    function BoundingRect(x, y, width, height) {\r\n\r\n\t        if (width < 0) {\r\n\t            x = x + width;\r\n\t            width = -width;\r\n\t        }\r\n\t        if (height < 0) {\r\n\t            y = y + height;\r\n\t            height = -height;\r\n\t        }\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        this.x = x;\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        this.y = y;\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        this.width = width;\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        this.height = height;\r\n\t    }\r\n\r\n\t    BoundingRect.prototype = {\r\n\r\n\t        constructor: BoundingRect,\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/core/BoundingRect} other\r\n\t         */\r\n\t        union: function (other) {\r\n\t            var x = mathMin(other.x, this.x);\r\n\t            var y = mathMin(other.y, this.y);\r\n\r\n\t            this.width = mathMax(\r\n\t                    other.x + other.width,\r\n\t                    this.x + this.width\r\n\t                ) - x;\r\n\t            this.height = mathMax(\r\n\t                    other.y + other.height,\r\n\t                    this.y + this.height\r\n\t                ) - y;\r\n\t            this.x = x;\r\n\t            this.y = y;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Array.<number>} m\r\n\t         * @methods\r\n\t         */\r\n\t        applyTransform: (function () {\r\n\t            var min = [];\r\n\t            var max = [];\r\n\t            return function (m) {\r\n\t                // In case usage like this\r\n\t                // el.getBoundingRect().applyTransform(el.transform)\r\n\t                // And element has no transform\r\n\t                if (!m) {\r\n\t                    return;\r\n\t                }\r\n\t                min[0] = this.x;\r\n\t                min[1] = this.y;\r\n\t                max[0] = this.x + this.width;\r\n\t                max[1] = this.y + this.height;\r\n\r\n\t                v2ApplyTransform(min, min, m);\r\n\t                v2ApplyTransform(max, max, m);\r\n\r\n\t                this.x = mathMin(min[0], max[0]);\r\n\t                this.y = mathMin(min[1], max[1]);\r\n\t                this.width = mathAbs(max[0] - min[0]);\r\n\t                this.height = mathAbs(max[1] - min[1]);\r\n\t            };\r\n\t        })(),\r\n\r\n\t        /**\r\n\t         * Calculate matrix of transforming from self to target rect\r\n\t         * @param  {module:zrender/core/BoundingRect} b\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        calculateTransform: function (b) {\r\n\t            var a = this;\r\n\t            var sx = b.width / a.width;\r\n\t            var sy = b.height / a.height;\r\n\r\n\t            var m = matrix.create();\r\n\r\n\t            // 矩阵右乘\r\n\t            matrix.translate(m, m, [-a.x, -a.y]);\r\n\t            matrix.scale(m, m, [sx, sy]);\r\n\t            matrix.translate(m, m, [b.x, b.y]);\r\n\r\n\t            return m;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {(module:echarts/core/BoundingRect|Object)} b\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        intersect: function (b) {\r\n\t            if (!(b instanceof BoundingRect)) {\r\n\t                // Normalize negative width/height.\r\n\t                b = BoundingRect.create(b);\r\n\t            }\r\n\r\n\t            var a = this;\r\n\t            var ax0 = a.x;\r\n\t            var ax1 = a.x + a.width;\r\n\t            var ay0 = a.y;\r\n\t            var ay1 = a.y + a.height;\r\n\r\n\t            var bx0 = b.x;\r\n\t            var bx1 = b.x + b.width;\r\n\t            var by0 = b.y;\r\n\t            var by1 = b.y + b.height;\r\n\r\n\t            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);\r\n\t        },\r\n\r\n\t        contain: function (x, y) {\r\n\t            var rect = this;\r\n\t            return x >= rect.x\r\n\t                && x <= (rect.x + rect.width)\r\n\t                && y >= rect.y\r\n\t                && y <= (rect.y + rect.height);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:echarts/core/BoundingRect}\r\n\t         */\r\n\t        clone: function () {\r\n\t            return new BoundingRect(this.x, this.y, this.width, this.height);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Copy from another rect\r\n\t         */\r\n\t        copy: function (other) {\r\n\t            this.x = other.x;\r\n\t            this.y = other.y;\r\n\t            this.width = other.width;\r\n\t            this.height = other.height;\r\n\t        },\r\n\r\n\t        plain: function () {\r\n\t            return {\r\n\t                x: this.x,\r\n\t                y: this.y,\r\n\t                width: this.width,\r\n\t                height: this.height\r\n\t            };\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {Object|module:zrender/core/BoundingRect} rect\r\n\t     * @param {number} rect.x\r\n\t     * @param {number} rect.y\r\n\t     * @param {number} rect.width\r\n\t     * @param {number} rect.height\r\n\t     * @return {module:zrender/core/BoundingRect}\r\n\t     */\r\n\t    BoundingRect.create = function (rect) {\r\n\t        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);\r\n\t    };\r\n\r\n\t    module.exports = BoundingRect;\r\n\r\n\r\n/***/ },\r\n/* 10 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\t    var ArrayCtor = typeof Float32Array === 'undefined'\r\n\t        ? Array\r\n\t        : Float32Array;\r\n\r\n\t    /**\r\n\t     * @typedef {Float32Array|Array.<number>} Vector2\r\n\t     */\r\n\t    /**\r\n\t     * 二维向量类\r\n\t     * @exports zrender/tool/vector\r\n\t     */\r\n\t    var vector = {\r\n\t        /**\r\n\t         * 创建一个向量\r\n\t         * @param {number} [x=0]\r\n\t         * @param {number} [y=0]\r\n\t         * @return {Vector2}\r\n\t         */\r\n\t        create: function (x, y) {\r\n\t            var out = new ArrayCtor(2);\r\n\t            if (x == null) {\r\n\t                x = 0;\r\n\t            }\r\n\t            if (y == null) {\r\n\t                y = 0;\r\n\t            }\r\n\t            out[0] = x;\r\n\t            out[1] = y;\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 复制向量数据\r\n\t         * @param {Vector2} out\r\n\t         * @param {Vector2} v\r\n\t         * @return {Vector2}\r\n\t         */\r\n\t        copy: function (out, v) {\r\n\t            out[0] = v[0];\r\n\t            out[1] = v[1];\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 克隆一个向量\r\n\t         * @param {Vector2} v\r\n\t         * @return {Vector2}\r\n\t         */\r\n\t        clone: function (v) {\r\n\t            var out = new ArrayCtor(2);\r\n\t            out[0] = v[0];\r\n\t            out[1] = v[1];\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 设置向量的两个项\r\n\t         * @param {Vector2} out\r\n\t         * @param {number} a\r\n\t         * @param {number} b\r\n\t         * @return {Vector2} 结果\r\n\t         */\r\n\t        set: function (out, a, b) {\r\n\t            out[0] = a;\r\n\t            out[1] = b;\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 向量相加\r\n\t         * @param {Vector2} out\r\n\t         * @param {Vector2} v1\r\n\t         * @param {Vector2} v2\r\n\t         */\r\n\t        add: function (out, v1, v2) {\r\n\t            out[0] = v1[0] + v2[0];\r\n\t            out[1] = v1[1] + v2[1];\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 向量缩放后相加\r\n\t         * @param {Vector2} out\r\n\t         * @param {Vector2} v1\r\n\t         * @param {Vector2} v2\r\n\t         * @param {number} a\r\n\t         */\r\n\t        scaleAndAdd: function (out, v1, v2, a) {\r\n\t            out[0] = v1[0] + v2[0] * a;\r\n\t            out[1] = v1[1] + v2[1] * a;\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 向量相减\r\n\t         * @param {Vector2} out\r\n\t         * @param {Vector2} v1\r\n\t         * @param {Vector2} v2\r\n\t         */\r\n\t        sub: function (out, v1, v2) {\r\n\t            out[0] = v1[0] - v2[0];\r\n\t            out[1] = v1[1] - v2[1];\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 向量长度\r\n\t         * @param {Vector2} v\r\n\t         * @return {number}\r\n\t         */\r\n\t        len: function (v) {\r\n\t            return Math.sqrt(this.lenSquare(v));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 向量长度平方\r\n\t         * @param {Vector2} v\r\n\t         * @return {number}\r\n\t         */\r\n\t        lenSquare: function (v) {\r\n\t            return v[0] * v[0] + v[1] * v[1];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 向量乘法\r\n\t         * @param {Vector2} out\r\n\t         * @param {Vector2} v1\r\n\t         * @param {Vector2} v2\r\n\t         */\r\n\t        mul: function (out, v1, v2) {\r\n\t            out[0] = v1[0] * v2[0];\r\n\t            out[1] = v1[1] * v2[1];\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 向量除法\r\n\t         * @param {Vector2} out\r\n\t         * @param {Vector2} v1\r\n\t         * @param {Vector2} v2\r\n\t         */\r\n\t        div: function (out, v1, v2) {\r\n\t            out[0] = v1[0] / v2[0];\r\n\t            out[1] = v1[1] / v2[1];\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 向量点乘\r\n\t         * @param {Vector2} v1\r\n\t         * @param {Vector2} v2\r\n\t         * @return {number}\r\n\t         */\r\n\t        dot: function (v1, v2) {\r\n\t            return v1[0] * v2[0] + v1[1] * v2[1];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 向量缩放\r\n\t         * @param {Vector2} out\r\n\t         * @param {Vector2} v\r\n\t         * @param {number} s\r\n\t         */\r\n\t        scale: function (out, v, s) {\r\n\t            out[0] = v[0] * s;\r\n\t            out[1] = v[1] * s;\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 向量归一化\r\n\t         * @param {Vector2} out\r\n\t         * @param {Vector2} v\r\n\t         */\r\n\t        normalize: function (out, v) {\r\n\t            var d = vector.len(v);\r\n\t            if (d === 0) {\r\n\t                out[0] = 0;\r\n\t                out[1] = 0;\r\n\t            }\r\n\t            else {\r\n\t                out[0] = v[0] / d;\r\n\t                out[1] = v[1] / d;\r\n\t            }\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 计算向量间距离\r\n\t         * @param {Vector2} v1\r\n\t         * @param {Vector2} v2\r\n\t         * @return {number}\r\n\t         */\r\n\t        distance: function (v1, v2) {\r\n\t            return Math.sqrt(\r\n\t                (v1[0] - v2[0]) * (v1[0] - v2[0])\r\n\t                + (v1[1] - v2[1]) * (v1[1] - v2[1])\r\n\t            );\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 向量距离平方\r\n\t         * @param {Vector2} v1\r\n\t         * @param {Vector2} v2\r\n\t         * @return {number}\r\n\t         */\r\n\t        distanceSquare: function (v1, v2) {\r\n\t            return (v1[0] - v2[0]) * (v1[0] - v2[0])\r\n\t                + (v1[1] - v2[1]) * (v1[1] - v2[1]);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 求负向量\r\n\t         * @param {Vector2} out\r\n\t         * @param {Vector2} v\r\n\t         */\r\n\t        negate: function (out, v) {\r\n\t            out[0] = -v[0];\r\n\t            out[1] = -v[1];\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 插值两个点\r\n\t         * @param {Vector2} out\r\n\t         * @param {Vector2} v1\r\n\t         * @param {Vector2} v2\r\n\t         * @param {number} t\r\n\t         */\r\n\t        lerp: function (out, v1, v2, t) {\r\n\t            out[0] = v1[0] + t * (v2[0] - v1[0]);\r\n\t            out[1] = v1[1] + t * (v2[1] - v1[1]);\r\n\t            return out;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 矩阵左乘向量\r\n\t         * @param {Vector2} out\r\n\t         * @param {Vector2} v\r\n\t         * @param {Vector2} m\r\n\t         */\r\n\t        applyTransform: function (out, v, m) {\r\n\t            var x = v[0];\r\n\t            var y = v[1];\r\n\t            out[0] = m[0] * x + m[2] * y + m[4];\r\n\t            out[1] = m[1] * x + m[3] * y + m[5];\r\n\t            return out;\r\n\t        },\r\n\t        /**\r\n\t         * 求两个向量最小值\r\n\t         * @param  {Vector2} out\r\n\t         * @param  {Vector2} v1\r\n\t         * @param  {Vector2} v2\r\n\t         */\r\n\t        min: function (out, v1, v2) {\r\n\t            out[0] = Math.min(v1[0], v2[0]);\r\n\t            out[1] = Math.min(v1[1], v2[1]);\r\n\t            return out;\r\n\t        },\r\n\t        /**\r\n\t         * 求两个向量最大值\r\n\t         * @param  {Vector2} out\r\n\t         * @param  {Vector2} v1\r\n\t         * @param  {Vector2} v2\r\n\t         */\r\n\t        max: function (out, v1, v2) {\r\n\t            out[0] = Math.max(v1[0], v2[0]);\r\n\t            out[1] = Math.max(v1[1], v2[1]);\r\n\t            return out;\r\n\t        }\r\n\t    };\r\n\r\n\t    vector.length = vector.len;\r\n\t    vector.lengthSquare = vector.lenSquare;\r\n\t    vector.dist = vector.distance;\r\n\t    vector.distSquare = vector.distanceSquare;\r\n\r\n\t    module.exports = vector;\r\n\r\n\r\n\r\n/***/ },\r\n/* 11 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\t    var ArrayCtor = typeof Float32Array === 'undefined'\r\n\t        ? Array\r\n\t        : Float32Array;\r\n\t    /**\r\n\t     * 3x2矩阵操作类\r\n\t     * @exports zrender/tool/matrix\r\n\t     */\r\n\t    var matrix = {\r\n\t        /**\r\n\t         * 创建一个单位矩阵\r\n\t         * @return {Float32Array|Array.<number>}\r\n\t         */\r\n\t        create : function() {\r\n\t            var out = new ArrayCtor(6);\r\n\t            matrix.identity(out);\r\n\r\n\t            return out;\r\n\t        },\r\n\t        /**\r\n\t         * 设置矩阵为单位矩阵\r\n\t         * @param {Float32Array|Array.<number>} out\r\n\t         */\r\n\t        identity : function(out) {\r\n\t            out[0] = 1;\r\n\t            out[1] = 0;\r\n\t            out[2] = 0;\r\n\t            out[3] = 1;\r\n\t            out[4] = 0;\r\n\t            out[5] = 0;\r\n\t            return out;\r\n\t        },\r\n\t        /**\r\n\t         * 复制矩阵\r\n\t         * @param {Float32Array|Array.<number>} out\r\n\t         * @param {Float32Array|Array.<number>} m\r\n\t         */\r\n\t        copy: function(out, m) {\r\n\t            out[0] = m[0];\r\n\t            out[1] = m[1];\r\n\t            out[2] = m[2];\r\n\t            out[3] = m[3];\r\n\t            out[4] = m[4];\r\n\t            out[5] = m[5];\r\n\t            return out;\r\n\t        },\r\n\t        /**\r\n\t         * 矩阵相乘\r\n\t         * @param {Float32Array|Array.<number>} out\r\n\t         * @param {Float32Array|Array.<number>} m1\r\n\t         * @param {Float32Array|Array.<number>} m2\r\n\t         */\r\n\t        mul : function (out, m1, m2) {\r\n\t            // Consider matrix.mul(m, m2, m);\r\n\t            // where out is the same as m2.\r\n\t            // So use temp variable to escape error.\r\n\t            var out0 = m1[0] * m2[0] + m1[2] * m2[1];\r\n\t            var out1 = m1[1] * m2[0] + m1[3] * m2[1];\r\n\t            var out2 = m1[0] * m2[2] + m1[2] * m2[3];\r\n\t            var out3 = m1[1] * m2[2] + m1[3] * m2[3];\r\n\t            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];\r\n\t            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\r\n\t            out[0] = out0;\r\n\t            out[1] = out1;\r\n\t            out[2] = out2;\r\n\t            out[3] = out3;\r\n\t            out[4] = out4;\r\n\t            out[5] = out5;\r\n\t            return out;\r\n\t        },\r\n\t        /**\r\n\t         * 平移变换\r\n\t         * @param {Float32Array|Array.<number>} out\r\n\t         * @param {Float32Array|Array.<number>} a\r\n\t         * @param {Float32Array|Array.<number>} v\r\n\t         */\r\n\t        translate : function(out, a, v) {\r\n\t            out[0] = a[0];\r\n\t            out[1] = a[1];\r\n\t            out[2] = a[2];\r\n\t            out[3] = a[3];\r\n\t            out[4] = a[4] + v[0];\r\n\t            out[5] = a[5] + v[1];\r\n\t            return out;\r\n\t        },\r\n\t        /**\r\n\t         * 旋转变换\r\n\t         * @param {Float32Array|Array.<number>} out\r\n\t         * @param {Float32Array|Array.<number>} a\r\n\t         * @param {number} rad\r\n\t         */\r\n\t        rotate : function(out, a, rad) {\r\n\t            var aa = a[0];\r\n\t            var ac = a[2];\r\n\t            var atx = a[4];\r\n\t            var ab = a[1];\r\n\t            var ad = a[3];\r\n\t            var aty = a[5];\r\n\t            var st = Math.sin(rad);\r\n\t            var ct = Math.cos(rad);\r\n\r\n\t            out[0] = aa * ct + ab * st;\r\n\t            out[1] = -aa * st + ab * ct;\r\n\t            out[2] = ac * ct + ad * st;\r\n\t            out[3] = -ac * st + ct * ad;\r\n\t            out[4] = ct * atx + st * aty;\r\n\t            out[5] = ct * aty - st * atx;\r\n\t            return out;\r\n\t        },\r\n\t        /**\r\n\t         * 缩放变换\r\n\t         * @param {Float32Array|Array.<number>} out\r\n\t         * @param {Float32Array|Array.<number>} a\r\n\t         * @param {Float32Array|Array.<number>} v\r\n\t         */\r\n\t        scale : function(out, a, v) {\r\n\t            var vx = v[0];\r\n\t            var vy = v[1];\r\n\t            out[0] = a[0] * vx;\r\n\t            out[1] = a[1] * vy;\r\n\t            out[2] = a[2] * vx;\r\n\t            out[3] = a[3] * vy;\r\n\t            out[4] = a[4] * vx;\r\n\t            out[5] = a[5] * vy;\r\n\t            return out;\r\n\t        },\r\n\t        /**\r\n\t         * 求逆矩阵\r\n\t         * @param {Float32Array|Array.<number>} out\r\n\t         * @param {Float32Array|Array.<number>} a\r\n\t         */\r\n\t        invert : function(out, a) {\r\n\r\n\t            var aa = a[0];\r\n\t            var ac = a[2];\r\n\t            var atx = a[4];\r\n\t            var ab = a[1];\r\n\t            var ad = a[3];\r\n\t            var aty = a[5];\r\n\r\n\t            var det = aa * ad - ab * ac;\r\n\t            if (!det) {\r\n\t                return null;\r\n\t            }\r\n\t            det = 1.0 / det;\r\n\r\n\t            out[0] = ad * det;\r\n\t            out[1] = -ab * det;\r\n\t            out[2] = -ac * det;\r\n\t            out[3] = aa * det;\r\n\t            out[4] = (ac * aty - ad * atx) * det;\r\n\t            out[5] = (ab * atx - aa * aty) * det;\r\n\t            return out;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = matrix;\r\n\r\n\r\n\r\n/***/ },\r\n/* 12 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/model/Model\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var clazzUtil = __webpack_require__(13);\r\n\r\n\t    /**\r\n\t     * @alias module:echarts/model/Model\r\n\t     * @constructor\r\n\t     * @param {Object} option\r\n\t     * @param {module:echarts/model/Model} [parentModel]\r\n\t     * @param {module:echarts/model/Global} [ecModel]\r\n\t     */\r\n\t    function Model(option, parentModel, ecModel) {\r\n\t        /**\r\n\t         * @type {module:echarts/model/Model}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.parentModel = parentModel;\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/model/Global}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.ecModel = ecModel;\r\n\r\n\t        /**\r\n\t         * @type {Object}\r\n\t         * @protected\r\n\t         */\r\n\t        this.option = option;\r\n\r\n\t        // Simple optimization\r\n\t        // if (this.init) {\r\n\t        //     if (arguments.length <= 4) {\r\n\t        //         this.init(option, parentModel, ecModel, extraOpt);\r\n\t        //     }\r\n\t        //     else {\r\n\t        //         this.init.apply(this, arguments);\r\n\t        //     }\r\n\t        // }\r\n\t    }\r\n\r\n\t    Model.prototype = {\r\n\r\n\t        constructor: Model,\r\n\r\n\t        /**\r\n\t         * Model 的初始化函数\r\n\t         * @param {Object} option\r\n\t         */\r\n\t        init: null,\r\n\r\n\t        /**\r\n\t         * 从新的 Option merge\r\n\t         */\r\n\t        mergeOption: function (option) {\r\n\t            zrUtil.merge(this.option, option, true);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} path\r\n\t         * @param {boolean} [ignoreParent=false]\r\n\t         * @return {*}\r\n\t         */\r\n\t        get: function (path, ignoreParent) {\r\n\t            if (!path) {\r\n\t                return this.option;\r\n\t            }\r\n\r\n\t            if (typeof path === 'string') {\r\n\t                path = path.split('.');\r\n\t            }\r\n\r\n\t            var obj = this.option;\r\n\t            var parentModel = this.parentModel;\r\n\t            for (var i = 0; i < path.length; i++) {\r\n\t                // Ignore empty\r\n\t                if (!path[i]) {\r\n\t                    continue;\r\n\t                }\r\n\t                // obj could be number/string/... (like 0)\r\n\t                obj = (obj && typeof obj === 'object') ? obj[path[i]] : null;\r\n\t                if (obj == null) {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            if (obj == null && parentModel && !ignoreParent) {\r\n\t                obj = parentModel.get(path);\r\n\t            }\r\n\t            return obj;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} key\r\n\t         * @param {boolean} [ignoreParent=false]\r\n\t         * @return {*}\r\n\t         */\r\n\t        getShallow: function (key, ignoreParent) {\r\n\t            var option = this.option;\r\n\r\n\t            var val = option == null ? option : option[key];\r\n\t            var parentModel = this.parentModel;\r\n\t            if (val == null && parentModel && !ignoreParent) {\r\n\t                val = parentModel.getShallow(key);\r\n\t            }\r\n\t            return val;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} path\r\n\t         * @param {module:echarts/model/Model} [parentModel]\r\n\t         * @return {module:echarts/model/Model}\r\n\t         */\r\n\t        getModel: function (path, parentModel) {\r\n\t            var obj = this.get(path, true);\r\n\t            var thisParentModel = this.parentModel;\r\n\t            var model = new Model(\r\n\t                obj, parentModel || (thisParentModel && thisParentModel.getModel(path)),\r\n\t                this.ecModel\r\n\t            );\r\n\t            return model;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If model has option\r\n\t         */\r\n\t        isEmpty: function () {\r\n\t            return this.option == null;\r\n\t        },\r\n\r\n\t        restoreData: function () {},\r\n\r\n\t        // Pending\r\n\t        clone: function () {\r\n\t            var Ctor = this.constructor;\r\n\t            return new Ctor(zrUtil.clone(this.option));\r\n\t        },\r\n\r\n\t        setReadOnly: function (properties) {\r\n\t            clazzUtil.setReadOnly(this, properties);\r\n\t        }\r\n\t    };\r\n\r\n\t    // Enable Model.extend.\r\n\t    clazzUtil.enableClassExtend(Model);\r\n\r\n\t    var mixin = zrUtil.mixin;\r\n\t    mixin(Model, __webpack_require__(14));\r\n\t    mixin(Model, __webpack_require__(16));\r\n\t    mixin(Model, __webpack_require__(17));\r\n\t    mixin(Model, __webpack_require__(18));\r\n\r\n\t    module.exports = Model;\r\n\r\n\r\n/***/ },\r\n/* 13 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var clazz = {};\r\n\r\n\t    var TYPE_DELIMITER = '.';\r\n\t    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';\r\n\t    /**\r\n\t     * @public\r\n\t     */\r\n\t    var parseClassType = clazz.parseClassType = function (componentType) {\r\n\t        var ret = {main: '', sub: ''};\r\n\t        if (componentType) {\r\n\t            componentType = componentType.split(TYPE_DELIMITER);\r\n\t            ret.main = componentType[0] || '';\r\n\t            ret.sub = componentType[1] || '';\r\n\t        }\r\n\t        return ret;\r\n\t    };\r\n\t    /**\r\n\t     * @public\r\n\t     */\r\n\t    clazz.enableClassExtend = function (RootClass, mandatoryMethods) {\r\n\r\n\t        RootClass.$constructor = RootClass;\r\n\t        RootClass.extend = function (proto) {\r\n\r\n\t            if (true) {\r\n\t                zrUtil.each(mandatoryMethods, function (method) {\r\n\t                    if (!proto[method]) {\r\n\t                        console.warn(\r\n\t                            'Method `' + method + '` should be implemented'\r\n\t                            + (proto.type ? ' in ' + proto.type : '') + '.'\r\n\t                        );\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\r\n\t            var superClass = this;\r\n\t            var ExtendedClass = function () {\r\n\t                if (!proto.$constructor) {\r\n\t                    superClass.apply(this, arguments);\r\n\t                }\r\n\t                else {\r\n\t                    proto.$constructor.apply(this, arguments);\r\n\t                }\r\n\t            };\r\n\r\n\t            zrUtil.extend(ExtendedClass.prototype, proto);\r\n\r\n\t            ExtendedClass.extend = this.extend;\r\n\t            ExtendedClass.superCall = superCall;\r\n\t            ExtendedClass.superApply = superApply;\r\n\t            zrUtil.inherits(ExtendedClass, this);\r\n\t            ExtendedClass.superClass = superClass;\r\n\r\n\t            return ExtendedClass;\r\n\t        };\r\n\t    };\r\n\r\n\t    // superCall should have class info, which can not be fetch from 'this'.\r\n\t    // Consider this case:\r\n\t    // class A has method f,\r\n\t    // class B inherits class A, overrides method f, f call superApply('f'),\r\n\t    // class C inherits class B, do not overrides method f,\r\n\t    // then when method of class C is called, dead loop occured.\r\n\t    function superCall(context, methodName) {\r\n\t        var args = zrUtil.slice(arguments, 2);\r\n\t        return this.superClass.prototype[methodName].apply(context, args);\r\n\t    }\r\n\r\n\t    function superApply(context, methodName, args) {\r\n\t        return this.superClass.prototype[methodName].apply(context, args);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {Object} entity\r\n\t     * @param {Object} options\r\n\t     * @param {boolean} [options.registerWhenExtend]\r\n\t     * @public\r\n\t     */\r\n\t    clazz.enableClassManagement = function (entity, options) {\r\n\t        options = options || {};\r\n\r\n\t        /**\r\n\t         * Component model classes\r\n\t         * key: componentType,\r\n\t         * value:\r\n\t         *     componentClass, when componentType is 'xxx'\r\n\t         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'\r\n\t         * @type {Object}\r\n\t         */\r\n\t        var storage = {};\r\n\r\n\t        entity.registerClass = function (Clazz, componentType) {\r\n\t            if (componentType) {\r\n\t                componentType = parseClassType(componentType);\r\n\r\n\t                if (!componentType.sub) {\r\n\t                    if (true) {\r\n\t                        if (storage[componentType.main]) {\r\n\t                            console.warn(componentType.main + ' exists.');\r\n\t                        }\r\n\t                    }\r\n\t                    storage[componentType.main] = Clazz;\r\n\t                }\r\n\t                else if (componentType.sub !== IS_CONTAINER) {\r\n\t                    var container = makeContainer(componentType);\r\n\t                    container[componentType.sub] = Clazz;\r\n\t                }\r\n\t            }\r\n\t            return Clazz;\r\n\t        };\r\n\r\n\t        entity.getClass = function (componentTypeMain, subType, throwWhenNotFound) {\r\n\t            var Clazz = storage[componentTypeMain];\r\n\r\n\t            if (Clazz && Clazz[IS_CONTAINER]) {\r\n\t                Clazz = subType ? Clazz[subType] : null;\r\n\t            }\r\n\r\n\t            if (throwWhenNotFound && !Clazz) {\r\n\t                throw new Error(\r\n\t                    'Component ' + componentTypeMain + '.' + (subType || '') + ' not exists. Load it first.'\r\n\t                );\r\n\t            }\r\n\r\n\t            return Clazz;\r\n\t        };\r\n\r\n\t        entity.getClassesByMainType = function (componentType) {\r\n\t            componentType = parseClassType(componentType);\r\n\r\n\t            var result = [];\r\n\t            var obj = storage[componentType.main];\r\n\r\n\t            if (obj && obj[IS_CONTAINER]) {\r\n\t                zrUtil.each(obj, function (o, type) {\r\n\t                    type !== IS_CONTAINER && result.push(o);\r\n\t                });\r\n\t            }\r\n\t            else {\r\n\t                result.push(obj);\r\n\t            }\r\n\r\n\t            return result;\r\n\t        };\r\n\r\n\t        entity.hasClass = function (componentType) {\r\n\t            // Just consider componentType.main.\r\n\t            componentType = parseClassType(componentType);\r\n\t            return !!storage[componentType.main];\r\n\t        };\r\n\r\n\t        /**\r\n\t         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']\r\n\t         */\r\n\t        entity.getAllClassMainTypes = function () {\r\n\t            var types = [];\r\n\t            zrUtil.each(storage, function (obj, type) {\r\n\t                types.push(type);\r\n\t            });\r\n\t            return types;\r\n\t        };\r\n\r\n\t        /**\r\n\t         * If a main type is container and has sub types\r\n\t         * @param  {string}  mainType\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        entity.hasSubTypes = function (componentType) {\r\n\t            componentType = parseClassType(componentType);\r\n\t            var obj = storage[componentType.main];\r\n\t            return obj && obj[IS_CONTAINER];\r\n\t        };\r\n\r\n\t        entity.parseClassType = parseClassType;\r\n\r\n\t        function makeContainer(componentType) {\r\n\t            var container = storage[componentType.main];\r\n\t            if (!container || !container[IS_CONTAINER]) {\r\n\t                container = storage[componentType.main] = {};\r\n\t                container[IS_CONTAINER] = true;\r\n\t            }\r\n\t            return container;\r\n\t        }\r\n\r\n\t        if (options.registerWhenExtend) {\r\n\t            var originalExtend = entity.extend;\r\n\t            if (originalExtend) {\r\n\t                entity.extend = function (proto) {\r\n\t                    var ExtendedClass = originalExtend.call(this, proto);\r\n\t                    return entity.registerClass(ExtendedClass, proto.type);\r\n\t                };\r\n\t            }\r\n\t        }\r\n\r\n\t        return entity;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {string|Array.<string>} properties\r\n\t     */\r\n\t    clazz.setReadOnly = function (obj, properties) {\r\n\t        // FIXME It seems broken in IE8 simulation of IE11\r\n\t        // if (!zrUtil.isArray(properties)) {\r\n\t        //     properties = properties != null ? [properties] : [];\r\n\t        // }\r\n\t        // zrUtil.each(properties, function (prop) {\r\n\t        //     var value = obj[prop];\r\n\r\n\t        //     Object.defineProperty\r\n\t        //         && Object.defineProperty(obj, prop, {\r\n\t        //             value: value, writable: false\r\n\t        //         });\r\n\t        //     zrUtil.isArray(obj[prop])\r\n\t        //         && Object.freeze\r\n\t        //         && Object.freeze(obj[prop]);\r\n\t        // });\r\n\t    };\r\n\r\n\t    module.exports = clazz;\r\n\r\n\r\n/***/ },\r\n/* 14 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    var getLineStyle = __webpack_require__(15)(\r\n\t        [\r\n\t            ['lineWidth', 'width'],\r\n\t            ['stroke', 'color'],\r\n\t            ['opacity'],\r\n\t            ['shadowBlur'],\r\n\t            ['shadowOffsetX'],\r\n\t            ['shadowOffsetY'],\r\n\t            ['shadowColor']\r\n\t        ]\r\n\t    );\r\n\t    module.exports = {\r\n\t        getLineStyle: function (excludes) {\r\n\t            var style = getLineStyle.call(this, excludes);\r\n\t            var lineDash = this.getLineDash(style.lineWidth);\r\n\t            lineDash && (style.lineDash = lineDash);\r\n\t            return style;\r\n\t        },\r\n\r\n\t        getLineDash: function (lineWidth) {\r\n\t            if (lineWidth == null) {\r\n\t                lineWidth = 1;\r\n\t            }\r\n\t            var lineType = this.get('type');\r\n\t            var dotSize = Math.max(lineWidth, 2);\r\n\t            var dashSize = lineWidth * 4;\r\n\t            return (lineType === 'solid' || lineType == null) ? null\r\n\t                : (lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize]);\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 15 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// TODO Parse shadow style\r\n\t// TODO Only shallow path support\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    module.exports = function (properties) {\r\n\t        // Normalize\r\n\t        for (var i = 0; i < properties.length; i++) {\r\n\t            if (!properties[i][1]) {\r\n\t               properties[i][1] = properties[i][0];\r\n\t            }\r\n\t        }\r\n\t        return function (excludes) {\r\n\t            var style = {};\r\n\t            for (var i = 0; i < properties.length; i++) {\r\n\t                var propName = properties[i][1];\r\n\t                if (excludes && zrUtil.indexOf(excludes, propName) >= 0) {\r\n\t                    continue;\r\n\t                }\r\n\t                var val = this.getShallow(propName);\r\n\t                if (val != null) {\r\n\t                    style[properties[i][0]] = val;\r\n\t                }\r\n\t            }\r\n\t            return style;\r\n\t        };\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 16 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    module.exports = {\r\n\t        getAreaStyle: __webpack_require__(15)(\r\n\t            [\r\n\t                ['fill', 'color'],\r\n\t                ['shadowBlur'],\r\n\t                ['shadowOffsetX'],\r\n\t                ['shadowOffsetY'],\r\n\t                ['opacity'],\r\n\t                ['shadowColor']\r\n\t            ]\r\n\t        )\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 17 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var textContain = __webpack_require__(8);\r\n\r\n\t    function getShallow(model, path) {\r\n\t        return model && model.getShallow(path);\r\n\t    }\r\n\r\n\t    module.exports = {\r\n\t        /**\r\n\t         * Get color property or get color from option.textStyle.color\r\n\t         * @return {string}\r\n\t         */\r\n\t        getTextColor: function () {\r\n\t            var ecModel = this.ecModel;\r\n\t            return this.getShallow('color')\r\n\t                || (ecModel && ecModel.get('textStyle.color'));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Create font string from fontStyle, fontWeight, fontSize, fontFamily\r\n\t         * @return {string}\r\n\t         */\r\n\t        getFont: function () {\r\n\t            var ecModel = this.ecModel;\r\n\t            var gTextStyleModel = ecModel && ecModel.getModel('textStyle');\r\n\t            return [\r\n\t                // FIXME in node-canvas fontWeight is before fontStyle\r\n\t                this.getShallow('fontStyle') || getShallow(gTextStyleModel, 'fontStyle'),\r\n\t                this.getShallow('fontWeight') || getShallow(gTextStyleModel, 'fontWeight'),\r\n\t                (this.getShallow('fontSize') || getShallow(gTextStyleModel, 'fontSize') || 12) + 'px',\r\n\t                this.getShallow('fontFamily') || getShallow(gTextStyleModel, 'fontFamily') || 'sans-serif'\r\n\t            ].join(' ');\r\n\t        },\r\n\r\n\t        getTextRect: function (text) {\r\n\t            var textStyle = this.get('textStyle') || {};\r\n\t            return textContain.getBoundingRect(\r\n\t                text,\r\n\t                this.getFont(),\r\n\t                textStyle.align,\r\n\t                textStyle.baseline\r\n\t            );\r\n\t        },\r\n\r\n\t        truncateText: function (text, containerWidth, ellipsis, options) {\r\n\t            return textContain.truncateText(\r\n\t                text, containerWidth, this.getFont(), ellipsis, options\r\n\t            );\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 18 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    var getItemStyle = __webpack_require__(15)(\r\n\t        [\r\n\t            ['fill', 'color'],\r\n\t            ['stroke', 'borderColor'],\r\n\t            ['lineWidth', 'borderWidth'],\r\n\t            ['opacity'],\r\n\t            ['shadowBlur'],\r\n\t            ['shadowOffsetX'],\r\n\t            ['shadowOffsetY'],\r\n\t            ['shadowColor'],\r\n\t            ['textPosition'],\r\n\t            ['textAlign']\r\n\t        ]\r\n\t    );\r\n\t    module.exports = {\r\n\t        getItemStyle: function (excludes) {\r\n\t            var style = getItemStyle.call(this, excludes);\r\n\t            var lineDash = this.getBorderLineDash();\r\n\t            lineDash && (style.lineDash = lineDash);\r\n\t            return style;\r\n\t        },\r\n\r\n\t        getBorderLineDash: function () {\r\n\t            var lineType = this.get('borderType');\r\n\t            return (lineType === 'solid' || lineType == null) ? null\r\n\t                : (lineType === 'dashed' ? [5, 5] : [1, 1]);\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 19 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Component model\r\n\t *\r\n\t * @module echarts/model/Component\r\n\t */\r\n\r\n\r\n\t    var Model = __webpack_require__(12);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var arrayPush = Array.prototype.push;\r\n\t    var componentUtil = __webpack_require__(20);\r\n\t    var clazzUtil = __webpack_require__(13);\r\n\t    var layout = __webpack_require__(21);\r\n\r\n\t    /**\r\n\t     * @alias module:echarts/model/Component\r\n\t     * @constructor\r\n\t     * @param {Object} option\r\n\t     * @param {module:echarts/model/Model} parentModel\r\n\t     * @param {module:echarts/model/Model} ecModel\r\n\t     */\r\n\t    var ComponentModel = Model.extend({\r\n\r\n\t        type: 'component',\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {string}\r\n\t         */\r\n\t        id: '',\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         */\r\n\t        name: '',\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {string}\r\n\t         */\r\n\t        mainType: '',\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {string}\r\n\t         */\r\n\t        subType: '',\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {number}\r\n\t         */\r\n\t        componentIndex: 0,\r\n\r\n\t        /**\r\n\t         * @type {Object}\r\n\t         * @protected\r\n\t         */\r\n\t        defaultOption: null,\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/model/Global}\r\n\t         * @readOnly\r\n\t         */\r\n\t        ecModel: null,\r\n\r\n\t        /**\r\n\t         * key: componentType\r\n\t         * value:  Component model list, can not be null.\r\n\t         * @type {Object.<string, Array.<module:echarts/model/Model>>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        dependentModels: [],\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         * @readOnly\r\n\t         */\r\n\t        uid: null,\r\n\r\n\t        /**\r\n\t         * Support merge layout params.\r\n\t         * Only support 'box' now (left/right/top/bottom/width/height).\r\n\t         * @type {string|Object} Object can be {ignoreSize: true}\r\n\t         * @readOnly\r\n\t         */\r\n\t        layoutMode: null,\r\n\r\n\t        $constructor: function (option, parentModel, ecModel, extraOpt) {\r\n\t            Model.call(this, option, parentModel, ecModel, extraOpt);\r\n\r\n\t            this.uid = componentUtil.getUID('componentModel');\r\n\t        },\r\n\r\n\r\n\t        init: function (option, parentModel, ecModel, extraOpt) {\r\n\t            this.mergeDefaultAndTheme(option, ecModel);\r\n\t        },\r\n\r\n\t        mergeDefaultAndTheme: function (option, ecModel) {\r\n\t            var layoutMode = this.layoutMode;\r\n\t            var inputPositionParams = layoutMode\r\n\t                ? layout.getLayoutParams(option) : {};\r\n\r\n\t            var themeModel = ecModel.getTheme();\r\n\t            zrUtil.merge(option, themeModel.get(this.mainType));\r\n\t            zrUtil.merge(option, this.getDefaultOption());\r\n\r\n\t            if (layoutMode) {\r\n\t                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\r\n\t            }\r\n\t        },\r\n\r\n\t        mergeOption: function (option, extraOpt) {\r\n\t            zrUtil.merge(this.option, option, true);\r\n\r\n\t            var layoutMode = this.layoutMode;\r\n\t            if (layoutMode) {\r\n\t                layout.mergeLayoutParam(this.option, option, layoutMode);\r\n\t            }\r\n\t        },\r\n\r\n\t        // Hooker after init or mergeOption\r\n\t        optionUpdated: function (newCptOption, isInit) {},\r\n\r\n\t        getDefaultOption: function () {\r\n\t            if (!this.hasOwnProperty('__defaultOption')) {\r\n\t                var optList = [];\r\n\t                var Class = this.constructor;\r\n\t                while (Class) {\r\n\t                    var opt = Class.prototype.defaultOption;\r\n\t                    opt && optList.push(opt);\r\n\t                    Class = Class.superClass;\r\n\t                }\r\n\r\n\t                var defaultOption = {};\r\n\t                for (var i = optList.length - 1; i >= 0; i--) {\r\n\t                    defaultOption = zrUtil.merge(defaultOption, optList[i], true);\r\n\t                }\r\n\t                this.__defaultOption = defaultOption;\r\n\t            }\r\n\t            return this.__defaultOption;\r\n\t        },\r\n\r\n\t        getReferringComponents: function (mainType) {\r\n\t            return this.ecModel.queryComponents({\r\n\t                mainType: mainType,\r\n\t                index: this.get(mainType + 'Index', true),\r\n\t                id: this.get(mainType + 'Id', true)\r\n\t            });\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    // Reset ComponentModel.extend, add preConstruct.\r\n\t    // clazzUtil.enableClassExtend(\r\n\t    //     ComponentModel,\r\n\t    //     function (option, parentModel, ecModel, extraOpt) {\r\n\t    //         // Set dependentModels, componentIndex, name, id, mainType, subType.\r\n\t    //         zrUtil.extend(this, extraOpt);\r\n\r\n\t    //         this.uid = componentUtil.getUID('componentModel');\r\n\r\n\t    //         // this.setReadOnly([\r\n\t    //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',\r\n\t    //         //     'dependentModels', 'componentIndex'\r\n\t    //         // ]);\r\n\t    //     }\r\n\t    // );\r\n\r\n\t    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\r\n\t    clazzUtil.enableClassManagement(\r\n\t        ComponentModel, {registerWhenExtend: true}\r\n\t    );\r\n\t    componentUtil.enableSubTypeDefaulter(ComponentModel);\r\n\r\n\t    // Add capability of ComponentModel.topologicalTravel.\r\n\t    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);\r\n\r\n\t    function getDependencies(componentType) {\r\n\t        var deps = [];\r\n\t        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {\r\n\t            arrayPush.apply(deps, Clazz.prototype.dependencies || []);\r\n\t        });\r\n\t        // Ensure main type\r\n\t        return zrUtil.map(deps, function (type) {\r\n\t            return clazzUtil.parseClassType(type).main;\r\n\t        });\r\n\t    }\r\n\r\n\t    zrUtil.mixin(ComponentModel, __webpack_require__(22));\r\n\r\n\t    module.exports = ComponentModel;\r\n\r\n\r\n/***/ },\r\n/* 20 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var clazz = __webpack_require__(13);\r\n\r\n\t    var parseClassType = clazz.parseClassType;\r\n\r\n\t    var base = 0;\r\n\r\n\t    var componentUtil = {};\r\n\r\n\t    var DELIMITER = '_';\r\n\r\n\t    /**\r\n\t     * @public\r\n\t     * @param {string} type\r\n\t     * @return {string}\r\n\t     */\r\n\t    componentUtil.getUID = function (type) {\r\n\t        // Considering the case of crossing js context,\r\n\t        // use Math.random to make id as unique as possible.\r\n\t        return [(type || ''), base++, Math.random()].join(DELIMITER);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    componentUtil.enableSubTypeDefaulter = function (entity) {\r\n\r\n\t        var subTypeDefaulters = {};\r\n\r\n\t        entity.registerSubTypeDefaulter = function (componentType, defaulter) {\r\n\t            componentType = parseClassType(componentType);\r\n\t            subTypeDefaulters[componentType.main] = defaulter;\r\n\t        };\r\n\r\n\t        entity.determineSubType = function (componentType, option) {\r\n\t            var type = option.type;\r\n\t            if (!type) {\r\n\t                var componentTypeMain = parseClassType(componentType).main;\r\n\t                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {\r\n\t                    type = subTypeDefaulters[componentTypeMain](option);\r\n\t                }\r\n\t            }\r\n\t            return type;\r\n\t        };\r\n\r\n\t        return entity;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Topological travel on Activity Network (Activity On Vertices).\r\n\t     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].\r\n\t     *\r\n\t     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.\r\n\t     *\r\n\t     * If there is circle dependencey, Error will be thrown.\r\n\t     *\r\n\t     */\r\n\t    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {Array.<string>} targetNameList Target Component type list.\r\n\t         *                                           Can be ['aa', 'bb', 'aa.xx']\r\n\t         * @param {Array.<string>} fullNameList By which we can build dependency graph.\r\n\t         * @param {Function} callback Params: componentType, dependencies.\r\n\t         * @param {Object} context Scope of callback.\r\n\t         */\r\n\t        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {\r\n\t            if (!targetNameList.length) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var result = makeDepndencyGraph(fullNameList);\r\n\t            var graph = result.graph;\r\n\t            var stack = result.noEntryList;\r\n\r\n\t            var targetNameSet = {};\r\n\t            zrUtil.each(targetNameList, function (name) {\r\n\t                targetNameSet[name] = true;\r\n\t            });\r\n\r\n\t            while (stack.length) {\r\n\t                var currComponentType = stack.pop();\r\n\t                var currVertex = graph[currComponentType];\r\n\t                var isInTargetNameSet = !!targetNameSet[currComponentType];\r\n\t                if (isInTargetNameSet) {\r\n\t                    callback.call(context, currComponentType, currVertex.originalDeps.slice());\r\n\t                    delete targetNameSet[currComponentType];\r\n\t                }\r\n\t                zrUtil.each(\r\n\t                    currVertex.successor,\r\n\t                    isInTargetNameSet ? removeEdgeAndAdd : removeEdge\r\n\t                );\r\n\t            }\r\n\r\n\t            zrUtil.each(targetNameSet, function () {\r\n\t                throw new Error('Circle dependency may exists');\r\n\t            });\r\n\r\n\t            function removeEdge(succComponentType) {\r\n\t                graph[succComponentType].entryCount--;\r\n\t                if (graph[succComponentType].entryCount === 0) {\r\n\t                    stack.push(succComponentType);\r\n\t                }\r\n\t            }\r\n\r\n\t            // Consider this case: legend depends on series, and we call\r\n\t            // chart.setOption({series: [...]}), where only series is in option.\r\n\t            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will\r\n\t            // not be called, but only sereis.mergeOption is called. Thus legend\r\n\t            // have no chance to update its local record about series (like which\r\n\t            // name of series is available in legend).\r\n\t            function removeEdgeAndAdd(succComponentType) {\r\n\t                targetNameSet[succComponentType] = true;\r\n\t                removeEdge(succComponentType);\r\n\t            }\r\n\t        };\r\n\r\n\t        /**\r\n\t         * DepndencyGraph: {Object}\r\n\t         * key: conponentType,\r\n\t         * value: {\r\n\t         *     successor: [conponentTypes...],\r\n\t         *     originalDeps: [conponentTypes...],\r\n\t         *     entryCount: {number}\r\n\t         * }\r\n\t         */\r\n\t        function makeDepndencyGraph(fullNameList) {\r\n\t            var graph = {};\r\n\t            var noEntryList = [];\r\n\r\n\t            zrUtil.each(fullNameList, function (name) {\r\n\r\n\t                var thisItem = createDependencyGraphItem(graph, name);\r\n\t                var originalDeps = thisItem.originalDeps = dependencyGetter(name);\r\n\r\n\t                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);\r\n\t                thisItem.entryCount = availableDeps.length;\r\n\t                if (thisItem.entryCount === 0) {\r\n\t                    noEntryList.push(name);\r\n\t                }\r\n\r\n\t                zrUtil.each(availableDeps, function (dependentName) {\r\n\t                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {\r\n\t                        thisItem.predecessor.push(dependentName);\r\n\t                    }\r\n\t                    var thatItem = createDependencyGraphItem(graph, dependentName);\r\n\t                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {\r\n\t                        thatItem.successor.push(name);\r\n\t                    }\r\n\t                });\r\n\t            });\r\n\r\n\t            return {graph: graph, noEntryList: noEntryList};\r\n\t        }\r\n\r\n\t        function createDependencyGraphItem(graph, name) {\r\n\t            if (!graph[name]) {\r\n\t                graph[name] = {predecessor: [], successor: []};\r\n\t            }\r\n\t            return graph[name];\r\n\t        }\r\n\r\n\t        function getAvailableDependencies(originalDeps, fullNameList) {\r\n\t            var availableDeps = [];\r\n\t            zrUtil.each(originalDeps, function (dep) {\r\n\t                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);\r\n\t            });\r\n\t            return availableDeps;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = componentUtil;\r\n\r\n\r\n/***/ },\r\n/* 21 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t// Layout helpers for each component positioning\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var parsePercent = numberUtil.parsePercent;\r\n\t    var each = zrUtil.each;\r\n\r\n\t    var layout = {};\r\n\r\n\t    var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];\r\n\r\n\t    function boxLayout(orient, group, gap, maxWidth, maxHeight) {\r\n\t        var x = 0;\r\n\t        var y = 0;\r\n\t        if (maxWidth == null) {\r\n\t            maxWidth = Infinity;\r\n\t        }\r\n\t        if (maxHeight == null) {\r\n\t            maxHeight = Infinity;\r\n\t        }\r\n\t        var currentLineMaxSize = 0;\r\n\t        group.eachChild(function (child, idx) {\r\n\t            var position = child.position;\r\n\t            var rect = child.getBoundingRect();\r\n\t            var nextChild = group.childAt(idx + 1);\r\n\t            var nextChildRect = nextChild && nextChild.getBoundingRect();\r\n\t            var nextX;\r\n\t            var nextY;\r\n\t            if (orient === 'horizontal') {\r\n\t                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);\r\n\t                nextX = x + moveX;\r\n\t                // Wrap when width exceeds maxWidth or meet a `newline` group\r\n\t                if (nextX > maxWidth || child.newline) {\r\n\t                    x = 0;\r\n\t                    nextX = moveX;\r\n\t                    y += currentLineMaxSize + gap;\r\n\t                    currentLineMaxSize = rect.height;\r\n\t                }\r\n\t                else {\r\n\t                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);\r\n\t                nextY = y + moveY;\r\n\t                // Wrap when width exceeds maxHeight or meet a `newline` group\r\n\t                if (nextY > maxHeight || child.newline) {\r\n\t                    x += currentLineMaxSize + gap;\r\n\t                    y = 0;\r\n\t                    nextY = moveY;\r\n\t                    currentLineMaxSize = rect.width;\r\n\t                }\r\n\t                else {\r\n\t                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);\r\n\t                }\r\n\t            }\r\n\r\n\t            if (child.newline) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            position[0] = x;\r\n\t            position[1] = y;\r\n\r\n\t            orient === 'horizontal'\r\n\t                ? (x = nextX + gap)\r\n\t                : (y = nextY + gap);\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * VBox or HBox layouting\r\n\t     * @param {string} orient\r\n\t     * @param {module:zrender/container/Group} group\r\n\t     * @param {number} gap\r\n\t     * @param {number} [width=Infinity]\r\n\t     * @param {number} [height=Infinity]\r\n\t     */\r\n\t    layout.box = boxLayout;\r\n\r\n\t    /**\r\n\t     * VBox layouting\r\n\t     * @param {module:zrender/container/Group} group\r\n\t     * @param {number} gap\r\n\t     * @param {number} [width=Infinity]\r\n\t     * @param {number} [height=Infinity]\r\n\t     */\r\n\t    layout.vbox = zrUtil.curry(boxLayout, 'vertical');\r\n\r\n\t    /**\r\n\t     * HBox layouting\r\n\t     * @param {module:zrender/container/Group} group\r\n\t     * @param {number} gap\r\n\t     * @param {number} [width=Infinity]\r\n\t     * @param {number} [height=Infinity]\r\n\t     */\r\n\t    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');\r\n\r\n\t    /**\r\n\t     * If x or x2 is not specified or 'center' 'left' 'right',\r\n\t     * the width would be as long as possible.\r\n\t     * If y or y2 is not specified or 'middle' 'top' 'bottom',\r\n\t     * the height would be as long as possible.\r\n\t     *\r\n\t     * @param {Object} positionInfo\r\n\t     * @param {number|string} [positionInfo.x]\r\n\t     * @param {number|string} [positionInfo.y]\r\n\t     * @param {number|string} [positionInfo.x2]\r\n\t     * @param {number|string} [positionInfo.y2]\r\n\t     * @param {Object} containerRect\r\n\t     * @param {string|number} margin\r\n\t     * @return {Object} {width, height}\r\n\t     */\r\n\t    layout.getAvailableSize = function (positionInfo, containerRect, margin) {\r\n\t        var containerWidth = containerRect.width;\r\n\t        var containerHeight = containerRect.height;\r\n\r\n\t        var x = parsePercent(positionInfo.x, containerWidth);\r\n\t        var y = parsePercent(positionInfo.y, containerHeight);\r\n\t        var x2 = parsePercent(positionInfo.x2, containerWidth);\r\n\t        var y2 = parsePercent(positionInfo.y2, containerHeight);\r\n\r\n\t        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);\r\n\t        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);\r\n\t        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);\r\n\t        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);\r\n\r\n\t        margin = formatUtil.normalizeCssArray(margin || 0);\r\n\r\n\t        return {\r\n\t            width: Math.max(x2 - x - margin[1] - margin[3], 0),\r\n\t            height: Math.max(y2 - y - margin[0] - margin[2], 0)\r\n\t        };\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Parse position info.\r\n\t     *\r\n\t     * @param {Object} positionInfo\r\n\t     * @param {number|string} [positionInfo.left]\r\n\t     * @param {number|string} [positionInfo.top]\r\n\t     * @param {number|string} [positionInfo.right]\r\n\t     * @param {number|string} [positionInfo.bottom]\r\n\t     * @param {number|string} [positionInfo.width]\r\n\t     * @param {number|string} [positionInfo.height]\r\n\t     * @param {number|string} [positionInfo.aspect] Aspect is width / height\r\n\t     * @param {Object} containerRect\r\n\t     * @param {string|number} [margin]\r\n\t     *\r\n\t     * @return {module:zrender/core/BoundingRect}\r\n\t     */\r\n\t    layout.getLayoutRect = function (\r\n\t        positionInfo, containerRect, margin\r\n\t    ) {\r\n\t        margin = formatUtil.normalizeCssArray(margin || 0);\r\n\r\n\t        var containerWidth = containerRect.width;\r\n\t        var containerHeight = containerRect.height;\r\n\r\n\t        var left = parsePercent(positionInfo.left, containerWidth);\r\n\t        var top = parsePercent(positionInfo.top, containerHeight);\r\n\t        var right = parsePercent(positionInfo.right, containerWidth);\r\n\t        var bottom = parsePercent(positionInfo.bottom, containerHeight);\r\n\t        var width = parsePercent(positionInfo.width, containerWidth);\r\n\t        var height = parsePercent(positionInfo.height, containerHeight);\r\n\r\n\t        var verticalMargin = margin[2] + margin[0];\r\n\t        var horizontalMargin = margin[1] + margin[3];\r\n\t        var aspect = positionInfo.aspect;\r\n\r\n\t        // If width is not specified, calculate width from left and right\r\n\t        if (isNaN(width)) {\r\n\t            width = containerWidth - right - horizontalMargin - left;\r\n\t        }\r\n\t        if (isNaN(height)) {\r\n\t            height = containerHeight - bottom - verticalMargin - top;\r\n\t        }\r\n\r\n\t        // If width and height are not given\r\n\t        // 1. Graph should not exceeds the container\r\n\t        // 2. Aspect must be keeped\r\n\t        // 3. Graph should take the space as more as possible\r\n\t        if (isNaN(width) && isNaN(height)) {\r\n\t            if (aspect > containerWidth / containerHeight) {\r\n\t                width = containerWidth * 0.8;\r\n\t            }\r\n\t            else {\r\n\t                height = containerHeight * 0.8;\r\n\t            }\r\n\t        }\r\n\r\n\t        if (aspect != null) {\r\n\t            // Calculate width or height with given aspect\r\n\t            if (isNaN(width)) {\r\n\t                width = aspect * height;\r\n\t            }\r\n\t            if (isNaN(height)) {\r\n\t                height = width / aspect;\r\n\t            }\r\n\t        }\r\n\r\n\t        // If left is not specified, calculate left from right and width\r\n\t        if (isNaN(left)) {\r\n\t            left = containerWidth - right - width - horizontalMargin;\r\n\t        }\r\n\t        if (isNaN(top)) {\r\n\t            top = containerHeight - bottom - height - verticalMargin;\r\n\t        }\r\n\r\n\t        // Align left and top\r\n\t        switch (positionInfo.left || positionInfo.right) {\r\n\t            case 'center':\r\n\t                left = containerWidth / 2 - width / 2 - margin[3];\r\n\t                break;\r\n\t            case 'right':\r\n\t                left = containerWidth - width - horizontalMargin;\r\n\t                break;\r\n\t        }\r\n\t        switch (positionInfo.top || positionInfo.bottom) {\r\n\t            case 'middle':\r\n\t            case 'center':\r\n\t                top = containerHeight / 2 - height / 2 - margin[0];\r\n\t                break;\r\n\t            case 'bottom':\r\n\t                top = containerHeight - height - verticalMargin;\r\n\t                break;\r\n\t        }\r\n\t        // If something is wrong and left, top, width, height are calculated as NaN\r\n\t        left = left || 0;\r\n\t        top = top || 0;\r\n\t        if (isNaN(width)) {\r\n\t            // Width may be NaN if only one value is given except width\r\n\t            width = containerWidth - left - (right || 0);\r\n\t        }\r\n\t        if (isNaN(height)) {\r\n\t            // Height may be NaN if only one value is given except height\r\n\t            height = containerHeight - top - (bottom || 0);\r\n\t        }\r\n\r\n\t        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);\r\n\t        rect.margin = margin;\r\n\t        return rect;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Position group of component in viewport\r\n\t     *  Group position is specified by either\r\n\t     *  {left, top}, {right, bottom}\r\n\t     *  If all properties exists, right and bottom will be igonred.\r\n\t     *\r\n\t     * @param {module:zrender/container/Group} group\r\n\t     * @param {Object} positionInfo\r\n\t     * @param {number|string} [positionInfo.left]\r\n\t     * @param {number|string} [positionInfo.top]\r\n\t     * @param {number|string} [positionInfo.right]\r\n\t     * @param {number|string} [positionInfo.bottom]\r\n\t     * @param {Object} containerRect\r\n\t     * @param {string|number} margin\r\n\t     */\r\n\t    layout.positionGroup = function (\r\n\t        group, positionInfo, containerRect, margin\r\n\t    ) {\r\n\t        var groupRect = group.getBoundingRect();\r\n\r\n\t        positionInfo = zrUtil.extend(zrUtil.clone(positionInfo), {\r\n\t            width: groupRect.width,\r\n\t            height: groupRect.height\r\n\t        });\r\n\r\n\t        positionInfo = layout.getLayoutRect(\r\n\t            positionInfo, containerRect, margin\r\n\t        );\r\n\r\n\t        group.attr('position', [\r\n\t            positionInfo.x - groupRect.x,\r\n\t            positionInfo.y - groupRect.y\r\n\t        ]);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Consider Case:\r\n\t     * When defulat option has {left: 0, width: 100}, and we set {right: 0}\r\n\t     * through setOption or media query, using normal zrUtil.merge will cause\r\n\t     * {right: 0} does not take effect.\r\n\t     *\r\n\t     * @example\r\n\t     * ComponentModel.extend({\r\n\t     *     init: function () {\r\n\t     *         ...\r\n\t     *         var inputPositionParams = layout.getLayoutParams(option);\r\n\t     *         this.mergeOption(inputPositionParams);\r\n\t     *     },\r\n\t     *     mergeOption: function (newOption) {\r\n\t     *         newOption && zrUtil.merge(thisOption, newOption, true);\r\n\t     *         layout.mergeLayoutParam(thisOption, newOption);\r\n\t     *     }\r\n\t     * });\r\n\t     *\r\n\t     * @param {Object} targetOption\r\n\t     * @param {Object} newOption\r\n\t     * @param {Object|string} [opt]\r\n\t     * @param {boolean} [opt.ignoreSize=false] Some component must has width and height.\r\n\t     */\r\n\t    layout.mergeLayoutParam = function (targetOption, newOption, opt) {\r\n\t        !zrUtil.isObject(opt) && (opt = {});\r\n\t        var hNames = ['width', 'left', 'right']; // Order by priority.\r\n\t        var vNames = ['height', 'top', 'bottom']; // Order by priority.\r\n\t        var hResult = merge(hNames);\r\n\t        var vResult = merge(vNames);\r\n\r\n\t        copy(hNames, targetOption, hResult);\r\n\t        copy(vNames, targetOption, vResult);\r\n\r\n\t        function merge(names) {\r\n\t            var newParams = {};\r\n\t            var newValueCount = 0;\r\n\t            var merged = {};\r\n\t            var mergedValueCount = 0;\r\n\t            var enoughParamNumber = opt.ignoreSize ? 1 : 2;\r\n\r\n\t            each(names, function (name) {\r\n\t                merged[name] = targetOption[name];\r\n\t            });\r\n\t            each(names, function (name) {\r\n\t                // Consider case: newOption.width is null, which is\r\n\t                // set by user for removing width setting.\r\n\t                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);\r\n\t                hasValue(newParams, name) && newValueCount++;\r\n\t                hasValue(merged, name) && mergedValueCount++;\r\n\t            });\r\n\r\n\t            // Case: newOption: {width: ..., right: ...},\r\n\t            // or targetOption: {right: ...} and newOption: {width: ...},\r\n\t            // There is no conflict when merged only has params count\r\n\t            // little than enoughParamNumber.\r\n\t            if (mergedValueCount === enoughParamNumber || !newValueCount) {\r\n\t                return merged;\r\n\t            }\r\n\t            // Case: newOption: {width: ..., right: ...},\r\n\t            // Than we can make sure user only want those two, and ignore\r\n\t            // all origin params in targetOption.\r\n\t            else if (newValueCount >= enoughParamNumber) {\r\n\t                return newParams;\r\n\t            }\r\n\t            else {\r\n\t                // Chose another param from targetOption by priority.\r\n\t                // When 'ignoreSize', enoughParamNumber is 1 and those will not happen.\r\n\t                for (var i = 0; i < names.length; i++) {\r\n\t                    var name = names[i];\r\n\t                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {\r\n\t                        newParams[name] = targetOption[name];\r\n\t                        break;\r\n\t                    }\r\n\t                }\r\n\t                return newParams;\r\n\t            }\r\n\t        }\r\n\r\n\t        function hasProp(obj, name) {\r\n\t            return obj.hasOwnProperty(name);\r\n\t        }\r\n\r\n\t        function hasValue(obj, name) {\r\n\t            return obj[name] != null && obj[name] !== 'auto';\r\n\t        }\r\n\r\n\t        function copy(names, target, source) {\r\n\t            each(names, function (name) {\r\n\t                target[name] = source[name];\r\n\t            });\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\r\n\t     * @param {Object} source\r\n\t     * @return {Object} Result contains those props.\r\n\t     */\r\n\t    layout.getLayoutParams = function (source) {\r\n\t        return layout.copyLayoutParams({}, source);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\r\n\t     * @param {Object} source\r\n\t     * @return {Object} Result contains those props.\r\n\t     */\r\n\t    layout.copyLayoutParams = function (target, source) {\r\n\t        source && target && each(LOCATION_PARAMS, function (name) {\r\n\t            source.hasOwnProperty(name) && (target[name] = source[name]);\r\n\t        });\r\n\t        return target;\r\n\t    };\r\n\r\n\t    module.exports = layout;\r\n\r\n\r\n/***/ },\r\n/* 22 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    module.exports = {\r\n\t        getBoxLayoutParams: function () {\r\n\t            return {\r\n\t                left: this.get('left'),\r\n\t                top: this.get('top'),\r\n\t                right: this.get('right'),\r\n\t                bottom: this.get('bottom'),\r\n\t                width: this.get('width'),\r\n\t                height: this.get('height')\r\n\t            };\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 23 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\t    var platform = '';\r\n\t    // Navigator not exists in node\r\n\t    if (typeof navigator !== 'undefined') {\r\n\t        platform = navigator.platform || '';\r\n\t    }\r\n\t    module.exports = {\r\n\t        // 全图默认背景\r\n\t        // backgroundColor: 'rgba(0,0,0,0)',\r\n\r\n\t        // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization\r\n\t        // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],\r\n\t        // 浅色\r\n\t        // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],\r\n\t        // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],\r\n\t        // 深色\r\n\t        color: ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],\r\n\r\n\t        // 默认需要 Grid 配置项\r\n\t        // grid: {},\r\n\t        // 主题，主题\r\n\t        textStyle: {\r\n\t            // color: '#000',\r\n\t            // decoration: 'none',\r\n\t            // PENDING\r\n\t            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',\r\n\t            // fontFamily: 'Arial, Verdana, sans-serif',\r\n\t            fontSize: 12,\r\n\t            fontStyle: 'normal',\r\n\t            fontWeight: 'normal'\r\n\t        },\r\n\r\n\t        // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/\r\n\t        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\r\n\t        // Default is source-over\r\n\t        blendMode: null,\r\n\r\n\t        animation: true,\r\n\t        animationDuration: 1000,\r\n\t        animationDurationUpdate: 300,\r\n\t        animationEasing: 'exponentialOut',\r\n\t        animationEasingUpdate: 'cubicOut',\r\n\r\n\t        animationThreshold: 2000,\r\n\t        // Configuration for progressive/incremental rendering\r\n\t        progressiveThreshold: 3000,\r\n\t        progressive: 400,\r\n\r\n\t        // Threshold of if use single hover layer to optimize.\r\n\t        hoverLayerThreshold: 3000\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 24 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\t    module.exports = {\r\n\t        clearColorPalette: function () {\r\n\t            this._colorIdx = 0;\r\n\t            this._colorNameMap = {};\r\n\t        },\r\n\r\n\t        getColorFromPalette: function (name, scope) {\r\n\t            scope = scope || this;\r\n\t            var colorIdx = scope._colorIdx || 0;\r\n\t            var colorNameMap = scope._colorNameMap || (scope._colorNameMap = {});\r\n\t            if (colorNameMap[name]) {\r\n\t                return colorNameMap[name];\r\n\t            }\r\n\t            var colorPalette = this.get('color', true) || [];\r\n\t            if (!colorPalette.length) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var color = colorPalette[colorIdx];\r\n\t            if (name) {\r\n\t                colorNameMap[name] = color;\r\n\t            }\r\n\t            scope._colorIdx = (colorIdx + 1) % colorPalette.length;\r\n\r\n\t            return color;\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 25 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var echartsAPIList = [\r\n\t        'getDom', 'getZr', 'getWidth', 'getHeight', 'dispatchAction', 'isDisposed',\r\n\t        'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption'\r\n\t    ];\r\n\r\n\t    function ExtensionAPI(chartInstance) {\r\n\t        zrUtil.each(echartsAPIList, function (name) {\r\n\t            this[name] = zrUtil.bind(chartInstance[name], chartInstance);\r\n\t        }, this);\r\n\t    }\r\n\r\n\t    module.exports = ExtensionAPI;\r\n\r\n\r\n/***/ },\r\n/* 26 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    /**\r\n\t     * Interface of Coordinate System Class\r\n\t     *\r\n\t     * create:\r\n\t     *     @param {module:echarts/model/Global} ecModel\r\n\t     *     @param {module:echarts/ExtensionAPI} api\r\n\t     *     @return {Object} coordinate system instance\r\n\t     *\r\n\t     * update:\r\n\t     *     @param {module:echarts/model/Global} ecModel\r\n\t     *     @param {module:echarts/ExtensionAPI} api\r\n\t     *\r\n\t     * convertToPixel:\r\n\t     * convertFromPixel:\r\n\t     *     These two methods is also responsible for determine whether this\r\n\t     *     coodinate system is applicable to the given `finder`.\r\n\t     *     Each coordinate system will be tried, util one returns none\r\n\t     *     null/undefined value.\r\n\t     *     @param {module:echarts/model/Global} ecModel\r\n\t     *     @param {Object} finder\r\n\t     *     @param {Array|number} value\r\n\t     *     @return {Array|number} convert result.\r\n\t     *\r\n\t     * containPoint:\r\n\t     *     @param {Array.<number>} point In pixel coordinate system.\r\n\t     *     @return {boolean}\r\n\t     */\r\n\r\n\t    var coordinateSystemCreators = {};\r\n\r\n\t    function CoordinateSystemManager() {\r\n\r\n\t        this._coordinateSystems = [];\r\n\t    }\r\n\r\n\t    CoordinateSystemManager.prototype = {\r\n\r\n\t        constructor: CoordinateSystemManager,\r\n\r\n\t        create: function (ecModel, api) {\r\n\t            var coordinateSystems = [];\r\n\t            zrUtil.each(coordinateSystemCreators, function (creater, type) {\r\n\t                var list = creater.create(ecModel, api);\r\n\t                coordinateSystems = coordinateSystems.concat(list || []);\r\n\t            });\r\n\r\n\t            this._coordinateSystems = coordinateSystems;\r\n\t        },\r\n\r\n\t        update: function (ecModel, api) {\r\n\t            zrUtil.each(this._coordinateSystems, function (coordSys) {\r\n\t                // FIXME MUST have\r\n\t                coordSys.update && coordSys.update(ecModel, api);\r\n\t            });\r\n\t        },\r\n\r\n\t        getCoordinateSystems: function () {\r\n\t            return this._coordinateSystems.slice();\r\n\t        }\r\n\t    };\r\n\r\n\t    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {\r\n\t        coordinateSystemCreators[type] = coordinateSystemCreator;\r\n\t    };\r\n\r\n\t    CoordinateSystemManager.get = function (type) {\r\n\t        return coordinateSystemCreators[type];\r\n\t    };\r\n\r\n\t    module.exports = CoordinateSystemManager;\r\n\r\n\r\n/***/ },\r\n/* 27 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * ECharts option manager\r\n\t *\r\n\t * @module {echarts/model/OptionManager}\r\n\t */\r\n\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var ComponentModel = __webpack_require__(19);\r\n\t    var each = zrUtil.each;\r\n\t    var clone = zrUtil.clone;\r\n\t    var map = zrUtil.map;\r\n\t    var merge = zrUtil.merge;\r\n\r\n\t    var QUERY_REG = /^(min|max)?(.+)$/;\r\n\r\n\t    /**\r\n\t     * TERM EXPLANATIONS:\r\n\t     *\r\n\t     * [option]:\r\n\t     *\r\n\t     *     An object that contains definitions of components. For example:\r\n\t     *     var option = {\r\n\t     *         title: {...},\r\n\t     *         legend: {...},\r\n\t     *         visualMap: {...},\r\n\t     *         series: [\r\n\t     *             {data: [...]},\r\n\t     *             {data: [...]},\r\n\t     *             ...\r\n\t     *         ]\r\n\t     *     };\r\n\t     *\r\n\t     * [rawOption]:\r\n\t     *\r\n\t     *     An object input to echarts.setOption. 'rawOption' may be an\r\n\t     *     'option', or may be an object contains multi-options. For example:\r\n\t     *     var option = {\r\n\t     *         baseOption: {\r\n\t     *             title: {...},\r\n\t     *             legend: {...},\r\n\t     *             series: [\r\n\t     *                 {data: [...]},\r\n\t     *                 {data: [...]},\r\n\t     *                 ...\r\n\t     *             ]\r\n\t     *         },\r\n\t     *         timeline: {...},\r\n\t     *         options: [\r\n\t     *             {title: {...}, series: {data: [...]}},\r\n\t     *             {title: {...}, series: {data: [...]}},\r\n\t     *             ...\r\n\t     *         ],\r\n\t     *         media: [\r\n\t     *             {\r\n\t     *                 query: {maxWidth: 320},\r\n\t     *                 option: {series: {x: 20}, visualMap: {show: false}}\r\n\t     *             },\r\n\t     *             {\r\n\t     *                 query: {minWidth: 320, maxWidth: 720},\r\n\t     *                 option: {series: {x: 500}, visualMap: {show: true}}\r\n\t     *             },\r\n\t     *             {\r\n\t     *                 option: {series: {x: 1200}, visualMap: {show: true}}\r\n\t     *             }\r\n\t     *         ]\r\n\t     *     };\r\n\t     *\r\n\t     * @alias module:echarts/model/OptionManager\r\n\t     * @param {module:echarts/ExtensionAPI} api\r\n\t     */\r\n\t    function OptionManager(api) {\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {module:echarts/ExtensionAPI}\r\n\t         */\r\n\t        this._api = api;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Array.<number>}\r\n\t         */\r\n\t        this._timelineOptions = [];\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Array.<Object>}\r\n\t         */\r\n\t        this._mediaList = [];\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Object}\r\n\t         */\r\n\t        this._mediaDefault;\r\n\r\n\t        /**\r\n\t         * -1, means default.\r\n\t         * empty means no media.\r\n\t         * @private\r\n\t         * @type {Array.<number>}\r\n\t         */\r\n\t        this._currentMediaIndices = [];\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Object}\r\n\t         */\r\n\t        this._optionBackup;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Object}\r\n\t         */\r\n\t        this._newBaseOption;\r\n\t    }\r\n\r\n\t    // timeline.notMerge is not supported in ec3. Firstly there is rearly\r\n\t    // case that notMerge is needed. Secondly supporting 'notMerge' requires\r\n\t    // rawOption cloned and backuped when timeline changed, which does no\r\n\t    // good to performance. What's more, that both timeline and setOption\r\n\t    // method supply 'notMerge' brings complex and some problems.\r\n\t    // Consider this case:\r\n\t    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);\r\n\t    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);\r\n\r\n\t    OptionManager.prototype = {\r\n\r\n\t        constructor: OptionManager,\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {Object} rawOption Raw option.\r\n\t         * @param {module:echarts/model/Global} ecModel\r\n\t         * @param {Array.<Function>} optionPreprocessorFuncs\r\n\t         * @return {Object} Init option\r\n\t         */\r\n\t        setOption: function (rawOption, optionPreprocessorFuncs) {\r\n\t            rawOption = clone(rawOption, true);\r\n\r\n\t            // FIXME\r\n\t            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。\r\n\r\n\t            var oldOptionBackup = this._optionBackup;\r\n\t            var newParsedOption = parseRawOption.call(\r\n\t                this, rawOption, optionPreprocessorFuncs, !oldOptionBackup\r\n\t            );\r\n\t            this._newBaseOption = newParsedOption.baseOption;\r\n\r\n\t            // For setOption at second time (using merge mode);\r\n\t            if (oldOptionBackup) {\r\n\t                // Only baseOption can be merged.\r\n\t                mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption);\r\n\r\n\t                // For simplicity, timeline options and media options do not support merge,\r\n\t                // that is, if you `setOption` twice and both has timeline options, the latter\r\n\t                // timeline opitons will not be merged to the formers, but just substitude them.\r\n\t                if (newParsedOption.timelineOptions.length) {\r\n\t                    oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;\r\n\t                }\r\n\t                if (newParsedOption.mediaList.length) {\r\n\t                    oldOptionBackup.mediaList = newParsedOption.mediaList;\r\n\t                }\r\n\t                if (newParsedOption.mediaDefault) {\r\n\t                    oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                this._optionBackup = newParsedOption;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {boolean} isRecreate\r\n\t         * @return {Object}\r\n\t         */\r\n\t        mountOption: function (isRecreate) {\r\n\t            var optionBackup = this._optionBackup;\r\n\r\n\t            // TODO\r\n\t            // 如果没有reset功能则不clone。\r\n\r\n\t            this._timelineOptions = map(optionBackup.timelineOptions, clone);\r\n\t            this._mediaList = map(optionBackup.mediaList, clone);\r\n\t            this._mediaDefault = clone(optionBackup.mediaDefault);\r\n\t            this._currentMediaIndices = [];\r\n\r\n\t            return clone(isRecreate\r\n\t                // this._optionBackup.baseOption, which is created at the first `setOption`\r\n\t                // called, and is merged into every new option by inner method `mergeOption`\r\n\t                // each time `setOption` called, can be only used in `isRecreate`, because\r\n\t                // its reliability is under suspicion. In other cases option merge is\r\n\t                // proformed by `model.mergeOption`.\r\n\t                ? optionBackup.baseOption : this._newBaseOption\r\n\t            );\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/model/Global} ecModel\r\n\t         * @return {Object}\r\n\t         */\r\n\t        getTimelineOption: function (ecModel) {\r\n\t            var option;\r\n\t            var timelineOptions = this._timelineOptions;\r\n\r\n\t            if (timelineOptions.length) {\r\n\t                // getTimelineOption can only be called after ecModel inited,\r\n\t                // so we can get currentIndex from timelineModel.\r\n\t                var timelineModel = ecModel.getComponent('timeline');\r\n\t                if (timelineModel) {\r\n\t                    option = clone(\r\n\t                        timelineOptions[timelineModel.getCurrentIndex()],\r\n\t                        true\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\r\n\t            return option;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/model/Global} ecModel\r\n\t         * @return {Array.<Object>}\r\n\t         */\r\n\t        getMediaOption: function (ecModel) {\r\n\t            var ecWidth = this._api.getWidth();\r\n\t            var ecHeight = this._api.getHeight();\r\n\t            var mediaList = this._mediaList;\r\n\t            var mediaDefault = this._mediaDefault;\r\n\t            var indices = [];\r\n\t            var result = [];\r\n\r\n\t            // No media defined.\r\n\t            if (!mediaList.length && !mediaDefault) {\r\n\t                return result;\r\n\t            }\r\n\r\n\t            // Multi media may be applied, the latter defined media has higher priority.\r\n\t            for (var i = 0, len = mediaList.length; i < len; i++) {\r\n\t                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {\r\n\t                    indices.push(i);\r\n\t                }\r\n\t            }\r\n\r\n\t            // FIXME\r\n\t            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。\r\n\t            if (!indices.length && mediaDefault) {\r\n\t                indices = [-1];\r\n\t            }\r\n\r\n\t            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {\r\n\t                result = map(indices, function (index) {\r\n\t                    return clone(\r\n\t                        index === -1 ? mediaDefault.option : mediaList[index].option\r\n\t                    );\r\n\t                });\r\n\t            }\r\n\t            // Otherwise return nothing.\r\n\r\n\t            this._currentMediaIndices = indices;\r\n\r\n\t            return result;\r\n\t        }\r\n\t    };\r\n\r\n\t    function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {\r\n\t        var timelineOptions = [];\r\n\t        var mediaList = [];\r\n\t        var mediaDefault;\r\n\t        var baseOption;\r\n\r\n\t        // Compatible with ec2.\r\n\t        var timelineOpt = rawOption.timeline;\r\n\r\n\t        if (rawOption.baseOption) {\r\n\t            baseOption = rawOption.baseOption;\r\n\t        }\r\n\r\n\t        // For timeline\r\n\t        if (timelineOpt || rawOption.options) {\r\n\t            baseOption = baseOption || {};\r\n\t            timelineOptions = (rawOption.options || []).slice();\r\n\t        }\r\n\r\n\t        // For media query\r\n\t        if (rawOption.media) {\r\n\t            baseOption = baseOption || {};\r\n\t            var media = rawOption.media;\r\n\t            each(media, function (singleMedia) {\r\n\t                if (singleMedia && singleMedia.option) {\r\n\t                    if (singleMedia.query) {\r\n\t                        mediaList.push(singleMedia);\r\n\t                    }\r\n\t                    else if (!mediaDefault) {\r\n\t                        // Use the first media default.\r\n\t                        mediaDefault = singleMedia;\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\t        }\r\n\r\n\t        // For normal option\r\n\t        if (!baseOption) {\r\n\t            baseOption = rawOption;\r\n\t        }\r\n\r\n\t        // Set timelineOpt to baseOption in ec3,\r\n\t        // which is convenient for merge option.\r\n\t        if (!baseOption.timeline) {\r\n\t            baseOption.timeline = timelineOpt;\r\n\t        }\r\n\r\n\t        // Preprocess.\r\n\t        each([baseOption].concat(timelineOptions)\r\n\t            .concat(zrUtil.map(mediaList, function (media) {\r\n\t                return media.option;\r\n\t            })),\r\n\t            function (option) {\r\n\t                each(optionPreprocessorFuncs, function (preProcess) {\r\n\t                    preProcess(option, isNew);\r\n\t                });\r\n\t            }\r\n\t        );\r\n\r\n\t        return {\r\n\t            baseOption: baseOption,\r\n\t            timelineOptions: timelineOptions,\r\n\t            mediaDefault: mediaDefault,\r\n\t            mediaList: mediaList\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>\r\n\t     * Support: width, height, aspectRatio\r\n\t     * Can use max or min as prefix.\r\n\t     */\r\n\t    function applyMediaQuery(query, ecWidth, ecHeight) {\r\n\t        var realMap = {\r\n\t            width: ecWidth,\r\n\t            height: ecHeight,\r\n\t            aspectratio: ecWidth / ecHeight // lowser case for convenientce.\r\n\t        };\r\n\r\n\t        var applicatable = true;\r\n\r\n\t        zrUtil.each(query, function (value, attr) {\r\n\t            var matched = attr.match(QUERY_REG);\r\n\r\n\t            if (!matched || !matched[1] || !matched[2]) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var operator = matched[1];\r\n\t            var realAttr = matched[2].toLowerCase();\r\n\r\n\t            if (!compare(realMap[realAttr], value, operator)) {\r\n\t                applicatable = false;\r\n\t            }\r\n\t        });\r\n\r\n\t        return applicatable;\r\n\t    }\r\n\r\n\t    function compare(real, expect, operator) {\r\n\t        if (operator === 'min') {\r\n\t            return real >= expect;\r\n\t        }\r\n\t        else if (operator === 'max') {\r\n\t            return real <= expect;\r\n\t        }\r\n\t        else { // Equals\r\n\t            return real === expect;\r\n\t        }\r\n\t    }\r\n\r\n\t    function indicesEquals(indices1, indices2) {\r\n\t        // indices is always order by asc and has only finite number.\r\n\t        return indices1.join(',') === indices2.join(',');\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Consider case:\r\n\t     * `chart.setOption(opt1);`\r\n\t     * Then user do some interaction like dataZoom, dataView changing.\r\n\t     * `chart.setOption(opt2);`\r\n\t     * Then user press 'reset button' in toolbox.\r\n\t     *\r\n\t     * After doing that all of the interaction effects should be reset, the\r\n\t     * chart should be the same as the result of invoke\r\n\t     * `chart.setOption(opt1); chart.setOption(opt2);`.\r\n\t     *\r\n\t     * Although it is not able ensure that\r\n\t     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to\r\n\t     * `chart.setOption(merge(opt1, opt2));` exactly,\r\n\t     * this might be the only simple way to implement that feature.\r\n\t     *\r\n\t     * MEMO: We've considered some other approaches:\r\n\t     * 1. Each model handle its self restoration but not uniform treatment.\r\n\t     *     (Too complex in logic and error-prone)\r\n\t     * 2. Use a shadow ecModel. (Performace expensive)\r\n\t     */\r\n\t    function mergeOption(oldOption, newOption) {\r\n\t        newOption = newOption || {};\r\n\r\n\t        each(newOption, function (newCptOpt, mainType) {\r\n\t            if (newCptOpt == null) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var oldCptOpt = oldOption[mainType];\r\n\r\n\t            if (!ComponentModel.hasClass(mainType)) {\r\n\t                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);\r\n\t            }\r\n\t            else {\r\n\t                newCptOpt = modelUtil.normalizeToArray(newCptOpt);\r\n\t                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);\r\n\r\n\t                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);\r\n\r\n\t                oldOption[mainType] = map(mapResult, function (item) {\r\n\t                    return (item.option && item.exist)\r\n\t                        ? merge(item.exist, item.option, true)\r\n\t                        : (item.exist || item.option);\r\n\t                });\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    module.exports = OptionManager;\r\n\r\n\r\n/***/ },\r\n/* 28 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var ComponentModel = __webpack_require__(19);\r\n\t    var colorPaletteMixin = __webpack_require__(24);\r\n\t    var env = __webpack_require__(2);\r\n\r\n\t    var encodeHTML = formatUtil.encodeHTML;\r\n\t    var addCommas = formatUtil.addCommas;\r\n\r\n\t    var SeriesModel = ComponentModel.extend({\r\n\r\n\t        type: 'series.__base__',\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         */\r\n\t        seriesIndex: 0,\r\n\r\n\t        // coodinateSystem will be injected in the echarts/CoordinateSystem\r\n\t        coordinateSystem: null,\r\n\r\n\t        /**\r\n\t         * @type {Object}\r\n\t         * @protected\r\n\t         */\r\n\t        defaultOption: null,\r\n\r\n\t        /**\r\n\t         * Data provided for legend\r\n\t         * @type {Function}\r\n\t         */\r\n\t        // PENDING\r\n\t        legendDataProvider: null,\r\n\r\n\t        /**\r\n\t         * Access path of color for visual\r\n\t         */\r\n\t        visualColorAccessPath: 'itemStyle.normal.color',\r\n\r\n\t        init: function (option, parentModel, ecModel, extraOpt) {\r\n\r\n\t            /**\r\n\t             * @type {number}\r\n\t             * @readOnly\r\n\t             */\r\n\t            this.seriesIndex = this.componentIndex;\r\n\r\n\t            this.mergeDefaultAndTheme(option, ecModel);\r\n\r\n\t            /**\r\n\t             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\r\n\t             * @private\r\n\t             */\r\n\t            this._dataBeforeProcessed = this.getInitialData(option, ecModel);\r\n\r\n\t            // If we reverse the order (make this._data firstly, and then make\r\n\t            // this._dataBeforeProcessed by cloneShallow), cloneShallow will\r\n\t            // cause this._data.graph.data !== this._data when using\r\n\t            // module:echarts/data/Graph or module:echarts/data/Tree.\r\n\t            // See module:echarts/data/helper/linkList\r\n\t            this._data = this._dataBeforeProcessed.cloneShallow();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Util for merge default and theme to option\r\n\t         * @param  {Object} option\r\n\t         * @param  {module:echarts/model/Global} ecModel\r\n\t         */\r\n\t        mergeDefaultAndTheme: function (option, ecModel) {\r\n\t            zrUtil.merge(\r\n\t                option,\r\n\t                ecModel.getTheme().get(this.subType)\r\n\t            );\r\n\t            zrUtil.merge(option, this.getDefaultOption());\r\n\r\n\t            // Default label emphasis `position` and `show`\r\n\t            // FIXME Set label in mergeOption\r\n\t            modelUtil.defaultEmphasis(option.label, modelUtil.LABEL_OPTIONS);\r\n\r\n\t            this.fillDataTextStyle(option.data);\r\n\t        },\r\n\r\n\t        mergeOption: function (newSeriesOption, ecModel) {\r\n\t            newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\r\n\t            this.fillDataTextStyle(newSeriesOption.data);\r\n\r\n\t            var data = this.getInitialData(newSeriesOption, ecModel);\r\n\t            // TODO Merge data?\r\n\t            if (data) {\r\n\t                this._data = data;\r\n\t                this._dataBeforeProcessed = data.cloneShallow();\r\n\t            }\r\n\t        },\r\n\r\n\t        fillDataTextStyle: function (data) {\r\n\t            // Default data label emphasis `position` and `show`\r\n\t            // FIXME Tree structure data ?\r\n\t            // FIXME Performance ?\r\n\t            if (data) {\r\n\t                for (var i = 0; i < data.length; i++) {\r\n\t                    if (data[i] && data[i].label) {\r\n\t                        modelUtil.defaultEmphasis(data[i].label, modelUtil.LABEL_OPTIONS);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Init a data structure from data related option in series\r\n\t         * Must be overwritten\r\n\t         */\r\n\t        getInitialData: function () {},\r\n\r\n\t        /**\r\n\t         * @param {string} [dataType]\r\n\t         * @return {module:echarts/data/List}\r\n\t         */\r\n\t        getData: function (dataType) {\r\n\t            return dataType == null ? this._data : this._data.getLinkedData(dataType);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/data/List} data\r\n\t         */\r\n\t        setData: function (data) {\r\n\t            this._data = data;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get data before processed\r\n\t         * @return {module:echarts/data/List}\r\n\t         */\r\n\t        getRawData: function () {\r\n\t            return this._dataBeforeProcessed;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Coord dimension to data dimension.\r\n\t         *\r\n\t         * By default the result is the same as dimensions of series data.\r\n\t         * But in some series data dimensions are different from coord dimensions (i.e.\r\n\t         * candlestick and boxplot). Override this method to handle those cases.\r\n\t         *\r\n\t         * Coord dimension to data dimension can be one-to-many\r\n\t         *\r\n\t         * @param {string} coordDim\r\n\t         * @return {Array.<string>} dimensions on the axis.\r\n\t         */\r\n\t        coordDimToDataDim: function (coordDim) {\r\n\t            return [coordDim];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert data dimension to coord dimension.\r\n\t         *\r\n\t         * @param {string|number} dataDim\r\n\t         * @return {string}\r\n\t         */\r\n\t        dataDimToCoordDim: function (dataDim) {\r\n\t            return dataDim;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get base axis if has coordinate system and has axis.\r\n\t         * By default use coordSys.getBaseAxis();\r\n\t         * Can be overrided for some chart.\r\n\t         * @return {type} description\r\n\t         */\r\n\t        getBaseAxis: function () {\r\n\t            var coordSys = this.coordinateSystem;\r\n\t            return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\r\n\t        },\r\n\r\n\t        // FIXME\r\n\t        /**\r\n\t         * Default tooltip formatter\r\n\t         *\r\n\t         * @param {number} dataIndex\r\n\t         * @param {boolean} [multipleSeries=false]\r\n\t         * @param {number} [dataType]\r\n\t         */\r\n\t        formatTooltip: function (dataIndex, multipleSeries, dataType) {\r\n\t            function formatArrayValue(value) {\r\n\t                var result = [];\r\n\r\n\t                zrUtil.each(value, function (val, idx) {\r\n\t                    var dimInfo = data.getDimensionInfo(idx);\r\n\t                    var dimType = dimInfo && dimInfo.type;\r\n\t                    var valStr;\r\n\r\n\t                    if (dimType === 'ordinal') {\r\n\t                        valStr = val + '';\r\n\t                    }\r\n\t                    else if (dimType === 'time') {\r\n\t                        valStr = multipleSeries ? '' : formatUtil.formatTime('yyyy/mm/dd hh:mm:ss', val);\r\n\t                    }\r\n\t                    else {\r\n\t                        valStr = addCommas(val);\r\n\t                    }\r\n\r\n\t                    valStr && result.push(valStr);\r\n\t                });\r\n\r\n\t                return result.join(', ');\r\n\t            }\r\n\r\n\t            var data = this._data;\r\n\r\n\t            var value = this.getRawValue(dataIndex);\r\n\t            var formattedValue = zrUtil.isArray(value)\r\n\t                ? formatArrayValue(value) : addCommas(value);\r\n\t            var name = data.getName(dataIndex);\r\n\t            var color = data.getItemVisual(dataIndex, 'color');\r\n\t            var colorEl = '<span style=\"display:inline-block;margin-right:5px;'\r\n\t                + 'border-radius:10px;width:9px;height:9px;background-color:' + color + '\"></span>';\r\n\r\n\t            var seriesName = this.name;\r\n\t            // FIXME\r\n\t            if (seriesName === '\\0-') {\r\n\t                // Not show '-'\r\n\t                seriesName = '';\r\n\t            }\r\n\t            return !multipleSeries\r\n\t                ? ((seriesName && encodeHTML(seriesName) + '<br />') + colorEl\r\n\t                    + (name\r\n\t                        ? encodeHTML(name) + ' : ' + formattedValue\r\n\t                        : formattedValue)\r\n\t                  )\r\n\t                : (colorEl + encodeHTML(this.name) + ' : ' + formattedValue);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        ifEnableAnimation: function () {\r\n\t            if (env.node) {\r\n\t                return false;\r\n\t            }\r\n\r\n\t            var animationEnabled = this.getShallow('animation');\r\n\t            if (animationEnabled) {\r\n\t                if (this.getData().count() > this.getShallow('animationThreshold')) {\r\n\t                    animationEnabled = false;\r\n\t                }\r\n\t            }\r\n\t            return animationEnabled;\r\n\t        },\r\n\r\n\t        restoreData: function () {\r\n\t            this._data = this._dataBeforeProcessed.cloneShallow();\r\n\t        },\r\n\r\n\t        getColorFromPalette: function (name, scope) {\r\n\t            var ecModel = this.ecModel;\r\n\t            // PENDING\r\n\t            var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);\r\n\t            if (!color) {\r\n\t                color = ecModel.getColorFromPalette(name, scope);\r\n\t            }\r\n\t            return color;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get data indices for show tooltip content. See tooltip.\r\n\t         * @abstract\r\n\t         * @param {Array.<string>|string} dim\r\n\t         * @param {Array.<number>} value\r\n\t         * @param {module:echarts/coord/single/SingleAxis} baseAxis\r\n\t         * @return {Array.<number>} data indices.\r\n\t         */\r\n\t        getAxisTooltipDataIndex: null,\r\n\r\n\t        /**\r\n\t         * See tooltip.\r\n\t         * @abstract\r\n\t         * @param {number} dataIndex\r\n\t         * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\r\n\t         */\r\n\t        getTooltipPosition: null\r\n\t    });\r\n\r\n\t    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);\r\n\t    zrUtil.mixin(SeriesModel, colorPaletteMixin);\r\n\r\n\t    module.exports = SeriesModel;\r\n\r\n\r\n/***/ },\r\n/* 29 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var Group = __webpack_require__(30);\r\n\t    var componentUtil = __webpack_require__(20);\r\n\t    var clazzUtil = __webpack_require__(13);\r\n\r\n\t    var Component = function () {\r\n\t        /**\r\n\t         * @type {module:zrender/container/Group}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.group = new Group();\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.uid = componentUtil.getUID('viewComponent');\r\n\t    };\r\n\r\n\t    Component.prototype = {\r\n\r\n\t        constructor: Component,\r\n\r\n\t        init: function (ecModel, api) {},\r\n\r\n\t        render: function (componentModel, ecModel, api, payload) {},\r\n\r\n\t        dispose: function () {}\r\n\r\n\t    };\r\n\r\n\t    var componentProto = Component.prototype;\r\n\t    componentProto.updateView\r\n\t        = componentProto.updateLayout\r\n\t        = componentProto.updateVisual\r\n\t        = function (seriesModel, ecModel, api, payload) {\r\n\t            // Do nothing;\r\n\t        };\r\n\t    // Enable Component.extend.\r\n\t    clazzUtil.enableClassExtend(Component);\r\n\r\n\t    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\r\n\t    clazzUtil.enableClassManagement(Component, {registerWhenExtend: true});\r\n\r\n\t    module.exports = Component;\r\n\r\n\r\n/***/ },\r\n/* 30 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上\r\n\t * @module zrender/graphic/Group\r\n\t * @example\r\n\t *     var Group = require('zrender/lib/container/Group');\r\n\t *     var Circle = require('zrender/lib/graphic/shape/Circle');\r\n\t *     var g = new Group();\r\n\t *     g.position[0] = 100;\r\n\t *     g.position[1] = 100;\r\n\t *     g.add(new Circle({\r\n\t *         style: {\r\n\t *             x: 100,\r\n\t *             y: 100,\r\n\t *             r: 20,\r\n\t *         }\r\n\t *     }));\r\n\t *     zr.add(g);\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Element = __webpack_require__(31);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\r\n\t    /**\r\n\t     * @alias module:zrender/graphic/Group\r\n\t     * @constructor\r\n\t     * @extends module:zrender/mixin/Transformable\r\n\t     * @extends module:zrender/mixin/Eventful\r\n\t     */\r\n\t    var Group = function (opts) {\r\n\r\n\t        opts = opts || {};\r\n\r\n\t        Element.call(this, opts);\r\n\r\n\t        for (var key in opts) {\r\n\t            if (opts.hasOwnProperty(key)) {\r\n\t                this[key] = opts[key];\r\n\t            }\r\n\t        }\r\n\r\n\t        this._children = [];\r\n\r\n\t        this.__storage = null;\r\n\r\n\t        this.__dirty = true;\r\n\t    };\r\n\r\n\t    Group.prototype = {\r\n\r\n\t        constructor: Group,\r\n\r\n\t        isGroup: true,\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        type: 'group',\r\n\r\n\t        /**\r\n\t         * 所有子孙元素是否响应鼠标事件\r\n\t         * @name module:/zrender/container/Group#silent\r\n\t         * @type {boolean}\r\n\t         * @default false\r\n\t         */\r\n\t        silent: false,\r\n\r\n\t        /**\r\n\t         * @return {Array.<module:zrender/Element>}\r\n\t         */\r\n\t        children: function () {\r\n\t            return this._children.slice();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 获取指定 index 的儿子节点\r\n\t         * @param  {number} idx\r\n\t         * @return {module:zrender/Element}\r\n\t         */\r\n\t        childAt: function (idx) {\r\n\t            return this._children[idx];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 获取指定名字的儿子节点\r\n\t         * @param  {string} name\r\n\t         * @return {module:zrender/Element}\r\n\t         */\r\n\t        childOfName: function (name) {\r\n\t            var children = this._children;\r\n\t            for (var i = 0; i < children.length; i++) {\r\n\t                if (children[i].name === name) {\r\n\t                    return children[i];\r\n\t                }\r\n\t             }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {number}\r\n\t         */\r\n\t        childCount: function () {\r\n\t            return this._children.length;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 添加子节点到最后\r\n\t         * @param {module:zrender/Element} child\r\n\t         */\r\n\t        add: function (child) {\r\n\t            if (child && child !== this && child.parent !== this) {\r\n\r\n\t                this._children.push(child);\r\n\r\n\t                this._doAdd(child);\r\n\t            }\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 添加子节点在 nextSibling 之前\r\n\t         * @param {module:zrender/Element} child\r\n\t         * @param {module:zrender/Element} nextSibling\r\n\t         */\r\n\t        addBefore: function (child, nextSibling) {\r\n\t            if (child && child !== this && child.parent !== this\r\n\t                && nextSibling && nextSibling.parent === this) {\r\n\r\n\t                var children = this._children;\r\n\t                var idx = children.indexOf(nextSibling);\r\n\r\n\t                if (idx >= 0) {\r\n\t                    children.splice(idx, 0, child);\r\n\t                    this._doAdd(child);\r\n\t                }\r\n\t            }\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        _doAdd: function (child) {\r\n\t            if (child.parent) {\r\n\t                child.parent.remove(child);\r\n\t            }\r\n\r\n\t            child.parent = this;\r\n\r\n\t            var storage = this.__storage;\r\n\t            var zr = this.__zr;\r\n\t            if (storage && storage !== child.__storage) {\r\n\r\n\t                storage.addToMap(child);\r\n\r\n\t                if (child instanceof Group) {\r\n\t                    child.addChildrenToStorage(storage);\r\n\t                }\r\n\t            }\r\n\r\n\t            zr && zr.refresh();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 移除子节点\r\n\t         * @param {module:zrender/Element} child\r\n\t         */\r\n\t        remove: function (child) {\r\n\t            var zr = this.__zr;\r\n\t            var storage = this.__storage;\r\n\t            var children = this._children;\r\n\r\n\t            var idx = zrUtil.indexOf(children, child);\r\n\t            if (idx < 0) {\r\n\t                return this;\r\n\t            }\r\n\t            children.splice(idx, 1);\r\n\r\n\t            child.parent = null;\r\n\r\n\t            if (storage) {\r\n\r\n\t                storage.delFromMap(child.id);\r\n\r\n\t                if (child instanceof Group) {\r\n\t                    child.delChildrenFromStorage(storage);\r\n\t                }\r\n\t            }\r\n\r\n\t            zr && zr.refresh();\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 移除所有子节点\r\n\t         */\r\n\t        removeAll: function () {\r\n\t            var children = this._children;\r\n\t            var storage = this.__storage;\r\n\t            var child;\r\n\t            var i;\r\n\t            for (i = 0; i < children.length; i++) {\r\n\t                child = children[i];\r\n\t                if (storage) {\r\n\t                    storage.delFromMap(child.id);\r\n\t                    if (child instanceof Group) {\r\n\t                        child.delChildrenFromStorage(storage);\r\n\t                    }\r\n\t                }\r\n\t                child.parent = null;\r\n\t            }\r\n\t            children.length = 0;\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 遍历所有子节点\r\n\t         * @param  {Function} cb\r\n\t         * @param  {}   context\r\n\t         */\r\n\t        eachChild: function (cb, context) {\r\n\t            var children = this._children;\r\n\t            for (var i = 0; i < children.length; i++) {\r\n\t                var child = children[i];\r\n\t                cb.call(context, child, i);\r\n\t            }\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 深度优先遍历所有子孙节点\r\n\t         * @param  {Function} cb\r\n\t         * @param  {}   context\r\n\t         */\r\n\t        traverse: function (cb, context) {\r\n\t            for (var i = 0; i < this._children.length; i++) {\r\n\t                var child = this._children[i];\r\n\t                cb.call(context, child);\r\n\r\n\t                if (child.type === 'group') {\r\n\t                    child.traverse(cb, context);\r\n\t                }\r\n\t            }\r\n\t            return this;\r\n\t        },\r\n\r\n\t        addChildrenToStorage: function (storage) {\r\n\t            for (var i = 0; i < this._children.length; i++) {\r\n\t                var child = this._children[i];\r\n\t                storage.addToMap(child);\r\n\t                if (child instanceof Group) {\r\n\t                    child.addChildrenToStorage(storage);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        delChildrenFromStorage: function (storage) {\r\n\t            for (var i = 0; i < this._children.length; i++) {\r\n\t                var child = this._children[i];\r\n\t                storage.delFromMap(child.id);\r\n\t                if (child instanceof Group) {\r\n\t                    child.delChildrenFromStorage(storage);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        dirty: function () {\r\n\t            this.__dirty = true;\r\n\t            this.__zr && this.__zr.refresh();\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:zrender/core/BoundingRect}\r\n\t         */\r\n\t        getBoundingRect: function (includeChildren) {\r\n\t            // TODO Caching\r\n\t            // TODO Transform\r\n\t            var rect = null;\r\n\t            var tmpRect = new BoundingRect(0, 0, 0, 0);\r\n\t            var children = includeChildren || this._children;\r\n\t            var tmpMat = [];\r\n\r\n\t            for (var i = 0; i < children.length; i++) {\r\n\t                var child = children[i];\r\n\t                if (child.ignore || child.invisible) {\r\n\t                    continue;\r\n\t                }\r\n\r\n\t                var childRect = child.getBoundingRect();\r\n\t                var transform = child.getLocalTransform(tmpMat);\r\n\t                if (transform) {\r\n\t                    tmpRect.copy(childRect);\r\n\t                    tmpRect.applyTransform(transform);\r\n\t                    rect = rect || tmpRect.clone();\r\n\t                    rect.union(tmpRect);\r\n\t                }\r\n\t                else {\r\n\t                    rect = rect || childRect.clone();\r\n\t                    rect.union(childRect);\r\n\t                }\r\n\t            }\r\n\t            return rect || tmpRect;\r\n\t        }\r\n\t    };\r\n\r\n\t    zrUtil.inherits(Group, Element);\r\n\r\n\t    module.exports = Group;\r\n\r\n\r\n/***/ },\r\n/* 31 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * @module zrender/Element\r\n\t */\r\n\r\n\r\n\t    var guid = __webpack_require__(32);\r\n\t    var Eventful = __webpack_require__(33);\r\n\t    var Transformable = __webpack_require__(34);\r\n\t    var Animatable = __webpack_require__(35);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    /**\r\n\t     * @alias module:zrender/Element\r\n\t     * @constructor\r\n\t     * @extends {module:zrender/mixin/Animatable}\r\n\t     * @extends {module:zrender/mixin/Transformable}\r\n\t     * @extends {module:zrender/mixin/Eventful}\r\n\t     */\r\n\t    var Element = function (opts) {\r\n\r\n\t        Transformable.call(this, opts);\r\n\t        Eventful.call(this, opts);\r\n\t        Animatable.call(this, opts);\r\n\r\n\t        /**\r\n\t         * 画布元素ID\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.id = opts.id || guid();\r\n\t    };\r\n\r\n\t    Element.prototype = {\r\n\r\n\t        /**\r\n\t         * 元素类型\r\n\t         * Element type\r\n\t         * @type {string}\r\n\t         */\r\n\t        type: 'element',\r\n\r\n\t        /**\r\n\t         * 元素名字\r\n\t         * Element name\r\n\t         * @type {string}\r\n\t         */\r\n\t        name: '',\r\n\r\n\t        /**\r\n\t         * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值\r\n\t         * ZRender instance will be assigned when element is associated with zrender\r\n\t         * @name module:/zrender/Element#__zr\r\n\t         * @type {module:zrender/ZRender}\r\n\t         */\r\n\t        __zr: null,\r\n\r\n\t        /**\r\n\t         * 图形是否忽略，为true时忽略图形的绘制以及事件触发\r\n\t         * If ignore drawing and events of the element object\r\n\t         * @name module:/zrender/Element#ignore\r\n\t         * @type {boolean}\r\n\t         * @default false\r\n\t         */\r\n\t        ignore: false,\r\n\r\n\t        /**\r\n\t         * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪\r\n\t         * 该路径会继承被裁减对象的变换\r\n\t         * @type {module:zrender/graphic/Path}\r\n\t         * @see http://www.w3.org/TR/2dcontext/#clipping-region\r\n\t         * @readOnly\r\n\t         */\r\n\t        clipPath: null,\r\n\r\n\t        /**\r\n\t         * Drift element\r\n\t         * @param  {number} dx dx on the global space\r\n\t         * @param  {number} dy dy on the global space\r\n\t         */\r\n\t        drift: function (dx, dy) {\r\n\t            switch (this.draggable) {\r\n\t                case 'horizontal':\r\n\t                    dy = 0;\r\n\t                    break;\r\n\t                case 'vertical':\r\n\t                    dx = 0;\r\n\t                    break;\r\n\t            }\r\n\r\n\t            var m = this.transform;\r\n\t            if (!m) {\r\n\t                m = this.transform = [1, 0, 0, 1, 0, 0];\r\n\t            }\r\n\t            m[4] += dx;\r\n\t            m[5] += dy;\r\n\r\n\t            this.decomposeTransform();\r\n\t            this.dirty(false);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Hook before update\r\n\t         */\r\n\t        beforeUpdate: function () {},\r\n\t        /**\r\n\t         * Hook after update\r\n\t         */\r\n\t        afterUpdate: function () {},\r\n\t        /**\r\n\t         * Update each frame\r\n\t         */\r\n\t        update: function () {\r\n\t            this.updateTransform();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {Function} cb\r\n\t         * @param  {}   context\r\n\t         */\r\n\t        traverse: function (cb, context) {},\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        attrKV: function (key, value) {\r\n\t            if (key === 'position' || key === 'scale' || key === 'origin') {\r\n\t                // Copy the array\r\n\t                if (value) {\r\n\t                    var target = this[key];\r\n\t                    if (!target) {\r\n\t                        target = this[key] = [];\r\n\t                    }\r\n\t                    target[0] = value[0];\r\n\t                    target[1] = value[1];\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                this[key] = value;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Hide the element\r\n\t         */\r\n\t        hide: function () {\r\n\t            this.ignore = true;\r\n\t            this.__zr && this.__zr.refresh();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Show the element\r\n\t         */\r\n\t        show: function () {\r\n\t            this.ignore = false;\r\n\t            this.__zr && this.__zr.refresh();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string|Object} key\r\n\t         * @param {*} value\r\n\t         */\r\n\t        attr: function (key, value) {\r\n\t            if (typeof key === 'string') {\r\n\t                this.attrKV(key, value);\r\n\t            }\r\n\t            else if (zrUtil.isObject(key)) {\r\n\t                for (var name in key) {\r\n\t                    if (key.hasOwnProperty(name)) {\r\n\t                        this.attrKV(name, key[name]);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            this.dirty(false);\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:zrender/graphic/Path} clipPath\r\n\t         */\r\n\t        setClipPath: function (clipPath) {\r\n\t            var zr = this.__zr;\r\n\t            if (zr) {\r\n\t                clipPath.addSelfToZr(zr);\r\n\t            }\r\n\r\n\t            // Remove previous clip path\r\n\t            if (this.clipPath && this.clipPath !== clipPath) {\r\n\t                this.removeClipPath();\r\n\t            }\r\n\r\n\t            this.clipPath = clipPath;\r\n\t            clipPath.__zr = zr;\r\n\t            clipPath.__clipTarget = this;\r\n\r\n\t            this.dirty(false);\r\n\t        },\r\n\r\n\t        /**\r\n\t         */\r\n\t        removeClipPath: function () {\r\n\t            var clipPath = this.clipPath;\r\n\t            if (clipPath) {\r\n\t                if (clipPath.__zr) {\r\n\t                    clipPath.removeSelfFromZr(clipPath.__zr);\r\n\t                }\r\n\r\n\t                clipPath.__zr = null;\r\n\t                clipPath.__clipTarget = null;\r\n\t                this.clipPath = null;\r\n\r\n\t                this.dirty(false);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Add self from zrender instance.\r\n\t         * Not recursively because it will be invoked when element added to storage.\r\n\t         * @param {module:zrender/ZRender} zr\r\n\t         */\r\n\t        addSelfToZr: function (zr) {\r\n\t            this.__zr = zr;\r\n\t            // 添加动画\r\n\t            var animators = this.animators;\r\n\t            if (animators) {\r\n\t                for (var i = 0; i < animators.length; i++) {\r\n\t                    zr.animation.addAnimator(animators[i]);\r\n\t                }\r\n\t            }\r\n\r\n\t            if (this.clipPath) {\r\n\t                this.clipPath.addSelfToZr(zr);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Remove self from zrender instance.\r\n\t         * Not recursively because it will be invoked when element added to storage.\r\n\t         * @param {module:zrender/ZRender} zr\r\n\t         */\r\n\t        removeSelfFromZr: function (zr) {\r\n\t            this.__zr = null;\r\n\t            // 移除动画\r\n\t            var animators = this.animators;\r\n\t            if (animators) {\r\n\t                for (var i = 0; i < animators.length; i++) {\r\n\t                    zr.animation.removeAnimator(animators[i]);\r\n\t                }\r\n\t            }\r\n\r\n\t            if (this.clipPath) {\r\n\t                this.clipPath.removeSelfFromZr(zr);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    zrUtil.mixin(Element, Animatable);\r\n\t    zrUtil.mixin(Element, Transformable);\r\n\t    zrUtil.mixin(Element, Eventful);\r\n\r\n\t    module.exports = Element;\r\n\r\n\r\n/***/ },\r\n/* 32 */\r\n/***/ function(module, exports) {\r\n\r\n\t/**\r\n\t * zrender: 生成唯一id\r\n\t *\r\n\t * @author errorrik (errorrik@gmail.com)\r\n\t */\r\n\r\n\r\n\t    var idStart = 0x0907;\r\n\r\n\t    module.exports = function () {\r\n\t        return idStart++;\r\n\t    };\r\n\r\n\r\n\r\n/***/ },\r\n/* 33 */\r\n/***/ function(module, exports) {\r\n\r\n\t/**\r\n\t * 事件扩展\r\n\t * @module zrender/mixin/Eventful\r\n\t * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\r\n\t *         pissang (https://www.github.com/pissang)\r\n\t */\r\n\r\n\r\n\t    var arrySlice = Array.prototype.slice;\r\n\r\n\t    /**\r\n\t     * 事件分发器\r\n\t     * @alias module:zrender/mixin/Eventful\r\n\t     * @constructor\r\n\t     */\r\n\t    var Eventful = function () {\r\n\t        this._$handlers = {};\r\n\t    };\r\n\r\n\t    Eventful.prototype = {\r\n\r\n\t        constructor: Eventful,\r\n\r\n\t        /**\r\n\t         * 单次触发绑定，trigger后销毁\r\n\t         *\r\n\t         * @param {string} event 事件名\r\n\t         * @param {Function} handler 响应函数\r\n\t         * @param {Object} context\r\n\t         */\r\n\t        one: function (event, handler, context) {\r\n\t            var _h = this._$handlers;\r\n\r\n\t            if (!handler || !event) {\r\n\t                return this;\r\n\t            }\r\n\r\n\t            if (!_h[event]) {\r\n\t                _h[event] = [];\r\n\t            }\r\n\r\n\t            for (var i = 0; i < _h[event].length; i++) {\r\n\t                if (_h[event][i].h === handler) {\r\n\t                    return this;\r\n\t                }\r\n\t            }\r\n\r\n\t            _h[event].push({\r\n\t                h: handler,\r\n\t                one: true,\r\n\t                ctx: context || this\r\n\t            });\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 绑定事件\r\n\t         * @param {string} event 事件名\r\n\t         * @param {Function} handler 事件处理函数\r\n\t         * @param {Object} [context]\r\n\t         */\r\n\t        on: function (event, handler, context) {\r\n\t            var _h = this._$handlers;\r\n\r\n\t            if (!handler || !event) {\r\n\t                return this;\r\n\t            }\r\n\r\n\t            if (!_h[event]) {\r\n\t                _h[event] = [];\r\n\t            }\r\n\r\n\t            for (var i = 0; i < _h[event].length; i++) {\r\n\t                if (_h[event][i].h === handler) {\r\n\t                    return this;\r\n\t                }\r\n\t            }\r\n\r\n\t            _h[event].push({\r\n\t                h: handler,\r\n\t                one: false,\r\n\t                ctx: context || this\r\n\t            });\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 是否绑定了事件\r\n\t         * @param  {string}  event\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        isSilent: function (event) {\r\n\t            var _h = this._$handlers;\r\n\t            return _h[event] && _h[event].length;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 解绑事件\r\n\t         * @param {string} event 事件名\r\n\t         * @param {Function} [handler] 事件处理函数\r\n\t         */\r\n\t        off: function (event, handler) {\r\n\t            var _h = this._$handlers;\r\n\r\n\t            if (!event) {\r\n\t                this._$handlers = {};\r\n\t                return this;\r\n\t            }\r\n\r\n\t            if (handler) {\r\n\t                if (_h[event]) {\r\n\t                    var newList = [];\r\n\t                    for (var i = 0, l = _h[event].length; i < l; i++) {\r\n\t                        if (_h[event][i]['h'] != handler) {\r\n\t                            newList.push(_h[event][i]);\r\n\t                        }\r\n\t                    }\r\n\t                    _h[event] = newList;\r\n\t                }\r\n\r\n\t                if (_h[event] && _h[event].length === 0) {\r\n\t                    delete _h[event];\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                delete _h[event];\r\n\t            }\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 事件分发\r\n\t         *\r\n\t         * @param {string} type 事件类型\r\n\t         */\r\n\t        trigger: function (type) {\r\n\t            if (this._$handlers[type]) {\r\n\t                var args = arguments;\r\n\t                var argLen = args.length;\r\n\r\n\t                if (argLen > 3) {\r\n\t                    args = arrySlice.call(args, 1);\r\n\t                }\r\n\r\n\t                var _h = this._$handlers[type];\r\n\t                var len = _h.length;\r\n\t                for (var i = 0; i < len;) {\r\n\t                    // Optimize advise from backbone\r\n\t                    switch (argLen) {\r\n\t                        case 1:\r\n\t                            _h[i]['h'].call(_h[i]['ctx']);\r\n\t                            break;\r\n\t                        case 2:\r\n\t                            _h[i]['h'].call(_h[i]['ctx'], args[1]);\r\n\t                            break;\r\n\t                        case 3:\r\n\t                            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);\r\n\t                            break;\r\n\t                        default:\r\n\t                            // have more than 2 given arguments\r\n\t                            _h[i]['h'].apply(_h[i]['ctx'], args);\r\n\t                            break;\r\n\t                    }\r\n\r\n\t                    if (_h[i]['one']) {\r\n\t                        _h.splice(i, 1);\r\n\t                        len--;\r\n\t                    }\r\n\t                    else {\r\n\t                        i++;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 带有context的事件分发, 最后一个参数是事件回调的context\r\n\t         * @param {string} type 事件类型\r\n\t         */\r\n\t        triggerWithContext: function (type) {\r\n\t            if (this._$handlers[type]) {\r\n\t                var args = arguments;\r\n\t                var argLen = args.length;\r\n\r\n\t                if (argLen > 4) {\r\n\t                    args = arrySlice.call(args, 1, args.length - 1);\r\n\t                }\r\n\t                var ctx = args[args.length - 1];\r\n\r\n\t                var _h = this._$handlers[type];\r\n\t                var len = _h.length;\r\n\t                for (var i = 0; i < len;) {\r\n\t                    // Optimize advise from backbone\r\n\t                    switch (argLen) {\r\n\t                        case 1:\r\n\t                            _h[i]['h'].call(ctx);\r\n\t                            break;\r\n\t                        case 2:\r\n\t                            _h[i]['h'].call(ctx, args[1]);\r\n\t                            break;\r\n\t                        case 3:\r\n\t                            _h[i]['h'].call(ctx, args[1], args[2]);\r\n\t                            break;\r\n\t                        default:\r\n\t                            // have more than 2 given arguments\r\n\t                            _h[i]['h'].apply(ctx, args);\r\n\t                            break;\r\n\t                    }\r\n\r\n\t                    if (_h[i]['one']) {\r\n\t                        _h.splice(i, 1);\r\n\t                        len--;\r\n\t                    }\r\n\t                    else {\r\n\t                        i++;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\r\n\t    // 对象可以通过 onxxxx 绑定事件\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#onclick\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#onmouseover\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#onmouseout\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#onmousemove\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#onmousewheel\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#onmousedown\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#onmouseup\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#ondragstart\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#ondragend\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#ondragenter\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#ondragleave\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#ondragover\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\t    /**\r\n\t     * @event module:zrender/mixin/Eventful#ondrop\r\n\t     * @type {Function}\r\n\t     * @default null\r\n\t     */\r\n\r\n\t    module.exports = Eventful;\r\n\r\n\r\n\r\n/***/ },\r\n/* 34 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * 提供变换扩展\r\n\t * @module zrender/mixin/Transformable\r\n\t * @author pissang (https://www.github.com/pissang)\r\n\t */\r\n\r\n\r\n\t    var matrix = __webpack_require__(11);\r\n\t    var vector = __webpack_require__(10);\r\n\t    var mIdentity = matrix.identity;\r\n\r\n\t    var EPSILON = 5e-5;\r\n\r\n\t    function isNotAroundZero(val) {\r\n\t        return val > EPSILON || val < -EPSILON;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @alias module:zrender/mixin/Transformable\r\n\t     * @constructor\r\n\t     */\r\n\t    var Transformable = function (opts) {\r\n\t        opts = opts || {};\r\n\t        // If there are no given position, rotation, scale\r\n\t        if (!opts.position) {\r\n\t            /**\r\n\t             * 平移\r\n\t             * @type {Array.<number>}\r\n\t             * @default [0, 0]\r\n\t             */\r\n\t            this.position = [0, 0];\r\n\t        }\r\n\t        if (opts.rotation == null) {\r\n\t            /**\r\n\t             * 旋转\r\n\t             * @type {Array.<number>}\r\n\t             * @default 0\r\n\t             */\r\n\t            this.rotation = 0;\r\n\t        }\r\n\t        if (!opts.scale) {\r\n\t            /**\r\n\t             * 缩放\r\n\t             * @type {Array.<number>}\r\n\t             * @default [1, 1]\r\n\t             */\r\n\t            this.scale = [1, 1];\r\n\t        }\r\n\t        /**\r\n\t         * 旋转和缩放的原点\r\n\t         * @type {Array.<number>}\r\n\t         * @default null\r\n\t         */\r\n\t        this.origin = this.origin || null;\r\n\t    };\r\n\r\n\t    var transformableProto = Transformable.prototype;\r\n\t    transformableProto.transform = null;\r\n\r\n\t    /**\r\n\t     * 判断是否需要有坐标变换\r\n\t     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵\r\n\t     */\r\n\t    transformableProto.needLocalTransform = function () {\r\n\t        return isNotAroundZero(this.rotation)\r\n\t            || isNotAroundZero(this.position[0])\r\n\t            || isNotAroundZero(this.position[1])\r\n\t            || isNotAroundZero(this.scale[0] - 1)\r\n\t            || isNotAroundZero(this.scale[1] - 1);\r\n\t    };\r\n\r\n\t    transformableProto.updateTransform = function () {\r\n\t        var parent = this.parent;\r\n\t        var parentHasTransform = parent && parent.transform;\r\n\t        var needLocalTransform = this.needLocalTransform();\r\n\r\n\t        var m = this.transform;\r\n\t        if (!(needLocalTransform || parentHasTransform)) {\r\n\t            m && mIdentity(m);\r\n\t            return;\r\n\t        }\r\n\r\n\t        m = m || matrix.create();\r\n\r\n\t        if (needLocalTransform) {\r\n\t            this.getLocalTransform(m);\r\n\t        }\r\n\t        else {\r\n\t            mIdentity(m);\r\n\t        }\r\n\r\n\t        // 应用父节点变换\r\n\t        if (parentHasTransform) {\r\n\t            if (needLocalTransform) {\r\n\t                matrix.mul(m, parent.transform, m);\r\n\t            }\r\n\t            else {\r\n\t                matrix.copy(m, parent.transform);\r\n\t            }\r\n\t        }\r\n\t        // 保存这个变换矩阵\r\n\t        this.transform = m;\r\n\r\n\t        this.invTransform = this.invTransform || matrix.create();\r\n\t        matrix.invert(this.invTransform, m);\r\n\t    };\r\n\r\n\t    transformableProto.getLocalTransform = function (m) {\r\n\t        m = m || [];\r\n\t        mIdentity(m);\r\n\r\n\t        var origin = this.origin;\r\n\r\n\t        var scale = this.scale;\r\n\t        var rotation = this.rotation;\r\n\t        var position = this.position;\r\n\t        if (origin) {\r\n\t            // Translate to origin\r\n\t            m[4] -= origin[0];\r\n\t            m[5] -= origin[1];\r\n\t        }\r\n\t        matrix.scale(m, m, scale);\r\n\t        if (rotation) {\r\n\t            matrix.rotate(m, m, rotation);\r\n\t        }\r\n\t        if (origin) {\r\n\t            // Translate back from origin\r\n\t            m[4] += origin[0];\r\n\t            m[5] += origin[1];\r\n\t        }\r\n\r\n\t        m[4] += position[0];\r\n\t        m[5] += position[1];\r\n\r\n\t        return m;\r\n\t    };\r\n\t    /**\r\n\t     * 将自己的transform应用到context上\r\n\t     * @param {Context2D} ctx\r\n\t     */\r\n\t    transformableProto.setTransform = function (ctx) {\r\n\t        var m = this.transform;\r\n\t        var dpr = ctx.dpr || 1;\r\n\t        if (m) {\r\n\t            ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\r\n\t        }\r\n\t        else {\r\n\t            ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\r\n\t        }\r\n\t    };\r\n\r\n\t    transformableProto.restoreTransform = function (ctx) {\r\n\t        var m = this.transform;\r\n\t        var dpr = ctx.dpr || 1;\r\n\t        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\r\n\t    }\r\n\r\n\t    var tmpTransform = [];\r\n\r\n\t    /**\r\n\t     * 分解`transform`矩阵到`position`, `rotation`, `scale`\r\n\t     */\r\n\t    transformableProto.decomposeTransform = function () {\r\n\t        if (!this.transform) {\r\n\t            return;\r\n\t        }\r\n\t        var parent = this.parent;\r\n\t        var m = this.transform;\r\n\t        if (parent && parent.transform) {\r\n\t            // Get local transform and decompose them to position, scale, rotation\r\n\t            matrix.mul(tmpTransform, parent.invTransform, m);\r\n\t            m = tmpTransform;\r\n\t        }\r\n\t        var sx = m[0] * m[0] + m[1] * m[1];\r\n\t        var sy = m[2] * m[2] + m[3] * m[3];\r\n\t        var position = this.position;\r\n\t        var scale = this.scale;\r\n\t        if (isNotAroundZero(sx - 1)) {\r\n\t            sx = Math.sqrt(sx);\r\n\t        }\r\n\t        if (isNotAroundZero(sy - 1)) {\r\n\t            sy = Math.sqrt(sy);\r\n\t        }\r\n\t        if (m[0] < 0) {\r\n\t            sx = -sx;\r\n\t        }\r\n\t        if (m[3] < 0) {\r\n\t            sy = -sy;\r\n\t        }\r\n\t        position[0] = m[4];\r\n\t        position[1] = m[5];\r\n\t        scale[0] = sx;\r\n\t        scale[1] = sy;\r\n\t        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get global scale\r\n\t     * @return {Array.<number>}\r\n\t     */\r\n\t    transformableProto.getGlobalScale = function () {\r\n\t        var m = this.transform;\r\n\t        if (!m) {\r\n\t            return [1, 1];\r\n\t        }\r\n\t        var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);\r\n\t        var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);\r\n\t        if (m[0] < 0) {\r\n\t            sx = -sx;\r\n\t        }\r\n\t        if (m[3] < 0) {\r\n\t            sy = -sy;\r\n\t        }\r\n\t        return [sx, sy];\r\n\t    };\r\n\t    /**\r\n\t     * 变换坐标位置到 shape 的局部坐标空间\r\n\t     * @method\r\n\t     * @param {number} x\r\n\t     * @param {number} y\r\n\t     * @return {Array.<number>}\r\n\t     */\r\n\t    transformableProto.transformCoordToLocal = function (x, y) {\r\n\t        var v2 = [x, y];\r\n\t        var invTransform = this.invTransform;\r\n\t        if (invTransform) {\r\n\t            vector.applyTransform(v2, v2, invTransform);\r\n\t        }\r\n\t        return v2;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * 变换局部坐标位置到全局坐标空间\r\n\t     * @method\r\n\t     * @param {number} x\r\n\t     * @param {number} y\r\n\t     * @return {Array.<number>}\r\n\t     */\r\n\t    transformableProto.transformCoordToGlobal = function (x, y) {\r\n\t        var v2 = [x, y];\r\n\t        var transform = this.transform;\r\n\t        if (transform) {\r\n\t            vector.applyTransform(v2, v2, transform);\r\n\t        }\r\n\t        return v2;\r\n\t    };\r\n\r\n\t    module.exports = Transformable;\r\n\r\n\r\n\r\n/***/ },\r\n/* 35 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * @module zrender/mixin/Animatable\r\n\t */\r\n\r\n\r\n\t    var Animator = __webpack_require__(36);\r\n\t    var util = __webpack_require__(4);\r\n\t    var isString = util.isString;\r\n\t    var isFunction = util.isFunction;\r\n\t    var isObject = util.isObject;\r\n\t    var log = __webpack_require__(40);\r\n\r\n\t    /**\r\n\t     * @alias modue:zrender/mixin/Animatable\r\n\t     * @constructor\r\n\t     */\r\n\t    var Animatable = function () {\r\n\r\n\t        /**\r\n\t         * @type {Array.<module:zrender/animation/Animator>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.animators = [];\r\n\t    };\r\n\r\n\t    Animatable.prototype = {\r\n\r\n\t        constructor: Animatable,\r\n\r\n\t        /**\r\n\t         * 动画\r\n\t         *\r\n\t         * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性\r\n\t         * @param {boolean} [loop] 动画是否循环\r\n\t         * @return {module:zrender/animation/Animator}\r\n\t         * @example:\r\n\t         *     el.animate('style', false)\r\n\t         *         .when(1000, {x: 10} )\r\n\t         *         .done(function(){ // Animation done })\r\n\t         *         .start()\r\n\t         */\r\n\t        animate: function (path, loop) {\r\n\t            var target;\r\n\t            var animatingShape = false;\r\n\t            var el = this;\r\n\t            var zr = this.__zr;\r\n\t            if (path) {\r\n\t                var pathSplitted = path.split('.');\r\n\t                var prop = el;\r\n\t                // If animating shape\r\n\t                animatingShape = pathSplitted[0] === 'shape';\r\n\t                for (var i = 0, l = pathSplitted.length; i < l; i++) {\r\n\t                    if (!prop) {\r\n\t                        continue;\r\n\t                    }\r\n\t                    prop = prop[pathSplitted[i]];\r\n\t                }\r\n\t                if (prop) {\r\n\t                    target = prop;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                target = el;\r\n\t            }\r\n\r\n\t            if (!target) {\r\n\t                log(\r\n\t                    'Property \"'\r\n\t                    + path\r\n\t                    + '\" is not existed in element '\r\n\t                    + el.id\r\n\t                );\r\n\t                return;\r\n\t            }\r\n\r\n\t            var animators = el.animators;\r\n\r\n\t            var animator = new Animator(target, loop);\r\n\r\n\t            animator.during(function (target) {\r\n\t                el.dirty(animatingShape);\r\n\t            })\r\n\t            .done(function () {\r\n\t                // FIXME Animator will not be removed if use `Animator#stop` to stop animation\r\n\t                animators.splice(util.indexOf(animators, animator), 1);\r\n\t            });\r\n\r\n\t            animators.push(animator);\r\n\r\n\t            // If animate after added to the zrender\r\n\t            if (zr) {\r\n\t                zr.animation.addAnimator(animator);\r\n\t            }\r\n\r\n\t            return animator;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 停止动画\r\n\t         * @param {boolean} forwardToLast If move to last frame before stop\r\n\t         */\r\n\t        stopAnimation: function (forwardToLast) {\r\n\t            var animators = this.animators;\r\n\t            var len = animators.length;\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                animators[i].stop(forwardToLast);\r\n\t            }\r\n\t            animators.length = 0;\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Object} target\r\n\t         * @param {number} [time=500] Time in ms\r\n\t         * @param {string} [easing='linear']\r\n\t         * @param {number} [delay=0]\r\n\t         * @param {Function} [callback]\r\n\t         *\r\n\t         * @example\r\n\t         *  // Animate position\r\n\t         *  el.animateTo({\r\n\t         *      position: [10, 10]\r\n\t         *  }, function () { // done })\r\n\t         *\r\n\t         *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing\r\n\t         *  el.animateTo({\r\n\t         *      shape: {\r\n\t         *          width: 500\r\n\t         *      },\r\n\t         *      style: {\r\n\t         *          fill: 'red'\r\n\t         *      }\r\n\t         *      position: [10, 10]\r\n\t         *  }, 100, 100, 'cubicOut', function () { // done })\r\n\t         */\r\n\t         // TODO Return animation key\r\n\t        animateTo: function (target, time, delay, easing, callback) {\r\n\t            // animateTo(target, time, easing, callback);\r\n\t            if (isString(delay)) {\r\n\t                callback = easing;\r\n\t                easing = delay;\r\n\t                delay = 0;\r\n\t            }\r\n\t            // animateTo(target, time, delay, callback);\r\n\t            else if (isFunction(easing)) {\r\n\t                callback = easing;\r\n\t                easing = 'linear';\r\n\t                delay = 0;\r\n\t            }\r\n\t            // animateTo(target, time, callback);\r\n\t            else if (isFunction(delay)) {\r\n\t                callback = delay;\r\n\t                delay = 0;\r\n\t            }\r\n\t            // animateTo(target, callback)\r\n\t            else if (isFunction(time)) {\r\n\t                callback = time;\r\n\t                time = 500;\r\n\t            }\r\n\t            // animateTo(target)\r\n\t            else if (!time) {\r\n\t                time = 500;\r\n\t            }\r\n\t            // Stop all previous animations\r\n\t            this.stopAnimation();\r\n\t            this._animateToShallow('', this, target, time, delay, easing, callback);\r\n\r\n\t            // Animators may be removed immediately after start\r\n\t            // if there is nothing to animate\r\n\t            var animators = this.animators.slice();\r\n\t            var count = animators.length;\r\n\t            function done() {\r\n\t                count--;\r\n\t                if (!count) {\r\n\t                    callback && callback();\r\n\t                }\r\n\t            }\r\n\r\n\t            // No animators. This should be checked before animators[i].start(),\r\n\t            // because 'done' may be executed immediately if no need to animate.\r\n\t            if (!count) {\r\n\t                callback && callback();\r\n\t            }\r\n\t            // Start after all animators created\r\n\t            // Incase any animator is done immediately when all animation properties are not changed\r\n\t            for (var i = 0; i < animators.length; i++) {\r\n\t                animators[i]\r\n\t                    .done(done)\r\n\t                    .start(easing);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @param {string} path=''\r\n\t         * @param {Object} source=this\r\n\t         * @param {Object} target\r\n\t         * @param {number} [time=500]\r\n\t         * @param {number} [delay=0]\r\n\t         *\r\n\t         * @example\r\n\t         *  // Animate position\r\n\t         *  el._animateToShallow({\r\n\t         *      position: [10, 10]\r\n\t         *  })\r\n\t         *\r\n\t         *  // Animate shape, style and position in 100ms, delayed 100ms\r\n\t         *  el._animateToShallow({\r\n\t         *      shape: {\r\n\t         *          width: 500\r\n\t         *      },\r\n\t         *      style: {\r\n\t         *          fill: 'red'\r\n\t         *      }\r\n\t         *      position: [10, 10]\r\n\t         *  }, 100, 100)\r\n\t         */\r\n\t        _animateToShallow: function (path, source, target, time, delay) {\r\n\t            var objShallow = {};\r\n\t            var propertyCount = 0;\r\n\t            for (var name in target) {\r\n\t                if (!target.hasOwnProperty(name)) {\r\n\t                    continue;\r\n\t                }\r\n\r\n\t                if (source[name] != null) {\r\n\t                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {\r\n\t                        this._animateToShallow(\r\n\t                            path ? path + '.' + name : name,\r\n\t                            source[name],\r\n\t                            target[name],\r\n\t                            time,\r\n\t                            delay\r\n\t                        );\r\n\t                    }\r\n\t                    else {\r\n\t                        objShallow[name] = target[name];\r\n\t                        propertyCount++;\r\n\t                    }\r\n\t                }\r\n\t                else if (target[name] != null) {\r\n\t                    // Attr directly if not has property\r\n\t                    // FIXME, if some property not needed for element ?\r\n\t                    if (!path) {\r\n\t                        this.attr(name, target[name]);\r\n\t                    }\r\n\t                    else {  // Shape or style\r\n\t                        var props = {};\r\n\t                        props[path] = {};\r\n\t                        props[path][name] = target[name];\r\n\t                        this.attr(props);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            if (propertyCount > 0) {\r\n\t                this.animate(path, false)\r\n\t                    .when(time == null ? 500 : time, objShallow)\r\n\t                    .delay(delay || 0);\r\n\t            }\r\n\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = Animatable;\r\n\r\n\r\n/***/ },\r\n/* 36 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/animation/Animator\r\n\t */\r\n\r\n\r\n\t    var Clip = __webpack_require__(37);\r\n\t    var color = __webpack_require__(39);\r\n\t    var util = __webpack_require__(4);\r\n\t    var isArrayLike = util.isArrayLike;\r\n\r\n\t    var arraySlice = Array.prototype.slice;\r\n\r\n\t    function defaultGetter(target, key) {\r\n\t        return target[key];\r\n\t    }\r\n\r\n\t    function defaultSetter(target, key, value) {\r\n\t        target[key] = value;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param  {number} p0\r\n\t     * @param  {number} p1\r\n\t     * @param  {number} percent\r\n\t     * @return {number}\r\n\t     */\r\n\t    function interpolateNumber(p0, p1, percent) {\r\n\t        return (p1 - p0) * percent + p0;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param  {string} p0\r\n\t     * @param  {string} p1\r\n\t     * @param  {number} percent\r\n\t     * @return {string}\r\n\t     */\r\n\t    function interpolateString(p0, p1, percent) {\r\n\t        return percent > 0.5 ? p1 : p0;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param  {Array} p0\r\n\t     * @param  {Array} p1\r\n\t     * @param  {number} percent\r\n\t     * @param  {Array} out\r\n\t     * @param  {number} arrDim\r\n\t     */\r\n\t    function interpolateArray(p0, p1, percent, out, arrDim) {\r\n\t        var len = p0.length;\r\n\t        if (arrDim == 1) {\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                out[i] = interpolateNumber(p0[i], p1[i], percent);\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            var len2 = p0[0].length;\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                for (var j = 0; j < len2; j++) {\r\n\t                    out[i][j] = interpolateNumber(\r\n\t                        p0[i][j], p1[i][j], percent\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    // arr0 is source array, arr1 is target array.\r\n\t    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1\r\n\t    function fillArr(arr0, arr1, arrDim) {\r\n\t        var arr0Len = arr0.length;\r\n\t        var arr1Len = arr1.length;\r\n\t        if (arr0Len !== arr1Len) {\r\n\t            // FIXME Not work for TypedArray\r\n\t            var isPreviousLarger = arr0Len > arr1Len;\r\n\t            if (isPreviousLarger) {\r\n\t                // Cut the previous\r\n\t                arr0.length = arr1Len;\r\n\t            }\r\n\t            else {\r\n\t                // Fill the previous\r\n\t                for (var i = arr0Len; i < arr1Len; i++) {\r\n\t                    arr0.push(\r\n\t                        arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        // Handling NaN value\r\n\t        var len2 = arr0[0] && arr0[0].length;\r\n\t        for (var i = 0; i < arr0.length; i++) {\r\n\t            if (arrDim === 1) {\r\n\t                if (isNaN(arr0[i])) {\r\n\t                    arr0[i] = arr1[i];\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                for (var j = 0; j < len2; j++) {\r\n\t                    if (isNaN(arr0[i][j])) {\r\n\t                        arr0[i][j] = arr1[i][j];\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param  {Array} arr0\r\n\t     * @param  {Array} arr1\r\n\t     * @param  {number} arrDim\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isArraySame(arr0, arr1, arrDim) {\r\n\t        if (arr0 === arr1) {\r\n\t            return true;\r\n\t        }\r\n\t        var len = arr0.length;\r\n\t        if (len !== arr1.length) {\r\n\t            return false;\r\n\t        }\r\n\t        if (arrDim === 1) {\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                if (arr0[i] !== arr1[i]) {\r\n\t                    return false;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            var len2 = arr0[0].length;\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                for (var j = 0; j < len2; j++) {\r\n\t                    if (arr0[i][j] !== arr1[i][j]) {\r\n\t                        return false;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return true;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Catmull Rom interpolate array\r\n\t     * @param  {Array} p0\r\n\t     * @param  {Array} p1\r\n\t     * @param  {Array} p2\r\n\t     * @param  {Array} p3\r\n\t     * @param  {number} t\r\n\t     * @param  {number} t2\r\n\t     * @param  {number} t3\r\n\t     * @param  {Array} out\r\n\t     * @param  {number} arrDim\r\n\t     */\r\n\t    function catmullRomInterpolateArray(\r\n\t        p0, p1, p2, p3, t, t2, t3, out, arrDim\r\n\t    ) {\r\n\t        var len = p0.length;\r\n\t        if (arrDim == 1) {\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                out[i] = catmullRomInterpolate(\r\n\t                    p0[i], p1[i], p2[i], p3[i], t, t2, t3\r\n\t                );\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            var len2 = p0[0].length;\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                for (var j = 0; j < len2; j++) {\r\n\t                    out[i][j] = catmullRomInterpolate(\r\n\t                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],\r\n\t                        t, t2, t3\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Catmull Rom interpolate number\r\n\t     * @param  {number} p0\r\n\t     * @param  {number} p1\r\n\t     * @param  {number} p2\r\n\t     * @param  {number} p3\r\n\t     * @param  {number} t\r\n\t     * @param  {number} t2\r\n\t     * @param  {number} t3\r\n\t     * @return {number}\r\n\t     */\r\n\t    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {\r\n\t        var v0 = (p2 - p0) * 0.5;\r\n\t        var v1 = (p3 - p1) * 0.5;\r\n\t        return (2 * (p1 - p2) + v0 + v1) * t3\r\n\t                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\r\n\t                + v0 * t + p1;\r\n\t    }\r\n\r\n\t    function cloneValue(value) {\r\n\t        if (isArrayLike(value)) {\r\n\t            var len = value.length;\r\n\t            if (isArrayLike(value[0])) {\r\n\t                var ret = [];\r\n\t                for (var i = 0; i < len; i++) {\r\n\t                    ret.push(arraySlice.call(value[i]));\r\n\t                }\r\n\t                return ret;\r\n\t            }\r\n\r\n\t            return arraySlice.call(value);\r\n\t        }\r\n\r\n\t        return value;\r\n\t    }\r\n\r\n\t    function rgba2String(rgba) {\r\n\t        rgba[0] = Math.floor(rgba[0]);\r\n\t        rgba[1] = Math.floor(rgba[1]);\r\n\t        rgba[2] = Math.floor(rgba[2]);\r\n\r\n\t        return 'rgba(' + rgba.join(',') + ')';\r\n\t    }\r\n\r\n\t    function createTrackClip (animator, easing, oneTrackDone, keyframes, propName) {\r\n\t        var getter = animator._getter;\r\n\t        var setter = animator._setter;\r\n\t        var useSpline = easing === 'spline';\r\n\r\n\t        var trackLen = keyframes.length;\r\n\t        if (!trackLen) {\r\n\t            return;\r\n\t        }\r\n\t        // Guess data type\r\n\t        var firstVal = keyframes[0].value;\r\n\t        var isValueArray = isArrayLike(firstVal);\r\n\t        var isValueColor = false;\r\n\t        var isValueString = false;\r\n\r\n\t        // For vertices morphing\r\n\t        var arrDim = (\r\n\t                isValueArray\r\n\t                && isArrayLike(firstVal[0])\r\n\t            )\r\n\t            ? 2 : 1;\r\n\t        var trackMaxTime;\r\n\t        // Sort keyframe as ascending\r\n\t        keyframes.sort(function(a, b) {\r\n\t            return a.time - b.time;\r\n\t        });\r\n\r\n\t        trackMaxTime = keyframes[trackLen - 1].time;\r\n\t        // Percents of each keyframe\r\n\t        var kfPercents = [];\r\n\t        // Value of each keyframe\r\n\t        var kfValues = [];\r\n\t        var prevValue = keyframes[0].value;\r\n\t        var isAllValueEqual = true;\r\n\t        for (var i = 0; i < trackLen; i++) {\r\n\t            kfPercents.push(keyframes[i].time / trackMaxTime);\r\n\t            // Assume value is a color when it is a string\r\n\t            var value = keyframes[i].value;\r\n\r\n\t            // Check if value is equal, deep check if value is array\r\n\t            if (!((isValueArray && isArraySame(value, prevValue, arrDim))\r\n\t                || (!isValueArray && value === prevValue))) {\r\n\t                isAllValueEqual = false;\r\n\t            }\r\n\t            prevValue = value;\r\n\r\n\t            // Try converting a string to a color array\r\n\t            if (typeof value == 'string') {\r\n\t                var colorArray = color.parse(value);\r\n\t                if (colorArray) {\r\n\t                    value = colorArray;\r\n\t                    isValueColor = true;\r\n\t                }\r\n\t                else {\r\n\t                    isValueString = true;\r\n\t                }\r\n\t            }\r\n\t            kfValues.push(value);\r\n\t        }\r\n\t        if (isAllValueEqual) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var lastValue = kfValues[trackLen - 1];\r\n\t        // Polyfill array and NaN value\r\n\t        for (var i = 0; i < trackLen - 1; i++) {\r\n\t            if (isValueArray) {\r\n\t                fillArr(kfValues[i], lastValue, arrDim);\r\n\t            }\r\n\t            else {\r\n\t                if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {\r\n\t                    kfValues[i] = lastValue;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);\r\n\r\n\t        // Cache the key of last frame to speed up when\r\n\t        // animation playback is sequency\r\n\t        var lastFrame = 0;\r\n\t        var lastFramePercent = 0;\r\n\t        var start;\r\n\t        var w;\r\n\t        var p0;\r\n\t        var p1;\r\n\t        var p2;\r\n\t        var p3;\r\n\r\n\t        if (isValueColor) {\r\n\t            var rgba = [0, 0, 0, 0];\r\n\t        }\r\n\r\n\t        var onframe = function (target, percent) {\r\n\t            // Find the range keyframes\r\n\t            // kf1-----kf2---------current--------kf3\r\n\t            // find kf2 and kf3 and do interpolation\r\n\t            var frame;\r\n\t            // In the easing function like elasticOut, percent may less than 0\r\n\t            if (percent < 0) {\r\n\t                frame = 0;\r\n\t            }\r\n\t            else if (percent < lastFramePercent) {\r\n\t                // Start from next key\r\n\t                // PENDING start from lastFrame ?\r\n\t                start = Math.min(lastFrame + 1, trackLen - 1);\r\n\t                for (frame = start; frame >= 0; frame--) {\r\n\t                    if (kfPercents[frame] <= percent) {\r\n\t                        break;\r\n\t                    }\r\n\t                }\r\n\t                // PENDING really need to do this ?\r\n\t                frame = Math.min(frame, trackLen - 2);\r\n\t            }\r\n\t            else {\r\n\t                for (frame = lastFrame; frame < trackLen; frame++) {\r\n\t                    if (kfPercents[frame] > percent) {\r\n\t                        break;\r\n\t                    }\r\n\t                }\r\n\t                frame = Math.min(frame - 1, trackLen - 2);\r\n\t            }\r\n\t            lastFrame = frame;\r\n\t            lastFramePercent = percent;\r\n\r\n\t            var range = (kfPercents[frame + 1] - kfPercents[frame]);\r\n\t            if (range === 0) {\r\n\t                return;\r\n\t            }\r\n\t            else {\r\n\t                w = (percent - kfPercents[frame]) / range;\r\n\t            }\r\n\t            if (useSpline) {\r\n\t                p1 = kfValues[frame];\r\n\t                p0 = kfValues[frame === 0 ? frame : frame - 1];\r\n\t                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];\r\n\t                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];\r\n\t                if (isValueArray) {\r\n\t                    catmullRomInterpolateArray(\r\n\t                        p0, p1, p2, p3, w, w * w, w * w * w,\r\n\t                        getter(target, propName),\r\n\t                        arrDim\r\n\t                    );\r\n\t                }\r\n\t                else {\r\n\t                    var value;\r\n\t                    if (isValueColor) {\r\n\t                        value = catmullRomInterpolateArray(\r\n\t                            p0, p1, p2, p3, w, w * w, w * w * w,\r\n\t                            rgba, 1\r\n\t                        );\r\n\t                        value = rgba2String(rgba);\r\n\t                    }\r\n\t                    else if (isValueString) {\r\n\t                        // String is step(0.5)\r\n\t                        return interpolateString(p1, p2, w);\r\n\t                    }\r\n\t                    else {\r\n\t                        value = catmullRomInterpolate(\r\n\t                            p0, p1, p2, p3, w, w * w, w * w * w\r\n\t                        );\r\n\t                    }\r\n\t                    setter(\r\n\t                        target,\r\n\t                        propName,\r\n\t                        value\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                if (isValueArray) {\r\n\t                    interpolateArray(\r\n\t                        kfValues[frame], kfValues[frame + 1], w,\r\n\t                        getter(target, propName),\r\n\t                        arrDim\r\n\t                    );\r\n\t                }\r\n\t                else {\r\n\t                    var value;\r\n\t                    if (isValueColor) {\r\n\t                        interpolateArray(\r\n\t                            kfValues[frame], kfValues[frame + 1], w,\r\n\t                            rgba, 1\r\n\t                        );\r\n\t                        value = rgba2String(rgba);\r\n\t                    }\r\n\t                    else if (isValueString) {\r\n\t                        // String is step(0.5)\r\n\t                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);\r\n\t                    }\r\n\t                    else {\r\n\t                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);\r\n\t                    }\r\n\t                    setter(\r\n\t                        target,\r\n\t                        propName,\r\n\t                        value\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\t        };\r\n\r\n\t        var clip = new Clip({\r\n\t            target: animator._target,\r\n\t            life: trackMaxTime,\r\n\t            loop: animator._loop,\r\n\t            delay: animator._delay,\r\n\t            onframe: onframe,\r\n\t            ondestroy: oneTrackDone\r\n\t        });\r\n\r\n\t        if (easing && easing !== 'spline') {\r\n\t            clip.easing = easing;\r\n\t        }\r\n\r\n\t        return clip;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @alias module:zrender/animation/Animator\r\n\t     * @constructor\r\n\t     * @param {Object} target\r\n\t     * @param {boolean} loop\r\n\t     * @param {Function} getter\r\n\t     * @param {Function} setter\r\n\t     */\r\n\t    var Animator = function(target, loop, getter, setter) {\r\n\t        this._tracks = {};\r\n\t        this._target = target;\r\n\r\n\t        this._loop = loop || false;\r\n\r\n\t        this._getter = getter || defaultGetter;\r\n\t        this._setter = setter || defaultSetter;\r\n\r\n\t        this._clipCount = 0;\r\n\r\n\t        this._delay = 0;\r\n\r\n\t        this._doneList = [];\r\n\r\n\t        this._onframeList = [];\r\n\r\n\t        this._clipList = [];\r\n\t    };\r\n\r\n\t    Animator.prototype = {\r\n\t        /**\r\n\t         * 设置动画关键帧\r\n\t         * @param  {number} time 关键帧时间，单位是ms\r\n\t         * @param  {Object} props 关键帧的属性值，key-value表示\r\n\t         * @return {module:zrender/animation/Animator}\r\n\t         */\r\n\t        when: function(time /* ms */, props) {\r\n\t            var tracks = this._tracks;\r\n\t            for (var propName in props) {\r\n\t                if (!props.hasOwnProperty(propName)) {\r\n\t                    continue;\r\n\t                }\r\n\r\n\t                if (!tracks[propName]) {\r\n\t                    tracks[propName] = [];\r\n\t                    // Invalid value\r\n\t                    var value = this._getter(this._target, propName);\r\n\t                    if (value == null) {\r\n\t                        // zrLog('Invalid property ' + propName);\r\n\t                        continue;\r\n\t                    }\r\n\t                    // If time is 0\r\n\t                    //  Then props is given initialize value\r\n\t                    // Else\r\n\t                    //  Initialize value from current prop value\r\n\t                    if (time !== 0) {\r\n\t                        tracks[propName].push({\r\n\t                            time: 0,\r\n\t                            value: cloneValue(value)\r\n\t                        });\r\n\t                    }\r\n\t                }\r\n\t                tracks[propName].push({\r\n\t                    time: time,\r\n\t                    value: props[propName]\r\n\t                });\r\n\t            }\r\n\t            return this;\r\n\t        },\r\n\t        /**\r\n\t         * 添加动画每一帧的回调函数\r\n\t         * @param  {Function} callback\r\n\t         * @return {module:zrender/animation/Animator}\r\n\t         */\r\n\t        during: function (callback) {\r\n\t            this._onframeList.push(callback);\r\n\t            return this;\r\n\t        },\r\n\r\n\t        _doneCallback: function () {\r\n\t            // Clear all tracks\r\n\t            this._tracks = {};\r\n\t            // Clear all clips\r\n\t            this._clipList.length = 0;\r\n\r\n\t            var doneList = this._doneList;\r\n\t            var len = doneList.length;\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                doneList[i].call(this);\r\n\t            }\r\n\t        },\r\n\t        /**\r\n\t         * 开始执行动画\r\n\t         * @param  {string|Function} easing\r\n\t         *         动画缓动函数，详见{@link module:zrender/animation/easing}\r\n\t         * @return {module:zrender/animation/Animator}\r\n\t         */\r\n\t        start: function (easing) {\r\n\r\n\t            var self = this;\r\n\t            var clipCount = 0;\r\n\r\n\t            var oneTrackDone = function() {\r\n\t                clipCount--;\r\n\t                if (!clipCount) {\r\n\t                    self._doneCallback();\r\n\t                }\r\n\t            };\r\n\r\n\t            var lastClip;\r\n\t            for (var propName in this._tracks) {\r\n\t                if (!this._tracks.hasOwnProperty(propName)) {\r\n\t                    continue;\r\n\t                }\r\n\t                var clip = createTrackClip(\r\n\t                    this, easing, oneTrackDone,\r\n\t                    this._tracks[propName], propName\r\n\t                );\r\n\t                if (clip) {\r\n\t                    this._clipList.push(clip);\r\n\t                    clipCount++;\r\n\r\n\t                    // If start after added to animation\r\n\t                    if (this.animation) {\r\n\t                        this.animation.addClip(clip);\r\n\t                    }\r\n\r\n\t                    lastClip = clip;\r\n\t                }\r\n\t            }\r\n\r\n\t            // Add during callback on the last clip\r\n\t            if (lastClip) {\r\n\t                var oldOnFrame = lastClip.onframe;\r\n\t                lastClip.onframe = function (target, percent) {\r\n\t                    oldOnFrame(target, percent);\r\n\r\n\t                    for (var i = 0; i < self._onframeList.length; i++) {\r\n\t                        self._onframeList[i](target, percent);\r\n\t                    }\r\n\t                };\r\n\t            }\r\n\r\n\t            if (!clipCount) {\r\n\t                this._doneCallback();\r\n\t            }\r\n\t            return this;\r\n\t        },\r\n\t        /**\r\n\t         * 停止动画\r\n\t         * @param {boolean} forwardToLast If move to last frame before stop\r\n\t         */\r\n\t        stop: function (forwardToLast) {\r\n\t            var clipList = this._clipList;\r\n\t            var animation = this.animation;\r\n\t            for (var i = 0; i < clipList.length; i++) {\r\n\t                var clip = clipList[i];\r\n\t                if (forwardToLast) {\r\n\t                    // Move to last frame before stop\r\n\t                    clip.onframe(this._target, 1);\r\n\t                }\r\n\t                animation && animation.removeClip(clip);\r\n\t            }\r\n\t            clipList.length = 0;\r\n\t        },\r\n\t        /**\r\n\t         * 设置动画延迟开始的时间\r\n\t         * @param  {number} time 单位ms\r\n\t         * @return {module:zrender/animation/Animator}\r\n\t         */\r\n\t        delay: function (time) {\r\n\t            this._delay = time;\r\n\t            return this;\r\n\t        },\r\n\t        /**\r\n\t         * 添加动画结束的回调\r\n\t         * @param  {Function} cb\r\n\t         * @return {module:zrender/animation/Animator}\r\n\t         */\r\n\t        done: function(cb) {\r\n\t            if (cb) {\r\n\t                this._doneList.push(cb);\r\n\t            }\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {Array.<module:zrender/animation/Clip>}\r\n\t         */\r\n\t        getClips: function () {\r\n\t            return this._clipList;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = Animator;\r\n\r\n\r\n/***/ },\r\n/* 37 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * 动画主控制器\r\n\t * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件\r\n\t * @config life(1000) 动画时长\r\n\t * @config delay(0) 动画延迟时间\r\n\t * @config loop(true)\r\n\t * @config gap(0) 循环的间隔时间\r\n\t * @config onframe\r\n\t * @config easing(optional)\r\n\t * @config ondestroy(optional)\r\n\t * @config onrestart(optional)\r\n\t *\r\n\t * TODO pause\r\n\t */\r\n\r\n\r\n\t    var easingFuncs = __webpack_require__(38);\r\n\r\n\t    function Clip(options) {\r\n\r\n\t        this._target = options.target;\r\n\r\n\t        // 生命周期\r\n\t        this._life = options.life || 1000;\r\n\t        // 延时\r\n\t        this._delay = options.delay || 0;\r\n\t        // 开始时间\r\n\t        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒\r\n\t        this._initialized = false;\r\n\r\n\t        // 是否循环\r\n\t        this.loop = options.loop == null ? false : options.loop;\r\n\r\n\t        this.gap = options.gap || 0;\r\n\r\n\t        this.easing = options.easing || 'Linear';\r\n\r\n\t        this.onframe = options.onframe;\r\n\t        this.ondestroy = options.ondestroy;\r\n\t        this.onrestart = options.onrestart;\r\n\t    }\r\n\r\n\t    Clip.prototype = {\r\n\r\n\t        constructor: Clip,\r\n\r\n\t        step: function (globalTime) {\r\n\t            // Set startTime on first step, or _startTime may has milleseconds different between clips\r\n\t            // PENDING\r\n\t            if (!this._initialized) {\r\n\t                this._startTime = globalTime + this._delay;\r\n\t                this._initialized = true;\r\n\t            }\r\n\r\n\t            var percent = (globalTime - this._startTime) / this._life;\r\n\r\n\t            // 还没开始\r\n\t            if (percent < 0) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            percent = Math.min(percent, 1);\r\n\r\n\t            var easing = this.easing;\r\n\t            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;\r\n\t            var schedule = typeof easingFunc === 'function'\r\n\t                ? easingFunc(percent)\r\n\t                : percent;\r\n\r\n\t            this.fire('frame', schedule);\r\n\r\n\t            // 结束\r\n\t            if (percent == 1) {\r\n\t                if (this.loop) {\r\n\t                    this.restart (globalTime);\r\n\t                    // 重新开始周期\r\n\t                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件\r\n\t                    return 'restart';\r\n\t                }\r\n\r\n\t                // 动画完成将这个控制器标识为待删除\r\n\t                // 在Animation.update中进行批量删除\r\n\t                this._needsRemove = true;\r\n\t                return 'destroy';\r\n\t            }\r\n\r\n\t            return null;\r\n\t        },\r\n\r\n\t        restart: function (globalTime) {\r\n\t            var remainder = (globalTime - this._startTime) % this._life;\r\n\t            this._startTime = globalTime - remainder + this.gap;\r\n\r\n\t            this._needsRemove = false;\r\n\t        },\r\n\r\n\t        fire: function(eventType, arg) {\r\n\t            eventType = 'on' + eventType;\r\n\t            if (this[eventType]) {\r\n\t                this[eventType](this._target, arg);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = Clip;\r\n\r\n\r\n\r\n/***/ },\r\n/* 38 */\r\n/***/ function(module, exports) {\r\n\r\n\t/**\r\n\t * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js\r\n\t * @see http://sole.github.io/tween.js/examples/03_graphs.html\r\n\t * @exports zrender/animation/easing\r\n\t */\r\n\r\n\t    var easing = {\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        linear: function (k) {\r\n\t            return k;\r\n\t        },\r\n\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        quadraticIn: function (k) {\r\n\t            return k * k;\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        quadraticOut: function (k) {\r\n\t            return k * (2 - k);\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        quadraticInOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * k * k;\r\n\t            }\r\n\t            return -0.5 * (--k * (k - 2) - 1);\r\n\t        },\r\n\r\n\t        // 三次方的缓动（t^3）\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        cubicIn: function (k) {\r\n\t            return k * k * k;\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        cubicOut: function (k) {\r\n\t            return --k * k * k + 1;\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        cubicInOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * k * k * k;\r\n\t            }\r\n\t            return 0.5 * ((k -= 2) * k * k + 2);\r\n\t        },\r\n\r\n\t        // 四次方的缓动（t^4）\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        quarticIn: function (k) {\r\n\t            return k * k * k * k;\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        quarticOut: function (k) {\r\n\t            return 1 - (--k * k * k * k);\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        quarticInOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * k * k * k * k;\r\n\t            }\r\n\t            return -0.5 * ((k -= 2) * k * k * k - 2);\r\n\t        },\r\n\r\n\t        // 五次方的缓动（t^5）\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        quinticIn: function (k) {\r\n\t            return k * k * k * k * k;\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        quinticOut: function (k) {\r\n\t            return --k * k * k * k * k + 1;\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        quinticInOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * k * k * k * k * k;\r\n\t            }\r\n\t            return 0.5 * ((k -= 2) * k * k * k * k + 2);\r\n\t        },\r\n\r\n\t        // 正弦曲线的缓动（sin(t)）\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        sinusoidalIn: function (k) {\r\n\t            return 1 - Math.cos(k * Math.PI / 2);\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        sinusoidalOut: function (k) {\r\n\t            return Math.sin(k * Math.PI / 2);\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        sinusoidalInOut: function (k) {\r\n\t            return 0.5 * (1 - Math.cos(Math.PI * k));\r\n\t        },\r\n\r\n\t        // 指数曲线的缓动（2^t）\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        exponentialIn: function (k) {\r\n\t            return k === 0 ? 0 : Math.pow(1024, k - 1);\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        exponentialOut: function (k) {\r\n\t            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        exponentialInOut: function (k) {\r\n\t            if (k === 0) {\r\n\t                return 0;\r\n\t            }\r\n\t            if (k === 1) {\r\n\t                return 1;\r\n\t            }\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * Math.pow(1024, k - 1);\r\n\t            }\r\n\t            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\r\n\t        },\r\n\r\n\t        // 圆形曲线的缓动（sqrt(1-t^2)）\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        circularIn: function (k) {\r\n\t            return 1 - Math.sqrt(1 - k * k);\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        circularOut: function (k) {\r\n\t            return Math.sqrt(1 - (--k * k));\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        circularInOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return -0.5 * (Math.sqrt(1 - k * k) - 1);\r\n\t            }\r\n\t            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\r\n\t        },\r\n\r\n\t        // 创建类似于弹簧在停止前来回振荡的动画\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        elasticIn: function (k) {\r\n\t            var s;\r\n\t            var a = 0.1;\r\n\t            var p = 0.4;\r\n\t            if (k === 0) {\r\n\t                return 0;\r\n\t            }\r\n\t            if (k === 1) {\r\n\t                return 1;\r\n\t            }\r\n\t            if (!a || a < 1) {\r\n\t                a = 1; s = p / 4;\r\n\t            }\r\n\t            else {\r\n\t                s = p * Math.asin(1 / a) / (2 * Math.PI);\r\n\t            }\r\n\t            return -(a * Math.pow(2, 10 * (k -= 1)) *\r\n\t                        Math.sin((k - s) * (2 * Math.PI) / p));\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        elasticOut: function (k) {\r\n\t            var s;\r\n\t            var a = 0.1;\r\n\t            var p = 0.4;\r\n\t            if (k === 0) {\r\n\t                return 0;\r\n\t            }\r\n\t            if (k === 1) {\r\n\t                return 1;\r\n\t            }\r\n\t            if (!a || a < 1) {\r\n\t                a = 1; s = p / 4;\r\n\t            }\r\n\t            else {\r\n\t                s = p * Math.asin(1 / a) / (2 * Math.PI);\r\n\t            }\r\n\t            return (a * Math.pow(2, -10 * k) *\r\n\t                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        elasticInOut: function (k) {\r\n\t            var s;\r\n\t            var a = 0.1;\r\n\t            var p = 0.4;\r\n\t            if (k === 0) {\r\n\t                return 0;\r\n\t            }\r\n\t            if (k === 1) {\r\n\t                return 1;\r\n\t            }\r\n\t            if (!a || a < 1) {\r\n\t                a = 1; s = p / 4;\r\n\t            }\r\n\t            else {\r\n\t                s = p * Math.asin(1 / a) / (2 * Math.PI);\r\n\t            }\r\n\t            if ((k *= 2) < 1) {\r\n\t                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))\r\n\t                    * Math.sin((k - s) * (2 * Math.PI) / p));\r\n\t            }\r\n\t            return a * Math.pow(2, -10 * (k -= 1))\r\n\t                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\r\n\r\n\t        },\r\n\r\n\t        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        backIn: function (k) {\r\n\t            var s = 1.70158;\r\n\t            return k * k * ((s + 1) * k - s);\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        backOut: function (k) {\r\n\t            var s = 1.70158;\r\n\t            return --k * k * ((s + 1) * k + s) + 1;\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        backInOut: function (k) {\r\n\t            var s = 1.70158 * 1.525;\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * (k * k * ((s + 1) * k - s));\r\n\t            }\r\n\t            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\r\n\t        },\r\n\r\n\t        // 创建弹跳效果\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        bounceIn: function (k) {\r\n\t            return 1 - easing.bounceOut(1 - k);\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        bounceOut: function (k) {\r\n\t            if (k < (1 / 2.75)) {\r\n\t                return 7.5625 * k * k;\r\n\t            }\r\n\t            else if (k < (2 / 2.75)) {\r\n\t                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\r\n\t            }\r\n\t            else if (k < (2.5 / 2.75)) {\r\n\t                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\r\n\t            }\r\n\t            else {\r\n\t                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\r\n\t            }\r\n\t        },\r\n\t        /**\r\n\t        * @param {number} k\r\n\t        * @return {number}\r\n\t        */\r\n\t        bounceInOut: function (k) {\r\n\t            if (k < 0.5) {\r\n\t                return easing.bounceIn(k * 2) * 0.5;\r\n\t            }\r\n\t            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = easing;\r\n\r\n\r\n\r\n\r\n/***/ },\r\n/* 39 */\r\n/***/ function(module, exports) {\r\n\r\n\t/**\r\n\t * @module zrender/tool/color\r\n\t */\r\n\r\n\r\n\t    var kCSSColorTable = {\r\n\t        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],\r\n\t        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],\r\n\t        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],\r\n\t        'beige': [245,245,220,1], 'bisque': [255,228,196,1],\r\n\t        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],\r\n\t        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],\r\n\t        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],\r\n\t        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],\r\n\t        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],\r\n\t        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],\r\n\t        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],\r\n\t        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],\r\n\t        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],\r\n\t        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],\r\n\t        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],\r\n\t        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],\r\n\t        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],\r\n\t        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],\r\n\t        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],\r\n\t        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],\r\n\t        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],\r\n\t        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],\r\n\t        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],\r\n\t        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],\r\n\t        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],\r\n\t        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],\r\n\t        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],\r\n\t        'gray': [128,128,128,1], 'green': [0,128,0,1],\r\n\t        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],\r\n\t        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],\r\n\t        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],\r\n\t        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],\r\n\t        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],\r\n\t        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],\r\n\t        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],\r\n\t        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],\r\n\t        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],\r\n\t        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],\r\n\t        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],\r\n\t        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],\r\n\t        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],\r\n\t        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],\r\n\t        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],\r\n\t        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],\r\n\t        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],\r\n\t        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],\r\n\t        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],\r\n\t        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],\r\n\t        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],\r\n\t        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],\r\n\t        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],\r\n\t        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],\r\n\t        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],\r\n\t        'orange': [255,165,0,1], 'orangered': [255,69,0,1],\r\n\t        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],\r\n\t        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],\r\n\t        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],\r\n\t        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],\r\n\t        'pink': [255,192,203,1], 'plum': [221,160,221,1],\r\n\t        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],\r\n\t        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],\r\n\t        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],\r\n\t        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],\r\n\t        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],\r\n\t        'sienna': [160,82,45,1], 'silver': [192,192,192,1],\r\n\t        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],\r\n\t        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],\r\n\t        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],\r\n\t        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],\r\n\t        'teal': [0,128,128,1], 'thistle': [216,191,216,1],\r\n\t        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],\r\n\t        'violet': [238,130,238,1], 'wheat': [245,222,179,1],\r\n\t        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],\r\n\t        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]\r\n\t    };\r\n\r\n\t    function clampCssByte(i) {  // Clamp to integer 0 .. 255.\r\n\t        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\r\n\t        return i < 0 ? 0 : i > 255 ? 255 : i;\r\n\t    }\r\n\r\n\t    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.\r\n\t        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\r\n\t        return i < 0 ? 0 : i > 360 ? 360 : i;\r\n\t    }\r\n\r\n\t    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.\r\n\t        return f < 0 ? 0 : f > 1 ? 1 : f;\r\n\t    }\r\n\r\n\t    function parseCssInt(str) {  // int or percentage.\r\n\t        if (str.length && str.charAt(str.length - 1) === '%') {\r\n\t            return clampCssByte(parseFloat(str) / 100 * 255);\r\n\t        }\r\n\t        return clampCssByte(parseInt(str, 10));\r\n\t    }\r\n\r\n\t    function parseCssFloat(str) {  // float or percentage.\r\n\t        if (str.length && str.charAt(str.length - 1) === '%') {\r\n\t            return clampCssFloat(parseFloat(str) / 100);\r\n\t        }\r\n\t        return clampCssFloat(parseFloat(str));\r\n\t    }\r\n\r\n\t    function cssHueToRgb(m1, m2, h) {\r\n\t        if (h < 0) {\r\n\t            h += 1;\r\n\t        }\r\n\t        else if (h > 1) {\r\n\t            h -= 1;\r\n\t        }\r\n\r\n\t        if (h * 6 < 1) {\r\n\t            return m1 + (m2 - m1) * h * 6;\r\n\t        }\r\n\t        if (h * 2 < 1) {\r\n\t            return m2;\r\n\t        }\r\n\t        if (h * 3 < 2) {\r\n\t            return m1 + (m2 - m1) * (2/3 - h) * 6;\r\n\t        }\r\n\t        return m1;\r\n\t    }\r\n\r\n\t    function lerp(a, b, p) {\r\n\t        return a + (b - a) * p;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {string} colorStr\r\n\t     * @return {Array.<number>}\r\n\t     * @memberOf module:zrender/util/color\r\n\t     */\r\n\t    function parse(colorStr) {\r\n\t        if (!colorStr) {\r\n\t            return;\r\n\t        }\r\n\t        // colorStr may be not string\r\n\t        colorStr = colorStr + '';\r\n\t        // Remove all whitespace, not compliant, but should just be more accepting.\r\n\t        var str = colorStr.replace(/ /g, '').toLowerCase();\r\n\r\n\t        // Color keywords (and transparent) lookup.\r\n\t        if (str in kCSSColorTable) {\r\n\t            return kCSSColorTable[str].slice();  // dup.\r\n\t        }\r\n\r\n\t        // #abc and #abc123 syntax.\r\n\t        if (str.charAt(0) === '#') {\r\n\t            if (str.length === 4) {\r\n\t                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\r\n\t                if (!(iv >= 0 && iv <= 0xfff)) {\r\n\t                    return;  // Covers NaN.\r\n\t                }\r\n\t                return [\r\n\t                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),\r\n\t                    (iv & 0xf0) | ((iv & 0xf0) >> 4),\r\n\t                    (iv & 0xf) | ((iv & 0xf) << 4),\r\n\t                    1\r\n\t                ];\r\n\t            }\r\n\t            else if (str.length === 7) {\r\n\t                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\r\n\t                if (!(iv >= 0 && iv <= 0xffffff)) {\r\n\t                    return;  // Covers NaN.\r\n\t                }\r\n\t                return [\r\n\t                    (iv & 0xff0000) >> 16,\r\n\t                    (iv & 0xff00) >> 8,\r\n\t                    iv & 0xff,\r\n\t                    1\r\n\t                ];\r\n\t            }\r\n\r\n\t            return;\r\n\t        }\r\n\t        var op = str.indexOf('('), ep = str.indexOf(')');\r\n\t        if (op !== -1 && ep + 1 === str.length) {\r\n\t            var fname = str.substr(0, op);\r\n\t            var params = str.substr(op + 1, ep - (op + 1)).split(',');\r\n\t            var alpha = 1;  // To allow case fallthrough.\r\n\t            switch (fname) {\r\n\t                case 'rgba':\r\n\t                    if (params.length !== 4) {\r\n\t                        return;\r\n\t                    }\r\n\t                    alpha = parseCssFloat(params.pop()); // jshint ignore:line\r\n\t                // Fall through.\r\n\t                case 'rgb':\r\n\t                    if (params.length !== 3) {\r\n\t                        return;\r\n\t                    }\r\n\t                    return [\r\n\t                        parseCssInt(params[0]),\r\n\t                        parseCssInt(params[1]),\r\n\t                        parseCssInt(params[2]),\r\n\t                        alpha\r\n\t                    ];\r\n\t                case 'hsla':\r\n\t                    if (params.length !== 4) {\r\n\t                        return;\r\n\t                    }\r\n\t                    params[3] = parseCssFloat(params[3]);\r\n\t                    return hsla2rgba(params);\r\n\t                case 'hsl':\r\n\t                    if (params.length !== 3) {\r\n\t                        return;\r\n\t                    }\r\n\t                    return hsla2rgba(params);\r\n\t                default:\r\n\t                    return;\r\n\t            }\r\n\t        }\r\n\r\n\t        return;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {Array.<number>} hsla\r\n\t     * @return {Array.<number>} rgba\r\n\t     */\r\n\t    function hsla2rgba(hsla) {\r\n\t        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1\r\n\t        // NOTE(deanm): According to the CSS spec s/l should only be\r\n\t        // percentages, but we don't bother and let float or percentage.\r\n\t        var s = parseCssFloat(hsla[1]);\r\n\t        var l = parseCssFloat(hsla[2]);\r\n\t        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\r\n\t        var m1 = l * 2 - m2;\r\n\r\n\t        var rgba = [\r\n\t            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),\r\n\t            clampCssByte(cssHueToRgb(m1, m2, h) * 255),\r\n\t            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255)\r\n\t        ];\r\n\r\n\t        if (hsla.length === 4) {\r\n\t            rgba[3] = hsla[3];\r\n\t        }\r\n\r\n\t        return rgba;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {Array.<number>} rgba\r\n\t     * @return {Array.<number>} hsla\r\n\t     */\r\n\t    function rgba2hsla(rgba) {\r\n\t        if (!rgba) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        // RGB from 0 to 255\r\n\t        var R = rgba[0] / 255;\r\n\t        var G = rgba[1] / 255;\r\n\t        var B = rgba[2] / 255;\r\n\r\n\t        var vMin = Math.min(R, G, B); // Min. value of RGB\r\n\t        var vMax = Math.max(R, G, B); // Max. value of RGB\r\n\t        var delta = vMax - vMin; // Delta RGB value\r\n\r\n\t        var L = (vMax + vMin) / 2;\r\n\t        var H;\r\n\t        var S;\r\n\t        // HSL results from 0 to 1\r\n\t        if (delta === 0) {\r\n\t            H = 0;\r\n\t            S = 0;\r\n\t        }\r\n\t        else {\r\n\t            if (L < 0.5) {\r\n\t                S = delta / (vMax + vMin);\r\n\t            }\r\n\t            else {\r\n\t                S = delta / (2 - vMax - vMin);\r\n\t            }\r\n\r\n\t            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;\r\n\t            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;\r\n\t            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;\r\n\r\n\t            if (R === vMax) {\r\n\t                H = deltaB - deltaG;\r\n\t            }\r\n\t            else if (G === vMax) {\r\n\t                H = (1 / 3) + deltaR - deltaB;\r\n\t            }\r\n\t            else if (B === vMax) {\r\n\t                H = (2 / 3) + deltaG - deltaR;\r\n\t            }\r\n\r\n\t            if (H < 0) {\r\n\t                H += 1;\r\n\t            }\r\n\r\n\t            if (H > 1) {\r\n\t                H -= 1;\r\n\t            }\r\n\t        }\r\n\r\n\t        var hsla = [H * 360, S, L];\r\n\r\n\t        if (rgba[3] != null) {\r\n\t            hsla.push(rgba[3]);\r\n\t        }\r\n\r\n\t        return hsla;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {string} color\r\n\t     * @param {number} level\r\n\t     * @return {string}\r\n\t     * @memberOf module:zrender/util/color\r\n\t     */\r\n\t    function lift(color, level) {\r\n\t        var colorArr = parse(color);\r\n\t        if (colorArr) {\r\n\t            for (var i = 0; i < 3; i++) {\r\n\t                if (level < 0) {\r\n\t                    colorArr[i] = colorArr[i] * (1 - level) | 0;\r\n\t                }\r\n\t                else {\r\n\t                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;\r\n\t                }\r\n\t            }\r\n\t            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {string} color\r\n\t     * @return {string}\r\n\t     * @memberOf module:zrender/util/color\r\n\t     */\r\n\t    function toHex(color, level) {\r\n\t        var colorArr = parse(color);\r\n\t        if (colorArr) {\r\n\t            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Map value to color. Faster than mapToColor methods because color is represented by rgba array\r\n\t     * @param {number} normalizedValue A float between 0 and 1.\r\n\t     * @param {Array.<Array.<number>>} colors List of rgba color array\r\n\t     * @param {Array.<number>} [out] Mapped gba color array\r\n\t     * @return {Array.<number>}\r\n\t     */\r\n\t    function fastMapToColor(normalizedValue, colors, out) {\r\n\t        if (!(colors && colors.length)\r\n\t            || !(normalizedValue >= 0 && normalizedValue <= 1)\r\n\t        ) {\r\n\t            return;\r\n\t        }\r\n\t        out = out || [0, 0, 0, 0];\r\n\t        var value = normalizedValue * (colors.length - 1);\r\n\t        var leftIndex = Math.floor(value);\r\n\t        var rightIndex = Math.ceil(value);\r\n\t        var leftColor = colors[leftIndex];\r\n\t        var rightColor = colors[rightIndex];\r\n\t        var dv = value - leftIndex;\r\n\t        out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));\r\n\t        out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));\r\n\t        out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));\r\n\t        out[3] = clampCssByte(lerp(leftColor[3], rightColor[3], dv));\r\n\t        return out;\r\n\t    }\r\n\t    /**\r\n\t     * @param {number} normalizedValue A float between 0 and 1.\r\n\t     * @param {Array.<string>} colors Color list.\r\n\t     * @param {boolean=} fullOutput Default false.\r\n\t     * @return {(string|Object)} Result color. If fullOutput,\r\n\t     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},\r\n\t     * @memberOf module:zrender/util/color\r\n\t     */\r\n\t    function mapToColor(normalizedValue, colors, fullOutput) {\r\n\t        if (!(colors && colors.length)\r\n\t            || !(normalizedValue >= 0 && normalizedValue <= 1)\r\n\t        ) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var value = normalizedValue * (colors.length - 1);\r\n\t        var leftIndex = Math.floor(value);\r\n\t        var rightIndex = Math.ceil(value);\r\n\t        var leftColor = parse(colors[leftIndex]);\r\n\t        var rightColor = parse(colors[rightIndex]);\r\n\t        var dv = value - leftIndex;\r\n\r\n\t        var color = stringify(\r\n\t            [\r\n\t                clampCssByte(lerp(leftColor[0], rightColor[0], dv)),\r\n\t                clampCssByte(lerp(leftColor[1], rightColor[1], dv)),\r\n\t                clampCssByte(lerp(leftColor[2], rightColor[2], dv)),\r\n\t                clampCssFloat(lerp(leftColor[3], rightColor[3], dv))\r\n\t            ],\r\n\t            'rgba'\r\n\t        );\r\n\r\n\t        return fullOutput\r\n\t            ? {\r\n\t                color: color,\r\n\t                leftIndex: leftIndex,\r\n\t                rightIndex: rightIndex,\r\n\t                value: value\r\n\t            }\r\n\t            : color;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {string} color\r\n\t     * @param {number=} h 0 ~ 360, ignore when null.\r\n\t     * @param {number=} s 0 ~ 1, ignore when null.\r\n\t     * @param {number=} l 0 ~ 1, ignore when null.\r\n\t     * @return {string} Color string in rgba format.\r\n\t     * @memberOf module:zrender/util/color\r\n\t     */\r\n\t    function modifyHSL(color, h, s, l) {\r\n\t        color = parse(color);\r\n\r\n\t        if (color) {\r\n\t            color = rgba2hsla(color);\r\n\t            h != null && (color[0] = clampCssAngle(h));\r\n\t            s != null && (color[1] = parseCssFloat(s));\r\n\t            l != null && (color[2] = parseCssFloat(l));\r\n\r\n\t            return stringify(hsla2rgba(color), 'rgba');\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {string} color\r\n\t     * @param {number=} alpha 0 ~ 1\r\n\t     * @return {string} Color string in rgba format.\r\n\t     * @memberOf module:zrender/util/color\r\n\t     */\r\n\t    function modifyAlpha(color, alpha) {\r\n\t        color = parse(color);\r\n\r\n\t        if (color && alpha != null) {\r\n\t            color[3] = clampCssFloat(alpha);\r\n\t            return stringify(color, 'rgba');\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {Array.<string>} colors Color list.\r\n\t     * @param {string} type 'rgba', 'hsva', ...\r\n\t     * @return {string} Result color.\r\n\t     */\r\n\t    function stringify(arrColor, type) {\r\n\t        var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];\r\n\t        if (type === 'rgba' || type === 'hsva' || type === 'hsla') {\r\n\t            colorStr += ',' + arrColor[3];\r\n\t        }\r\n\t        return type + '(' + colorStr + ')';\r\n\t    }\r\n\r\n\t    module.exports = {\r\n\t        parse: parse,\r\n\t        lift: lift,\r\n\t        toHex: toHex,\r\n\t        fastMapToColor: fastMapToColor,\r\n\t        mapToColor: mapToColor,\r\n\t        modifyHSL: modifyHSL,\r\n\t        modifyAlpha: modifyAlpha,\r\n\t        stringify: stringify\r\n\t    };\r\n\r\n\r\n\r\n\r\n/***/ },\r\n/* 40 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t        var config = __webpack_require__(41);\r\n\r\n\t        /**\r\n\t         * @exports zrender/tool/log\r\n\t         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\r\n\t         */\r\n\t        module.exports = function() {\r\n\t            if (config.debugMode === 0) {\r\n\t                return;\r\n\t            }\r\n\t            else if (config.debugMode == 1) {\r\n\t                for (var k in arguments) {\r\n\t                    throw new Error(arguments[k]);\r\n\t                }\r\n\t            }\r\n\t            else if (config.debugMode > 1) {\r\n\t                for (var k in arguments) {\r\n\t                    console.log(arguments[k]);\r\n\t                }\r\n\t            }\r\n\t        };\r\n\r\n\t        /* for debug\r\n\t        return function(mes) {\r\n\t            document.getElementById('wrong-message').innerHTML =\r\n\t                mes + ' ' + (new Date() - 0)\r\n\t                + '<br/>'\r\n\t                + document.getElementById('wrong-message').innerHTML;\r\n\t        };\r\n\t        */\r\n\t    \r\n\r\n\r\n/***/ },\r\n/* 41 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\t    var dpr = 1;\r\n\t    // If in browser environment\r\n\t    if (typeof window !== 'undefined') {\r\n\t        dpr = Math.max(window.devicePixelRatio || 1, 1);\r\n\t    }\r\n\t    /**\r\n\t     * config默认配置项\r\n\t     * @exports zrender/config\r\n\t     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\r\n\t     */\r\n\t    var config = {\r\n\t        /**\r\n\t         * debug日志选项：catchBrushException为true下有效\r\n\t         * 0 : 不生成debug数据，发布用\r\n\t         * 1 : 异常抛出，调试用\r\n\t         * 2 : 控制台输出，调试用\r\n\t         */\r\n\t        debugMode: 0,\r\n\r\n\t        // retina 屏幕优化\r\n\t        devicePixelRatio: dpr\r\n\t    };\r\n\t    module.exports = config;\r\n\r\n\r\n\r\n\r\n/***/ },\r\n/* 42 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var Group = __webpack_require__(30);\r\n\t    var componentUtil = __webpack_require__(20);\r\n\t    var clazzUtil = __webpack_require__(13);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    function Chart() {\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/container/Group}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.group = new Group();\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.uid = componentUtil.getUID('viewChart');\r\n\t    }\r\n\r\n\t    Chart.prototype = {\r\n\r\n\t        type: 'chart',\r\n\r\n\t        /**\r\n\t         * Init the chart\r\n\t         * @param  {module:echarts/model/Global} ecModel\r\n\t         * @param  {module:echarts/ExtensionAPI} api\r\n\t         */\r\n\t        init: function (ecModel, api) {},\r\n\r\n\t        /**\r\n\t         * Render the chart\r\n\t         * @param  {module:echarts/model/Series} seriesModel\r\n\t         * @param  {module:echarts/model/Global} ecModel\r\n\t         * @param  {module:echarts/ExtensionAPI} api\r\n\t         * @param  {Object} payload\r\n\t         */\r\n\t        render: function (seriesModel, ecModel, api, payload) {},\r\n\r\n\t        /**\r\n\t         * Highlight series or specified data item\r\n\t         * @param  {module:echarts/model/Series} seriesModel\r\n\t         * @param  {module:echarts/model/Global} ecModel\r\n\t         * @param  {module:echarts/ExtensionAPI} api\r\n\t         * @param  {Object} payload\r\n\t         */\r\n\t        highlight: function (seriesModel, ecModel, api, payload) {\r\n\t            toggleHighlight(seriesModel.getData(), payload, 'emphasis');\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Downplay series or specified data item\r\n\t         * @param  {module:echarts/model/Series} seriesModel\r\n\t         * @param  {module:echarts/model/Global} ecModel\r\n\t         * @param  {module:echarts/ExtensionAPI} api\r\n\t         * @param  {Object} payload\r\n\t         */\r\n\t        downplay: function (seriesModel, ecModel, api, payload) {\r\n\t            toggleHighlight(seriesModel.getData(), payload, 'normal');\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Remove self\r\n\t         * @param  {module:echarts/model/Global} ecModel\r\n\t         * @param  {module:echarts/ExtensionAPI} api\r\n\t         */\r\n\t        remove: function (ecModel, api) {\r\n\t            this.group.removeAll();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Dispose self\r\n\t         * @param  {module:echarts/model/Global} ecModel\r\n\t         * @param  {module:echarts/ExtensionAPI} api\r\n\t         */\r\n\t        dispose: function () {}\r\n\r\n\t        /**\r\n\t         * The view contains the given point.\r\n\t         * @interface\r\n\t         * @param {Array.<number>} point\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        // containPoint: function () {}\r\n\r\n\t    };\r\n\r\n\t    var chartProto = Chart.prototype;\r\n\t    chartProto.updateView\r\n\t        = chartProto.updateLayout\r\n\t        = chartProto.updateVisual\r\n\t        = function (seriesModel, ecModel, api, payload) {\r\n\t            this.render(seriesModel, ecModel, api, payload);\r\n\t        };\r\n\r\n\t    /**\r\n\t     * Set state of single element\r\n\t     * @param  {module:zrender/Element} el\r\n\t     * @param  {string} state\r\n\t     */\r\n\t    function elSetState(el, state) {\r\n\t        if (el) {\r\n\t            el.trigger(state);\r\n\t            if (el.type === 'group') {\r\n\t                for (var i = 0; i < el.childCount(); i++) {\r\n\t                    elSetState(el.childAt(i), state);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    /**\r\n\t     * @param  {module:echarts/data/List} data\r\n\t     * @param  {Object} payload\r\n\t     * @param  {string} state 'normal'|'emphasis'\r\n\t     * @inner\r\n\t     */\r\n\t    function toggleHighlight(data, payload, state) {\r\n\t        var dataIndex = modelUtil.queryDataIndex(data, payload);\r\n\r\n\t        if (dataIndex != null) {\r\n\t            zrUtil.each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {\r\n\t                elSetState(data.getItemGraphicEl(dataIdx), state);\r\n\t            });\r\n\t        }\r\n\t        else {\r\n\t            data.eachItemGraphicEl(function (el) {\r\n\t                elSetState(el, state);\r\n\t            });\r\n\t        }\r\n\t    }\r\n\r\n\t    // Enable Chart.extend.\r\n\t    clazzUtil.enableClassExtend(Chart, ['dispose']);\r\n\r\n\t    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\r\n\t    clazzUtil.enableClassManagement(Chart, {registerWhenExtend: true});\r\n\r\n\t    module.exports = Chart;\r\n\r\n\r\n/***/ },\r\n/* 43 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var pathTool = __webpack_require__(44);\r\n\t    var round = Math.round;\r\n\t    var Path = __webpack_require__(45);\r\n\t    var colorTool = __webpack_require__(39);\r\n\t    var matrix = __webpack_require__(11);\r\n\t    var vector = __webpack_require__(10);\r\n\t    var Gradient = __webpack_require__(61);\r\n\r\n\t    var graphic = {};\r\n\r\n\t    graphic.Group = __webpack_require__(30);\r\n\r\n\t    graphic.Image = __webpack_require__(62);\r\n\r\n\t    graphic.Text = __webpack_require__(64);\r\n\r\n\t    graphic.Circle = __webpack_require__(65);\r\n\r\n\t    graphic.Sector = __webpack_require__(66);\r\n\r\n\t    graphic.Ring = __webpack_require__(67);\r\n\r\n\t    graphic.Polygon = __webpack_require__(68);\r\n\r\n\t    graphic.Polyline = __webpack_require__(72);\r\n\r\n\t    graphic.Rect = __webpack_require__(73);\r\n\r\n\t    graphic.Line = __webpack_require__(75);\r\n\r\n\t    graphic.BezierCurve = __webpack_require__(76);\r\n\r\n\t    graphic.Arc = __webpack_require__(77);\r\n\r\n\t    graphic.CompoundPath = __webpack_require__(78);\r\n\r\n\t    graphic.LinearGradient = __webpack_require__(79);\r\n\r\n\t    graphic.RadialGradient = __webpack_require__(80);\r\n\r\n\t    graphic.BoundingRect = __webpack_require__(9);\r\n\r\n\t    /**\r\n\t     * Extend shape with parameters\r\n\t     */\r\n\t    graphic.extendShape = function (opts) {\r\n\t        return Path.extend(opts);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Extend path\r\n\t     */\r\n\t    graphic.extendPath = function (pathData, opts) {\r\n\t        return pathTool.extendFromString(pathData, opts);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Create a path element from path data string\r\n\t     * @param {string} pathData\r\n\t     * @param {Object} opts\r\n\t     * @param {module:zrender/core/BoundingRect} rect\r\n\t     * @param {string} [layout=cover] 'center' or 'cover'\r\n\t     */\r\n\t    graphic.makePath = function (pathData, opts, rect, layout) {\r\n\t        var path = pathTool.createFromString(pathData, opts);\r\n\t        var boundingRect = path.getBoundingRect();\r\n\t        if (rect) {\r\n\t            var aspect = boundingRect.width / boundingRect.height;\r\n\r\n\t            if (layout === 'center') {\r\n\t                // Set rect to center, keep width / height ratio.\r\n\t                var width = rect.height * aspect;\r\n\t                var height;\r\n\t                if (width <= rect.width) {\r\n\t                    height = rect.height;\r\n\t                }\r\n\t                else {\r\n\t                    width = rect.width;\r\n\t                    height = width / aspect;\r\n\t                }\r\n\t                var cx = rect.x + rect.width / 2;\r\n\t                var cy = rect.y + rect.height / 2;\r\n\r\n\t                rect.x = cx - width / 2;\r\n\t                rect.y = cy - height / 2;\r\n\t                rect.width = width;\r\n\t                rect.height = height;\r\n\t            }\r\n\r\n\t            this.resizePath(path, rect);\r\n\t        }\r\n\t        return path;\r\n\t    };\r\n\r\n\t    graphic.mergePath = pathTool.mergePath,\r\n\r\n\t    /**\r\n\t     * Resize a path to fit the rect\r\n\t     * @param {module:zrender/graphic/Path} path\r\n\t     * @param {Object} rect\r\n\t     */\r\n\t    graphic.resizePath = function (path, rect) {\r\n\t        if (!path.applyTransform) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var pathRect = path.getBoundingRect();\r\n\r\n\t        var m = pathRect.calculateTransform(rect);\r\n\r\n\t        path.applyTransform(m);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Sub pixel optimize line for canvas\r\n\t     *\r\n\t     * @param {Object} param\r\n\t     * @param {Object} [param.shape]\r\n\t     * @param {number} [param.shape.x1]\r\n\t     * @param {number} [param.shape.y1]\r\n\t     * @param {number} [param.shape.x2]\r\n\t     * @param {number} [param.shape.y2]\r\n\t     * @param {Object} [param.style]\r\n\t     * @param {number} [param.style.lineWidth]\r\n\t     * @return {Object} Modified param\r\n\t     */\r\n\t    graphic.subPixelOptimizeLine = function (param) {\r\n\t        var subPixelOptimize = graphic.subPixelOptimize;\r\n\t        var shape = param.shape;\r\n\t        var lineWidth = param.style.lineWidth;\r\n\r\n\t        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {\r\n\t            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);\r\n\t        }\r\n\t        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {\r\n\t            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);\r\n\t        }\r\n\t        return param;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Sub pixel optimize rect for canvas\r\n\t     *\r\n\t     * @param {Object} param\r\n\t     * @param {Object} [param.shape]\r\n\t     * @param {number} [param.shape.x]\r\n\t     * @param {number} [param.shape.y]\r\n\t     * @param {number} [param.shape.width]\r\n\t     * @param {number} [param.shape.height]\r\n\t     * @param {Object} [param.style]\r\n\t     * @param {number} [param.style.lineWidth]\r\n\t     * @return {Object} Modified param\r\n\t     */\r\n\t    graphic.subPixelOptimizeRect = function (param) {\r\n\t        var subPixelOptimize = graphic.subPixelOptimize;\r\n\t        var shape = param.shape;\r\n\t        var lineWidth = param.style.lineWidth;\r\n\t        var originX = shape.x;\r\n\t        var originY = shape.y;\r\n\t        var originWidth = shape.width;\r\n\t        var originHeight = shape.height;\r\n\t        shape.x = subPixelOptimize(shape.x, lineWidth, true);\r\n\t        shape.y = subPixelOptimize(shape.y, lineWidth, true);\r\n\t        shape.width = Math.max(\r\n\t            subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x,\r\n\t            originWidth === 0 ? 0 : 1\r\n\t        );\r\n\t        shape.height = Math.max(\r\n\t            subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y,\r\n\t            originHeight === 0 ? 0 : 1\r\n\t        );\r\n\t        return param;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Sub pixel optimize for canvas\r\n\t     *\r\n\t     * @param {number} position Coordinate, such as x, y\r\n\t     * @param {number} lineWidth Should be nonnegative integer.\r\n\t     * @param {boolean=} positiveOrNegative Default false (negative).\r\n\t     * @return {number} Optimized position.\r\n\t     */\r\n\t    graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {\r\n\t        // Assure that (position + lineWidth / 2) is near integer edge,\r\n\t        // otherwise line will be fuzzy in canvas.\r\n\t        var doubledPosition = round(position * 2);\r\n\t        return (doubledPosition + round(lineWidth)) % 2 === 0\r\n\t            ? doubledPosition / 2\r\n\t            : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;\r\n\t    };\r\n\r\n\t    function hasFillOrStroke(fillOrStroke) {\r\n\t        return fillOrStroke != null && fillOrStroke != 'none';\r\n\t    }\r\n\r\n\t    function liftColor(color) {\r\n\t        return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @private\r\n\t     */\r\n\t    function cacheElementStl(el) {\r\n\t        if (el.__hoverStlDirty) {\r\n\t            var stroke = el.style.stroke;\r\n\t            var fill = el.style.fill;\r\n\r\n\t            // Create hoverStyle on mouseover\r\n\t            var hoverStyle = el.__hoverStl;\r\n\t            hoverStyle.fill = hoverStyle.fill\r\n\t                || (hasFillOrStroke(fill) ? liftColor(fill) : null);\r\n\t            hoverStyle.stroke = hoverStyle.stroke\r\n\t                || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);\r\n\r\n\t            var normalStyle = {};\r\n\t            for (var name in hoverStyle) {\r\n\t                if (hoverStyle.hasOwnProperty(name)) {\r\n\t                    normalStyle[name] = el.style[name];\r\n\t                }\r\n\t            }\r\n\r\n\t            el.__normalStl = normalStyle;\r\n\r\n\t            el.__hoverStlDirty = false;\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @private\r\n\t     */\r\n\t    function doSingleEnterHover(el) {\r\n\t        if (el.__isHover) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        cacheElementStl(el);\r\n\r\n\t        if (el.useHoverLayer) {\r\n\t            el.__zr && el.__zr.addHover(el, el.__hoverStl);\r\n\t        }\r\n\t        else {\r\n\t            el.setStyle(el.__hoverStl);\r\n\t            el.z2 += 1;\r\n\t        }\r\n\r\n\t        el.__isHover = true;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function doSingleLeaveHover(el) {\r\n\t        if (!el.__isHover) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var normalStl = el.__normalStl;\r\n\t        if (el.useHoverLayer) {\r\n\t            el.__zr && el.__zr.removeHover(el);\r\n\t        }\r\n\t        else {\r\n\t            normalStl && el.setStyle(normalStl);\r\n\t            el.z2 -= 1;\r\n\t        }\r\n\r\n\t        el.__isHover = false;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function doEnterHover(el) {\r\n\t        el.type === 'group'\r\n\t            ? el.traverse(function (child) {\r\n\t                if (child.type !== 'group') {\r\n\t                    doSingleEnterHover(child);\r\n\t                }\r\n\t            })\r\n\t            : doSingleEnterHover(el);\r\n\t    }\r\n\r\n\t    function doLeaveHover(el) {\r\n\t        el.type === 'group'\r\n\t            ? el.traverse(function (child) {\r\n\t                if (child.type !== 'group') {\r\n\t                    doSingleLeaveHover(child);\r\n\t                }\r\n\t            })\r\n\t            : doSingleLeaveHover(el);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function setElementHoverStl(el, hoverStl) {\r\n\t        // If element has sepcified hoverStyle, then use it instead of given hoverStyle\r\n\t        // Often used when item group has a label element and it's hoverStyle is different\r\n\t        el.__hoverStl = el.hoverStyle || hoverStl || {};\r\n\t        el.__hoverStlDirty = true;\r\n\r\n\t        if (el.__isHover) {\r\n\t            cacheElementStl(el);\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function onElementMouseOver() {\r\n\t        // Only if element is not in emphasis status\r\n\t        !this.__isEmphasis && doEnterHover(this);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function onElementMouseOut() {\r\n\t        // Only if element is not in emphasis status\r\n\t        !this.__isEmphasis && doLeaveHover(this);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function enterEmphasis() {\r\n\t        this.__isEmphasis = true;\r\n\t        doEnterHover(this);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function leaveEmphasis() {\r\n\t        this.__isEmphasis = false;\r\n\t        doLeaveHover(this);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Set hover style of element\r\n\t     * @param {module:zrender/Element} el\r\n\t     * @param {Object} [hoverStyle]\r\n\t     */\r\n\t    graphic.setHoverStyle = function (el, hoverStyle) {\r\n\t        el.type === 'group'\r\n\t            ? el.traverse(function (child) {\r\n\t                if (child.type !== 'group') {\r\n\t                    setElementHoverStl(child, hoverStyle);\r\n\t                }\r\n\t            })\r\n\t            : setElementHoverStl(el, hoverStyle);\r\n\t        // Remove previous bound handlers\r\n\t        el.on('mouseover', onElementMouseOver)\r\n\t          .on('mouseout', onElementMouseOut);\r\n\r\n\t        // Emphasis, normal can be triggered manually\r\n\t        el.on('emphasis', enterEmphasis)\r\n\t          .on('normal', leaveEmphasis);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Set text option in the style\r\n\t     * @param {Object} textStyle\r\n\t     * @param {module:echarts/model/Model} labelModel\r\n\t     * @param {string} color\r\n\t     */\r\n\t    graphic.setText = function (textStyle, labelModel, color) {\r\n\t        var labelPosition = labelModel.getShallow('position') || 'inside';\r\n\t        var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;\r\n\t        var textStyleModel = labelModel.getModel('textStyle');\r\n\t        zrUtil.extend(textStyle, {\r\n\t            textDistance: labelModel.getShallow('distance') || 5,\r\n\t            textFont: textStyleModel.getFont(),\r\n\t            textPosition: labelPosition,\r\n\t            textFill: textStyleModel.getTextColor() || labelColor\r\n\t        });\r\n\t    };\r\n\r\n\t    function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {\r\n\t        if (typeof dataIndex === 'function') {\r\n\t            cb = dataIndex;\r\n\t            dataIndex = null;\r\n\t        }\r\n\t        var animationEnabled = animatableModel\r\n\t            && (\r\n\t                animatableModel.ifEnableAnimation\r\n\t                ? animatableModel.ifEnableAnimation()\r\n\t                // Directly use animation property\r\n\t                : animatableModel.getShallow('animation')\r\n\t            );\r\n\r\n\t        if (animationEnabled) {\r\n\t            var postfix = isUpdate ? 'Update' : '';\r\n\t            var duration = animatableModel\r\n\t                && animatableModel.getShallow('animationDuration' + postfix);\r\n\t            var animationEasing = animatableModel\r\n\t                && animatableModel.getShallow('animationEasing' + postfix);\r\n\t            var animationDelay = animatableModel\r\n\t                && animatableModel.getShallow('animationDelay' + postfix);\r\n\t            if (typeof animationDelay === 'function') {\r\n\t                animationDelay = animationDelay(dataIndex);\r\n\t            }\r\n\t            duration > 0\r\n\t                ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb)\r\n\t                : (el.attr(props), cb && cb());\r\n\t        }\r\n\t        else {\r\n\t            el.attr(props);\r\n\t            cb && cb();\r\n\t        }\r\n\t    }\r\n\t    /**\r\n\t     * Update graphic element properties with or without animation according to the configuration in series\r\n\t     * @param {module:zrender/Element} el\r\n\t     * @param {Object} props\r\n\t     * @param {module:echarts/model/Model} [animatableModel]\r\n\t     * @param {number} [dataIndex]\r\n\t     * @param {Function} [cb]\r\n\t     * @example\r\n\t     *     graphic.updateProps(el, {\r\n\t     *         position: [100, 100]\r\n\t     *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });\r\n\t     *     // Or\r\n\t     *     graphic.updateProps(el, {\r\n\t     *         position: [100, 100]\r\n\t     *     }, seriesModel, function () { console.log('Animation done!'); });\r\n\t     */\r\n\t    graphic.updateProps = function (el, props, animatableModel, dataIndex, cb) {\r\n\t        animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Init graphic element properties with or without animation according to the configuration in series\r\n\t     * @param {module:zrender/Element} el\r\n\t     * @param {Object} props\r\n\t     * @param {module:echarts/model/Model} [animatableModel]\r\n\t     * @param {number} [dataIndex]\r\n\t     * @param {Function} cb\r\n\t     */\r\n\t    graphic.initProps = function (el, props, animatableModel, dataIndex, cb) {\r\n\t        animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get transform matrix of target (param target),\r\n\t     * in coordinate of its ancestor (param ancestor)\r\n\t     *\r\n\t     * @param {module:zrender/mixin/Transformable} target\r\n\t     * @param {module:zrender/mixin/Transformable} [ancestor]\r\n\t     */\r\n\t    graphic.getTransform = function (target, ancestor) {\r\n\t        var mat = matrix.identity([]);\r\n\r\n\t        while (target && target !== ancestor) {\r\n\t            matrix.mul(mat, target.getLocalTransform(), mat);\r\n\t            target = target.parent;\r\n\t        }\r\n\r\n\t        return mat;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Apply transform to an vertex.\r\n\t     * @param {Array.<number>} vertex [x, y]\r\n\t     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]\r\n\t     * @param {boolean=} invert Whether use invert matrix.\r\n\t     * @return {Array.<number>} [x, y]\r\n\t     */\r\n\t    graphic.applyTransform = function (vertex, transform, invert) {\r\n\t        if (invert) {\r\n\t            transform = matrix.invert([], transform);\r\n\t        }\r\n\t        return vector.applyTransform([], vertex, transform);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {string} direction 'left' 'right' 'top' 'bottom'\r\n\t     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]\r\n\t     * @param {boolean=} invert Whether use invert matrix.\r\n\t     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'\r\n\t     */\r\n\t    graphic.transformDirection = function (direction, transform, invert) {\r\n\r\n\t        // Pick a base, ensure that transform result will not be (0, 0).\r\n\t        var hBase = (transform[4] === 0 || transform[5] === 0 || transform[0] === 0)\r\n\t            ? 1 : Math.abs(2 * transform[4] / transform[0]);\r\n\t        var vBase = (transform[4] === 0 || transform[5] === 0 || transform[2] === 0)\r\n\t            ? 1 : Math.abs(2 * transform[4] / transform[2]);\r\n\r\n\t        var vertex = [\r\n\t            direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,\r\n\t            direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0\r\n\t        ];\r\n\r\n\t        vertex = graphic.applyTransform(vertex, transform, invert);\r\n\r\n\t        return Math.abs(vertex[0]) > Math.abs(vertex[1])\r\n\t            ? (vertex[0] > 0 ? 'right' : 'left')\r\n\t            : (vertex[1] > 0 ? 'bottom' : 'top');\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Apply group transition animation from g1 to g2\r\n\t     */\r\n\t    graphic.groupTransition = function (g1, g2, animatableModel, cb) {\r\n\t        if (!g1 || !g2) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        function getElMap(g) {\r\n\t            var elMap = {};\r\n\t            g.traverse(function (el) {\r\n\t                if (!el.isGroup && el.anid) {\r\n\t                    elMap[el.anid] = el;\r\n\t                }\r\n\t            });\r\n\t            return elMap;\r\n\t        }\r\n\t        function getAnimatableProps(el) {\r\n\t            var obj = {\r\n\t                position: vector.clone(el.position),\r\n\t                rotation: el.rotation\r\n\t            };\r\n\t            if (el.shape) {\r\n\t                obj.shape = zrUtil.extend({}, el.shape);\r\n\t            }\r\n\t            return obj;\r\n\t        }\r\n\t        var elMap1 = getElMap(g1);\r\n\r\n\t        g2.traverse(function (el) {\r\n\t            if (!el.isGroup && el.anid) {\r\n\t                var oldEl = elMap1[el.anid];\r\n\t                if (oldEl) {\r\n\t                    var newProp = getAnimatableProps(el);\r\n\t                    el.attr(getAnimatableProps(oldEl));\r\n\t                    graphic.updateProps(el, newProp, animatableModel, el.dataIndex);\r\n\t                }\r\n\t                // else {\r\n\t                //     if (el.previousProps) {\r\n\t                //         graphic.updateProps\r\n\t                //     }\r\n\t                // }\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\t    module.exports = graphic;\r\n\r\n\r\n/***/ },\r\n/* 44 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var Path = __webpack_require__(45);\r\n\t    var PathProxy = __webpack_require__(49);\r\n\t    var transformPath = __webpack_require__(60);\r\n\t    var matrix = __webpack_require__(11);\r\n\r\n\t    // command chars\r\n\t    var cc = [\r\n\t        'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',\r\n\t        'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'\r\n\t    ];\r\n\r\n\t    var mathSqrt = Math.sqrt;\r\n\t    var mathSin = Math.sin;\r\n\t    var mathCos = Math.cos;\r\n\t    var PI = Math.PI;\r\n\r\n\t    var vMag = function(v) {\r\n\t        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\r\n\t    };\r\n\t    var vRatio = function(u, v) {\r\n\t        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\r\n\t    };\r\n\t    var vAngle = function(u, v) {\r\n\t        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1)\r\n\t                * Math.acos(vRatio(u, v));\r\n\t    };\r\n\r\n\t    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {\r\n\t        var psi = psiDeg * (PI / 180.0);\r\n\t        var xp = mathCos(psi) * (x1 - x2) / 2.0\r\n\t                 + mathSin(psi) * (y1 - y2) / 2.0;\r\n\t        var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0\r\n\t                 + mathCos(psi) * (y1 - y2) / 2.0;\r\n\r\n\t        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\r\n\r\n\t        if (lambda > 1) {\r\n\t            rx *= mathSqrt(lambda);\r\n\t            ry *= mathSqrt(lambda);\r\n\t        }\r\n\r\n\t        var f = (fa === fs ? -1 : 1)\r\n\t            * mathSqrt((((rx * rx) * (ry * ry))\r\n\t                    - ((rx * rx) * (yp * yp))\r\n\t                    - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp)\r\n\t                    + (ry * ry) * (xp * xp))\r\n\t                ) || 0;\r\n\r\n\t        var cxp = f * rx * yp / ry;\r\n\t        var cyp = f * -ry * xp / rx;\r\n\r\n\t        var cx = (x1 + x2) / 2.0\r\n\t                 + mathCos(psi) * cxp\r\n\t                 - mathSin(psi) * cyp;\r\n\t        var cy = (y1 + y2) / 2.0\r\n\t                + mathSin(psi) * cxp\r\n\t                + mathCos(psi) * cyp;\r\n\r\n\t        var theta = vAngle([ 1, 0 ], [ (xp - cxp) / rx, (yp - cyp) / ry ]);\r\n\t        var u = [ (xp - cxp) / rx, (yp - cyp) / ry ];\r\n\t        var v = [ (-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry ];\r\n\t        var dTheta = vAngle(u, v);\r\n\r\n\t        if (vRatio(u, v) <= -1) {\r\n\t            dTheta = PI;\r\n\t        }\r\n\t        if (vRatio(u, v) >= 1) {\r\n\t            dTheta = 0;\r\n\t        }\r\n\t        if (fs === 0 && dTheta > 0) {\r\n\t            dTheta = dTheta - 2 * PI;\r\n\t        }\r\n\t        if (fs === 1 && dTheta < 0) {\r\n\t            dTheta = dTheta + 2 * PI;\r\n\t        }\r\n\r\n\t        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);\r\n\t    }\r\n\r\n\t    function createPathProxyFromString(data) {\r\n\t        if (!data) {\r\n\t            return [];\r\n\t        }\r\n\r\n\t        // command string\r\n\t        var cs = data.replace(/-/g, ' -')\r\n\t            .replace(/  /g, ' ')\r\n\t            .replace(/ /g, ',')\r\n\t            .replace(/,,/g, ',');\r\n\r\n\t        var n;\r\n\t        // create pipes so that we can split the data\r\n\t        for (n = 0; n < cc.length; n++) {\r\n\t            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\r\n\t        }\r\n\r\n\t        // create array\r\n\t        var arr = cs.split('|');\r\n\t        // init context point\r\n\t        var cpx = 0;\r\n\t        var cpy = 0;\r\n\r\n\t        var path = new PathProxy();\r\n\t        var CMD = PathProxy.CMD;\r\n\r\n\t        var prevCmd;\r\n\t        for (n = 1; n < arr.length; n++) {\r\n\t            var str = arr[n];\r\n\t            var c = str.charAt(0);\r\n\t            var off = 0;\r\n\t            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');\r\n\t            var cmd;\r\n\r\n\t            if (p.length > 0 && p[0] === '') {\r\n\t                p.shift();\r\n\t            }\r\n\r\n\t            for (var i = 0; i < p.length; i++) {\r\n\t                p[i] = parseFloat(p[i]);\r\n\t            }\r\n\t            while (off < p.length && !isNaN(p[off])) {\r\n\t                if (isNaN(p[0])) {\r\n\t                    break;\r\n\t                }\r\n\t                var ctlPtx;\r\n\t                var ctlPty;\r\n\r\n\t                var rx;\r\n\t                var ry;\r\n\t                var psi;\r\n\t                var fa;\r\n\t                var fs;\r\n\r\n\t                var x1 = cpx;\r\n\t                var y1 = cpy;\r\n\r\n\t                // convert l, H, h, V, and v to L\r\n\t                switch (c) {\r\n\t                    case 'l':\r\n\t                        cpx += p[off++];\r\n\t                        cpy += p[off++];\r\n\t                        cmd = CMD.L;\r\n\t                        path.addData(cmd, cpx, cpy);\r\n\t                        break;\r\n\t                    case 'L':\r\n\t                        cpx = p[off++];\r\n\t                        cpy = p[off++];\r\n\t                        cmd = CMD.L;\r\n\t                        path.addData(cmd, cpx, cpy);\r\n\t                        break;\r\n\t                    case 'm':\r\n\t                        cpx += p[off++];\r\n\t                        cpy += p[off++];\r\n\t                        cmd = CMD.M;\r\n\t                        path.addData(cmd, cpx, cpy);\r\n\t                        c = 'l';\r\n\t                        break;\r\n\t                    case 'M':\r\n\t                        cpx = p[off++];\r\n\t                        cpy = p[off++];\r\n\t                        cmd = CMD.M;\r\n\t                        path.addData(cmd, cpx, cpy);\r\n\t                        c = 'L';\r\n\t                        break;\r\n\t                    case 'h':\r\n\t                        cpx += p[off++];\r\n\t                        cmd = CMD.L;\r\n\t                        path.addData(cmd, cpx, cpy);\r\n\t                        break;\r\n\t                    case 'H':\r\n\t                        cpx = p[off++];\r\n\t                        cmd = CMD.L;\r\n\t                        path.addData(cmd, cpx, cpy);\r\n\t                        break;\r\n\t                    case 'v':\r\n\t                        cpy += p[off++];\r\n\t                        cmd = CMD.L;\r\n\t                        path.addData(cmd, cpx, cpy);\r\n\t                        break;\r\n\t                    case 'V':\r\n\t                        cpy = p[off++];\r\n\t                        cmd = CMD.L;\r\n\t                        path.addData(cmd, cpx, cpy);\r\n\t                        break;\r\n\t                    case 'C':\r\n\t                        cmd = CMD.C;\r\n\t                        path.addData(\r\n\t                            cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]\r\n\t                        );\r\n\t                        cpx = p[off - 2];\r\n\t                        cpy = p[off - 1];\r\n\t                        break;\r\n\t                    case 'c':\r\n\t                        cmd = CMD.C;\r\n\t                        path.addData(\r\n\t                            cmd,\r\n\t                            p[off++] + cpx, p[off++] + cpy,\r\n\t                            p[off++] + cpx, p[off++] + cpy,\r\n\t                            p[off++] + cpx, p[off++] + cpy\r\n\t                        );\r\n\t                        cpx += p[off - 2];\r\n\t                        cpy += p[off - 1];\r\n\t                        break;\r\n\t                    case 'S':\r\n\t                        ctlPtx = cpx;\r\n\t                        ctlPty = cpy;\r\n\t                        var len = path.len();\r\n\t                        var pathData = path.data;\r\n\t                        if (prevCmd === CMD.C) {\r\n\t                            ctlPtx += cpx - pathData[len - 4];\r\n\t                            ctlPty += cpy - pathData[len - 3];\r\n\t                        }\r\n\t                        cmd = CMD.C;\r\n\t                        x1 = p[off++];\r\n\t                        y1 = p[off++];\r\n\t                        cpx = p[off++];\r\n\t                        cpy = p[off++];\r\n\t                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\r\n\t                        break;\r\n\t                    case 's':\r\n\t                        ctlPtx = cpx;\r\n\t                        ctlPty = cpy;\r\n\t                        var len = path.len();\r\n\t                        var pathData = path.data;\r\n\t                        if (prevCmd === CMD.C) {\r\n\t                            ctlPtx += cpx - pathData[len - 4];\r\n\t                            ctlPty += cpy - pathData[len - 3];\r\n\t                        }\r\n\t                        cmd = CMD.C;\r\n\t                        x1 = cpx + p[off++];\r\n\t                        y1 = cpy + p[off++];\r\n\t                        cpx += p[off++];\r\n\t                        cpy += p[off++];\r\n\t                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\r\n\t                        break;\r\n\t                    case 'Q':\r\n\t                        x1 = p[off++];\r\n\t                        y1 = p[off++];\r\n\t                        cpx = p[off++];\r\n\t                        cpy = p[off++];\r\n\t                        cmd = CMD.Q;\r\n\t                        path.addData(cmd, x1, y1, cpx, cpy);\r\n\t                        break;\r\n\t                    case 'q':\r\n\t                        x1 = p[off++] + cpx;\r\n\t                        y1 = p[off++] + cpy;\r\n\t                        cpx += p[off++];\r\n\t                        cpy += p[off++];\r\n\t                        cmd = CMD.Q;\r\n\t                        path.addData(cmd, x1, y1, cpx, cpy);\r\n\t                        break;\r\n\t                    case 'T':\r\n\t                        ctlPtx = cpx;\r\n\t                        ctlPty = cpy;\r\n\t                        var len = path.len();\r\n\t                        var pathData = path.data;\r\n\t                        if (prevCmd === CMD.Q) {\r\n\t                            ctlPtx += cpx - pathData[len - 4];\r\n\t                            ctlPty += cpy - pathData[len - 3];\r\n\t                        }\r\n\t                        cpx = p[off++];\r\n\t                        cpy = p[off++];\r\n\t                        cmd = CMD.Q;\r\n\t                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\r\n\t                        break;\r\n\t                    case 't':\r\n\t                        ctlPtx = cpx;\r\n\t                        ctlPty = cpy;\r\n\t                        var len = path.len();\r\n\t                        var pathData = path.data;\r\n\t                        if (prevCmd === CMD.Q) {\r\n\t                            ctlPtx += cpx - pathData[len - 4];\r\n\t                            ctlPty += cpy - pathData[len - 3];\r\n\t                        }\r\n\t                        cpx += p[off++];\r\n\t                        cpy += p[off++];\r\n\t                        cmd = CMD.Q;\r\n\t                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\r\n\t                        break;\r\n\t                    case 'A':\r\n\t                        rx = p[off++];\r\n\t                        ry = p[off++];\r\n\t                        psi = p[off++];\r\n\t                        fa = p[off++];\r\n\t                        fs = p[off++];\r\n\r\n\t                        x1 = cpx, y1 = cpy;\r\n\t                        cpx = p[off++];\r\n\t                        cpy = p[off++];\r\n\t                        cmd = CMD.A;\r\n\t                        processArc(\r\n\t                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\r\n\t                        );\r\n\t                        break;\r\n\t                    case 'a':\r\n\t                        rx = p[off++];\r\n\t                        ry = p[off++];\r\n\t                        psi = p[off++];\r\n\t                        fa = p[off++];\r\n\t                        fs = p[off++];\r\n\r\n\t                        x1 = cpx, y1 = cpy;\r\n\t                        cpx += p[off++];\r\n\t                        cpy += p[off++];\r\n\t                        cmd = CMD.A;\r\n\t                        processArc(\r\n\t                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\r\n\t                        );\r\n\t                        break;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (c === 'z' || c === 'Z') {\r\n\t                cmd = CMD.Z;\r\n\t                path.addData(cmd);\r\n\t            }\r\n\r\n\t            prevCmd = cmd;\r\n\t        }\r\n\r\n\t        path.toStatic();\r\n\r\n\t        return path;\r\n\t    }\r\n\r\n\t    // TODO Optimize double memory cost problem\r\n\t    function createPathOptions(str, opts) {\r\n\t        var pathProxy = createPathProxyFromString(str);\r\n\t        var transform;\r\n\t        opts = opts || {};\r\n\t        opts.buildPath = function (path) {\r\n\t            path.setData(pathProxy.data);\r\n\t            transform && transformPath(path, transform);\r\n\t            // Svg and vml renderer don't have context\r\n\t            var ctx = path.getContext();\r\n\t            if (ctx) {\r\n\t                path.rebuildPath(ctx);\r\n\t            }\r\n\t        };\r\n\r\n\t        opts.applyTransform = function (m) {\r\n\t            if (!transform) {\r\n\t                transform = matrix.create();\r\n\t            }\r\n\t            matrix.mul(transform, m, transform);\r\n\t            this.dirty(true);\r\n\t        };\r\n\r\n\t        return opts;\r\n\t    }\r\n\r\n\t    module.exports = {\r\n\t        /**\r\n\t         * Create a Path object from path string data\r\n\t         * http://www.w3.org/TR/SVG/paths.html#PathData\r\n\t         * @param  {Object} opts Other options\r\n\t         */\r\n\t        createFromString: function (str, opts) {\r\n\t            return new Path(createPathOptions(str, opts));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Create a Path class from path string data\r\n\t         * @param  {string} str\r\n\t         * @param  {Object} opts Other options\r\n\t         */\r\n\t        extendFromString: function (str, opts) {\r\n\t            return Path.extend(createPathOptions(str, opts));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Merge multiple paths\r\n\t         */\r\n\t        // TODO Apply transform\r\n\t        // TODO stroke dash\r\n\t        // TODO Optimize double memory cost problem\r\n\t        mergePath: function (pathEls, opts) {\r\n\t            var pathList = [];\r\n\t            var len = pathEls.length;\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                var pathEl = pathEls[i];\r\n\t                if (pathEl.__dirty) {\r\n\t                    pathEl.buildPath(pathEl.path, pathEl.shape, true);\r\n\t                }\r\n\t                pathList.push(pathEl.path);\r\n\t            }\r\n\r\n\t            var pathBundle = new Path(opts);\r\n\t            pathBundle.buildPath = function (path) {\r\n\t                path.appendPath(pathList);\r\n\t                // Svg and vml renderer don't have context\r\n\t                var ctx = path.getContext();\r\n\t                if (ctx) {\r\n\t                    path.rebuildPath(ctx);\r\n\t                }\r\n\t            };\r\n\r\n\t            return pathBundle;\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 45 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Path element\r\n\t * @module zrender/graphic/Path\r\n\t */\r\n\r\n\r\n\r\n\t    var Displayable = __webpack_require__(46);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var PathProxy = __webpack_require__(49);\r\n\t    var pathContain = __webpack_require__(52);\r\n\r\n\t    var Pattern = __webpack_require__(59);\r\n\t    var getCanvasPattern = Pattern.prototype.getCanvasPattern;\r\n\r\n\t    var abs = Math.abs;\r\n\r\n\t    /**\r\n\t     * @alias module:zrender/graphic/Path\r\n\t     * @extends module:zrender/graphic/Displayable\r\n\t     * @constructor\r\n\t     * @param {Object} opts\r\n\t     */\r\n\t    function Path(opts) {\r\n\t        Displayable.call(this, opts);\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/core/PathProxy}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.path = new PathProxy();\r\n\t    }\r\n\r\n\t    Path.prototype = {\r\n\r\n\t        constructor: Path,\r\n\r\n\t        type: 'path',\r\n\r\n\t        __dirtyPath: true,\r\n\r\n\t        strokeContainThreshold: 5,\r\n\r\n\t        brush: function (ctx, prevEl) {\r\n\t            var style = this.style;\r\n\t            var path = this.path;\r\n\t            var hasStroke = style.hasStroke();\r\n\t            var hasFill = style.hasFill();\r\n\t            var fill = style.fill;\r\n\t            var stroke = style.stroke;\r\n\t            var hasFillGradient = hasFill && !!(fill.colorStops);\r\n\t            var hasStrokeGradient = hasStroke && !!(stroke.colorStops);\r\n\t            var hasFillPattern = hasFill && !!(fill.image);\r\n\t            var hasStrokePattern = hasStroke && !!(stroke.image);\r\n\r\n\t            style.bind(ctx, this, prevEl);\r\n\t            this.setTransform(ctx);\r\n\r\n\t            if (this.__dirty) {\r\n\t                var rect = this.getBoundingRect();\r\n\t                // Update gradient because bounding rect may changed\r\n\t                if (hasFillGradient) {\r\n\t                    this._fillGradient = style.getGradient(ctx, fill, rect);\r\n\t                }\r\n\t                if (hasStrokeGradient) {\r\n\t                    this._strokeGradient = style.getGradient(ctx, stroke, rect);\r\n\t                }\r\n\t            }\r\n\t            // Use the gradient or pattern\r\n\t            if (hasFillGradient) {\r\n\t                // PENDING If may have affect the state\r\n\t                ctx.fillStyle = this._fillGradient;\r\n\t            }\r\n\t            else if (hasFillPattern) {\r\n\t                ctx.fillStyle = getCanvasPattern.call(fill, ctx);\r\n\t            }\r\n\t            if (hasStrokeGradient) {\r\n\t                ctx.strokeStyle = this._strokeGradient;\r\n\t            }\r\n\t            else if (hasStrokePattern) {\r\n\t                ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);\r\n\t            }\r\n\r\n\t            var lineDash = style.lineDash;\r\n\t            var lineDashOffset = style.lineDashOffset;\r\n\r\n\t            var ctxLineDash = !!ctx.setLineDash;\r\n\r\n\t            // Update path sx, sy\r\n\t            var scale = this.getGlobalScale();\r\n\t            path.setScale(scale[0], scale[1]);\r\n\r\n\t            // Proxy context\r\n\t            // Rebuild path in following 2 cases\r\n\t            // 1. Path is dirty\r\n\t            // 2. Path needs javascript implemented lineDash stroking.\r\n\t            //    In this case, lineDash information will not be saved in PathProxy\r\n\t            if (this.__dirtyPath || (\r\n\t                lineDash && !ctxLineDash && hasStroke\r\n\t            )) {\r\n\t                path = this.path.beginPath(ctx);\r\n\r\n\t                // Setting line dash before build path\r\n\t                if (lineDash && !ctxLineDash) {\r\n\t                    path.setLineDash(lineDash);\r\n\t                    path.setLineDashOffset(lineDashOffset);\r\n\t                }\r\n\r\n\t                this.buildPath(path, this.shape, false);\r\n\r\n\t                // Clear path dirty flag\r\n\t                this.__dirtyPath = false;\r\n\t            }\r\n\t            else {\r\n\t                // Replay path building\r\n\t                ctx.beginPath();\r\n\t                this.path.rebuildPath(ctx);\r\n\t            }\r\n\r\n\t            hasFill && path.fill(ctx);\r\n\r\n\t            if (lineDash && ctxLineDash) {\r\n\t                ctx.setLineDash(lineDash);\r\n\t                ctx.lineDashOffset = lineDashOffset;\r\n\t            }\r\n\r\n\t            hasStroke && path.stroke(ctx);\r\n\r\n\t            if (lineDash && ctxLineDash) {\r\n\t                // PENDING\r\n\t                // Remove lineDash\r\n\t                ctx.setLineDash([]);\r\n\t            }\r\n\r\n\r\n\t            this.restoreTransform(ctx);\r\n\r\n\t            // Draw rect text\r\n\t            if (style.text || style.text === 0) {\r\n\t                // var rect = this.getBoundingRect();\r\n\t                this.drawRectText(ctx, this.getBoundingRect());\r\n\t            }\r\n\t        },\r\n\r\n\t        // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath\r\n\t        // Like in circle\r\n\t        buildPath: function (ctx, shapeCfg, inBundle) {},\r\n\r\n\t        getBoundingRect: function () {\r\n\t            var rect = this._rect;\r\n\t            var style = this.style;\r\n\t            var needsUpdateRect = !rect;\r\n\t            if (needsUpdateRect) {\r\n\t                var path = this.path;\r\n\t                if (this.__dirtyPath) {\r\n\t                    path.beginPath();\r\n\t                    this.buildPath(path, this.shape, false);\r\n\t                }\r\n\t                rect = path.getBoundingRect();\r\n\t            }\r\n\t            this._rect = rect;\r\n\r\n\t            if (style.hasStroke()) {\r\n\t                // Needs update rect with stroke lineWidth when\r\n\t                // 1. Element changes scale or lineWidth\r\n\t                // 2. Shape is changed\r\n\t                var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());\r\n\t                if (this.__dirty || needsUpdateRect) {\r\n\t                    rectWithStroke.copy(rect);\r\n\t                    // FIXME Must after updateTransform\r\n\t                    var w = style.lineWidth;\r\n\t                    // PENDING, Min line width is needed when line is horizontal or vertical\r\n\t                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\r\n\r\n\t                    // Only add extra hover lineWidth when there are no fill\r\n\t                    if (!style.hasFill()) {\r\n\t                        w = Math.max(w, this.strokeContainThreshold || 4);\r\n\t                    }\r\n\t                    // Consider line width\r\n\t                    // Line scale can't be 0;\r\n\t                    if (lineScale > 1e-10) {\r\n\t                        rectWithStroke.width += w / lineScale;\r\n\t                        rectWithStroke.height += w / lineScale;\r\n\t                        rectWithStroke.x -= w / lineScale / 2;\r\n\t                        rectWithStroke.y -= w / lineScale / 2;\r\n\t                    }\r\n\t                }\r\n\r\n\t                // Return rect with stroke\r\n\t                return rectWithStroke;\r\n\t            }\r\n\r\n\t            return rect;\r\n\t        },\r\n\r\n\t        contain: function (x, y) {\r\n\t            var localPos = this.transformCoordToLocal(x, y);\r\n\t            var rect = this.getBoundingRect();\r\n\t            var style = this.style;\r\n\t            x = localPos[0];\r\n\t            y = localPos[1];\r\n\r\n\t            if (rect.contain(x, y)) {\r\n\t                var pathData = this.path.data;\r\n\t                if (style.hasStroke()) {\r\n\t                    var lineWidth = style.lineWidth;\r\n\t                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\r\n\t                    // Line scale can't be 0;\r\n\t                    if (lineScale > 1e-10) {\r\n\t                        // Only add extra hover lineWidth when there are no fill\r\n\t                        if (!style.hasFill()) {\r\n\t                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);\r\n\t                        }\r\n\t                        if (pathContain.containStroke(\r\n\t                            pathData, lineWidth / lineScale, x, y\r\n\t                        )) {\r\n\t                            return true;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                if (style.hasFill()) {\r\n\t                    return pathContain.contain(pathData, x, y);\r\n\t                }\r\n\t            }\r\n\t            return false;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {boolean} dirtyPath\r\n\t         */\r\n\t        dirty: function (dirtyPath) {\r\n\t            if (dirtyPath == null) {\r\n\t                dirtyPath = true;\r\n\t            }\r\n\t            // Only mark dirty, not mark clean\r\n\t            if (dirtyPath) {\r\n\t                this.__dirtyPath = dirtyPath;\r\n\t                this._rect = null;\r\n\t            }\r\n\r\n\t            this.__dirty = true;\r\n\r\n\t            this.__zr && this.__zr.refresh();\r\n\r\n\t            // Used as a clipping path\r\n\t            if (this.__clipTarget) {\r\n\t                this.__clipTarget.dirty();\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Alias for animate('shape')\r\n\t         * @param {boolean} loop\r\n\t         */\r\n\t        animateShape: function (loop) {\r\n\t            return this.animate('shape', loop);\r\n\t        },\r\n\r\n\t        // Overwrite attrKV\r\n\t        attrKV: function (key, value) {\r\n\t            // FIXME\r\n\t            if (key === 'shape') {\r\n\t                this.setShape(value);\r\n\t                this.__dirtyPath = true;\r\n\t                this._rect = null;\r\n\t            }\r\n\t            else {\r\n\t                Displayable.prototype.attrKV.call(this, key, value);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Object|string} key\r\n\t         * @param {*} value\r\n\t         */\r\n\t        setShape: function (key, value) {\r\n\t            var shape = this.shape;\r\n\t            // Path from string may not have shape\r\n\t            if (shape) {\r\n\t                if (zrUtil.isObject(key)) {\r\n\t                    for (var name in key) {\r\n\t                        if (key.hasOwnProperty(name)) {\r\n\t                            shape[name] = key[name];\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    shape[key] = value;\r\n\t                }\r\n\t                this.dirty(true);\r\n\t            }\r\n\t            return this;\r\n\t        },\r\n\r\n\t        getLineScale: function () {\r\n\t            var m = this.transform;\r\n\t            // Get the line scale.\r\n\t            // Determinant of `m` means how much the area is enlarged by the\r\n\t            // transformation. So its square root can be used as a scale factor\r\n\t            // for width.\r\n\t            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10\r\n\t                ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))\r\n\t                : 1;\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * 扩展一个 Path element, 比如星形，圆等。\r\n\t     * Extend a path element\r\n\t     * @param {Object} props\r\n\t     * @param {string} props.type Path type\r\n\t     * @param {Function} props.init Initialize\r\n\t     * @param {Function} props.buildPath Overwrite buildPath method\r\n\t     * @param {Object} [props.style] Extended default style config\r\n\t     * @param {Object} [props.shape] Extended default shape config\r\n\t     */\r\n\t    Path.extend = function (defaults) {\r\n\t        var Sub = function (opts) {\r\n\t            Path.call(this, opts);\r\n\r\n\t            if (defaults.style) {\r\n\t                // Extend default style\r\n\t                this.style.extendFrom(defaults.style, false);\r\n\t            }\r\n\r\n\t            // Extend default shape\r\n\t            var defaultShape = defaults.shape;\r\n\t            if (defaultShape) {\r\n\t                this.shape = this.shape || {};\r\n\t                var thisShape = this.shape;\r\n\t                for (var name in defaultShape) {\r\n\t                    if (\r\n\t                        ! thisShape.hasOwnProperty(name)\r\n\t                        && defaultShape.hasOwnProperty(name)\r\n\t                    ) {\r\n\t                        thisShape[name] = defaultShape[name];\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            defaults.init && defaults.init.call(this, opts);\r\n\t        };\r\n\r\n\t        zrUtil.inherits(Sub, Path);\r\n\r\n\t        // FIXME 不能 extend position, rotation 等引用对象\r\n\t        for (var name in defaults) {\r\n\t            // Extending prototype values and methods\r\n\t            if (name !== 'style' && name !== 'shape') {\r\n\t                Sub.prototype[name] = defaults[name];\r\n\t            }\r\n\t        }\r\n\r\n\t        return Sub;\r\n\t    };\r\n\r\n\t    zrUtil.inherits(Path, Displayable);\r\n\r\n\t    module.exports = Path;\r\n\r\n\r\n/***/ },\r\n/* 46 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * 可绘制的图形基类\r\n\t * Base class of all displayable graphic objects\r\n\t * @module zrender/graphic/Displayable\r\n\t */\r\n\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var Style = __webpack_require__(47);\r\n\r\n\t    var Element = __webpack_require__(31);\r\n\t    var RectText = __webpack_require__(48);\r\n\t    // var Stateful = require('./mixin/Stateful');\r\n\r\n\t    /**\r\n\t     * @alias module:zrender/graphic/Displayable\r\n\t     * @extends module:zrender/Element\r\n\t     * @extends module:zrender/graphic/mixin/RectText\r\n\t     */\r\n\t    function Displayable(opts) {\r\n\r\n\t        opts = opts || {};\r\n\r\n\t        Element.call(this, opts);\r\n\r\n\t        // Extend properties\r\n\t        for (var name in opts) {\r\n\t            if (\r\n\t                opts.hasOwnProperty(name) &&\r\n\t                name !== 'style'\r\n\t            ) {\r\n\t                this[name] = opts[name];\r\n\t            }\r\n\t        }\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/graphic/Style}\r\n\t         */\r\n\t        this.style = new Style(opts.style);\r\n\r\n\t        this._rect = null;\r\n\t        // Shapes for cascade clipping.\r\n\t        this.__clipPaths = [];\r\n\r\n\t        // FIXME Stateful must be mixined after style is setted\r\n\t        // Stateful.call(this, opts);\r\n\t    }\r\n\r\n\t    Displayable.prototype = {\r\n\r\n\t        constructor: Displayable,\r\n\r\n\t        type: 'displayable',\r\n\r\n\t        /**\r\n\t         * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制\r\n\t         * Dirty flag. From which painter will determine if this displayable object needs brush\r\n\t         * @name module:zrender/graphic/Displayable#__dirty\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        __dirty: true,\r\n\r\n\t        /**\r\n\t         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件\r\n\t         * If ignore drawing of the displayable object. Mouse event will still be triggered\r\n\t         * @name module:/zrender/graphic/Displayable#invisible\r\n\t         * @type {boolean}\r\n\t         * @default false\r\n\t         */\r\n\t        invisible: false,\r\n\r\n\t        /**\r\n\t         * @name module:/zrender/graphic/Displayable#z\r\n\t         * @type {number}\r\n\t         * @default 0\r\n\t         */\r\n\t        z: 0,\r\n\r\n\t        /**\r\n\t         * @name module:/zrender/graphic/Displayable#z\r\n\t         * @type {number}\r\n\t         * @default 0\r\n\t         */\r\n\t        z2: 0,\r\n\r\n\t        /**\r\n\t         * z层level，决定绘画在哪层canvas中\r\n\t         * @name module:/zrender/graphic/Displayable#zlevel\r\n\t         * @type {number}\r\n\t         * @default 0\r\n\t         */\r\n\t        zlevel: 0,\r\n\r\n\t        /**\r\n\t         * 是否可拖拽\r\n\t         * @name module:/zrender/graphic/Displayable#draggable\r\n\t         * @type {boolean}\r\n\t         * @default false\r\n\t         */\r\n\t        draggable: false,\r\n\r\n\t        /**\r\n\t         * 是否正在拖拽\r\n\t         * @name module:/zrender/graphic/Displayable#draggable\r\n\t         * @type {boolean}\r\n\t         * @default false\r\n\t         */\r\n\t        dragging: false,\r\n\r\n\t        /**\r\n\t         * 是否相应鼠标事件\r\n\t         * @name module:/zrender/graphic/Displayable#silent\r\n\t         * @type {boolean}\r\n\t         * @default false\r\n\t         */\r\n\t        silent: false,\r\n\r\n\t        /**\r\n\t         * If enable culling\r\n\t         * @type {boolean}\r\n\t         * @default false\r\n\t         */\r\n\t        culling: false,\r\n\r\n\t        /**\r\n\t         * Mouse cursor when hovered\r\n\t         * @name module:/zrender/graphic/Displayable#cursor\r\n\t         * @type {string}\r\n\t         */\r\n\t        cursor: 'pointer',\r\n\r\n\t        /**\r\n\t         * If hover area is bounding rect\r\n\t         * @name module:/zrender/graphic/Displayable#rectHover\r\n\t         * @type {string}\r\n\t         */\r\n\t        rectHover: false,\r\n\r\n\t        /**\r\n\t         * Render the element progressively when the value >= 0,\r\n\t         * usefull for large data.\r\n\t         * @type {number}\r\n\t         */\r\n\t        progressive: -1,\r\n\r\n\t        beforeBrush: function (ctx) {},\r\n\r\n\t        afterBrush: function (ctx) {},\r\n\r\n\t        /**\r\n\t         * 图形绘制方法\r\n\t         * @param {Canvas2DRenderingContext} ctx\r\n\t         */\r\n\t        // Interface\r\n\t        brush: function (ctx, prevEl) {},\r\n\r\n\t        /**\r\n\t         * 获取最小包围盒\r\n\t         * @return {module:zrender/core/BoundingRect}\r\n\t         */\r\n\t        // Interface\r\n\t        getBoundingRect: function () {},\r\n\r\n\t        /**\r\n\t         * 判断坐标 x, y 是否在图形上\r\n\t         * If displayable element contain coord x, y\r\n\t         * @param  {number} x\r\n\t         * @param  {number} y\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        contain: function (x, y) {\r\n\t            return this.rectContain(x, y);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {Function} cb\r\n\t         * @param  {}   context\r\n\t         */\r\n\t        traverse: function (cb, context) {\r\n\t            cb.call(context, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 判断坐标 x, y 是否在图形的包围盒上\r\n\t         * If bounding rect of element contain coord x, y\r\n\t         * @param  {number} x\r\n\t         * @param  {number} y\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        rectContain: function (x, y) {\r\n\t            var coord = this.transformCoordToLocal(x, y);\r\n\t            var rect = this.getBoundingRect();\r\n\t            return rect.contain(coord[0], coord[1]);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 标记图形元素为脏，并且在下一帧重绘\r\n\t         * Mark displayable element dirty and refresh next frame\r\n\t         */\r\n\t        dirty: function () {\r\n\t            this.__dirty = true;\r\n\r\n\t            this._rect = null;\r\n\r\n\t            this.__zr && this.__zr.refresh();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 图形是否会触发事件\r\n\t         * If displayable object binded any event\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        // TODO, 通过 bind 绑定的事件\r\n\t        // isSilent: function () {\r\n\t        //     return !(\r\n\t        //         this.hoverable || this.draggable\r\n\t        //         || this.onmousemove || this.onmouseover || this.onmouseout\r\n\t        //         || this.onmousedown || this.onmouseup || this.onclick\r\n\t        //         || this.ondragenter || this.ondragover || this.ondragleave\r\n\t        //         || this.ondrop\r\n\t        //     );\r\n\t        // },\r\n\t        /**\r\n\t         * Alias for animate('style')\r\n\t         * @param {boolean} loop\r\n\t         */\r\n\t        animateStyle: function (loop) {\r\n\t            return this.animate('style', loop);\r\n\t        },\r\n\r\n\t        attrKV: function (key, value) {\r\n\t            if (key !== 'style') {\r\n\t                Element.prototype.attrKV.call(this, key, value);\r\n\t            }\r\n\t            else {\r\n\t                this.style.set(value);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Object|string} key\r\n\t         * @param {*} value\r\n\t         */\r\n\t        setStyle: function (key, value) {\r\n\t            this.style.set(key, value);\r\n\t            this.dirty(false);\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Use given style object\r\n\t         * @param  {Object} obj\r\n\t         */\r\n\t        useStyle: function (obj) {\r\n\t            this.style = new Style(obj);\r\n\t            this.dirty(false);\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\r\n\t    zrUtil.inherits(Displayable, Element);\r\n\r\n\t    zrUtil.mixin(Displayable, RectText);\r\n\t    // zrUtil.mixin(Displayable, Stateful);\r\n\r\n\t    module.exports = Displayable;\r\n\r\n\r\n/***/ },\r\n/* 47 */\r\n/***/ function(module, exports) {\r\n\r\n\t/**\r\n\t * @module zrender/graphic/Style\r\n\t */\r\n\r\n\r\n\t    var STYLE_COMMON_PROPS = [\r\n\t        ['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'],\r\n\t        ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]\r\n\t    ];\r\n\r\n\t    // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);\r\n\t    // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);\r\n\r\n\t    var Style = function (opts) {\r\n\t        this.extendFrom(opts);\r\n\t    };\r\n\r\n\t    function createLinearGradient(ctx, obj, rect) {\r\n\t        // var size =\r\n\t        var x = obj.x;\r\n\t        var x2 = obj.x2;\r\n\t        var y = obj.y;\r\n\t        var y2 = obj.y2;\r\n\r\n\t        if (!obj.global) {\r\n\t            x = x * rect.width + rect.x;\r\n\t            x2 = x2 * rect.width + rect.x;\r\n\t            y = y * rect.height + rect.y;\r\n\t            y2 = y2 * rect.height + rect.y;\r\n\t        }\r\n\r\n\t        var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);\r\n\r\n\t        return canvasGradient;\r\n\t    }\r\n\r\n\t    function createRadialGradient(ctx, obj, rect) {\r\n\t        var width = rect.width;\r\n\t        var height = rect.height;\r\n\t        var min = Math.min(width, height);\r\n\r\n\t        var x = obj.x;\r\n\t        var y = obj.y;\r\n\t        var r = obj.r;\r\n\t        if (!obj.global) {\r\n\t            x = x * width + rect.x;\r\n\t            y = y * height + rect.y;\r\n\t            r = r * min;\r\n\t        }\r\n\r\n\t        var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);\r\n\r\n\t        return canvasGradient;\r\n\t    }\r\n\r\n\r\n\t    Style.prototype = {\r\n\r\n\t        constructor: Style,\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        fill: '#000000',\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        stroke: null,\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        opacity: 1,\r\n\r\n\t        /**\r\n\t         * @type {Array.<number>}\r\n\t         */\r\n\t        lineDash: null,\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        lineDashOffset: 0,\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        shadowBlur: 0,\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        shadowOffsetX: 0,\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        shadowOffsetY: 0,\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        lineWidth: 1,\r\n\r\n\t        /**\r\n\t         * If stroke ignore scale\r\n\t         * @type {Boolean}\r\n\t         */\r\n\t        strokeNoScale: false,\r\n\r\n\t        // Bounding rect text configuration\r\n\t        // Not affected by element transform\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        text: null,\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        textFill: '#000',\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        textStroke: null,\r\n\r\n\t        /**\r\n\t         * 'inside', 'left', 'right', 'top', 'bottom'\r\n\t         * [x, y]\r\n\t         * @type {string|Array.<number>}\r\n\t         * @default 'inside'\r\n\t         */\r\n\t        textPosition: 'inside',\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        textBaseline: null,\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        textAlign: null,\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        textVerticalAlign: null,\r\n\r\n\t        /**\r\n\t         * Only useful in Path and Image element\r\n\t         * @type {number}\r\n\t         */\r\n\t        textDistance: 5,\r\n\r\n\t        /**\r\n\t         * Only useful in Path and Image element\r\n\t         * @type {number}\r\n\t         */\r\n\t        textShadowBlur: 0,\r\n\r\n\t        /**\r\n\t         * Only useful in Path and Image element\r\n\t         * @type {number}\r\n\t         */\r\n\t        textShadowOffsetX: 0,\r\n\r\n\t        /**\r\n\t         * Only useful in Path and Image element\r\n\t         * @type {number}\r\n\t         */\r\n\t        textShadowOffsetY: 0,\r\n\r\n\t        /**\r\n\t         * If transform text\r\n\t         * Only useful in Path and Image element\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        textTransform: false,\r\n\r\n\t        /**\r\n\t         * Text rotate around position of Path or Image\r\n\t         * Only useful in Path and Image element and textTransform is false.\r\n\t         */\r\n\t        textRotation: 0,\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\r\n\t         */\r\n\t        blend: null,\r\n\r\n\t        /**\r\n\t         * @param {CanvasRenderingContext2D} ctx\r\n\t         */\r\n\t        bind: function (ctx, el, prevEl) {\r\n\t            var style = this;\r\n\t            var prevStyle = prevEl && prevEl.style;\r\n\t            var firstDraw = !prevStyle;\r\n\r\n\t            for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\r\n\t                var prop = STYLE_COMMON_PROPS[i];\r\n\t                var styleName = prop[0];\r\n\r\n\t                if (firstDraw || style[styleName] !== prevStyle[styleName]) {\r\n\t                    // FIXME Invalid property value will cause style leak from previous element.\r\n\t                    ctx[styleName] = style[styleName] || prop[1];\r\n\t                }\r\n\t            }\r\n\r\n\t            if ((firstDraw || style.fill !== prevStyle.fill)) {\r\n\t                ctx.fillStyle = style.fill;\r\n\t            }\r\n\t            if ((firstDraw || style.stroke !== prevStyle.stroke)) {\r\n\t                ctx.strokeStyle = style.stroke;\r\n\t            }\r\n\t            if ((firstDraw || style.opacity !== prevStyle.opacity)) {\r\n\t                ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\r\n\t            }\r\n\r\n\t            if ((firstDraw || style.blend !== prevStyle.blend)) {\r\n\t                ctx.globalCompositeOperation = style.blend || 'source-over';\r\n\t            }\r\n\t            if (this.hasStroke()) {\r\n\t                var lineWidth = style.lineWidth;\r\n\t                ctx.lineWidth = lineWidth / (\r\n\t                    (this.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1\r\n\t                );\r\n\t            }\r\n\t        },\r\n\r\n\t        hasFill: function () {\r\n\t            var fill = this.fill;\r\n\t            return fill != null && fill !== 'none';\r\n\t        },\r\n\r\n\t        hasStroke: function () {\r\n\t            var stroke = this.stroke;\r\n\t            return stroke != null && stroke !== 'none' && this.lineWidth > 0;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Extend from other style\r\n\t         * @param {zrender/graphic/Style} otherStyle\r\n\t         * @param {boolean} overwrite\r\n\t         */\r\n\t        extendFrom: function (otherStyle, overwrite) {\r\n\t            if (otherStyle) {\r\n\t                var target = this;\r\n\t                for (var name in otherStyle) {\r\n\t                    if (otherStyle.hasOwnProperty(name)\r\n\t                        && (overwrite || ! target.hasOwnProperty(name))\r\n\t                    ) {\r\n\t                        target[name] = otherStyle[name];\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Batch setting style with a given object\r\n\t         * @param {Object|string} obj\r\n\t         * @param {*} [obj]\r\n\t         */\r\n\t        set: function (obj, value) {\r\n\t            if (typeof obj === 'string') {\r\n\t                this[obj] = value;\r\n\t            }\r\n\t            else {\r\n\t                this.extendFrom(obj, true);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Clone\r\n\t         * @return {zrender/graphic/Style} [description]\r\n\t         */\r\n\t        clone: function () {\r\n\t            var newStyle = new this.constructor();\r\n\t            newStyle.extendFrom(this, true);\r\n\t            return newStyle;\r\n\t        },\r\n\r\n\t        getGradient: function (ctx, obj, rect) {\r\n\t            var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;\r\n\t            var canvasGradient = method(ctx, obj, rect);\r\n\t            var colorStops = obj.colorStops;\r\n\t            for (var i = 0; i < colorStops.length; i++) {\r\n\t                canvasGradient.addColorStop(\r\n\t                    colorStops[i].offset, colorStops[i].color\r\n\t                );\r\n\t            }\r\n\t            return canvasGradient;\r\n\t        }\r\n\t    };\r\n\r\n\t    var styleProto = Style.prototype;\r\n\t    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\r\n\t        var prop = STYLE_COMMON_PROPS[i];\r\n\t        if (!(prop[0] in styleProto)) {\r\n\t            styleProto[prop[0]] = prop[1];\r\n\t        }\r\n\t    }\r\n\r\n\t    // Provide for others\r\n\t    Style.getGradient = styleProto.getGradient;\r\n\r\n\t    module.exports = Style;\r\n\r\n\r\n/***/ },\r\n/* 48 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Mixin for drawing text in a element bounding rect\r\n\t * @module zrender/mixin/RectText\r\n\t */\r\n\r\n\r\n\r\n\t    var textContain = __webpack_require__(8);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\r\n\t    var tmpRect = new BoundingRect();\r\n\r\n\t    var RectText = function () {};\r\n\r\n\t    function parsePercent(value, maxValue) {\r\n\t        if (typeof value === 'string') {\r\n\t            if (value.lastIndexOf('%') >= 0) {\r\n\t                return parseFloat(value) / 100 * maxValue;\r\n\t            }\r\n\t            return parseFloat(value);\r\n\t        }\r\n\t        return value;\r\n\t    }\r\n\r\n\t    RectText.prototype = {\r\n\r\n\t        constructor: RectText,\r\n\r\n\t        /**\r\n\t         * Draw text in a rect with specified position.\r\n\t         * @param  {CanvasRenderingContext} ctx\r\n\t         * @param  {Object} rect Displayable rect\r\n\t         * @return {Object} textRect Alternative precalculated text bounding rect\r\n\t         */\r\n\t        drawRectText: function (ctx, rect, textRect) {\r\n\t            var style = this.style;\r\n\t            var text = style.text;\r\n\t            // Convert to string\r\n\t            text != null && (text += '');\r\n\t            if (!text) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            // FIXME\r\n\t            ctx.save();\r\n\r\n\t            var x;\r\n\t            var y;\r\n\t            var textPosition = style.textPosition;\r\n\t            var distance = style.textDistance;\r\n\t            var align = style.textAlign;\r\n\t            var font = style.textFont || style.font;\r\n\t            var baseline = style.textBaseline;\r\n\t            var verticalAlign = style.textVerticalAlign;\r\n\r\n\t            textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);\r\n\r\n\t            // Transform rect to view space\r\n\t            var transform = this.transform;\r\n\t            if (!style.textTransform) {\r\n\t                if (transform) {\r\n\t                    tmpRect.copy(rect);\r\n\t                    tmpRect.applyTransform(transform);\r\n\t                    rect = tmpRect;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                this.setTransform(ctx);\r\n\t            }\r\n\r\n\t            // Text position represented by coord\r\n\t            if (textPosition instanceof Array) {\r\n\t                // Percent\r\n\t                x = rect.x + parsePercent(textPosition[0], rect.width);\r\n\t                y = rect.y + parsePercent(textPosition[1], rect.height);\r\n\t                align = align || 'left';\r\n\t                baseline = baseline || 'top';\r\n\r\n\t                if (verticalAlign) {\r\n\t                    switch (verticalAlign) {\r\n\t                        case 'middle':\r\n\t                            y -= textRect.height / 2 - textRect.lineHeight / 2;\r\n\t                            break;\r\n\t                        case 'bottom':\r\n\t                            y -= textRect.height - textRect.lineHeight / 2;\r\n\t                            break;\r\n\t                        default:\r\n\t                            y += textRect.lineHeight / 2;\r\n\t                    }\r\n\t                    // Force bseline to be middle\r\n\t                    baseline = 'middle';\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                var res = textContain.adjustTextPositionOnRect(\r\n\t                    textPosition, rect, textRect, distance\r\n\t                );\r\n\t                x = res.x;\r\n\t                y = res.y;\r\n\t                // Default align and baseline when has textPosition\r\n\t                align = align || res.textAlign;\r\n\t                baseline = baseline || res.textBaseline;\r\n\t            }\r\n\r\n\t            // Use canvas default left textAlign. Giving invalid value will cause state not change\r\n\t            ctx.textAlign = align || 'left';\r\n\t            // Use canvas default alphabetic baseline\r\n\t            ctx.textBaseline = baseline || 'alphabetic';\r\n\r\n\t            var textFill = style.textFill;\r\n\t            var textStroke = style.textStroke;\r\n\t            textFill && (ctx.fillStyle = textFill);\r\n\t            textStroke && (ctx.strokeStyle = textStroke);\r\n\r\n\t            // TODO Invalid font\r\n\t            ctx.font = font || '12px sans-serif';\r\n\r\n\t            // Text shadow\r\n\t            // Always set shadowBlur and shadowOffset to avoid leak from displayable\r\n\t            ctx.shadowBlur = style.textShadowBlur;\r\n\t            ctx.shadowColor = style.textShadowColor || 'transparent';\r\n\t            ctx.shadowOffsetX = style.textShadowOffsetX;\r\n\t            ctx.shadowOffsetY = style.textShadowOffsetY;\r\n\r\n\t            var textLines = text.split('\\n');\r\n\r\n\t            if (style.textRotation) {\r\n\t                transform && ctx.translate(transform[4], transform[5]);\r\n\t                ctx.rotate(style.textRotation);\r\n\t                transform && ctx.translate(-transform[4], -transform[5]);\r\n\t            }\r\n\r\n\t            for (var i = 0; i < textLines.length; i++) {\r\n\t                textFill && ctx.fillText(textLines[i], x, y);\r\n\t                textStroke && ctx.strokeText(textLines[i], x, y);\r\n\t                y += textRect.lineHeight;\r\n\t            }\r\n\r\n\t            ctx.restore();\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = RectText;\r\n\r\n\r\n/***/ },\r\n/* 49 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中\r\n\t * 可以用于 isInsidePath 判断以及获取boundingRect\r\n\t *\r\n\t * @module zrender/core/PathProxy\r\n\t * @author Yi Shen (http://www.github.com/pissang)\r\n\t */\r\n\r\n\t // TODO getTotalLength, getPointAtLength\r\n\r\n\r\n\t    var curve = __webpack_require__(50);\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    var bbox = __webpack_require__(51);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\t    var dpr = __webpack_require__(41).devicePixelRatio;\r\n\r\n\t    var CMD = {\r\n\t        M: 1,\r\n\t        L: 2,\r\n\t        C: 3,\r\n\t        Q: 4,\r\n\t        A: 5,\r\n\t        Z: 6,\r\n\t        // Rect\r\n\t        R: 7\r\n\t    };\r\n\r\n\t    var min = [];\r\n\t    var max = [];\r\n\t    var min2 = [];\r\n\t    var max2 = [];\r\n\t    var mathMin = Math.min;\r\n\t    var mathMax = Math.max;\r\n\t    var mathCos = Math.cos;\r\n\t    var mathSin = Math.sin;\r\n\t    var mathSqrt = Math.sqrt;\r\n\t    var mathAbs = Math.abs;\r\n\r\n\t    var hasTypedArray = typeof Float32Array != 'undefined';\r\n\r\n\t    /**\r\n\t     * @alias module:zrender/core/PathProxy\r\n\t     * @constructor\r\n\t     */\r\n\t    var PathProxy = function () {\r\n\r\n\t        /**\r\n\t         * Path data. Stored as flat array\r\n\t         * @type {Array.<Object>}\r\n\t         */\r\n\t        this.data = [];\r\n\r\n\t        this._len = 0;\r\n\r\n\t        this._ctx = null;\r\n\r\n\t        this._xi = 0;\r\n\t        this._yi = 0;\r\n\r\n\t        this._x0 = 0;\r\n\t        this._y0 = 0;\r\n\r\n\t        // Unit x, Unit y. Provide for avoiding drawing that too short line segment\r\n\t        this._ux = 0;\r\n\t        this._uy = 0;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * 快速计算Path包围盒（并不是最小包围盒）\r\n\t     * @return {Object}\r\n\t     */\r\n\t    PathProxy.prototype = {\r\n\r\n\t        constructor: PathProxy,\r\n\r\n\t        _lineDash: null,\r\n\r\n\t        _dashOffset: 0,\r\n\r\n\t        _dashIdx: 0,\r\n\r\n\t        _dashSum: 0,\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         */\r\n\t        setScale: function (sx, sy) {\r\n\t            this._ux = mathAbs(1 / dpr / sx) || 0;\r\n\t            this._uy = mathAbs(1 / dpr / sy) || 0;\r\n\t        },\r\n\r\n\t        getContext: function () {\r\n\t            return this._ctx;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {CanvasRenderingContext2D} ctx\r\n\t         * @return {module:zrender/core/PathProxy}\r\n\t         */\r\n\t        beginPath: function (ctx) {\r\n\r\n\t            this._ctx = ctx;\r\n\r\n\t            ctx && ctx.beginPath();\r\n\r\n\t            ctx && (this.dpr = ctx.dpr);\r\n\r\n\t            // Reset\r\n\t            this._len = 0;\r\n\r\n\t            if (this._lineDash) {\r\n\t                this._lineDash = null;\r\n\r\n\t                this._dashOffset = 0;\r\n\t            }\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {number} x\r\n\t         * @param  {number} y\r\n\t         * @return {module:zrender/core/PathProxy}\r\n\t         */\r\n\t        moveTo: function (x, y) {\r\n\t            this.addData(CMD.M, x, y);\r\n\t            this._ctx && this._ctx.moveTo(x, y);\r\n\r\n\t            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用\r\n\t            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。\r\n\t            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要\r\n\t            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持\r\n\t            this._x0 = x;\r\n\t            this._y0 = y;\r\n\r\n\t            this._xi = x;\r\n\t            this._yi = y;\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {number} x\r\n\t         * @param  {number} y\r\n\t         * @return {module:zrender/core/PathProxy}\r\n\t         */\r\n\t        lineTo: function (x, y) {\r\n\t            var exceedUnit = mathAbs(x - this._xi) > this._ux\r\n\t                || mathAbs(y - this._yi) > this._uy\r\n\t                // Force draw the first segment\r\n\t                || this._len < 5;\r\n\r\n\t            this.addData(CMD.L, x, y);\r\n\r\n\t            if (this._ctx && exceedUnit) {\r\n\t                this._needsDash() ? this._dashedLineTo(x, y)\r\n\t                    : this._ctx.lineTo(x, y);\r\n\t            }\r\n\t            if (exceedUnit) {\r\n\t                this._xi = x;\r\n\t                this._yi = y;\r\n\t            }\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {number} x1\r\n\t         * @param  {number} y1\r\n\t         * @param  {number} x2\r\n\t         * @param  {number} y2\r\n\t         * @param  {number} x3\r\n\t         * @param  {number} y3\r\n\t         * @return {module:zrender/core/PathProxy}\r\n\t         */\r\n\t        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {\r\n\t            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);\r\n\t            if (this._ctx) {\r\n\t                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)\r\n\t                    : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\r\n\t            }\r\n\t            this._xi = x3;\r\n\t            this._yi = y3;\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {number} x1\r\n\t         * @param  {number} y1\r\n\t         * @param  {number} x2\r\n\t         * @param  {number} y2\r\n\t         * @return {module:zrender/core/PathProxy}\r\n\t         */\r\n\t        quadraticCurveTo: function (x1, y1, x2, y2) {\r\n\t            this.addData(CMD.Q, x1, y1, x2, y2);\r\n\t            if (this._ctx) {\r\n\t                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2)\r\n\t                    : this._ctx.quadraticCurveTo(x1, y1, x2, y2);\r\n\t            }\r\n\t            this._xi = x2;\r\n\t            this._yi = y2;\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {number} cx\r\n\t         * @param  {number} cy\r\n\t         * @param  {number} r\r\n\t         * @param  {number} startAngle\r\n\t         * @param  {number} endAngle\r\n\t         * @param  {boolean} anticlockwise\r\n\t         * @return {module:zrender/core/PathProxy}\r\n\t         */\r\n\t        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {\r\n\t            this.addData(\r\n\t                CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1\r\n\t            );\r\n\t            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\r\n\r\n\t            this._xi = mathCos(endAngle) * r + cx;\r\n\t            this._xi = mathSin(endAngle) * r + cx;\r\n\t            return this;\r\n\t        },\r\n\r\n\t        // TODO\r\n\t        arcTo: function (x1, y1, x2, y2, radius) {\r\n\t            if (this._ctx) {\r\n\t                this._ctx.arcTo(x1, y1, x2, y2, radius);\r\n\t            }\r\n\t            return this;\r\n\t        },\r\n\r\n\t        // TODO\r\n\t        rect: function (x, y, w, h) {\r\n\t            this._ctx && this._ctx.rect(x, y, w, h);\r\n\t            this.addData(CMD.R, x, y, w, h);\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:zrender/core/PathProxy}\r\n\t         */\r\n\t        closePath: function () {\r\n\t            this.addData(CMD.Z);\r\n\r\n\t            var ctx = this._ctx;\r\n\t            var x0 = this._x0;\r\n\t            var y0 = this._y0;\r\n\t            if (ctx) {\r\n\t                this._needsDash() && this._dashedLineTo(x0, y0);\r\n\t                ctx.closePath();\r\n\t            }\r\n\r\n\t            this._xi = x0;\r\n\t            this._yi = y0;\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。\r\n\t         * stroke 同样\r\n\t         * @param {CanvasRenderingContext2D} ctx\r\n\t         * @return {module:zrender/core/PathProxy}\r\n\t         */\r\n\t        fill: function (ctx) {\r\n\t            ctx && ctx.fill();\r\n\t            this.toStatic();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {CanvasRenderingContext2D} ctx\r\n\t         * @return {module:zrender/core/PathProxy}\r\n\t         */\r\n\t        stroke: function (ctx) {\r\n\t            ctx && ctx.stroke();\r\n\t            this.toStatic();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 必须在其它绘制命令前调用\r\n\t         * Must be invoked before all other path drawing methods\r\n\t         * @return {module:zrender/core/PathProxy}\r\n\t         */\r\n\t        setLineDash: function (lineDash) {\r\n\t            if (lineDash instanceof Array) {\r\n\t                this._lineDash = lineDash;\r\n\r\n\t                this._dashIdx = 0;\r\n\r\n\t                var lineDashSum = 0;\r\n\t                for (var i = 0; i < lineDash.length; i++) {\r\n\t                    lineDashSum += lineDash[i];\r\n\t                }\r\n\t                this._dashSum = lineDashSum;\r\n\t            }\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 必须在其它绘制命令前调用\r\n\t         * Must be invoked before all other path drawing methods\r\n\t         * @return {module:zrender/core/PathProxy}\r\n\t         */\r\n\t        setLineDashOffset: function (offset) {\r\n\t            this._dashOffset = offset;\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         *\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        len: function () {\r\n\t            return this._len;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 直接设置 Path 数据\r\n\t         */\r\n\t        setData: function (data) {\r\n\r\n\t            var len = data.length;\r\n\r\n\t            if (! (this.data && this.data.length == len) && hasTypedArray) {\r\n\t                this.data = new Float32Array(len);\r\n\t            }\r\n\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                this.data[i] = data[i];\r\n\t            }\r\n\r\n\t            this._len = len;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 添加子路径\r\n\t         * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path\r\n\t         */\r\n\t        appendPath: function (path) {\r\n\t            if (!(path instanceof Array)) {\r\n\t                path = [path];\r\n\t            }\r\n\t            var len = path.length;\r\n\t            var appendSize = 0;\r\n\t            var offset = this._len;\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                appendSize += path[i].len();\r\n\t            }\r\n\t            if (hasTypedArray && (this.data instanceof Float32Array)) {\r\n\t                this.data = new Float32Array(offset + appendSize);\r\n\t            }\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                var appendPathData = path[i].data;\r\n\t                for (var k = 0; k < appendPathData.length; k++) {\r\n\t                    this.data[offset++] = appendPathData[k];\r\n\t                }\r\n\t            }\r\n\t            this._len = offset;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 填充 Path 数据。\r\n\t         * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。\r\n\t         */\r\n\t        addData: function (cmd) {\r\n\t            var data = this.data;\r\n\t            if (this._len + arguments.length > data.length) {\r\n\t                // 因为之前的数组已经转换成静态的 Float32Array\r\n\t                // 所以不够用时需要扩展一个新的动态数组\r\n\t                this._expandData();\r\n\t                data = this.data;\r\n\t            }\r\n\t            for (var i = 0; i < arguments.length; i++) {\r\n\t                data[this._len++] = arguments[i];\r\n\t            }\r\n\r\n\t            this._prevCmd = cmd;\r\n\t        },\r\n\r\n\t        _expandData: function () {\r\n\t            // Only if data is Float32Array\r\n\t            if (!(this.data instanceof Array)) {\r\n\t                var newData = [];\r\n\t                for (var i = 0; i < this._len; i++) {\r\n\t                    newData[i] = this.data[i];\r\n\t                }\r\n\t                this.data = newData;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If needs js implemented dashed line\r\n\t         * @return {boolean}\r\n\t         * @private\r\n\t         */\r\n\t        _needsDash: function () {\r\n\t            return this._lineDash;\r\n\t        },\r\n\r\n\t        _dashedLineTo: function (x1, y1) {\r\n\t            var dashSum = this._dashSum;\r\n\t            var offset = this._dashOffset;\r\n\t            var lineDash = this._lineDash;\r\n\t            var ctx = this._ctx;\r\n\r\n\t            var x0 = this._xi;\r\n\t            var y0 = this._yi;\r\n\t            var dx = x1 - x0;\r\n\t            var dy = y1 - y0;\r\n\t            var dist = mathSqrt(dx * dx + dy * dy);\r\n\t            var x = x0;\r\n\t            var y = y0;\r\n\t            var dash;\r\n\t            var nDash = lineDash.length;\r\n\t            var idx;\r\n\t            dx /= dist;\r\n\t            dy /= dist;\r\n\r\n\t            if (offset < 0) {\r\n\t                // Convert to positive offset\r\n\t                offset = dashSum + offset;\r\n\t            }\r\n\t            offset %= dashSum;\r\n\t            x -= offset * dx;\r\n\t            y -= offset * dy;\r\n\r\n\t            while ((dx > 0 && x <= x1) || (dx < 0 && x >= x1)\r\n\t            || (dx == 0 && ((dy > 0 && y <= y1) || (dy < 0 && y >= y1)))) {\r\n\t                idx = this._dashIdx;\r\n\t                dash = lineDash[idx];\r\n\t                x += dx * dash;\r\n\t                y += dy * dash;\r\n\t                this._dashIdx = (idx + 1) % nDash;\r\n\t                // Skip positive offset\r\n\t                if ((dx > 0 && x < x0) || (dx < 0 && x > x0) || (dy > 0 && y < y0) || (dy < 0 && y > y0)) {\r\n\t                    continue;\r\n\t                }\r\n\t                ctx[idx % 2 ? 'moveTo' : 'lineTo'](\r\n\t                    dx >= 0 ? mathMin(x, x1) : mathMax(x, x1),\r\n\t                    dy >= 0 ? mathMin(y, y1) : mathMax(y, y1)\r\n\t                );\r\n\t            }\r\n\t            // Offset for next lineTo\r\n\t            dx = x - x1;\r\n\t            dy = y - y1;\r\n\t            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\r\n\t        },\r\n\r\n\t        // Not accurate dashed line to\r\n\t        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {\r\n\t            var dashSum = this._dashSum;\r\n\t            var offset = this._dashOffset;\r\n\t            var lineDash = this._lineDash;\r\n\t            var ctx = this._ctx;\r\n\r\n\t            var x0 = this._xi;\r\n\t            var y0 = this._yi;\r\n\t            var t;\r\n\t            var dx;\r\n\t            var dy;\r\n\t            var cubicAt = curve.cubicAt;\r\n\t            var bezierLen = 0;\r\n\t            var idx = this._dashIdx;\r\n\t            var nDash = lineDash.length;\r\n\r\n\t            var x;\r\n\t            var y;\r\n\r\n\t            var tmpLen = 0;\r\n\r\n\t            if (offset < 0) {\r\n\t                // Convert to positive offset\r\n\t                offset = dashSum + offset;\r\n\t            }\r\n\t            offset %= dashSum;\r\n\t            // Bezier approx length\r\n\t            for (t = 0; t < 1; t += 0.1) {\r\n\t                dx = cubicAt(x0, x1, x2, x3, t + 0.1)\r\n\t                    - cubicAt(x0, x1, x2, x3, t);\r\n\t                dy = cubicAt(y0, y1, y2, y3, t + 0.1)\r\n\t                    - cubicAt(y0, y1, y2, y3, t);\r\n\t                bezierLen += mathSqrt(dx * dx + dy * dy);\r\n\t            }\r\n\r\n\t            // Find idx after add offset\r\n\t            for (; idx < nDash; idx++) {\r\n\t                tmpLen += lineDash[idx];\r\n\t                if (tmpLen > offset) {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            t = (tmpLen - offset) / bezierLen;\r\n\r\n\t            while (t <= 1) {\r\n\r\n\t                x = cubicAt(x0, x1, x2, x3, t);\r\n\t                y = cubicAt(y0, y1, y2, y3, t);\r\n\r\n\t                // Use line to approximate dashed bezier\r\n\t                // Bad result if dash is long\r\n\t                idx % 2 ? ctx.moveTo(x, y)\r\n\t                    : ctx.lineTo(x, y);\r\n\r\n\t                t += lineDash[idx] / bezierLen;\r\n\r\n\t                idx = (idx + 1) % nDash;\r\n\t            }\r\n\r\n\t            // Finish the last segment and calculate the new offset\r\n\t            (idx % 2 !== 0) && ctx.lineTo(x3, y3);\r\n\t            dx = x3 - x;\r\n\t            dy = y3 - y;\r\n\t            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\r\n\t        },\r\n\r\n\t        _dashedQuadraticTo: function (x1, y1, x2, y2) {\r\n\t            // Convert quadratic to cubic using degree elevation\r\n\t            var x3 = x2;\r\n\t            var y3 = y2;\r\n\t            x2 = (x2 + 2 * x1) / 3;\r\n\t            y2 = (y2 + 2 * y1) / 3;\r\n\t            x1 = (this._xi + 2 * x1) / 3;\r\n\t            y1 = (this._yi + 2 * y1) / 3;\r\n\r\n\t            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 转成静态的 Float32Array 减少堆内存占用\r\n\t         * Convert dynamic array to static Float32Array\r\n\t         */\r\n\t        toStatic: function () {\r\n\t            var data = this.data;\r\n\t            if (data instanceof Array) {\r\n\t                data.length = this._len;\r\n\t                if (hasTypedArray) {\r\n\t                    this.data = new Float32Array(data);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:zrender/core/BoundingRect}\r\n\t         */\r\n\t        getBoundingRect: function () {\r\n\t            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;\r\n\t            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;\r\n\r\n\t            var data = this.data;\r\n\t            var xi = 0;\r\n\t            var yi = 0;\r\n\t            var x0 = 0;\r\n\t            var y0 = 0;\r\n\r\n\t            for (var i = 0; i < data.length;) {\r\n\t                var cmd = data[i++];\r\n\r\n\t                if (i == 1) {\r\n\t                    // 如果第一个命令是 L, C, Q\r\n\t                    // 则 previous point 同绘制命令的第一个 point\r\n\t                    //\r\n\t                    // 第一个命令为 Arc 的情况下会在后面特殊处理\r\n\t                    xi = data[i];\r\n\t                    yi = data[i + 1];\r\n\r\n\t                    x0 = xi;\r\n\t                    y0 = yi;\r\n\t                }\r\n\r\n\t                switch (cmd) {\r\n\t                    case CMD.M:\r\n\t                        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\r\n\t                        // 在 closePath 的时候使用\r\n\t                        x0 = data[i++];\r\n\t                        y0 = data[i++];\r\n\t                        xi = x0;\r\n\t                        yi = y0;\r\n\t                        min2[0] = x0;\r\n\t                        min2[1] = y0;\r\n\t                        max2[0] = x0;\r\n\t                        max2[1] = y0;\r\n\t                        break;\r\n\t                    case CMD.L:\r\n\t                        bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);\r\n\t                        xi = data[i++];\r\n\t                        yi = data[i++];\r\n\t                        break;\r\n\t                    case CMD.C:\r\n\t                        bbox.fromCubic(\r\n\t                            xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\r\n\t                            min2, max2\r\n\t                        );\r\n\t                        xi = data[i++];\r\n\t                        yi = data[i++];\r\n\t                        break;\r\n\t                    case CMD.Q:\r\n\t                        bbox.fromQuadratic(\r\n\t                            xi, yi, data[i++], data[i++], data[i], data[i + 1],\r\n\t                            min2, max2\r\n\t                        );\r\n\t                        xi = data[i++];\r\n\t                        yi = data[i++];\r\n\t                        break;\r\n\t                    case CMD.A:\r\n\t                        // TODO Arc 判断的开销比较大\r\n\t                        var cx = data[i++];\r\n\t                        var cy = data[i++];\r\n\t                        var rx = data[i++];\r\n\t                        var ry = data[i++];\r\n\t                        var startAngle = data[i++];\r\n\t                        var endAngle = data[i++] + startAngle;\r\n\t                        // TODO Arc 旋转\r\n\t                        var psi = data[i++];\r\n\t                        var anticlockwise = 1 - data[i++];\r\n\r\n\t                        if (i == 1) {\r\n\t                            // 直接使用 arc 命令\r\n\t                            // 第一个命令起点还未定义\r\n\t                            x0 = mathCos(startAngle) * rx + cx;\r\n\t                            y0 = mathSin(startAngle) * ry + cy;\r\n\t                        }\r\n\r\n\t                        bbox.fromArc(\r\n\t                            cx, cy, rx, ry, startAngle, endAngle,\r\n\t                            anticlockwise, min2, max2\r\n\t                        );\r\n\r\n\t                        xi = mathCos(endAngle) * rx + cx;\r\n\t                        yi = mathSin(endAngle) * ry + cy;\r\n\t                        break;\r\n\t                    case CMD.R:\r\n\t                        x0 = xi = data[i++];\r\n\t                        y0 = yi = data[i++];\r\n\t                        var width = data[i++];\r\n\t                        var height = data[i++];\r\n\t                        // Use fromLine\r\n\t                        bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);\r\n\t                        break;\r\n\t                    case CMD.Z:\r\n\t                        xi = x0;\r\n\t                        yi = y0;\r\n\t                        break;\r\n\t                }\r\n\r\n\t                // Union\r\n\t                vec2.min(min, min, min2);\r\n\t                vec2.max(max, max, max2);\r\n\t            }\r\n\r\n\t            // No data\r\n\t            if (i === 0) {\r\n\t                min[0] = min[1] = max[0] = max[1] = 0;\r\n\t            }\r\n\r\n\t            return new BoundingRect(\r\n\t                min[0], min[1], max[0] - min[0], max[1] - min[1]\r\n\t            );\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Rebuild path from current data\r\n\t         * Rebuild path will not consider javascript implemented line dash.\r\n\t         * @param {CanvasRenderingContext} ctx\r\n\t         */\r\n\t        rebuildPath: function (ctx) {\r\n\t            var d = this.data;\r\n\t            var x0, y0;\r\n\t            var xi, yi;\r\n\t            var x, y;\r\n\t            var ux = this._ux;\r\n\t            var uy = this._uy;\r\n\t            var len = this._len;\r\n\t            for (var i = 0; i < len;) {\r\n\t                var cmd = d[i++];\r\n\r\n\t                if (i == 1) {\r\n\t                    // 如果第一个命令是 L, C, Q\r\n\t                    // 则 previous point 同绘制命令的第一个 point\r\n\t                    //\r\n\t                    // 第一个命令为 Arc 的情况下会在后面特殊处理\r\n\t                    xi = d[i];\r\n\t                    yi = d[i + 1];\r\n\r\n\t                    x0 = xi;\r\n\t                    y0 = yi;\r\n\t                }\r\n\t                switch (cmd) {\r\n\t                    case CMD.M:\r\n\t                        x0 = xi = d[i++];\r\n\t                        y0 = yi = d[i++];\r\n\t                        ctx.moveTo(xi, yi);\r\n\t                        break;\r\n\t                    case CMD.L:\r\n\t                        x = d[i++];\r\n\t                        y = d[i++];\r\n\t                        // Not draw too small seg between\r\n\t                        if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {\r\n\t                            ctx.lineTo(x, y);\r\n\t                            xi = x;\r\n\t                            yi = y;\r\n\t                        }\r\n\t                        break;\r\n\t                    case CMD.C:\r\n\t                        ctx.bezierCurveTo(\r\n\t                            d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]\r\n\t                        );\r\n\t                        xi = d[i - 2];\r\n\t                        yi = d[i - 1];\r\n\t                        break;\r\n\t                    case CMD.Q:\r\n\t                        ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);\r\n\t                        xi = d[i - 2];\r\n\t                        yi = d[i - 1];\r\n\t                        break;\r\n\t                    case CMD.A:\r\n\t                        var cx = d[i++];\r\n\t                        var cy = d[i++];\r\n\t                        var rx = d[i++];\r\n\t                        var ry = d[i++];\r\n\t                        var theta = d[i++];\r\n\t                        var dTheta = d[i++];\r\n\t                        var psi = d[i++];\r\n\t                        var fs = d[i++];\r\n\t                        var r = (rx > ry) ? rx : ry;\r\n\t                        var scaleX = (rx > ry) ? 1 : rx / ry;\r\n\t                        var scaleY = (rx > ry) ? ry / rx : 1;\r\n\t                        var isEllipse = Math.abs(rx - ry) > 1e-3;\r\n\t                        var endAngle = theta + dTheta;\r\n\t                        if (isEllipse) {\r\n\t                            ctx.translate(cx, cy);\r\n\t                            ctx.rotate(psi);\r\n\t                            ctx.scale(scaleX, scaleY);\r\n\t                            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);\r\n\t                            ctx.scale(1 / scaleX, 1 / scaleY);\r\n\t                            ctx.rotate(-psi);\r\n\t                            ctx.translate(-cx, -cy);\r\n\t                        }\r\n\t                        else {\r\n\t                            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);\r\n\t                        }\r\n\r\n\t                        if (i == 1) {\r\n\t                            // 直接使用 arc 命令\r\n\t                            // 第一个命令起点还未定义\r\n\t                            x0 = mathCos(theta) * rx + cx;\r\n\t                            y0 = mathSin(theta) * ry + cy;\r\n\t                        }\r\n\t                        xi = mathCos(endAngle) * rx + cx;\r\n\t                        yi = mathSin(endAngle) * ry + cy;\r\n\t                        break;\r\n\t                    case CMD.R:\r\n\t                        x0 = xi = d[i];\r\n\t                        y0 = yi = d[i + 1];\r\n\t                        ctx.rect(d[i++], d[i++], d[i++], d[i++]);\r\n\t                        break;\r\n\t                    case CMD.Z:\r\n\t                        ctx.closePath();\r\n\t                        xi = x0;\r\n\t                        yi = y0;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    PathProxy.CMD = CMD;\r\n\r\n\t    module.exports = PathProxy;\r\n\r\n\r\n/***/ },\r\n/* 50 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * 曲线辅助模块\r\n\t * @module zrender/core/curve\r\n\t * @author pissang(https://www.github.com/pissang)\r\n\t */\r\n\r\n\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    var v2Create = vec2.create;\r\n\t    var v2DistSquare = vec2.distSquare;\r\n\t    var mathPow = Math.pow;\r\n\t    var mathSqrt = Math.sqrt;\r\n\r\n\t    var EPSILON = 1e-8;\r\n\t    var EPSILON_NUMERIC = 1e-4;\r\n\r\n\t    var THREE_SQRT = mathSqrt(3);\r\n\t    var ONE_THIRD = 1 / 3;\r\n\r\n\t    // 临时变量\r\n\t    var _v0 = v2Create();\r\n\t    var _v1 = v2Create();\r\n\t    var _v2 = v2Create();\r\n\t    // var _v3 = vec2.create();\r\n\r\n\t    function isAroundZero(val) {\r\n\t        return val > -EPSILON && val < EPSILON;\r\n\t    }\r\n\t    function isNotAroundZero(val) {\r\n\t        return val > EPSILON || val < -EPSILON;\r\n\t    }\r\n\t    /**\r\n\t     * 计算三次贝塞尔值\r\n\t     * @memberOf module:zrender/core/curve\r\n\t     * @param  {number} p0\r\n\t     * @param  {number} p1\r\n\t     * @param  {number} p2\r\n\t     * @param  {number} p3\r\n\t     * @param  {number} t\r\n\t     * @return {number}\r\n\t     */\r\n\t    function cubicAt(p0, p1, p2, p3, t) {\r\n\t        var onet = 1 - t;\r\n\t        return onet * onet * (onet * p0 + 3 * t * p1)\r\n\t             + t * t * (t * p3 + 3 * onet * p2);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 计算三次贝塞尔导数值\r\n\t     * @memberOf module:zrender/core/curve\r\n\t     * @param  {number} p0\r\n\t     * @param  {number} p1\r\n\t     * @param  {number} p2\r\n\t     * @param  {number} p3\r\n\t     * @param  {number} t\r\n\t     * @return {number}\r\n\t     */\r\n\t    function cubicDerivativeAt(p0, p1, p2, p3, t) {\r\n\t        var onet = 1 - t;\r\n\t        return 3 * (\r\n\t            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet\r\n\t            + (p3 - p2) * t * t\r\n\t        );\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 计算三次贝塞尔方程根，使用盛金公式\r\n\t     * @memberOf module:zrender/core/curve\r\n\t     * @param  {number} p0\r\n\t     * @param  {number} p1\r\n\t     * @param  {number} p2\r\n\t     * @param  {number} p3\r\n\t     * @param  {number} val\r\n\t     * @param  {Array.<number>} roots\r\n\t     * @return {number} 有效根数目\r\n\t     */\r\n\t    function cubicRootAt(p0, p1, p2, p3, val, roots) {\r\n\t        // Evaluate roots of cubic functions\r\n\t        var a = p3 + 3 * (p1 - p2) - p0;\r\n\t        var b = 3 * (p2 - p1 * 2 + p0);\r\n\t        var c = 3 * (p1  - p0);\r\n\t        var d = p0 - val;\r\n\r\n\t        var A = b * b - 3 * a * c;\r\n\t        var B = b * c - 9 * a * d;\r\n\t        var C = c * c - 3 * b * d;\r\n\r\n\t        var n = 0;\r\n\r\n\t        if (isAroundZero(A) && isAroundZero(B)) {\r\n\t            if (isAroundZero(b)) {\r\n\t                roots[0] = 0;\r\n\t            }\r\n\t            else {\r\n\t                var t1 = -c / b;  //t1, t2, t3, b is not zero\r\n\t                if (t1 >= 0 && t1 <= 1) {\r\n\t                    roots[n++] = t1;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            var disc = B * B - 4 * A * C;\r\n\r\n\t            if (isAroundZero(disc)) {\r\n\t                var K = B / A;\r\n\t                var t1 = -b / a + K;  // t1, a is not zero\r\n\t                var t2 = -K / 2;  // t2, t3\r\n\t                if (t1 >= 0 && t1 <= 1) {\r\n\t                    roots[n++] = t1;\r\n\t                }\r\n\t                if (t2 >= 0 && t2 <= 1) {\r\n\t                    roots[n++] = t2;\r\n\t                }\r\n\t            }\r\n\t            else if (disc > 0) {\r\n\t                var discSqrt = mathSqrt(disc);\r\n\t                var Y1 = A * b + 1.5 * a * (-B + discSqrt);\r\n\t                var Y2 = A * b + 1.5 * a * (-B - discSqrt);\r\n\t                if (Y1 < 0) {\r\n\t                    Y1 = -mathPow(-Y1, ONE_THIRD);\r\n\t                }\r\n\t                else {\r\n\t                    Y1 = mathPow(Y1, ONE_THIRD);\r\n\t                }\r\n\t                if (Y2 < 0) {\r\n\t                    Y2 = -mathPow(-Y2, ONE_THIRD);\r\n\t                }\r\n\t                else {\r\n\t                    Y2 = mathPow(Y2, ONE_THIRD);\r\n\t                }\r\n\t                var t1 = (-b - (Y1 + Y2)) / (3 * a);\r\n\t                if (t1 >= 0 && t1 <= 1) {\r\n\t                    roots[n++] = t1;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));\r\n\t                var theta = Math.acos(T) / 3;\r\n\t                var ASqrt = mathSqrt(A);\r\n\t                var tmp = Math.cos(theta);\r\n\r\n\t                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);\r\n\t                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);\r\n\t                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);\r\n\t                if (t1 >= 0 && t1 <= 1) {\r\n\t                    roots[n++] = t1;\r\n\t                }\r\n\t                if (t2 >= 0 && t2 <= 1) {\r\n\t                    roots[n++] = t2;\r\n\t                }\r\n\t                if (t3 >= 0 && t3 <= 1) {\r\n\t                    roots[n++] = t3;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return n;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 计算三次贝塞尔方程极限值的位置\r\n\t     * @memberOf module:zrender/core/curve\r\n\t     * @param  {number} p0\r\n\t     * @param  {number} p1\r\n\t     * @param  {number} p2\r\n\t     * @param  {number} p3\r\n\t     * @param  {Array.<number>} extrema\r\n\t     * @return {number} 有效数目\r\n\t     */\r\n\t    function cubicExtrema(p0, p1, p2, p3, extrema) {\r\n\t        var b = 6 * p2 - 12 * p1 + 6 * p0;\r\n\t        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;\r\n\t        var c = 3 * p1 - 3 * p0;\r\n\r\n\t        var n = 0;\r\n\t        if (isAroundZero(a)) {\r\n\t            if (isNotAroundZero(b)) {\r\n\t                var t1 = -c / b;\r\n\t                if (t1 >= 0 && t1 <=1) {\r\n\t                    extrema[n++] = t1;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            var disc = b * b - 4 * a * c;\r\n\t            if (isAroundZero(disc)) {\r\n\t                extrema[0] = -b / (2 * a);\r\n\t            }\r\n\t            else if (disc > 0) {\r\n\t                var discSqrt = mathSqrt(disc);\r\n\t                var t1 = (-b + discSqrt) / (2 * a);\r\n\t                var t2 = (-b - discSqrt) / (2 * a);\r\n\t                if (t1 >= 0 && t1 <= 1) {\r\n\t                    extrema[n++] = t1;\r\n\t                }\r\n\t                if (t2 >= 0 && t2 <= 1) {\r\n\t                    extrema[n++] = t2;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return n;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 细分三次贝塞尔曲线\r\n\t     * @memberOf module:zrender/core/curve\r\n\t     * @param  {number} p0\r\n\t     * @param  {number} p1\r\n\t     * @param  {number} p2\r\n\t     * @param  {number} p3\r\n\t     * @param  {number} t\r\n\t     * @param  {Array.<number>} out\r\n\t     */\r\n\t    function cubicSubdivide(p0, p1, p2, p3, t, out) {\r\n\t        var p01 = (p1 - p0) * t + p0;\r\n\t        var p12 = (p2 - p1) * t + p1;\r\n\t        var p23 = (p3 - p2) * t + p2;\r\n\r\n\t        var p012 = (p12 - p01) * t + p01;\r\n\t        var p123 = (p23 - p12) * t + p12;\r\n\r\n\t        var p0123 = (p123 - p012) * t + p012;\r\n\t        // Seg0\r\n\t        out[0] = p0;\r\n\t        out[1] = p01;\r\n\t        out[2] = p012;\r\n\t        out[3] = p0123;\r\n\t        // Seg1\r\n\t        out[4] = p0123;\r\n\t        out[5] = p123;\r\n\t        out[6] = p23;\r\n\t        out[7] = p3;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 投射点到三次贝塞尔曲线上，返回投射距离。\r\n\t     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\r\n\t     * @param {number} x0\r\n\t     * @param {number} y0\r\n\t     * @param {number} x1\r\n\t     * @param {number} y1\r\n\t     * @param {number} x2\r\n\t     * @param {number} y2\r\n\t     * @param {number} x3\r\n\t     * @param {number} y3\r\n\t     * @param {number} x\r\n\t     * @param {number} y\r\n\t     * @param {Array.<number>} [out] 投射点\r\n\t     * @return {number}\r\n\t     */\r\n\t    function cubicProjectPoint(\r\n\t        x0, y0, x1, y1, x2, y2, x3, y3,\r\n\t        x, y, out\r\n\t    ) {\r\n\t        // http://pomax.github.io/bezierinfo/#projections\r\n\t        var t;\r\n\t        var interval = 0.005;\r\n\t        var d = Infinity;\r\n\t        var prev;\r\n\t        var next;\r\n\t        var d1;\r\n\t        var d2;\r\n\r\n\t        _v0[0] = x;\r\n\t        _v0[1] = y;\r\n\r\n\t        // 先粗略估计一下可能的最小距离的 t 值\r\n\t        // PENDING\r\n\t        for (var _t = 0; _t < 1; _t += 0.05) {\r\n\t            _v1[0] = cubicAt(x0, x1, x2, x3, _t);\r\n\t            _v1[1] = cubicAt(y0, y1, y2, y3, _t);\r\n\t            d1 = v2DistSquare(_v0, _v1);\r\n\t            if (d1 < d) {\r\n\t                t = _t;\r\n\t                d = d1;\r\n\t            }\r\n\t        }\r\n\t        d = Infinity;\r\n\r\n\t        // At most 32 iteration\r\n\t        for (var i = 0; i < 32; i++) {\r\n\t            if (interval < EPSILON_NUMERIC) {\r\n\t                break;\r\n\t            }\r\n\t            prev = t - interval;\r\n\t            next = t + interval;\r\n\t            // t - interval\r\n\t            _v1[0] = cubicAt(x0, x1, x2, x3, prev);\r\n\t            _v1[1] = cubicAt(y0, y1, y2, y3, prev);\r\n\r\n\t            d1 = v2DistSquare(_v1, _v0);\r\n\r\n\t            if (prev >= 0 && d1 < d) {\r\n\t                t = prev;\r\n\t                d = d1;\r\n\t            }\r\n\t            else {\r\n\t                // t + interval\r\n\t                _v2[0] = cubicAt(x0, x1, x2, x3, next);\r\n\t                _v2[1] = cubicAt(y0, y1, y2, y3, next);\r\n\t                d2 = v2DistSquare(_v2, _v0);\r\n\r\n\t                if (next <= 1 && d2 < d) {\r\n\t                    t = next;\r\n\t                    d = d2;\r\n\t                }\r\n\t                else {\r\n\t                    interval *= 0.5;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        // t\r\n\t        if (out) {\r\n\t            out[0] = cubicAt(x0, x1, x2, x3, t);\r\n\t            out[1] = cubicAt(y0, y1, y2, y3, t);\r\n\t        }\r\n\t        // console.log(interval, i);\r\n\t        return mathSqrt(d);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 计算二次方贝塞尔值\r\n\t     * @param  {number} p0\r\n\t     * @param  {number} p1\r\n\t     * @param  {number} p2\r\n\t     * @param  {number} t\r\n\t     * @return {number}\r\n\t     */\r\n\t    function quadraticAt(p0, p1, p2, t) {\r\n\t        var onet = 1 - t;\r\n\t        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 计算二次方贝塞尔导数值\r\n\t     * @param  {number} p0\r\n\t     * @param  {number} p1\r\n\t     * @param  {number} p2\r\n\t     * @param  {number} t\r\n\t     * @return {number}\r\n\t     */\r\n\t    function quadraticDerivativeAt(p0, p1, p2, t) {\r\n\t        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 计算二次方贝塞尔方程根\r\n\t     * @param  {number} p0\r\n\t     * @param  {number} p1\r\n\t     * @param  {number} p2\r\n\t     * @param  {number} t\r\n\t     * @param  {Array.<number>} roots\r\n\t     * @return {number} 有效根数目\r\n\t     */\r\n\t    function quadraticRootAt(p0, p1, p2, val, roots) {\r\n\t        var a = p0 - 2 * p1 + p2;\r\n\t        var b = 2 * (p1 - p0);\r\n\t        var c = p0 - val;\r\n\r\n\t        var n = 0;\r\n\t        if (isAroundZero(a)) {\r\n\t            if (isNotAroundZero(b)) {\r\n\t                var t1 = -c / b;\r\n\t                if (t1 >= 0 && t1 <= 1) {\r\n\t                    roots[n++] = t1;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            var disc = b * b - 4 * a * c;\r\n\t            if (isAroundZero(disc)) {\r\n\t                var t1 = -b / (2 * a);\r\n\t                if (t1 >= 0 && t1 <= 1) {\r\n\t                    roots[n++] = t1;\r\n\t                }\r\n\t            }\r\n\t            else if (disc > 0) {\r\n\t                var discSqrt = mathSqrt(disc);\r\n\t                var t1 = (-b + discSqrt) / (2 * a);\r\n\t                var t2 = (-b - discSqrt) / (2 * a);\r\n\t                if (t1 >= 0 && t1 <= 1) {\r\n\t                    roots[n++] = t1;\r\n\t                }\r\n\t                if (t2 >= 0 && t2 <= 1) {\r\n\t                    roots[n++] = t2;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return n;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 计算二次贝塞尔方程极限值\r\n\t     * @memberOf module:zrender/core/curve\r\n\t     * @param  {number} p0\r\n\t     * @param  {number} p1\r\n\t     * @param  {number} p2\r\n\t     * @return {number}\r\n\t     */\r\n\t    function quadraticExtremum(p0, p1, p2) {\r\n\t        var divider = p0 + p2 - 2 * p1;\r\n\t        if (divider === 0) {\r\n\t            // p1 is center of p0 and p2\r\n\t            return 0.5;\r\n\t        }\r\n\t        else {\r\n\t            return (p0 - p1) / divider;\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 细分二次贝塞尔曲线\r\n\t     * @memberOf module:zrender/core/curve\r\n\t     * @param  {number} p0\r\n\t     * @param  {number} p1\r\n\t     * @param  {number} p2\r\n\t     * @param  {number} t\r\n\t     * @param  {Array.<number>} out\r\n\t     */\r\n\t    function quadraticSubdivide(p0, p1, p2, t, out) {\r\n\t        var p01 = (p1 - p0) * t + p0;\r\n\t        var p12 = (p2 - p1) * t + p1;\r\n\t        var p012 = (p12 - p01) * t + p01;\r\n\r\n\t        // Seg0\r\n\t        out[0] = p0;\r\n\t        out[1] = p01;\r\n\t        out[2] = p012;\r\n\r\n\t        // Seg1\r\n\t        out[3] = p012;\r\n\t        out[4] = p12;\r\n\t        out[5] = p2;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 投射点到二次贝塞尔曲线上，返回投射距离。\r\n\t     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\r\n\t     * @param {number} x0\r\n\t     * @param {number} y0\r\n\t     * @param {number} x1\r\n\t     * @param {number} y1\r\n\t     * @param {number} x2\r\n\t     * @param {number} y2\r\n\t     * @param {number} x\r\n\t     * @param {number} y\r\n\t     * @param {Array.<number>} out 投射点\r\n\t     * @return {number}\r\n\t     */\r\n\t    function quadraticProjectPoint(\r\n\t        x0, y0, x1, y1, x2, y2,\r\n\t        x, y, out\r\n\t    ) {\r\n\t        // http://pomax.github.io/bezierinfo/#projections\r\n\t        var t;\r\n\t        var interval = 0.005;\r\n\t        var d = Infinity;\r\n\r\n\t        _v0[0] = x;\r\n\t        _v0[1] = y;\r\n\r\n\t        // 先粗略估计一下可能的最小距离的 t 值\r\n\t        // PENDING\r\n\t        for (var _t = 0; _t < 1; _t += 0.05) {\r\n\t            _v1[0] = quadraticAt(x0, x1, x2, _t);\r\n\t            _v1[1] = quadraticAt(y0, y1, y2, _t);\r\n\t            var d1 = v2DistSquare(_v0, _v1);\r\n\t            if (d1 < d) {\r\n\t                t = _t;\r\n\t                d = d1;\r\n\t            }\r\n\t        }\r\n\t        d = Infinity;\r\n\r\n\t        // At most 32 iteration\r\n\t        for (var i = 0; i < 32; i++) {\r\n\t            if (interval < EPSILON_NUMERIC) {\r\n\t                break;\r\n\t            }\r\n\t            var prev = t - interval;\r\n\t            var next = t + interval;\r\n\t            // t - interval\r\n\t            _v1[0] = quadraticAt(x0, x1, x2, prev);\r\n\t            _v1[1] = quadraticAt(y0, y1, y2, prev);\r\n\r\n\t            var d1 = v2DistSquare(_v1, _v0);\r\n\r\n\t            if (prev >= 0 && d1 < d) {\r\n\t                t = prev;\r\n\t                d = d1;\r\n\t            }\r\n\t            else {\r\n\t                // t + interval\r\n\t                _v2[0] = quadraticAt(x0, x1, x2, next);\r\n\t                _v2[1] = quadraticAt(y0, y1, y2, next);\r\n\t                var d2 = v2DistSquare(_v2, _v0);\r\n\t                if (next <= 1 && d2 < d) {\r\n\t                    t = next;\r\n\t                    d = d2;\r\n\t                }\r\n\t                else {\r\n\t                    interval *= 0.5;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        // t\r\n\t        if (out) {\r\n\t            out[0] = quadraticAt(x0, x1, x2, t);\r\n\t            out[1] = quadraticAt(y0, y1, y2, t);\r\n\t        }\r\n\t        // console.log(interval, i);\r\n\t        return mathSqrt(d);\r\n\t    }\r\n\r\n\t    module.exports = {\r\n\r\n\t        cubicAt: cubicAt,\r\n\r\n\t        cubicDerivativeAt: cubicDerivativeAt,\r\n\r\n\t        cubicRootAt: cubicRootAt,\r\n\r\n\t        cubicExtrema: cubicExtrema,\r\n\r\n\t        cubicSubdivide: cubicSubdivide,\r\n\r\n\t        cubicProjectPoint: cubicProjectPoint,\r\n\r\n\t        quadraticAt: quadraticAt,\r\n\r\n\t        quadraticDerivativeAt: quadraticDerivativeAt,\r\n\r\n\t        quadraticRootAt: quadraticRootAt,\r\n\r\n\t        quadraticExtremum: quadraticExtremum,\r\n\r\n\t        quadraticSubdivide: quadraticSubdivide,\r\n\r\n\t        quadraticProjectPoint: quadraticProjectPoint\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 51 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @author Yi Shen(https://github.com/pissang)\r\n\t */\r\n\r\n\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    var curve = __webpack_require__(50);\r\n\r\n\t    var bbox = {};\r\n\t    var mathMin = Math.min;\r\n\t    var mathMax = Math.max;\r\n\t    var mathSin = Math.sin;\r\n\t    var mathCos = Math.cos;\r\n\r\n\t    var start = vec2.create();\r\n\t    var end = vec2.create();\r\n\t    var extremity = vec2.create();\r\n\r\n\t    var PI2 = Math.PI * 2;\r\n\t    /**\r\n\t     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中\r\n\t     * @module zrender/core/bbox\r\n\t     * @param {Array<Object>} points 顶点数组\r\n\t     * @param {number} min\r\n\t     * @param {number} max\r\n\t     */\r\n\t    bbox.fromPoints = function(points, min, max) {\r\n\t        if (points.length === 0) {\r\n\t            return;\r\n\t        }\r\n\t        var p = points[0];\r\n\t        var left = p[0];\r\n\t        var right = p[0];\r\n\t        var top = p[1];\r\n\t        var bottom = p[1];\r\n\t        var i;\r\n\r\n\t        for (i = 1; i < points.length; i++) {\r\n\t            p = points[i];\r\n\t            left = mathMin(left, p[0]);\r\n\t            right = mathMax(right, p[0]);\r\n\t            top = mathMin(top, p[1]);\r\n\t            bottom = mathMax(bottom, p[1]);\r\n\t        }\r\n\r\n\t        min[0] = left;\r\n\t        min[1] = top;\r\n\t        max[0] = right;\r\n\t        max[1] = bottom;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @memberOf module:zrender/core/bbox\r\n\t     * @param {number} x0\r\n\t     * @param {number} y0\r\n\t     * @param {number} x1\r\n\t     * @param {number} y1\r\n\t     * @param {Array.<number>} min\r\n\t     * @param {Array.<number>} max\r\n\t     */\r\n\t    bbox.fromLine = function (x0, y0, x1, y1, min, max) {\r\n\t        min[0] = mathMin(x0, x1);\r\n\t        min[1] = mathMin(y0, y1);\r\n\t        max[0] = mathMax(x0, x1);\r\n\t        max[1] = mathMax(y0, y1);\r\n\t    };\r\n\r\n\t    var xDim = [];\r\n\t    var yDim = [];\r\n\t    /**\r\n\t     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中\r\n\t     * @memberOf module:zrender/core/bbox\r\n\t     * @param {number} x0\r\n\t     * @param {number} y0\r\n\t     * @param {number} x1\r\n\t     * @param {number} y1\r\n\t     * @param {number} x2\r\n\t     * @param {number} y2\r\n\t     * @param {number} x3\r\n\t     * @param {number} y3\r\n\t     * @param {Array.<number>} min\r\n\t     * @param {Array.<number>} max\r\n\t     */\r\n\t    bbox.fromCubic = function(\r\n\t        x0, y0, x1, y1, x2, y2, x3, y3, min, max\r\n\t    ) {\r\n\t        var cubicExtrema = curve.cubicExtrema;\r\n\t        var cubicAt = curve.cubicAt;\r\n\t        var i;\r\n\t        var n = cubicExtrema(x0, x1, x2, x3, xDim);\r\n\t        min[0] = Infinity;\r\n\t        min[1] = Infinity;\r\n\t        max[0] = -Infinity;\r\n\t        max[1] = -Infinity;\r\n\r\n\t        for (i = 0; i < n; i++) {\r\n\t            var x = cubicAt(x0, x1, x2, x3, xDim[i]);\r\n\t            min[0] = mathMin(x, min[0]);\r\n\t            max[0] = mathMax(x, max[0]);\r\n\t        }\r\n\t        n = cubicExtrema(y0, y1, y2, y3, yDim);\r\n\t        for (i = 0; i < n; i++) {\r\n\t            var y = cubicAt(y0, y1, y2, y3, yDim[i]);\r\n\t            min[1] = mathMin(y, min[1]);\r\n\t            max[1] = mathMax(y, max[1]);\r\n\t        }\r\n\r\n\t        min[0] = mathMin(x0, min[0]);\r\n\t        max[0] = mathMax(x0, max[0]);\r\n\t        min[0] = mathMin(x3, min[0]);\r\n\t        max[0] = mathMax(x3, max[0]);\r\n\r\n\t        min[1] = mathMin(y0, min[1]);\r\n\t        max[1] = mathMax(y0, max[1]);\r\n\t        min[1] = mathMin(y3, min[1]);\r\n\t        max[1] = mathMax(y3, max[1]);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中\r\n\t     * @memberOf module:zrender/core/bbox\r\n\t     * @param {number} x0\r\n\t     * @param {number} y0\r\n\t     * @param {number} x1\r\n\t     * @param {number} y1\r\n\t     * @param {number} x2\r\n\t     * @param {number} y2\r\n\t     * @param {Array.<number>} min\r\n\t     * @param {Array.<number>} max\r\n\t     */\r\n\t    bbox.fromQuadratic = function(x0, y0, x1, y1, x2, y2, min, max) {\r\n\t        var quadraticExtremum = curve.quadraticExtremum;\r\n\t        var quadraticAt = curve.quadraticAt;\r\n\t        // Find extremities, where derivative in x dim or y dim is zero\r\n\t        var tx =\r\n\t            mathMax(\r\n\t                mathMin(quadraticExtremum(x0, x1, x2), 1), 0\r\n\t            );\r\n\t        var ty =\r\n\t            mathMax(\r\n\t                mathMin(quadraticExtremum(y0, y1, y2), 1), 0\r\n\t            );\r\n\r\n\t        var x = quadraticAt(x0, x1, x2, tx);\r\n\t        var y = quadraticAt(y0, y1, y2, ty);\r\n\r\n\t        min[0] = mathMin(x0, x2, x);\r\n\t        min[1] = mathMin(y0, y2, y);\r\n\t        max[0] = mathMax(x0, x2, x);\r\n\t        max[1] = mathMax(y0, y2, y);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * 从圆弧中计算出最小包围盒，写入`min`和`max`中\r\n\t     * @method\r\n\t     * @memberOf module:zrender/core/bbox\r\n\t     * @param {number} x\r\n\t     * @param {number} y\r\n\t     * @param {number} rx\r\n\t     * @param {number} ry\r\n\t     * @param {number} startAngle\r\n\t     * @param {number} endAngle\r\n\t     * @param {number} anticlockwise\r\n\t     * @param {Array.<number>} min\r\n\t     * @param {Array.<number>} max\r\n\t     */\r\n\t    bbox.fromArc = function (\r\n\t        x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max\r\n\t    ) {\r\n\t        var vec2Min = vec2.min;\r\n\t        var vec2Max = vec2.max;\r\n\r\n\t        var diff = Math.abs(startAngle - endAngle);\r\n\r\n\r\n\t        if (diff % PI2 < 1e-4 && diff > 1e-4) {\r\n\t            // Is a circle\r\n\t            min[0] = x - rx;\r\n\t            min[1] = y - ry;\r\n\t            max[0] = x + rx;\r\n\t            max[1] = y + ry;\r\n\t            return;\r\n\t        }\r\n\r\n\t        start[0] = mathCos(startAngle) * rx + x;\r\n\t        start[1] = mathSin(startAngle) * ry + y;\r\n\r\n\t        end[0] = mathCos(endAngle) * rx + x;\r\n\t        end[1] = mathSin(endAngle) * ry + y;\r\n\r\n\t        vec2Min(min, start, end);\r\n\t        vec2Max(max, start, end);\r\n\r\n\t        // Thresh to [0, Math.PI * 2]\r\n\t        startAngle = startAngle % (PI2);\r\n\t        if (startAngle < 0) {\r\n\t            startAngle = startAngle + PI2;\r\n\t        }\r\n\t        endAngle = endAngle % (PI2);\r\n\t        if (endAngle < 0) {\r\n\t            endAngle = endAngle + PI2;\r\n\t        }\r\n\r\n\t        if (startAngle > endAngle && !anticlockwise) {\r\n\t            endAngle += PI2;\r\n\t        }\r\n\t        else if (startAngle < endAngle && anticlockwise) {\r\n\t            startAngle += PI2;\r\n\t        }\r\n\t        if (anticlockwise) {\r\n\t            var tmp = endAngle;\r\n\t            endAngle = startAngle;\r\n\t            startAngle = tmp;\r\n\t        }\r\n\r\n\t        // var number = 0;\r\n\t        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;\r\n\t        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {\r\n\t            if (angle > startAngle) {\r\n\t                extremity[0] = mathCos(angle) * rx + x;\r\n\t                extremity[1] = mathSin(angle) * ry + y;\r\n\r\n\t                vec2Min(min, extremity, min);\r\n\t                vec2Max(max, extremity, max);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = bbox;\r\n\r\n\r\n\r\n/***/ },\r\n/* 52 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var CMD = __webpack_require__(49).CMD;\r\n\t    var line = __webpack_require__(53);\r\n\t    var cubic = __webpack_require__(54);\r\n\t    var quadratic = __webpack_require__(55);\r\n\t    var arc = __webpack_require__(56);\r\n\t    var normalizeRadian = __webpack_require__(57).normalizeRadian;\r\n\t    var curve = __webpack_require__(50);\r\n\r\n\t    var windingLine = __webpack_require__(58);\r\n\r\n\t    var containStroke = line.containStroke;\r\n\r\n\t    var PI2 = Math.PI * 2;\r\n\r\n\t    var EPSILON = 1e-4;\r\n\r\n\t    function isAroundEqual(a, b) {\r\n\t        return Math.abs(a - b) < EPSILON;\r\n\t    }\r\n\r\n\t    // 临时数组\r\n\t    var roots = [-1, -1, -1];\r\n\t    var extrema = [-1, -1];\r\n\r\n\t    function swapExtrema() {\r\n\t        var tmp = extrema[0];\r\n\t        extrema[0] = extrema[1];\r\n\t        extrema[1] = tmp;\r\n\t    }\r\n\r\n\t    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {\r\n\t        // Quick reject\r\n\t        if (\r\n\t            (y > y0 && y > y1 && y > y2 && y > y3)\r\n\t            || (y < y0 && y < y1 && y < y2 && y < y3)\r\n\t        ) {\r\n\t            return 0;\r\n\t        }\r\n\t        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);\r\n\t        if (nRoots === 0) {\r\n\t            return 0;\r\n\t        }\r\n\t        else {\r\n\t            var w = 0;\r\n\t            var nExtrema = -1;\r\n\t            var y0_, y1_;\r\n\t            for (var i = 0; i < nRoots; i++) {\r\n\t                var t = roots[i];\r\n\r\n\t                // Avoid winding error when intersection point is the connect point of two line of polygon\r\n\t                var unit = (t === 0 || t === 1) ? 0.5 : 1;\r\n\r\n\t                var x_ = curve.cubicAt(x0, x1, x2, x3, t);\r\n\t                if (x_ < x) { // Quick reject\r\n\t                    continue;\r\n\t                }\r\n\t                if (nExtrema < 0) {\r\n\t                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);\r\n\t                    if (extrema[1] < extrema[0] && nExtrema > 1) {\r\n\t                        swapExtrema();\r\n\t                    }\r\n\t                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);\r\n\t                    if (nExtrema > 1) {\r\n\t                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);\r\n\t                    }\r\n\t                }\r\n\t                if (nExtrema == 2) {\r\n\t                    // 分成三段单调函数\r\n\t                    if (t < extrema[0]) {\r\n\t                        w += y0_ < y0 ? unit : -unit;\r\n\t                    }\r\n\t                    else if (t < extrema[1]) {\r\n\t                        w += y1_ < y0_ ? unit : -unit;\r\n\t                    }\r\n\t                    else {\r\n\t                        w += y3 < y1_ ? unit : -unit;\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    // 分成两段单调函数\r\n\t                    if (t < extrema[0]) {\r\n\t                        w += y0_ < y0 ? unit : -unit;\r\n\t                    }\r\n\t                    else {\r\n\t                        w += y3 < y0_ ? unit : -unit;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            return w;\r\n\t        }\r\n\t    }\r\n\r\n\t    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {\r\n\t        // Quick reject\r\n\t        if (\r\n\t            (y > y0 && y > y1 && y > y2)\r\n\t            || (y < y0 && y < y1 && y < y2)\r\n\t        ) {\r\n\t            return 0;\r\n\t        }\r\n\t        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);\r\n\t        if (nRoots === 0) {\r\n\t            return 0;\r\n\t        }\r\n\t        else {\r\n\t            var t = curve.quadraticExtremum(y0, y1, y2);\r\n\t            if (t >= 0 && t <= 1) {\r\n\t                var w = 0;\r\n\t                var y_ = curve.quadraticAt(y0, y1, y2, t);\r\n\t                for (var i = 0; i < nRoots; i++) {\r\n\t                    // Remove one endpoint.\r\n\t                    var unit = (roots[i] === 0 || roots[i] === 1) ? 0.5 : 1;\r\n\r\n\t                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);\r\n\t                    if (x_ < x) {   // Quick reject\r\n\t                        continue;\r\n\t                    }\r\n\t                    if (roots[i] < t) {\r\n\t                        w += y_ < y0 ? unit : -unit;\r\n\t                    }\r\n\t                    else {\r\n\t                        w += y2 < y_ ? unit : -unit;\r\n\t                    }\r\n\t                }\r\n\t                return w;\r\n\t            }\r\n\t            else {\r\n\t                // Remove one endpoint.\r\n\t                var unit = (roots[0] === 0 || roots[0] === 1) ? 0.5 : 1;\r\n\r\n\t                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);\r\n\t                if (x_ < x) {   // Quick reject\r\n\t                    return 0;\r\n\t                }\r\n\t                return y2 < y0 ? unit : -unit;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    // TODO\r\n\t    // Arc 旋转\r\n\t    function windingArc(\r\n\t        cx, cy, r, startAngle, endAngle, anticlockwise, x, y\r\n\t    ) {\r\n\t        y -= cy;\r\n\t        if (y > r || y < -r) {\r\n\t            return 0;\r\n\t        }\r\n\t        var tmp = Math.sqrt(r * r - y * y);\r\n\t        roots[0] = -tmp;\r\n\t        roots[1] = tmp;\r\n\r\n\t        var diff = Math.abs(startAngle - endAngle);\r\n\t        if (diff < 1e-4) {\r\n\t            return 0;\r\n\t        }\r\n\t        if (diff % PI2 < 1e-4) {\r\n\t            // Is a circle\r\n\t            startAngle = 0;\r\n\t            endAngle = PI2;\r\n\t            var dir = anticlockwise ? 1 : -1;\r\n\t            if (x >= roots[0] + cx && x <= roots[1] + cx) {\r\n\t                return dir;\r\n\t            } else {\r\n\t                return 0;\r\n\t            }\r\n\t        }\r\n\r\n\t        if (anticlockwise) {\r\n\t            var tmp = startAngle;\r\n\t            startAngle = normalizeRadian(endAngle);\r\n\t            endAngle = normalizeRadian(tmp);\r\n\t        }\r\n\t        else {\r\n\t            startAngle = normalizeRadian(startAngle);\r\n\t            endAngle = normalizeRadian(endAngle);\r\n\t        }\r\n\t        if (startAngle > endAngle) {\r\n\t            endAngle += PI2;\r\n\t        }\r\n\r\n\t        var w = 0;\r\n\t        for (var i = 0; i < 2; i++) {\r\n\t            var x_ = roots[i];\r\n\t            if (x_ + cx > x) {\r\n\t                var angle = Math.atan2(y, x_);\r\n\t                var dir = anticlockwise ? 1 : -1;\r\n\t                if (angle < 0) {\r\n\t                    angle = PI2 + angle;\r\n\t                }\r\n\t                if (\r\n\t                    (angle >= startAngle && angle <= endAngle)\r\n\t                    || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)\r\n\t                ) {\r\n\t                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {\r\n\t                        dir = -dir;\r\n\t                    }\r\n\t                    w += dir;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return w;\r\n\t    }\r\n\r\n\t    function containPath(data, lineWidth, isStroke, x, y) {\r\n\t        var w = 0;\r\n\t        var xi = 0;\r\n\t        var yi = 0;\r\n\t        var x0 = 0;\r\n\t        var y0 = 0;\r\n\r\n\t        for (var i = 0; i < data.length;) {\r\n\t            var cmd = data[i++];\r\n\t            // Begin a new subpath\r\n\t            if (cmd === CMD.M && i > 1) {\r\n\t                // Close previous subpath\r\n\t                if (!isStroke) {\r\n\t                    w += windingLine(xi, yi, x0, y0, x, y);\r\n\t                }\r\n\t                // 如果被任何一个 subpath 包含\r\n\t                // if (w !== 0) {\r\n\t                //     return true;\r\n\t                // }\r\n\t            }\r\n\r\n\t            if (i == 1) {\r\n\t                // 如果第一个命令是 L, C, Q\r\n\t                // 则 previous point 同绘制命令的第一个 point\r\n\t                //\r\n\t                // 第一个命令为 Arc 的情况下会在后面特殊处理\r\n\t                xi = data[i];\r\n\t                yi = data[i + 1];\r\n\r\n\t                x0 = xi;\r\n\t                y0 = yi;\r\n\t            }\r\n\r\n\t            switch (cmd) {\r\n\t                case CMD.M:\r\n\t                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\r\n\t                    // 在 closePath 的时候使用\r\n\t                    x0 = data[i++];\r\n\t                    y0 = data[i++];\r\n\t                    xi = x0;\r\n\t                    yi = y0;\r\n\t                    break;\r\n\t                case CMD.L:\r\n\t                    if (isStroke) {\r\n\t                        if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {\r\n\t                            return true;\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN\r\n\t                        w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;\r\n\t                    }\r\n\t                    xi = data[i++];\r\n\t                    yi = data[i++];\r\n\t                    break;\r\n\t                case CMD.C:\r\n\t                    if (isStroke) {\r\n\t                        if (cubic.containStroke(xi, yi,\r\n\t                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\r\n\t                            lineWidth, x, y\r\n\t                        )) {\r\n\t                            return true;\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        w += windingCubic(\r\n\t                            xi, yi,\r\n\t                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\r\n\t                            x, y\r\n\t                        ) || 0;\r\n\t                    }\r\n\t                    xi = data[i++];\r\n\t                    yi = data[i++];\r\n\t                    break;\r\n\t                case CMD.Q:\r\n\t                    if (isStroke) {\r\n\t                        if (quadratic.containStroke(xi, yi,\r\n\t                            data[i++], data[i++], data[i], data[i + 1],\r\n\t                            lineWidth, x, y\r\n\t                        )) {\r\n\t                            return true;\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        w += windingQuadratic(\r\n\t                            xi, yi,\r\n\t                            data[i++], data[i++], data[i], data[i + 1],\r\n\t                            x, y\r\n\t                        ) || 0;\r\n\t                    }\r\n\t                    xi = data[i++];\r\n\t                    yi = data[i++];\r\n\t                    break;\r\n\t                case CMD.A:\r\n\t                    // TODO Arc 判断的开销比较大\r\n\t                    var cx = data[i++];\r\n\t                    var cy = data[i++];\r\n\t                    var rx = data[i++];\r\n\t                    var ry = data[i++];\r\n\t                    var theta = data[i++];\r\n\t                    var dTheta = data[i++];\r\n\t                    // TODO Arc 旋转\r\n\t                    var psi = data[i++];\r\n\t                    var anticlockwise = 1 - data[i++];\r\n\t                    var x1 = Math.cos(theta) * rx + cx;\r\n\t                    var y1 = Math.sin(theta) * ry + cy;\r\n\t                    // 不是直接使用 arc 命令\r\n\t                    if (i > 1) {\r\n\t                        w += windingLine(xi, yi, x1, y1, x, y);\r\n\t                    }\r\n\t                    else {\r\n\t                        // 第一个命令起点还未定义\r\n\t                        x0 = x1;\r\n\t                        y0 = y1;\r\n\t                    }\r\n\t                    // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放\r\n\t                    var _x = (x - cx) * ry / rx + cx;\r\n\t                    if (isStroke) {\r\n\t                        if (arc.containStroke(\r\n\t                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\r\n\t                            lineWidth, _x, y\r\n\t                        )) {\r\n\t                            return true;\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        w += windingArc(\r\n\t                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\r\n\t                            _x, y\r\n\t                        );\r\n\t                    }\r\n\t                    xi = Math.cos(theta + dTheta) * rx + cx;\r\n\t                    yi = Math.sin(theta + dTheta) * ry + cy;\r\n\t                    break;\r\n\t                case CMD.R:\r\n\t                    x0 = xi = data[i++];\r\n\t                    y0 = yi = data[i++];\r\n\t                    var width = data[i++];\r\n\t                    var height = data[i++];\r\n\t                    var x1 = x0 + width;\r\n\t                    var y1 = y0 + height;\r\n\t                    if (isStroke) {\r\n\t                        if (containStroke(x0, y0, x1, y0, lineWidth, x, y)\r\n\t                          || containStroke(x1, y0, x1, y1, lineWidth, x, y)\r\n\t                          || containStroke(x1, y1, x0, y1, lineWidth, x, y)\r\n\t                          || containStroke(x0, y1, x0, y0, lineWidth, x, y)\r\n\t                        ) {\r\n\t                            return true;\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        // FIXME Clockwise ?\r\n\t                        w += windingLine(x1, y0, x1, y1, x, y);\r\n\t                        w += windingLine(x0, y1, x0, y0, x, y);\r\n\t                    }\r\n\t                    break;\r\n\t                case CMD.Z:\r\n\t                    if (isStroke) {\r\n\t                        if (containStroke(\r\n\t                            xi, yi, x0, y0, lineWidth, x, y\r\n\t                        )) {\r\n\t                            return true;\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        // Close a subpath\r\n\t                        w += windingLine(xi, yi, x0, y0, x, y);\r\n\t                        // 如果被任何一个 subpath 包含\r\n\t                        // FIXME subpaths may overlap\r\n\t                        // if (w !== 0) {\r\n\t                        //     return true;\r\n\t                        // }\r\n\t                    }\r\n\t                    xi = x0;\r\n\t                    yi = y0;\r\n\t                    break;\r\n\t            }\r\n\t        }\r\n\t        if (!isStroke && !isAroundEqual(yi, y0)) {\r\n\t            w += windingLine(xi, yi, x0, y0, x, y) || 0;\r\n\t        }\r\n\t        return w !== 0;\r\n\t    }\r\n\r\n\t    module.exports = {\r\n\t        contain: function (pathData, x, y) {\r\n\t            return containPath(pathData, 0, false, x, y);\r\n\t        },\r\n\r\n\t        containStroke: function (pathData, lineWidth, x, y) {\r\n\t            return containPath(pathData, lineWidth, true, x, y);\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 53 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\t    module.exports = {\r\n\t        /**\r\n\t         * 线段包含判断\r\n\t         * @param  {number}  x0\r\n\t         * @param  {number}  y0\r\n\t         * @param  {number}  x1\r\n\t         * @param  {number}  y1\r\n\t         * @param  {number}  lineWidth\r\n\t         * @param  {number}  x\r\n\t         * @param  {number}  y\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {\r\n\t            if (lineWidth === 0) {\r\n\t                return false;\r\n\t            }\r\n\t            var _l = lineWidth;\r\n\t            var _a = 0;\r\n\t            var _b = x0;\r\n\t            // Quick reject\r\n\t            if (\r\n\t                (y > y0 + _l && y > y1 + _l)\r\n\t                || (y < y0 - _l && y < y1 - _l)\r\n\t                || (x > x0 + _l && x > x1 + _l)\r\n\t                || (x < x0 - _l && x < x1 - _l)\r\n\t            ) {\r\n\t                return false;\r\n\t            }\r\n\r\n\t            if (x0 !== x1) {\r\n\t                _a = (y0 - y1) / (x0 - x1);\r\n\t                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;\r\n\t            }\r\n\t            else {\r\n\t                return Math.abs(x - x0) <= _l / 2;\r\n\t            }\r\n\t            var tmp = _a * x - y + _b;\r\n\t            var _s = tmp * tmp / (_a * _a + 1);\r\n\t            return _s <= _l / 2 * _l / 2;\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 54 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var curve = __webpack_require__(50);\r\n\r\n\t    module.exports = {\r\n\t        /**\r\n\t         * 三次贝塞尔曲线描边包含判断\r\n\t         * @param  {number}  x0\r\n\t         * @param  {number}  y0\r\n\t         * @param  {number}  x1\r\n\t         * @param  {number}  y1\r\n\t         * @param  {number}  x2\r\n\t         * @param  {number}  y2\r\n\t         * @param  {number}  x3\r\n\t         * @param  {number}  y3\r\n\t         * @param  {number}  lineWidth\r\n\t         * @param  {number}  x\r\n\t         * @param  {number}  y\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        containStroke: function(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {\r\n\t            if (lineWidth === 0) {\r\n\t                return false;\r\n\t            }\r\n\t            var _l = lineWidth;\r\n\t            // Quick reject\r\n\t            if (\r\n\t                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)\r\n\t                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)\r\n\t                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)\r\n\t                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)\r\n\t            ) {\r\n\t                return false;\r\n\t            }\r\n\t            var d = curve.cubicProjectPoint(\r\n\t                x0, y0, x1, y1, x2, y2, x3, y3,\r\n\t                x, y, null\r\n\t            );\r\n\t            return d <= _l / 2;\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 55 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var curve = __webpack_require__(50);\r\n\r\n\t    module.exports = {\r\n\t        /**\r\n\t         * 二次贝塞尔曲线描边包含判断\r\n\t         * @param  {number}  x0\r\n\t         * @param  {number}  y0\r\n\t         * @param  {number}  x1\r\n\t         * @param  {number}  y1\r\n\t         * @param  {number}  x2\r\n\t         * @param  {number}  y2\r\n\t         * @param  {number}  lineWidth\r\n\t         * @param  {number}  x\r\n\t         * @param  {number}  y\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {\r\n\t            if (lineWidth === 0) {\r\n\t                return false;\r\n\t            }\r\n\t            var _l = lineWidth;\r\n\t            // Quick reject\r\n\t            if (\r\n\t                (y > y0 + _l && y > y1 + _l && y > y2 + _l)\r\n\t                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)\r\n\t                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)\r\n\t                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)\r\n\t            ) {\r\n\t                return false;\r\n\t            }\r\n\t            var d = curve.quadraticProjectPoint(\r\n\t                x0, y0, x1, y1, x2, y2,\r\n\t                x, y, null\r\n\t            );\r\n\t            return d <= _l / 2;\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 56 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var normalizeRadian = __webpack_require__(57).normalizeRadian;\r\n\t    var PI2 = Math.PI * 2;\r\n\r\n\t    module.exports = {\r\n\t        /**\r\n\t         * 圆弧描边包含判断\r\n\t         * @param  {number}  cx\r\n\t         * @param  {number}  cy\r\n\t         * @param  {number}  r\r\n\t         * @param  {number}  startAngle\r\n\t         * @param  {number}  endAngle\r\n\t         * @param  {boolean}  anticlockwise\r\n\t         * @param  {number} lineWidth\r\n\t         * @param  {number}  x\r\n\t         * @param  {number}  y\r\n\t         * @return {Boolean}\r\n\t         */\r\n\t        containStroke: function (\r\n\t            cx, cy, r, startAngle, endAngle, anticlockwise,\r\n\t            lineWidth, x, y\r\n\t        ) {\r\n\r\n\t            if (lineWidth === 0) {\r\n\t                return false;\r\n\t            }\r\n\t            var _l = lineWidth;\r\n\r\n\t            x -= cx;\r\n\t            y -= cy;\r\n\t            var d = Math.sqrt(x * x + y * y);\r\n\r\n\t            if ((d - _l > r) || (d + _l < r)) {\r\n\t                return false;\r\n\t            }\r\n\t            if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {\r\n\t                // Is a circle\r\n\t                return true;\r\n\t            }\r\n\t            if (anticlockwise) {\r\n\t                var tmp = startAngle;\r\n\t                startAngle = normalizeRadian(endAngle);\r\n\t                endAngle = normalizeRadian(tmp);\r\n\t            } else {\r\n\t                startAngle = normalizeRadian(startAngle);\r\n\t                endAngle = normalizeRadian(endAngle);\r\n\t            }\r\n\t            if (startAngle > endAngle) {\r\n\t                endAngle += PI2;\r\n\t            }\r\n\r\n\t            var angle = Math.atan2(y, x);\r\n\t            if (angle < 0) {\r\n\t                angle += PI2;\r\n\t            }\r\n\t            return (angle >= startAngle && angle <= endAngle)\r\n\t                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 57 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    var PI2 = Math.PI * 2;\r\n\t    module.exports = {\r\n\t        normalizeRadian: function(angle) {\r\n\t            angle %= PI2;\r\n\t            if (angle < 0) {\r\n\t                angle += PI2;\r\n\t            }\r\n\t            return angle;\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 58 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\t    module.exports = function windingLine(x0, y0, x1, y1, x, y) {\r\n\t        if ((y > y0 && y > y1) || (y < y0 && y < y1)) {\r\n\t            return 0;\r\n\t        }\r\n\t        // Ignore horizontal line\r\n\t        if (y1 === y0) {\r\n\t            return 0;\r\n\t        }\r\n\t        var dir = y1 < y0 ? 1 : -1;\r\n\t        var t = (y - y0) / (y1 - y0);\r\n\r\n\t        // Avoid winding error when intersection point is the connect point of two line of polygon\r\n\t        if (t === 1 || t === 0) {\r\n\t            dir = y1 < y0 ? 0.5 : -0.5;\r\n\t        }\r\n\r\n\t        var x_ = t * (x1 - x0) + x0;\r\n\r\n\t        return x_ > x ? dir : 0;\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 59 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    var Pattern = function (image, repeat) {\r\n\t        this.image = image;\r\n\t        this.repeat = repeat;\r\n\r\n\t        // Can be cloned\r\n\t        this.type = 'pattern';\r\n\t    };\r\n\r\n\t    Pattern.prototype.getCanvasPattern = function (ctx) {\r\n\r\n\t        return this._canvasPattern\r\n\t            || (this._canvasPattern = ctx.createPattern(this.image, this.repeat));\r\n\t    };\r\n\r\n\t    module.exports = Pattern;\r\n\r\n\r\n/***/ },\r\n/* 60 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var CMD = __webpack_require__(49).CMD;\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    var v2ApplyTransform = vec2.applyTransform;\r\n\r\n\t    var points = [[], [], []];\r\n\t    var mathSqrt = Math.sqrt;\r\n\t    var mathAtan2 = Math.atan2;\r\n\t    function transformPath(path, m) {\r\n\t        var data = path.data;\r\n\t        var cmd;\r\n\t        var nPoint;\r\n\t        var i;\r\n\t        var j;\r\n\t        var k;\r\n\t        var p;\r\n\r\n\t        var M = CMD.M;\r\n\t        var C = CMD.C;\r\n\t        var L = CMD.L;\r\n\t        var R = CMD.R;\r\n\t        var A = CMD.A;\r\n\t        var Q = CMD.Q;\r\n\r\n\t        for (i = 0, j = 0; i < data.length;) {\r\n\t            cmd = data[i++];\r\n\t            j = i;\r\n\t            nPoint = 0;\r\n\r\n\t            switch (cmd) {\r\n\t                case M:\r\n\t                    nPoint = 1;\r\n\t                    break;\r\n\t                case L:\r\n\t                    nPoint = 1;\r\n\t                    break;\r\n\t                case C:\r\n\t                    nPoint = 3;\r\n\t                    break;\r\n\t                case Q:\r\n\t                    nPoint = 2;\r\n\t                    break;\r\n\t                case A:\r\n\t                    var x = m[4];\r\n\t                    var y = m[5];\r\n\t                    var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);\r\n\t                    var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);\r\n\t                    var angle = mathAtan2(-m[1] / sy, m[0] / sx);\r\n\t                    // cx\r\n\t                    data[i++] += x;\r\n\t                    // cy\r\n\t                    data[i++] += y;\r\n\t                    // Scale rx and ry\r\n\t                    // FIXME Assume psi is 0 here\r\n\t                    data[i++] *= sx;\r\n\t                    data[i++] *= sy;\r\n\r\n\t                    // Start angle\r\n\t                    data[i++] += angle;\r\n\t                    // end angle\r\n\t                    data[i++] += angle;\r\n\t                    // FIXME psi\r\n\t                    i += 2;\r\n\t                    j = i;\r\n\t                    break;\r\n\t                case R:\r\n\t                    // x0, y0\r\n\t                    p[0] = data[i++];\r\n\t                    p[1] = data[i++];\r\n\t                    v2ApplyTransform(p, p, m);\r\n\t                    data[j++] = p[0];\r\n\t                    data[j++] = p[1];\r\n\t                    // x1, y1\r\n\t                    p[0] += data[i++];\r\n\t                    p[1] += data[i++];\r\n\t                    v2ApplyTransform(p, p, m);\r\n\t                    data[j++] = p[0];\r\n\t                    data[j++] = p[1];\r\n\t            }\r\n\r\n\t            for (k = 0; k < nPoint; k++) {\r\n\t                var p = points[k];\r\n\t                p[0] = data[i++];\r\n\t                p[1] = data[i++];\r\n\r\n\t                v2ApplyTransform(p, p, m);\r\n\t                // Write back\r\n\t                data[j++] = p[0];\r\n\t                data[j++] = p[1];\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    module.exports = transformPath;\r\n\r\n\r\n/***/ },\r\n/* 61 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    /**\r\n\t     * @param {Array.<Object>} colorStops\r\n\t     */\r\n\t    var Gradient = function (colorStops) {\r\n\r\n\t        this.colorStops = colorStops || [];\r\n\t    };\r\n\r\n\t    Gradient.prototype = {\r\n\r\n\t        constructor: Gradient,\r\n\r\n\t        addColorStop: function (offset, color) {\r\n\t            this.colorStops.push({\r\n\r\n\t                offset: offset,\r\n\r\n\t                color: color\r\n\t            });\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = Gradient;\r\n\r\n\r\n/***/ },\r\n/* 62 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Image element\r\n\t * @module zrender/graphic/Image\r\n\t */\r\n\r\n\r\n\r\n\t    var Displayable = __webpack_require__(46);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var LRU = __webpack_require__(63);\r\n\t    var globalImageCache = new LRU(50);\r\n\t    /**\r\n\t     * @alias zrender/graphic/Image\r\n\t     * @extends module:zrender/graphic/Displayable\r\n\t     * @constructor\r\n\t     * @param {Object} opts\r\n\t     */\r\n\t    function ZImage(opts) {\r\n\t        Displayable.call(this, opts);\r\n\t    }\r\n\r\n\t    ZImage.prototype = {\r\n\r\n\t        constructor: ZImage,\r\n\r\n\t        type: 'image',\r\n\r\n\t        brush: function (ctx, prevEl) {\r\n\t            var style = this.style;\r\n\t            var src = style.image;\r\n\t            var image;\r\n\r\n\t            // Must bind each time\r\n\t            style.bind(ctx, this, prevEl);\r\n\t            // style.image is a url string\r\n\t            if (typeof src === 'string') {\r\n\t                image = this._image;\r\n\t            }\r\n\t            // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas\r\n\t            else {\r\n\t                image = src;\r\n\t            }\r\n\t            // FIXME Case create many images with src\r\n\t            if (!image && src) {\r\n\t                // Try get from global image cache\r\n\t                var cachedImgObj = globalImageCache.get(src);\r\n\t                if (!cachedImgObj) {\r\n\t                    // Create a new image\r\n\t                    image = new Image();\r\n\t                    image.onload = function () {\r\n\t                        image.onload = null;\r\n\t                        for (var i = 0; i < cachedImgObj.pending.length; i++) {\r\n\t                            cachedImgObj.pending[i].dirty();\r\n\t                        }\r\n\t                    };\r\n\t                    cachedImgObj = {\r\n\t                        image: image,\r\n\t                        pending: [this]\r\n\t                    };\r\n\t                    image.src = src;\r\n\t                    globalImageCache.put(src, cachedImgObj);\r\n\t                    this._image = image;\r\n\t                    return;\r\n\t                }\r\n\t                else {\r\n\t                    image = cachedImgObj.image;\r\n\t                    this._image = image;\r\n\t                    // Image is not complete finish, add to pending list\r\n\t                    if (!image.width || !image.height) {\r\n\t                        cachedImgObj.pending.push(this);\r\n\t                        return;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            if (image) {\r\n\t                // 图片已经加载完成\r\n\t                // if (image.nodeName.toUpperCase() == 'IMG') {\r\n\t                //     if (!image.complete) {\r\n\t                //         return;\r\n\t                //     }\r\n\t                // }\r\n\t                // Else is canvas\r\n\r\n\t                var width = style.width || image.width;\r\n\t                var height = style.height || image.height;\r\n\t                var x = style.x || 0;\r\n\t                var y = style.y || 0;\r\n\t                // 图片加载失败\r\n\t                if (!image.width || !image.height) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                // 设置transform\r\n\t                this.setTransform(ctx);\r\n\r\n\r\n\t                if (style.sWidth && style.sHeight) {\r\n\t                    var sx = style.sx || 0;\r\n\t                    var sy = style.sy || 0;\r\n\t                    ctx.drawImage(\r\n\t                        image,\r\n\t                        sx, sy, style.sWidth, style.sHeight,\r\n\t                        x, y, width, height\r\n\t                    );\r\n\t                }\r\n\t                else if (style.sx && style.sy) {\r\n\t                    var sx = style.sx;\r\n\t                    var sy = style.sy;\r\n\t                    var sWidth = width - sx;\r\n\t                    var sHeight = height - sy;\r\n\t                    ctx.drawImage(\r\n\t                        image,\r\n\t                        sx, sy, sWidth, sHeight,\r\n\t                        x, y, width, height\r\n\t                    );\r\n\t                }\r\n\t                else {\r\n\t                    ctx.drawImage(image, x, y, width, height);\r\n\t                }\r\n\r\n\t                // 如果没设置宽和高的话自动根据图片宽高设置\r\n\t                if (style.width == null) {\r\n\t                    style.width = width;\r\n\t                }\r\n\t                if (style.height == null) {\r\n\t                    style.height = height;\r\n\t                }\r\n\r\n\t                this.restoreTransform(ctx);\r\n\r\n\t                // Draw rect text\r\n\t                if (style.text != null) {\r\n\t                    this.drawRectText(ctx, this.getBoundingRect());\r\n\t                }\r\n\r\n\t            }\r\n\t        },\r\n\r\n\t        getBoundingRect: function () {\r\n\t            var style = this.style;\r\n\t            if (! this._rect) {\r\n\t                this._rect = new BoundingRect(\r\n\t                    style.x || 0, style.y || 0, style.width || 0, style.height || 0\r\n\t                );\r\n\t            }\r\n\t            return this._rect;\r\n\t        }\r\n\t    };\r\n\r\n\t    zrUtil.inherits(ZImage, Displayable);\r\n\r\n\t    module.exports = ZImage;\r\n\r\n\r\n/***/ },\r\n/* 63 */\r\n/***/ function(module, exports) {\r\n\r\n\t// Simple LRU cache use doubly linked list\r\n\t// @module zrender/core/LRU\r\n\r\n\r\n\t    /**\r\n\t     * Simple double linked list. Compared with array, it has O(1) remove operation.\r\n\t     * @constructor\r\n\t     */\r\n\t    var LinkedList = function() {\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/core/LRU~Entry}\r\n\t         */\r\n\t        this.head = null;\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/core/LRU~Entry}\r\n\t         */\r\n\t        this.tail = null;\r\n\r\n\t        this._len = 0;\r\n\t    };\r\n\r\n\t    var linkedListProto = LinkedList.prototype;\r\n\t    /**\r\n\t     * Insert a new value at the tail\r\n\t     * @param  {} val\r\n\t     * @return {module:zrender/core/LRU~Entry}\r\n\t     */\r\n\t    linkedListProto.insert = function(val) {\r\n\t        var entry = new Entry(val);\r\n\t        this.insertEntry(entry);\r\n\t        return entry;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Insert an entry at the tail\r\n\t     * @param  {module:zrender/core/LRU~Entry} entry\r\n\t     */\r\n\t    linkedListProto.insertEntry = function(entry) {\r\n\t        if (!this.head) {\r\n\t            this.head = this.tail = entry;\r\n\t        }\r\n\t        else {\r\n\t            this.tail.next = entry;\r\n\t            entry.prev = this.tail;\r\n\t            this.tail = entry;\r\n\t        }\r\n\t        this._len++;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Remove entry.\r\n\t     * @param  {module:zrender/core/LRU~Entry} entry\r\n\t     */\r\n\t    linkedListProto.remove = function(entry) {\r\n\t        var prev = entry.prev;\r\n\t        var next = entry.next;\r\n\t        if (prev) {\r\n\t            prev.next = next;\r\n\t        }\r\n\t        else {\r\n\t            // Is head\r\n\t            this.head = next;\r\n\t        }\r\n\t        if (next) {\r\n\t            next.prev = prev;\r\n\t        }\r\n\t        else {\r\n\t            // Is tail\r\n\t            this.tail = prev;\r\n\t        }\r\n\t        entry.next = entry.prev = null;\r\n\t        this._len--;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @return {number}\r\n\t     */\r\n\t    linkedListProto.len = function() {\r\n\t        return this._len;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @param {} val\r\n\t     */\r\n\t    var Entry = function(val) {\r\n\t        /**\r\n\t         * @type {}\r\n\t         */\r\n\t        this.value = val;\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/core/LRU~Entry}\r\n\t         */\r\n\t        this.next;\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/core/LRU~Entry}\r\n\t         */\r\n\t        this.prev;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * LRU Cache\r\n\t     * @constructor\r\n\t     * @alias module:zrender/core/LRU\r\n\t     */\r\n\t    var LRU = function(maxSize) {\r\n\r\n\t        this._list = new LinkedList();\r\n\r\n\t        this._map = {};\r\n\r\n\t        this._maxSize = maxSize || 10;\r\n\t    };\r\n\r\n\t    var LRUProto = LRU.prototype;\r\n\r\n\t    /**\r\n\t     * @param  {string} key\r\n\t     * @param  {} value\r\n\t     */\r\n\t    LRUProto.put = function(key, value) {\r\n\t        var list = this._list;\r\n\t        var map = this._map;\r\n\t        if (map[key] == null) {\r\n\t            var len = list.len();\r\n\t            if (len >= this._maxSize && len > 0) {\r\n\t                // Remove the least recently used\r\n\t                var leastUsedEntry = list.head;\r\n\t                list.remove(leastUsedEntry);\r\n\t                delete map[leastUsedEntry.key];\r\n\t            }\r\n\r\n\t            var entry = list.insert(value);\r\n\t            entry.key = key;\r\n\t            map[key] = entry;\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param  {string} key\r\n\t     * @return {}\r\n\t     */\r\n\t    LRUProto.get = function(key) {\r\n\t        var entry = this._map[key];\r\n\t        var list = this._list;\r\n\t        if (entry != null) {\r\n\t            // Put the latest used entry in the tail\r\n\t            if (entry !== list.tail) {\r\n\t                list.remove(entry);\r\n\t                list.insertEntry(entry);\r\n\t            }\r\n\r\n\t            return entry.value;\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Clear the cache\r\n\t     */\r\n\t    LRUProto.clear = function() {\r\n\t        this._list.clear();\r\n\t        this._map = {};\r\n\t    };\r\n\r\n\t    module.exports = LRU;\r\n\r\n\r\n/***/ },\r\n/* 64 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Text element\r\n\t * @module zrender/graphic/Text\r\n\t *\r\n\t * TODO Wrapping\r\n\t *\r\n\t * Text not support gradient\r\n\t */\r\n\r\n\r\n\r\n\t    var Displayable = __webpack_require__(46);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var textContain = __webpack_require__(8);\r\n\r\n\t    /**\r\n\t     * @alias zrender/graphic/Text\r\n\t     * @extends module:zrender/graphic/Displayable\r\n\t     * @constructor\r\n\t     * @param {Object} opts\r\n\t     */\r\n\t    var Text = function (opts) {\r\n\t        Displayable.call(this, opts);\r\n\t    };\r\n\r\n\t    Text.prototype = {\r\n\r\n\t        constructor: Text,\r\n\r\n\t        type: 'text',\r\n\r\n\t        brush: function (ctx, prevEl) {\r\n\t            var style = this.style;\r\n\t            var x = style.x || 0;\r\n\t            var y = style.y || 0;\r\n\t            // Convert to string\r\n\t            var text = style.text;\r\n\r\n\t            // Convert to string\r\n\t            text != null && (text += '');\r\n\r\n\t            // Always bind style\r\n\t            style.bind(ctx, this, prevEl);\r\n\r\n\t            if (text) {\r\n\r\n\t                this.setTransform(ctx);\r\n\r\n\t                var textBaseline;\r\n\t                var textAlign = style.textAlign;\r\n\t                var font = style.textFont || style.font;\r\n\t                if (style.textVerticalAlign) {\r\n\t                    var rect = textContain.getBoundingRect(\r\n\t                        text, font, style.textAlign, 'top'\r\n\t                    );\r\n\t                    // Ignore textBaseline\r\n\t                    textBaseline = 'middle';\r\n\t                    switch (style.textVerticalAlign) {\r\n\t                        case 'middle':\r\n\t                            y -= rect.height / 2 - rect.lineHeight / 2;\r\n\t                            break;\r\n\t                        case 'bottom':\r\n\t                            y -= rect.height - rect.lineHeight / 2;\r\n\t                            break;\r\n\t                        default:\r\n\t                            y += rect.lineHeight / 2;\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    textBaseline = style.textBaseline;\r\n\t                }\r\n\r\n\t                // TODO Invalid font\r\n\t                ctx.font = font || '12px sans-serif';\r\n\t                ctx.textAlign = textAlign || 'left';\r\n\t                // Use canvas default left textAlign. Giving invalid value will cause state not change\r\n\t                if (ctx.textAlign !== textAlign) {\r\n\t                    ctx.textAlign = 'left';\r\n\t                }\r\n\t                ctx.textBaseline = textBaseline || 'alphabetic';\r\n\t                // Use canvas default alphabetic baseline\r\n\t                if (ctx.textBaseline !== textBaseline) {\r\n\t                    ctx.textBaseline = 'alphabetic';\r\n\t                }\r\n\r\n\t                var lineHeight = textContain.measureText('国', ctx.font).width;\r\n\r\n\t                var textLines = text.split('\\n');\r\n\t                for (var i = 0; i < textLines.length; i++) {\r\n\t                    style.hasFill() && ctx.fillText(textLines[i], x, y);\r\n\t                    style.hasStroke() && ctx.strokeText(textLines[i], x, y);\r\n\t                    y += lineHeight;\r\n\t                }\r\n\r\n\t                this.restoreTransform(ctx);\r\n\t            }\r\n\t        },\r\n\r\n\t        getBoundingRect: function () {\r\n\t            if (!this._rect) {\r\n\t                var style = this.style;\r\n\t                var textVerticalAlign = style.textVerticalAlign;\r\n\t                var rect = textContain.getBoundingRect(\r\n\t                    style.text + '', style.textFont || style.font, style.textAlign,\r\n\t                    textVerticalAlign ? 'top' : style.textBaseline\r\n\t                );\r\n\t                switch (textVerticalAlign) {\r\n\t                    case 'middle':\r\n\t                        rect.y -= rect.height / 2;\r\n\t                        break;\r\n\t                    case 'bottom':\r\n\t                        rect.y -= rect.height;\r\n\t                        break;\r\n\t                }\r\n\t                rect.x += style.x || 0;\r\n\t                rect.y += style.y || 0;\r\n\t                this._rect = rect;\r\n\t            }\r\n\t            return this._rect;\r\n\t        }\r\n\t    };\r\n\r\n\t    zrUtil.inherits(Text, Displayable);\r\n\r\n\t    module.exports = Text;\r\n\r\n\r\n/***/ },\r\n/* 65 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * 圆形\r\n\t * @module zrender/shape/Circle\r\n\t */\r\n\r\n\r\n\r\n\t    module.exports = __webpack_require__(45).extend({\r\n\r\n\t        type: 'circle',\r\n\r\n\t        shape: {\r\n\t            cx: 0,\r\n\t            cy: 0,\r\n\t            r: 0\r\n\t        },\r\n\r\n\r\n\t        buildPath : function (ctx, shape, inBundle) {\r\n\t            // Better stroking in ShapeBundle\r\n\t            // Always do it may have performence issue ( fill may be 2x more cost)\r\n\t            if (inBundle) {\r\n\t                ctx.moveTo(shape.cx + shape.r, shape.cy);\r\n\t            }\r\n\t            // Better stroking in ShapeBundle\r\n\t            // ctx.moveTo(shape.cx + shape.r, shape.cy);\r\n\t            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);\r\n\t        }\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 66 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * 扇形\r\n\t * @module zrender/graphic/shape/Sector\r\n\t */\r\n\r\n\r\n\r\n\t    module.exports = __webpack_require__(45).extend({\r\n\r\n\t        type: 'sector',\r\n\r\n\t        shape: {\r\n\r\n\t            cx: 0,\r\n\r\n\t            cy: 0,\r\n\r\n\t            r0: 0,\r\n\r\n\t            r: 0,\r\n\r\n\t            startAngle: 0,\r\n\r\n\t            endAngle: Math.PI * 2,\r\n\r\n\t            clockwise: true\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\r\n\t            var x = shape.cx;\r\n\t            var y = shape.cy;\r\n\t            var r0 = Math.max(shape.r0 || 0, 0);\r\n\t            var r = Math.max(shape.r, 0);\r\n\t            var startAngle = shape.startAngle;\r\n\t            var endAngle = shape.endAngle;\r\n\t            var clockwise = shape.clockwise;\r\n\r\n\t            var unitX = Math.cos(startAngle);\r\n\t            var unitY = Math.sin(startAngle);\r\n\r\n\t            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);\r\n\r\n\t            ctx.lineTo(unitX * r + x, unitY * r + y);\r\n\r\n\t            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\r\n\r\n\t            ctx.lineTo(\r\n\t                Math.cos(endAngle) * r0 + x,\r\n\t                Math.sin(endAngle) * r0 + y\r\n\t            );\r\n\r\n\t            if (r0 !== 0) {\r\n\t                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);\r\n\t            }\r\n\r\n\t            ctx.closePath();\r\n\t        }\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 67 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * 圆环\r\n\t * @module zrender/graphic/shape/Ring\r\n\t */\r\n\r\n\r\n\t    module.exports = __webpack_require__(45).extend({\r\n\r\n\t        type: 'ring',\r\n\r\n\t        shape: {\r\n\t            cx: 0,\r\n\t            cy: 0,\r\n\t            r: 0,\r\n\t            r0: 0\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\t            var x = shape.cx;\r\n\t            var y = shape.cy;\r\n\t            var PI2 = Math.PI * 2;\r\n\t            ctx.moveTo(x + shape.r, y);\r\n\t            ctx.arc(x, y, shape.r, 0, PI2, false);\r\n\t            ctx.moveTo(x + shape.r0, y);\r\n\t            ctx.arc(x, y, shape.r0, 0, PI2, true);\r\n\t        }\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 68 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * 多边形\r\n\t * @module zrender/shape/Polygon\r\n\t */\r\n\r\n\r\n\t    var polyHelper = __webpack_require__(69);\r\n\r\n\t    module.exports = __webpack_require__(45).extend({\r\n\t        \r\n\t        type: 'polygon',\r\n\r\n\t        shape: {\r\n\t            points: null,\r\n\r\n\t            smooth: false,\r\n\r\n\t            smoothConstraint: null\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\t            polyHelper.buildPath(ctx, shape, true);\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 69 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var smoothSpline = __webpack_require__(70);\r\n\t    var smoothBezier = __webpack_require__(71);\r\n\r\n\t    module.exports = {\r\n\t        buildPath: function (ctx, shape, closePath) {\r\n\t            var points = shape.points;\r\n\t            var smooth = shape.smooth;\r\n\t            if (points && points.length >= 2) {\r\n\t                if (smooth && smooth !== 'spline') {\r\n\t                    var controlPoints = smoothBezier(\r\n\t                        points, smooth, closePath, shape.smoothConstraint\r\n\t                    );\r\n\r\n\t                    ctx.moveTo(points[0][0], points[0][1]);\r\n\t                    var len = points.length;\r\n\t                    for (var i = 0; i < (closePath ? len : len - 1); i++) {\r\n\t                        var cp1 = controlPoints[i * 2];\r\n\t                        var cp2 = controlPoints[i * 2 + 1];\r\n\t                        var p = points[(i + 1) % len];\r\n\t                        ctx.bezierCurveTo(\r\n\t                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]\r\n\t                        );\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    if (smooth === 'spline') {\r\n\t                        points = smoothSpline(points, closePath);\r\n\t                    }\r\n\r\n\t                    ctx.moveTo(points[0][0], points[0][1]);\r\n\t                    for (var i = 1, l = points.length; i < l; i++) {\r\n\t                        ctx.lineTo(points[i][0], points[i][1]);\r\n\t                    }\r\n\t                }\r\n\r\n\t                closePath && ctx.closePath();\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 70 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Catmull-Rom spline 插值折线\r\n\t * @module zrender/shape/util/smoothSpline\r\n\t * @author pissang (https://www.github.com/pissang)\r\n\t *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\r\n\t *         errorrik (errorrik@gmail.com)\r\n\t */\r\n\r\n\t    var vec2 = __webpack_require__(10);\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function interpolate(p0, p1, p2, p3, t, t2, t3) {\r\n\t        var v0 = (p2 - p0) * 0.5;\r\n\t        var v1 = (p3 - p1) * 0.5;\r\n\t        return (2 * (p1 - p2) + v0 + v1) * t3\r\n\t                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\r\n\t                + v0 * t + p1;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @alias module:zrender/shape/util/smoothSpline\r\n\t     * @param {Array} points 线段顶点数组\r\n\t     * @param {boolean} isLoop\r\n\t     * @return {Array}\r\n\t     */\r\n\t    module.exports = function (points, isLoop) {\r\n\t        var len = points.length;\r\n\t        var ret = [];\r\n\r\n\t        var distance = 0;\r\n\t        for (var i = 1; i < len; i++) {\r\n\t            distance += vec2.distance(points[i - 1], points[i]);\r\n\t        }\r\n\r\n\t        var segs = distance / 2;\r\n\t        segs = segs < len ? len : segs;\r\n\t        for (var i = 0; i < segs; i++) {\r\n\t            var pos = i / (segs - 1) * (isLoop ? len : len - 1);\r\n\t            var idx = Math.floor(pos);\r\n\r\n\t            var w = pos - idx;\r\n\r\n\t            var p0;\r\n\t            var p1 = points[idx % len];\r\n\t            var p2;\r\n\t            var p3;\r\n\t            if (!isLoop) {\r\n\t                p0 = points[idx === 0 ? idx : idx - 1];\r\n\t                p2 = points[idx > len - 2 ? len - 1 : idx + 1];\r\n\t                p3 = points[idx > len - 3 ? len - 1 : idx + 2];\r\n\t            }\r\n\t            else {\r\n\t                p0 = points[(idx - 1 + len) % len];\r\n\t                p2 = points[(idx + 1) % len];\r\n\t                p3 = points[(idx + 2) % len];\r\n\t            }\r\n\r\n\t            var w2 = w * w;\r\n\t            var w3 = w * w2;\r\n\r\n\t            ret.push([\r\n\t                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),\r\n\t                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)\r\n\t            ]);\r\n\t        }\r\n\t        return ret;\r\n\t    };\r\n\r\n\r\n\r\n/***/ },\r\n/* 71 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * 贝塞尔平滑曲线\r\n\t * @module zrender/shape/util/smoothBezier\r\n\t * @author pissang (https://www.github.com/pissang)\r\n\t *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\r\n\t *         errorrik (errorrik@gmail.com)\r\n\t */\r\n\r\n\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    var v2Min = vec2.min;\r\n\t    var v2Max = vec2.max;\r\n\t    var v2Scale = vec2.scale;\r\n\t    var v2Distance = vec2.distance;\r\n\t    var v2Add = vec2.add;\r\n\r\n\t    /**\r\n\t     * 贝塞尔平滑曲线\r\n\t     * @alias module:zrender/shape/util/smoothBezier\r\n\t     * @param {Array} points 线段顶点数组\r\n\t     * @param {number} smooth 平滑等级, 0-1\r\n\t     * @param {boolean} isLoop\r\n\t     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内\r\n\t     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与\r\n\t     *                           整个折线的包围盒做一个并集用来约束控制点。\r\n\t     * @param {Array} 计算出来的控制点数组\r\n\t     */\r\n\t    module.exports = function (points, smooth, isLoop, constraint) {\r\n\t        var cps = [];\r\n\r\n\t        var v = [];\r\n\t        var v1 = [];\r\n\t        var v2 = [];\r\n\t        var prevPoint;\r\n\t        var nextPoint;\r\n\r\n\t        var min, max;\r\n\t        if (constraint) {\r\n\t            min = [Infinity, Infinity];\r\n\t            max = [-Infinity, -Infinity];\r\n\t            for (var i = 0, len = points.length; i < len; i++) {\r\n\t                v2Min(min, min, points[i]);\r\n\t                v2Max(max, max, points[i]);\r\n\t            }\r\n\t            // 与指定的包围盒做并集\r\n\t            v2Min(min, min, constraint[0]);\r\n\t            v2Max(max, max, constraint[1]);\r\n\t        }\r\n\r\n\t        for (var i = 0, len = points.length; i < len; i++) {\r\n\t            var point = points[i];\r\n\r\n\t            if (isLoop) {\r\n\t                prevPoint = points[i ? i - 1 : len - 1];\r\n\t                nextPoint = points[(i + 1) % len];\r\n\t            }\r\n\t            else {\r\n\t                if (i === 0 || i === len - 1) {\r\n\t                    cps.push(vec2.clone(points[i]));\r\n\t                    continue;\r\n\t                }\r\n\t                else {\r\n\t                    prevPoint = points[i - 1];\r\n\t                    nextPoint = points[i + 1];\r\n\t                }\r\n\t            }\r\n\r\n\t            vec2.sub(v, nextPoint, prevPoint);\r\n\r\n\t            // use degree to scale the handle length\r\n\t            v2Scale(v, v, smooth);\r\n\r\n\t            var d0 = v2Distance(point, prevPoint);\r\n\t            var d1 = v2Distance(point, nextPoint);\r\n\t            var sum = d0 + d1;\r\n\t            if (sum !== 0) {\r\n\t                d0 /= sum;\r\n\t                d1 /= sum;\r\n\t            }\r\n\r\n\t            v2Scale(v1, v, -d0);\r\n\t            v2Scale(v2, v, d1);\r\n\t            var cp0 = v2Add([], point, v1);\r\n\t            var cp1 = v2Add([], point, v2);\r\n\t            if (constraint) {\r\n\t                v2Max(cp0, cp0, min);\r\n\t                v2Min(cp0, cp0, max);\r\n\t                v2Max(cp1, cp1, min);\r\n\t                v2Min(cp1, cp1, max);\r\n\t            }\r\n\t            cps.push(cp0);\r\n\t            cps.push(cp1);\r\n\t        }\r\n\r\n\t        if (isLoop) {\r\n\t            cps.push(cps.shift());\r\n\t        }\r\n\r\n\t        return cps;\r\n\t    };\r\n\r\n\r\n\r\n/***/ },\r\n/* 72 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module zrender/graphic/shape/Polyline\r\n\t */\r\n\r\n\r\n\t    var polyHelper = __webpack_require__(69);\r\n\r\n\t    module.exports = __webpack_require__(45).extend({\r\n\t        \r\n\t        type: 'polyline',\r\n\r\n\t        shape: {\r\n\t            points: null,\r\n\r\n\t            smooth: false,\r\n\r\n\t            smoothConstraint: null\r\n\t        },\r\n\r\n\t        style: {\r\n\t            stroke: '#000',\r\n\r\n\t            fill: null\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\t            polyHelper.buildPath(ctx, shape, false);\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 73 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * 矩形\r\n\t * @module zrender/graphic/shape/Rect\r\n\t */\r\n\r\n\r\n\t    var roundRectHelper = __webpack_require__(74);\r\n\r\n\t    module.exports = __webpack_require__(45).extend({\r\n\r\n\t        type: 'rect',\r\n\r\n\t        shape: {\r\n\t            // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4\r\n\t            // r缩写为1         相当于 [1, 1, 1, 1]\r\n\t            // r缩写为[1]       相当于 [1, 1, 1, 1]\r\n\t            // r缩写为[1, 2]    相当于 [1, 2, 1, 2]\r\n\t            // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]\r\n\t            r: 0,\r\n\r\n\t            x: 0,\r\n\t            y: 0,\r\n\t            width: 0,\r\n\t            height: 0\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\t            var x = shape.x;\r\n\t            var y = shape.y;\r\n\t            var width = shape.width;\r\n\t            var height = shape.height;\r\n\t            if (!shape.r) {\r\n\t                ctx.rect(x, y, width, height);\r\n\t            }\r\n\t            else {\r\n\t                roundRectHelper.buildPath(ctx, shape);\r\n\t            }\r\n\t            ctx.closePath();\r\n\t            return;\r\n\t        }\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 74 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    module.exports = {\r\n\t        buildPath: function (ctx, shape) {\r\n\t            var x = shape.x;\r\n\t            var y = shape.y;\r\n\t            var width = shape.width;\r\n\t            var height = shape.height;\r\n\t            var r = shape.r;\r\n\t            var r1;\r\n\t            var r2;\r\n\t            var r3;\r\n\t            var r4;\r\n\r\n\t            // Convert width and height to positive for better borderRadius\r\n\t            if (width < 0) {\r\n\t                x = x + width;\r\n\t                width = -width;\r\n\t            }\r\n\t            if (height < 0) {\r\n\t                y = y + height;\r\n\t                height = -height;\r\n\t            }\r\n\r\n\t            if (typeof r === 'number') {\r\n\t                r1 = r2 = r3 = r4 = r;\r\n\t            }\r\n\t            else if (r instanceof Array) {\r\n\t                if (r.length === 1) {\r\n\t                    r1 = r2 = r3 = r4 = r[0];\r\n\t                }\r\n\t                else if (r.length === 2) {\r\n\t                    r1 = r3 = r[0];\r\n\t                    r2 = r4 = r[1];\r\n\t                }\r\n\t                else if (r.length === 3) {\r\n\t                    r1 = r[0];\r\n\t                    r2 = r4 = r[1];\r\n\t                    r3 = r[2];\r\n\t                }\r\n\t                else {\r\n\t                    r1 = r[0];\r\n\t                    r2 = r[1];\r\n\t                    r3 = r[2];\r\n\t                    r4 = r[3];\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                r1 = r2 = r3 = r4 = 0;\r\n\t            }\r\n\r\n\t            var total;\r\n\t            if (r1 + r2 > width) {\r\n\t                total = r1 + r2;\r\n\t                r1 *= width / total;\r\n\t                r2 *= width / total;\r\n\t            }\r\n\t            if (r3 + r4 > width) {\r\n\t                total = r3 + r4;\r\n\t                r3 *= width / total;\r\n\t                r4 *= width / total;\r\n\t            }\r\n\t            if (r2 + r3 > height) {\r\n\t                total = r2 + r3;\r\n\t                r2 *= height / total;\r\n\t                r3 *= height / total;\r\n\t            }\r\n\t            if (r1 + r4 > height) {\r\n\t                total = r1 + r4;\r\n\t                r1 *= height / total;\r\n\t                r4 *= height / total;\r\n\t            }\r\n\t            ctx.moveTo(x + r1, y);\r\n\t            ctx.lineTo(x + width - r2, y);\r\n\t            r2 !== 0 && ctx.quadraticCurveTo(\r\n\t                x + width, y, x + width, y + r2\r\n\t            );\r\n\t            ctx.lineTo(x + width, y + height - r3);\r\n\t            r3 !== 0 && ctx.quadraticCurveTo(\r\n\t                x + width, y + height, x + width - r3, y + height\r\n\t            );\r\n\t            ctx.lineTo(x + r4, y + height);\r\n\t            r4 !== 0 && ctx.quadraticCurveTo(\r\n\t                x, y + height, x, y + height - r4\r\n\t            );\r\n\t            ctx.lineTo(x, y + r1);\r\n\t            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 75 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * 直线\r\n\t * @module zrender/graphic/shape/Line\r\n\t */\r\n\r\n\t    module.exports = __webpack_require__(45).extend({\r\n\r\n\t        type: 'line',\r\n\r\n\t        shape: {\r\n\t            // Start point\r\n\t            x1: 0,\r\n\t            y1: 0,\r\n\t            // End point\r\n\t            x2: 0,\r\n\t            y2: 0,\r\n\r\n\t            percent: 1\r\n\t        },\r\n\r\n\t        style: {\r\n\t            stroke: '#000',\r\n\t            fill: null\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\t            var x1 = shape.x1;\r\n\t            var y1 = shape.y1;\r\n\t            var x2 = shape.x2;\r\n\t            var y2 = shape.y2;\r\n\t            var percent = shape.percent;\r\n\r\n\t            if (percent === 0) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            ctx.moveTo(x1, y1);\r\n\r\n\t            if (percent < 1) {\r\n\t                x2 = x1 * (1 - percent) + x2 * percent;\r\n\t                y2 = y1 * (1 - percent) + y2 * percent;\r\n\t            }\r\n\t            ctx.lineTo(x2, y2);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get point at percent\r\n\t         * @param  {number} percent\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        pointAt: function (p) {\r\n\t            var shape = this.shape;\r\n\t            return [\r\n\t                shape.x1 * (1 - p) + shape.x2 * p,\r\n\t                shape.y1 * (1 - p) + shape.y2 * p\r\n\t            ];\r\n\t        }\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 76 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * 贝塞尔曲线\r\n\t * @module zrender/shape/BezierCurve\r\n\t */\r\n\r\n\r\n\t    var curveTool = __webpack_require__(50);\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    var quadraticSubdivide = curveTool.quadraticSubdivide;\r\n\t    var cubicSubdivide = curveTool.cubicSubdivide;\r\n\t    var quadraticAt = curveTool.quadraticAt;\r\n\t    var cubicAt = curveTool.cubicAt;\r\n\t    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;\r\n\t    var cubicDerivativeAt = curveTool.cubicDerivativeAt;\r\n\r\n\t    var out = [];\r\n\r\n\t    function someVectorAt(shape, t, isTangent) {\r\n\t        var cpx2 = shape.cpx2;\r\n\t        var cpy2 = shape.cpy2;\r\n\t        if (cpx2 === null || cpy2 === null) {\r\n\t            return [\r\n\t                (isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),\r\n\t                (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)\r\n\t            ];\r\n\t        }\r\n\t        else {\r\n\t            return [\r\n\t                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t),\r\n\t                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)\r\n\t            ];\r\n\t        }\r\n\t    }\r\n\t    module.exports = __webpack_require__(45).extend({\r\n\r\n\t        type: 'bezier-curve',\r\n\r\n\t        shape: {\r\n\t            x1: 0,\r\n\t            y1: 0,\r\n\t            x2: 0,\r\n\t            y2: 0,\r\n\t            cpx1: 0,\r\n\t            cpy1: 0,\r\n\t            // cpx2: 0,\r\n\t            // cpy2: 0\r\n\r\n\t            // Curve show percent, for animating\r\n\t            percent: 1\r\n\t        },\r\n\r\n\t        style: {\r\n\t            stroke: '#000',\r\n\t            fill: null\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\t            var x1 = shape.x1;\r\n\t            var y1 = shape.y1;\r\n\t            var x2 = shape.x2;\r\n\t            var y2 = shape.y2;\r\n\t            var cpx1 = shape.cpx1;\r\n\t            var cpy1 = shape.cpy1;\r\n\t            var cpx2 = shape.cpx2;\r\n\t            var cpy2 = shape.cpy2;\r\n\t            var percent = shape.percent;\r\n\t            if (percent === 0) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            ctx.moveTo(x1, y1);\r\n\r\n\t            if (cpx2 == null || cpy2 == null) {\r\n\t                if (percent < 1) {\r\n\t                    quadraticSubdivide(\r\n\t                        x1, cpx1, x2, percent, out\r\n\t                    );\r\n\t                    cpx1 = out[1];\r\n\t                    x2 = out[2];\r\n\t                    quadraticSubdivide(\r\n\t                        y1, cpy1, y2, percent, out\r\n\t                    );\r\n\t                    cpy1 = out[1];\r\n\t                    y2 = out[2];\r\n\t                }\r\n\r\n\t                ctx.quadraticCurveTo(\r\n\t                    cpx1, cpy1,\r\n\t                    x2, y2\r\n\t                );\r\n\t            }\r\n\t            else {\r\n\t                if (percent < 1) {\r\n\t                    cubicSubdivide(\r\n\t                        x1, cpx1, cpx2, x2, percent, out\r\n\t                    );\r\n\t                    cpx1 = out[1];\r\n\t                    cpx2 = out[2];\r\n\t                    x2 = out[3];\r\n\t                    cubicSubdivide(\r\n\t                        y1, cpy1, cpy2, y2, percent, out\r\n\t                    );\r\n\t                    cpy1 = out[1];\r\n\t                    cpy2 = out[2];\r\n\t                    y2 = out[3];\r\n\t                }\r\n\t                ctx.bezierCurveTo(\r\n\t                    cpx1, cpy1,\r\n\t                    cpx2, cpy2,\r\n\t                    x2, y2\r\n\t                );\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get point at percent\r\n\t         * @param  {number} t\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        pointAt: function (t) {\r\n\t            return someVectorAt(this.shape, t, false);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get tangent at percent\r\n\t         * @param  {number} t\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        tangentAt: function (t) {\r\n\t            var p = someVectorAt(this.shape, t, true);\r\n\t            return vec2.normalize(p, p);\r\n\t        }\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 77 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * 圆弧\r\n\t * @module zrender/graphic/shape/Arc\r\n\t */\r\n\t \r\n\r\n\t    module.exports = __webpack_require__(45).extend({\r\n\r\n\t        type: 'arc',\r\n\r\n\t        shape: {\r\n\r\n\t            cx: 0,\r\n\r\n\t            cy: 0,\r\n\r\n\t            r: 0,\r\n\r\n\t            startAngle: 0,\r\n\r\n\t            endAngle: Math.PI * 2,\r\n\r\n\t            clockwise: true\r\n\t        },\r\n\r\n\t        style: {\r\n\r\n\t            stroke: '#000',\r\n\r\n\t            fill: null\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\r\n\t            var x = shape.cx;\r\n\t            var y = shape.cy;\r\n\t            var r = Math.max(shape.r, 0);\r\n\t            var startAngle = shape.startAngle;\r\n\t            var endAngle = shape.endAngle;\r\n\t            var clockwise = shape.clockwise;\r\n\r\n\t            var unitX = Math.cos(startAngle);\r\n\t            var unitY = Math.sin(startAngle);\r\n\r\n\t            ctx.moveTo(unitX * r + x, unitY * r + y);\r\n\t            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 78 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// CompoundPath to improve performance\r\n\r\n\r\n\t    var Path = __webpack_require__(45);\r\n\t    module.exports = Path.extend({\r\n\r\n\t        type: 'compound',\r\n\r\n\t        shape: {\r\n\r\n\t            paths: null\r\n\t        },\r\n\r\n\t        _updatePathDirty: function () {\r\n\t            var dirtyPath = this.__dirtyPath;\r\n\t            var paths = this.shape.paths;\r\n\t            for (var i = 0; i < paths.length; i++) {\r\n\t                // Mark as dirty if any subpath is dirty\r\n\t                dirtyPath = dirtyPath || paths[i].__dirtyPath;\r\n\t            }\r\n\t            this.__dirtyPath = dirtyPath;\r\n\t            this.__dirty = this.__dirty || dirtyPath;\r\n\t        },\r\n\r\n\t        beforeBrush: function () {\r\n\t            this._updatePathDirty();\r\n\t            var paths = this.shape.paths || [];\r\n\t            var scale = this.getGlobalScale();\r\n\t            // Update path scale\r\n\t            for (var i = 0; i < paths.length; i++) {\r\n\t                paths[i].path.setScale(scale[0], scale[1]);\r\n\t            }\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\t            var paths = shape.paths || [];\r\n\t            for (var i = 0; i < paths.length; i++) {\r\n\t                paths[i].buildPath(ctx, paths[i].shape, true);\r\n\t            }\r\n\t        },\r\n\r\n\t        afterBrush: function () {\r\n\t            var paths = this.shape.paths;\r\n\t            for (var i = 0; i < paths.length; i++) {\r\n\t                paths[i].__dirtyPath = false;\r\n\t            }\r\n\t        },\r\n\r\n\t        getBoundingRect: function () {\r\n\t            this._updatePathDirty();\r\n\t            return Path.prototype.getBoundingRect.call(this);\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 79 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var Gradient = __webpack_require__(61);\r\n\r\n\t    /**\r\n\t     * x, y, x2, y2 are all percent from 0 to 1\r\n\t     * @param {number} [x=0]\r\n\t     * @param {number} [y=0]\r\n\t     * @param {number} [x2=1]\r\n\t     * @param {number} [y2=0]\r\n\t     * @param {Array.<Object>} colorStops\r\n\t     * @param {boolean} [globalCoord=false]\r\n\t     */\r\n\t    var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {\r\n\t        this.x = x == null ? 0 : x;\r\n\r\n\t        this.y = y == null ? 0 : y;\r\n\r\n\t        this.x2 = x2 == null ? 1 : x2;\r\n\r\n\t        this.y2 = y2 == null ? 0 : y2;\r\n\r\n\t        // Can be cloned\r\n\t        this.type = 'linear';\r\n\r\n\t        // If use global coord\r\n\t        this.global = globalCoord || false;\r\n\r\n\t        Gradient.call(this, colorStops);\r\n\t    };\r\n\r\n\t    LinearGradient.prototype = {\r\n\r\n\t        constructor: LinearGradient\r\n\t    };\r\n\r\n\t    zrUtil.inherits(LinearGradient, Gradient);\r\n\r\n\t    module.exports = LinearGradient;\r\n\r\n\r\n/***/ },\r\n/* 80 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var Gradient = __webpack_require__(61);\r\n\r\n\t    /**\r\n\t     * x, y, r are all percent from 0 to 1\r\n\t     * @param {number} [x=0.5]\r\n\t     * @param {number} [y=0.5]\r\n\t     * @param {number} [r=0.5]\r\n\t     * @param {Array.<Object>} [colorStops]\r\n\t     * @param {boolean} [globalCoord=false]\r\n\t     */\r\n\t    var RadialGradient = function (x, y, r, colorStops, globalCoord) {\r\n\t        this.x = x == null ? 0.5 : x;\r\n\r\n\t        this.y = y == null ? 0.5 : y;\r\n\r\n\t        this.r = r == null ? 0.5 : r;\r\n\r\n\t        // Can be cloned\r\n\t        this.type = 'radial';\r\n\r\n\t        // If use global coord\r\n\t        this.global = globalCoord || false;\r\n\r\n\t        Gradient.call(this, colorStops);\r\n\t    };\r\n\r\n\t    RadialGradient.prototype = {\r\n\r\n\t        constructor: RadialGradient\r\n\t    };\r\n\r\n\t    zrUtil.inherits(RadialGradient, Gradient);\r\n\r\n\t    module.exports = RadialGradient;\r\n\r\n\r\n/***/ },\r\n/* 81 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/*!\r\n\t * ZRender, a high performance 2d drawing library.\r\n\t *\r\n\t * Copyright (c) 2013, Baidu Inc.\r\n\t * All rights reserved.\r\n\t *\r\n\t * LICENSE\r\n\t * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt\r\n\t */\r\n\t// Global defines\r\n\r\n\t    var guid = __webpack_require__(32);\r\n\t    var env = __webpack_require__(2);\r\n\r\n\t    var Handler = __webpack_require__(82);\r\n\t    var Storage = __webpack_require__(84);\r\n\t    var Animation = __webpack_require__(86);\r\n\t    var HandlerProxy = __webpack_require__(89);\r\n\r\n\t    var useVML = !env.canvasSupported;\r\n\r\n\t    var painterCtors = {\r\n\t        canvas: __webpack_require__(91)\r\n\t    };\r\n\r\n\t    var instances = {};    // ZRender实例map索引\r\n\r\n\t    var zrender = {};\r\n\r\n\t    /**\r\n\t     * @type {string}\r\n\t     */\r\n\t    zrender.version = '3.2.1';\r\n\r\n\t    /**\r\n\t     * Initializing a zrender instance\r\n\t     * @param {HTMLElement} dom\r\n\t     * @param {Object} opts\r\n\t     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\r\n\t     * @param {number} [opts.devicePixelRatio]\r\n\t     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\r\n\t     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\r\n\t     * @return {module:zrender/ZRender}\r\n\t     */\r\n\t    zrender.init = function(dom, opts) {\r\n\t        var zr = new ZRender(guid(), dom, opts);\r\n\t        instances[zr.id] = zr;\r\n\t        return zr;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Dispose zrender instance\r\n\t     * @param {module:zrender/ZRender} zr\r\n\t     */\r\n\t    zrender.dispose = function (zr) {\r\n\t        if (zr) {\r\n\t            zr.dispose();\r\n\t        }\r\n\t        else {\r\n\t            for (var key in instances) {\r\n\t                if (instances.hasOwnProperty(key)) {\r\n\t                    instances[key].dispose();\r\n\t                }\r\n\t            }\r\n\t            instances = {};\r\n\t        }\r\n\r\n\t        return zrender;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get zrender instance by id\r\n\t     * @param {string} id zrender instance id\r\n\t     * @return {module:zrender/ZRender}\r\n\t     */\r\n\t    zrender.getInstance = function (id) {\r\n\t        return instances[id];\r\n\t    };\r\n\r\n\t    zrender.registerPainter = function (name, Ctor) {\r\n\t        painterCtors[name] = Ctor;\r\n\t    };\r\n\r\n\t    function delInstance(id) {\r\n\t        delete instances[id];\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @module zrender/ZRender\r\n\t     */\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @alias module:zrender/ZRender\r\n\t     * @param {string} id\r\n\t     * @param {HTMLDomElement} dom\r\n\t     * @param {Object} opts\r\n\t     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\r\n\t     * @param {number} [opts.devicePixelRatio]\r\n\t     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\r\n\t     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\r\n\t     */\r\n\t    var ZRender = function(id, dom, opts) {\r\n\r\n\t        opts = opts || {};\r\n\r\n\t        /**\r\n\t         * @type {HTMLDomElement}\r\n\t         */\r\n\t        this.dom = dom;\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.id = id;\r\n\r\n\t        var self = this;\r\n\t        var storage = new Storage();\r\n\r\n\t        var rendererType = opts.renderer;\r\n\t        if (useVML) {\r\n\t            if (!painterCtors.vml) {\r\n\t                throw new Error('You need to require \\'zrender/vml/vml\\' to support IE8');\r\n\t            }\r\n\t            rendererType = 'vml';\r\n\t        }\r\n\t        else if (!rendererType || !painterCtors[rendererType]) {\r\n\t            rendererType = 'canvas';\r\n\t        }\r\n\t        var painter = new painterCtors[rendererType](dom, storage, opts);\r\n\r\n\t        this.storage = storage;\r\n\t        this.painter = painter;\r\n\r\n\t        var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;\r\n\t        this.handler = new Handler(storage, painter, handerProxy, painter.root);\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/animation/Animation}\r\n\t         */\r\n\t        this.animation = new Animation({\r\n\t            stage: {\r\n\t                update: function () {\r\n\t                    if (self._needsRefresh) {\r\n\t                        self.refreshImmediately();\r\n\t                    }\r\n\t                    if (self._needsRefreshHover) {\r\n\t                        self.refreshHoverImmediately();\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t        this.animation.start();\r\n\r\n\t        /**\r\n\t         * @type {boolean}\r\n\t         * @private\r\n\t         */\r\n\t        this._needsRefresh;\r\n\r\n\t        // 修改 storage.delFromMap, 每次删除元素之前删除动画\r\n\t        // FIXME 有点ugly\r\n\t        var oldDelFromMap = storage.delFromMap;\r\n\t        var oldAddToMap = storage.addToMap;\r\n\r\n\t        storage.delFromMap = function (elId) {\r\n\t            var el = storage.get(elId);\r\n\r\n\t            oldDelFromMap.call(storage, elId);\r\n\r\n\t            el && el.removeSelfFromZr(self);\r\n\t        };\r\n\r\n\t        storage.addToMap = function (el) {\r\n\t            oldAddToMap.call(storage, el);\r\n\r\n\t            el.addSelfToZr(self);\r\n\t        };\r\n\t    };\r\n\r\n\t    ZRender.prototype = {\r\n\r\n\t        constructor: ZRender,\r\n\t        /**\r\n\t         * 获取实例唯一标识\r\n\t         * @return {string}\r\n\t         */\r\n\t        getId: function () {\r\n\t            return this.id;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 添加元素\r\n\t         * @param  {module:zrender/Element} el\r\n\t         */\r\n\t        add: function (el) {\r\n\t            this.storage.addRoot(el);\r\n\t            this._needsRefresh = true;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 删除元素\r\n\t         * @param  {module:zrender/Element} el\r\n\t         */\r\n\t        remove: function (el) {\r\n\t            this.storage.delRoot(el);\r\n\t            this._needsRefresh = true;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Change configuration of layer\r\n\t         * @param {string} zLevel\r\n\t         * @param {Object} config\r\n\t         * @param {string} [config.clearColor=0] Clear color\r\n\t         * @param {string} [config.motionBlur=false] If enable motion blur\r\n\t         * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer\r\n\t        */\r\n\t        configLayer: function (zLevel, config) {\r\n\t            this.painter.configLayer(zLevel, config);\r\n\t            this._needsRefresh = true;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Repaint the canvas immediately\r\n\t         */\r\n\t        refreshImmediately: function () {\r\n\t            // Clear needsRefresh ahead to avoid something wrong happens in refresh\r\n\t            // Or it will cause zrender refreshes again and again.\r\n\t            this._needsRefresh = false;\r\n\t            this.painter.refresh();\r\n\t            /**\r\n\t             * Avoid trigger zr.refresh in Element#beforeUpdate hook\r\n\t             */\r\n\t            this._needsRefresh = false;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Mark and repaint the canvas in the next frame of browser\r\n\t         */\r\n\t        refresh: function() {\r\n\t            this._needsRefresh = true;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Add element to hover layer\r\n\t         * @param  {module:zrender/Element} el\r\n\t         * @param {Object} style\r\n\t         */\r\n\t        addHover: function (el, style) {\r\n\t            if (this.painter.addHover) {\r\n\t                this.painter.addHover(el, style);\r\n\t                this.refreshHover();\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Add element from hover layer\r\n\t         * @param  {module:zrender/Element} el\r\n\t         */\r\n\t        removeHover: function (el) {\r\n\t            if (this.painter.removeHover) {\r\n\t                this.painter.removeHover(el);\r\n\t                this.refreshHover();\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Clear all hover elements in hover layer\r\n\t         * @param  {module:zrender/Element} el\r\n\t         */\r\n\t        clearHover: function () {\r\n\t            if (this.painter.clearHover) {\r\n\t                this.painter.clearHover();\r\n\t                this.refreshHover();\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Refresh hover in next frame\r\n\t         */\r\n\t        refreshHover: function () {\r\n\t            this._needsRefreshHover = true;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Refresh hover immediately\r\n\t         */\r\n\t        refreshHoverImmediately: function () {\r\n\t            this._needsRefreshHover = false;\r\n\t            this.painter.refreshHover && this.painter.refreshHover();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Resize the canvas.\r\n\t         * Should be invoked when container size is changed\r\n\t         * @param {Object} [opts]\r\n\t         * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\r\n\t         * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\r\n\t         */\r\n\t        resize: function(opts) {\r\n\t            opts = opts || {};\r\n\t            this.painter.resize(opts.width, opts.height);\r\n\t            this.handler.resize();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Stop and clear all animation immediately\r\n\t         */\r\n\t        clearAnimation: function () {\r\n\t            this.animation.clear();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get container width\r\n\t         */\r\n\t        getWidth: function() {\r\n\t            return this.painter.getWidth();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get container height\r\n\t         */\r\n\t        getHeight: function() {\r\n\t            return this.painter.getHeight();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Export the canvas as Base64 URL\r\n\t         * @param {string} type\r\n\t         * @param {string} [backgroundColor='#fff']\r\n\t         * @return {string} Base64 URL\r\n\t         */\r\n\t        // toDataURL: function(type, backgroundColor) {\r\n\t        //     return this.painter.getRenderedCanvas({\r\n\t        //         backgroundColor: backgroundColor\r\n\t        //     }).toDataURL(type);\r\n\t        // },\r\n\r\n\t        /**\r\n\t         * Converting a path to image.\r\n\t         * It has much better performance of drawing image rather than drawing a vector path.\r\n\t         * @param {module:zrender/graphic/Path} e\r\n\t         * @param {number} width\r\n\t         * @param {number} height\r\n\t         */\r\n\t        pathToImage: function(e, width, height) {\r\n\t            var id = guid();\r\n\t            return this.painter.pathToImage(id, e, width, height);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Set default cursor\r\n\t         * @param {string} [cursorStyle='default'] 例如 crosshair\r\n\t         */\r\n\t        setCursorStyle: function (cursorStyle) {\r\n\t            this.handler.setCursorStyle(cursorStyle);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Bind event\r\n\t         *\r\n\t         * @param {string} eventName Event name\r\n\t         * @param {Function} eventHandler Handler function\r\n\t         * @param {Object} [context] Context object\r\n\t         */\r\n\t        on: function(eventName, eventHandler, context) {\r\n\t            this.handler.on(eventName, eventHandler, context);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Unbind event\r\n\t         * @param {string} eventName Event name\r\n\t         * @param {Function} [eventHandler] Handler function\r\n\t         */\r\n\t        off: function(eventName, eventHandler) {\r\n\t            this.handler.off(eventName, eventHandler);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Trigger event manually\r\n\t         *\r\n\t         * @param {string} eventName Event name\r\n\t         * @param {event=} event Event object\r\n\t         */\r\n\t        trigger: function (eventName, event) {\r\n\t            this.handler.trigger(eventName, event);\r\n\t        },\r\n\r\n\r\n\t        /**\r\n\t         * Clear all objects and the canvas.\r\n\t         */\r\n\t        clear: function () {\r\n\t            this.storage.delRoot();\r\n\t            this.painter.clear();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Dispose self.\r\n\t         */\r\n\t        dispose: function () {\r\n\t            this.animation.stop();\r\n\r\n\t            this.clear();\r\n\t            this.storage.dispose();\r\n\t            this.painter.dispose();\r\n\t            this.handler.dispose();\r\n\r\n\t            this.animation =\r\n\t            this.storage =\r\n\t            this.painter =\r\n\t            this.handler = null;\r\n\r\n\t            delInstance(this.id);\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = zrender;\r\n\r\n\r\n\r\n/***/ },\r\n/* 82 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * Handler\r\n\t * @module zrender/Handler\r\n\t * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\r\n\t *         errorrik (errorrik@gmail.com)\r\n\t *         pissang (shenyi.914@gmail.com)\r\n\t */\r\n\r\n\r\n\t    var util = __webpack_require__(4);\r\n\t    var Draggable = __webpack_require__(83);\r\n\r\n\t    var Eventful = __webpack_require__(33);\r\n\r\n\t    function makeEventPacket(eveType, target, event) {\r\n\t        return {\r\n\t            type: eveType,\r\n\t            event: event,\r\n\t            target: target,\r\n\t            cancelBubble: false,\r\n\t            offsetX: event.zrX,\r\n\t            offsetY: event.zrY,\r\n\t            gestureEvent: event.gestureEvent,\r\n\t            pinchX: event.pinchX,\r\n\t            pinchY: event.pinchY,\r\n\t            pinchScale: event.pinchScale,\r\n\t            wheelDelta: event.zrDelta\r\n\t        };\r\n\t    }\r\n\r\n\t    function EmptyProxy () {}\r\n\t    EmptyProxy.prototype.dispose = function () {};\r\n\r\n\t    var handlerNames = [\r\n\t        'click', 'dblclick', 'mousewheel', 'mouseout',\r\n\t        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\r\n\t    ];\r\n\t    /**\r\n\t     * @alias module:zrender/Handler\r\n\t     * @constructor\r\n\t     * @extends module:zrender/mixin/Eventful\r\n\t     * @param {module:zrender/Storage} storage Storage instance.\r\n\t     * @param {module:zrender/Painter} painter Painter instance.\r\n\t     * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.\r\n\t     * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).\r\n\t     */\r\n\t    var Handler = function(storage, painter, proxy, painterRoot) {\r\n\t        Eventful.call(this);\r\n\r\n\t        this.storage = storage;\r\n\r\n\t        this.painter = painter;\r\n\r\n\t        this.painterRoot = painterRoot;\r\n\r\n\t        proxy = proxy || new EmptyProxy();\r\n\r\n\t        /**\r\n\t         * Proxy of event. can be Dom, WebGLSurface, etc.\r\n\t         */\r\n\t        this.proxy = proxy;\r\n\r\n\t        // Attach handler\r\n\t        proxy.handler = this;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        this._hovered;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Date}\r\n\t         */\r\n\t        this._lastTouchMoment;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {number}\r\n\t         */\r\n\t        this._lastX;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {number}\r\n\t         */\r\n\t        this._lastY;\r\n\r\n\r\n\t        Draggable.call(this);\r\n\r\n\t        util.each(handlerNames, function (name) {\r\n\t            proxy.on && proxy.on(name, this[name], this);\r\n\t        }, this);\r\n\t    };\r\n\r\n\t    Handler.prototype = {\r\n\r\n\t        constructor: Handler,\r\n\r\n\t        mousemove: function (event) {\r\n\t            var x = event.zrX;\r\n\t            var y = event.zrY;\r\n\r\n\t            var hovered = this.findHover(x, y, null);\r\n\t            var lastHovered = this._hovered;\r\n\t            var proxy = this.proxy;\r\n\r\n\t            this._hovered = hovered;\r\n\r\n\t            proxy.setCursor && proxy.setCursor(hovered ? hovered.cursor : 'default');\r\n\r\n\t            // Mouse out on previous hovered element\r\n\t            if (lastHovered && hovered !== lastHovered && lastHovered.__zr) {\r\n\t                this.dispatchToElement(lastHovered, 'mouseout', event);\r\n\t            }\r\n\r\n\t            // Mouse moving on one element\r\n\t            this.dispatchToElement(hovered, 'mousemove', event);\r\n\r\n\t            // Mouse over on a new element\r\n\t            if (hovered && hovered !== lastHovered) {\r\n\t                this.dispatchToElement(hovered, 'mouseover', event);\r\n\t            }\r\n\t        },\r\n\r\n\t        mouseout: function (event) {\r\n\t            this.dispatchToElement(this._hovered, 'mouseout', event);\r\n\r\n\t            // There might be some doms created by upper layer application\r\n\t            // at the same level of painter.getViewportRoot() (e.g., tooltip\r\n\t            // dom created by echarts), where 'globalout' event should not\r\n\t            // be triggered when mouse enters these doms. (But 'mouseout'\r\n\t            // should be triggered at the original hovered element as usual).\r\n\t            var element = event.toElement || event.relatedTarget;\r\n\t            var innerDom;\r\n\t            do {\r\n\t                element = element && element.parentNode;\r\n\t            }\r\n\t            while (element && element.nodeType != 9 && !(\r\n\t                innerDom = element === this.painterRoot\r\n\t            ));\r\n\r\n\t            !innerDom && this.trigger('globalout', {event: event});\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Resize\r\n\t         */\r\n\t        resize: function (event) {\r\n\t            this._hovered = null;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Dispatch event\r\n\t         * @param {string} eventName\r\n\t         * @param {event=} eventArgs\r\n\t         */\r\n\t        dispatch: function (eventName, eventArgs) {\r\n\t            var handler = this[eventName];\r\n\t            handler && handler.call(this, eventArgs);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Dispose\r\n\t         */\r\n\t        dispose: function () {\r\n\r\n\t            this.proxy.dispose();\r\n\r\n\t            this.storage =\r\n\t            this.proxy =\r\n\t            this.painter = null;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 设置默认的cursor style\r\n\t         * @param {string} [cursorStyle='default'] 例如 crosshair\r\n\t         */\r\n\t        setCursorStyle: function (cursorStyle) {\r\n\t            var proxy = this.proxy;\r\n\t            proxy.setCursor && proxy.setCursor(cursorStyle);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 事件分发代理\r\n\t         *\r\n\t         * @private\r\n\t         * @param {Object} targetEl 目标图形元素\r\n\t         * @param {string} eventName 事件名称\r\n\t         * @param {Object} event 事件对象\r\n\t         */\r\n\t        dispatchToElement: function (targetEl, eventName, event) {\r\n\t            var eventHandler = 'on' + eventName;\r\n\t            var eventPacket = makeEventPacket(eventName, targetEl, event);\r\n\r\n\t            var el = targetEl;\r\n\r\n\t            while (el) {\r\n\t                el[eventHandler]\r\n\t                    && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));\r\n\r\n\t                el.trigger(eventName, eventPacket);\r\n\r\n\t                el = el.parent;\r\n\r\n\t                if (eventPacket.cancelBubble) {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (!eventPacket.cancelBubble) {\r\n\t                // 冒泡到顶级 zrender 对象\r\n\t                this.trigger(eventName, eventPacket);\r\n\t                // 分发事件到用户自定义层\r\n\t                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在\r\n\t                this.painter && this.painter.eachOtherLayer(function (layer) {\r\n\t                    if (typeof(layer[eventHandler]) == 'function') {\r\n\t                        layer[eventHandler].call(layer, eventPacket);\r\n\t                    }\r\n\t                    if (layer.trigger) {\r\n\t                        layer.trigger(eventName, eventPacket);\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @param {number} x\r\n\t         * @param {number} y\r\n\t         * @param {module:zrender/graphic/Displayable} exclude\r\n\t         * @method\r\n\t         */\r\n\t        findHover: function(x, y, exclude) {\r\n\t            var list = this.storage.getDisplayList();\r\n\t            for (var i = list.length - 1; i >= 0 ; i--) {\r\n\t                if (!list[i].silent\r\n\t                 && list[i] !== exclude\r\n\t                 // getDisplayList may include ignored item in VML mode\r\n\t                 && !list[i].ignore\r\n\t                 && isHover(list[i], x, y)) {\r\n\t                    return list[i];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    // Common handlers\r\n\t    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\r\n\t        Handler.prototype[name] = function (event) {\r\n\t            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover\r\n\t            var hovered = this.findHover(event.zrX, event.zrY, null);\r\n\r\n\t            if (name === 'mousedown') {\r\n\t                this._downel = hovered;\r\n\t                // In case click triggered before mouseup\r\n\t                this._upel = hovered;\r\n\t            }\r\n\t            else if (name === 'mosueup') {\r\n\t                this._upel = hovered;\r\n\t            }\r\n\t            else if (name === 'click') {\r\n\t                if (this._downel !== this._upel) {\r\n\t                    return;\r\n\t                }\r\n\t            }\r\n\r\n\t            this.dispatchToElement(hovered, name, event);\r\n\t        };\r\n\t    });\r\n\r\n\t    function isHover(displayable, x, y) {\r\n\t        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {\r\n\t            var el = displayable;\r\n\t            while (el) {\r\n\t                // If ancestor is silent or clipped by ancestor\r\n\t                if (el.silent || (el.clipPath && !el.clipPath.contain(x, y)))  {\r\n\t                    return false;\r\n\t                }\r\n\t                el = el.parent;\r\n\t            }\r\n\t            return true;\r\n\t        }\r\n\r\n\t        return false;\r\n\t    }\r\n\r\n\t    util.mixin(Handler, Eventful);\r\n\t    util.mixin(Handler, Draggable);\r\n\r\n\t    module.exports = Handler;\r\n\r\n\r\n/***/ },\r\n/* 83 */\r\n/***/ function(module, exports) {\r\n\r\n\t// TODO Draggable for group\r\n\t// FIXME Draggable on element which has parent rotation or scale\r\n\r\n\t    function Draggable() {\r\n\r\n\t        this.on('mousedown', this._dragStart, this);\r\n\t        this.on('mousemove', this._drag, this);\r\n\t        this.on('mouseup', this._dragEnd, this);\r\n\t        this.on('globalout', this._dragEnd, this);\r\n\t        // this._dropTarget = null;\r\n\t        // this._draggingTarget = null;\r\n\r\n\t        // this._x = 0;\r\n\t        // this._y = 0;\r\n\t    }\r\n\r\n\t    Draggable.prototype = {\r\n\r\n\t        constructor: Draggable,\r\n\r\n\t        _dragStart: function (e) {\r\n\t            var draggingTarget = e.target;\r\n\t            if (draggingTarget && draggingTarget.draggable) {\r\n\t                this._draggingTarget = draggingTarget;\r\n\t                draggingTarget.dragging = true;\r\n\t                this._x = e.offsetX;\r\n\t                this._y = e.offsetY;\r\n\r\n\t                this.dispatchToElement(draggingTarget, 'dragstart', e.event);\r\n\t            }\r\n\t        },\r\n\r\n\t        _drag: function (e) {\r\n\t            var draggingTarget = this._draggingTarget;\r\n\t            if (draggingTarget) {\r\n\r\n\t                var x = e.offsetX;\r\n\t                var y = e.offsetY;\r\n\r\n\t                var dx = x - this._x;\r\n\t                var dy = y - this._y;\r\n\t                this._x = x;\r\n\t                this._y = y;\r\n\r\n\t                draggingTarget.drift(dx, dy, e);\r\n\t                this.dispatchToElement(draggingTarget, 'drag', e.event);\r\n\r\n\t                var dropTarget = this.findHover(x, y, draggingTarget);\r\n\t                var lastDropTarget = this._dropTarget;\r\n\t                this._dropTarget = dropTarget;\r\n\r\n\t                if (draggingTarget !== dropTarget) {\r\n\t                    if (lastDropTarget && dropTarget !== lastDropTarget) {\r\n\t                        this.dispatchToElement(lastDropTarget, 'dragleave', e.event);\r\n\t                    }\r\n\t                    if (dropTarget && dropTarget !== lastDropTarget) {\r\n\t                        this.dispatchToElement(dropTarget, 'dragenter', e.event);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        _dragEnd: function (e) {\r\n\t            var draggingTarget = this._draggingTarget;\r\n\r\n\t            if (draggingTarget) {\r\n\t                draggingTarget.dragging = false;\r\n\t            }\r\n\r\n\t            this.dispatchToElement(draggingTarget, 'dragend', e.event);\r\n\r\n\t            if (this._dropTarget) {\r\n\t                this.dispatchToElement(this._dropTarget, 'drop', e.event);\r\n\t            }\r\n\r\n\t            this._draggingTarget = null;\r\n\t            this._dropTarget = null;\r\n\t        }\r\n\r\n\t    };\r\n\r\n\t    module.exports = Draggable;\r\n\r\n\r\n/***/ },\r\n/* 84 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * Storage内容仓库模块\r\n\t * @module zrender/Storage\r\n\t * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\r\n\t * @author errorrik (errorrik@gmail.com)\r\n\t * @author pissang (https://github.com/pissang/)\r\n\t */\r\n\r\n\r\n\t    var util = __webpack_require__(4);\r\n\t    var env = __webpack_require__(2);\r\n\r\n\t    var Group = __webpack_require__(30);\r\n\r\n\t    // Use timsort because in most case elements are partially sorted\r\n\t    // https://jsfiddle.net/pissang/jr4x7mdm/8/\r\n\t    var timsort = __webpack_require__(85);\r\n\r\n\t    function shapeCompareFunc(a, b) {\r\n\t        if (a.zlevel === b.zlevel) {\r\n\t            if (a.z === b.z) {\r\n\t                // if (a.z2 === b.z2) {\r\n\t                //     // FIXME Slow has renderidx compare\r\n\t                //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\r\n\t                //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\r\n\t                //     return a.__renderidx - b.__renderidx;\r\n\t                // }\r\n\t                return a.z2 - b.z2;\r\n\t            }\r\n\t            return a.z - b.z;\r\n\t        }\r\n\t        return a.zlevel - b.zlevel;\r\n\t    }\r\n\t    /**\r\n\t     * 内容仓库 (M)\r\n\t     * @alias module:zrender/Storage\r\n\t     * @constructor\r\n\t     */\r\n\t    var Storage = function () {\r\n\t        // 所有常规形状，id索引的map\r\n\t        this._elements = {};\r\n\r\n\t        this._roots = [];\r\n\r\n\t        this._displayList = [];\r\n\r\n\t        this._displayListLen = 0;\r\n\t    };\r\n\r\n\t    Storage.prototype = {\r\n\r\n\t        constructor: Storage,\r\n\r\n\t        /**\r\n\t         * @param  {Function} cb\r\n\t         *\r\n\t         */\r\n\t        traverse: function (cb, context) {\r\n\t            for (var i = 0; i < this._roots.length; i++) {\r\n\t                this._roots[i].traverse(cb, context);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 返回所有图形的绘制队列\r\n\t         * @param {boolean} [update=false] 是否在返回前更新该数组\r\n\t         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\r\n\t         *\r\n\t         * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\r\n\t         * @return {Array.<module:zrender/graphic/Displayable>}\r\n\t         */\r\n\t        getDisplayList: function (update, includeIgnore) {\r\n\t            includeIgnore = includeIgnore || false;\r\n\t            if (update) {\r\n\t                this.updateDisplayList(includeIgnore);\r\n\t            }\r\n\t            return this._displayList;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 更新图形的绘制队列。\r\n\t         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\r\n\t         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\r\n\t         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\r\n\t         */\r\n\t        updateDisplayList: function (includeIgnore) {\r\n\t            this._displayListLen = 0;\r\n\t            var roots = this._roots;\r\n\t            var displayList = this._displayList;\r\n\t            for (var i = 0, len = roots.length; i < len; i++) {\r\n\t                this._updateAndAddDisplayable(roots[i], null, includeIgnore);\r\n\t            }\r\n\t            displayList.length = this._displayListLen;\r\n\r\n\t            // for (var i = 0, len = displayList.length; i < len; i++) {\r\n\t            //     displayList[i].__renderidx = i;\r\n\t            // }\r\n\r\n\t            // displayList.sort(shapeCompareFunc);\r\n\t            env.canvasSupported && timsort(displayList, shapeCompareFunc);\r\n\t        },\r\n\r\n\t        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\r\n\r\n\t            if (el.ignore && !includeIgnore) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            el.beforeUpdate();\r\n\r\n\t            if (el.__dirty) {\r\n\r\n\t                el.update();\r\n\r\n\t            }\r\n\r\n\t            el.afterUpdate();\r\n\r\n\t            var clipPath = el.clipPath;\r\n\t            if (clipPath) {\r\n\t                // clipPath 的变换是基于 group 的变换\r\n\t                clipPath.parent = el;\r\n\t                clipPath.updateTransform();\r\n\r\n\t                // FIXME 效率影响\r\n\t                if (clipPaths) {\r\n\t                    clipPaths = clipPaths.slice();\r\n\t                    clipPaths.push(clipPath);\r\n\t                }\r\n\t                else {\r\n\t                    clipPaths = [clipPath];\r\n\t                }\r\n\t            }\r\n\r\n\t            if (el.isGroup) {\r\n\t                var children = el._children;\r\n\r\n\t                for (var i = 0; i < children.length; i++) {\r\n\t                    var child = children[i];\r\n\r\n\t                    // Force to mark as dirty if group is dirty\r\n\t                    // FIXME __dirtyPath ?\r\n\t                    if (el.__dirty) {\r\n\t                        child.__dirty = true;\r\n\t                    }\r\n\r\n\t                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\r\n\t                }\r\n\r\n\t                // Mark group clean here\r\n\t                el.__dirty = false;\r\n\r\n\t            }\r\n\t            else {\r\n\t                el.__clipPaths = clipPaths;\r\n\r\n\t                this._displayList[this._displayListLen++] = el;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 添加图形(Shape)或者组(Group)到根节点\r\n\t         * @param {module:zrender/Element} el\r\n\t         */\r\n\t        addRoot: function (el) {\r\n\t            // Element has been added\r\n\t            if (this._elements[el.id]) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            if (el instanceof Group) {\r\n\t                el.addChildrenToStorage(this);\r\n\t            }\r\n\r\n\t            this.addToMap(el);\r\n\t            this._roots.push(el);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 删除指定的图形(Shape)或者组(Group)\r\n\t         * @param {string|Array.<string>} [elId] 如果为空清空整个Storage\r\n\t         */\r\n\t        delRoot: function (elId) {\r\n\t            if (elId == null) {\r\n\t                // 不指定elId清空\r\n\t                for (var i = 0; i < this._roots.length; i++) {\r\n\t                    var root = this._roots[i];\r\n\t                    if (root instanceof Group) {\r\n\t                        root.delChildrenFromStorage(this);\r\n\t                    }\r\n\t                }\r\n\r\n\t                this._elements = {};\r\n\t                this._roots = [];\r\n\t                this._displayList = [];\r\n\t                this._displayListLen = 0;\r\n\r\n\t                return;\r\n\t            }\r\n\r\n\t            if (elId instanceof Array) {\r\n\t                for (var i = 0, l = elId.length; i < l; i++) {\r\n\t                    this.delRoot(elId[i]);\r\n\t                }\r\n\t                return;\r\n\t            }\r\n\r\n\t            var el;\r\n\t            if (typeof(elId) == 'string') {\r\n\t                el = this._elements[elId];\r\n\t            }\r\n\t            else {\r\n\t                el = elId;\r\n\t            }\r\n\r\n\t            var idx = util.indexOf(this._roots, el);\r\n\t            if (idx >= 0) {\r\n\t                this.delFromMap(el.id);\r\n\t                this._roots.splice(idx, 1);\r\n\t                if (el instanceof Group) {\r\n\t                    el.delChildrenFromStorage(this);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        addToMap: function (el) {\r\n\t            if (el instanceof Group) {\r\n\t                el.__storage = this;\r\n\t            }\r\n\t            el.dirty(false);\r\n\r\n\t            this._elements[el.id] = el;\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        get: function (elId) {\r\n\t            return this._elements[elId];\r\n\t        },\r\n\r\n\t        delFromMap: function (elId) {\r\n\t            var elements = this._elements;\r\n\t            var el = elements[elId];\r\n\t            if (el) {\r\n\t                delete elements[elId];\r\n\t                if (el instanceof Group) {\r\n\t                    el.__storage = null;\r\n\t                }\r\n\t            }\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 清空并且释放Storage\r\n\t         */\r\n\t        dispose: function () {\r\n\t            this._elements =\r\n\t            this._renderList =\r\n\t            this._roots = null;\r\n\t        },\r\n\r\n\t        displayableSortFunc: shapeCompareFunc\r\n\t    };\r\n\r\n\t    module.exports = Storage;\r\n\r\n\r\n\r\n/***/ },\r\n/* 85 */\r\n/***/ function(module, exports) {\r\n\r\n\t// https://github.com/mziccard/node-timsort\r\n\r\n\t    var DEFAULT_MIN_MERGE = 32;\r\n\r\n\t    var DEFAULT_MIN_GALLOPING = 7;\r\n\r\n\t    var DEFAULT_TMP_STORAGE_LENGTH = 256;\r\n\r\n\t    function minRunLength(n) {\r\n\t        var r = 0;\r\n\r\n\t        while (n >= DEFAULT_MIN_MERGE) {\r\n\t            r |= n & 1;\r\n\t            n >>= 1;\r\n\t        }\r\n\r\n\t        return n + r;\r\n\t    }\r\n\r\n\t    function makeAscendingRun(array, lo, hi, compare) {\r\n\t        var runHi = lo + 1;\r\n\r\n\t        if (runHi === hi) {\r\n\t            return 1;\r\n\t        }\r\n\r\n\t        if (compare(array[runHi++], array[lo]) < 0) {\r\n\t            while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\r\n\t                runHi++;\r\n\t            }\r\n\r\n\t            reverseRun(array, lo, runHi);\r\n\t        }\r\n\t        else {\r\n\t            while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\r\n\t                runHi++;\r\n\t            }\r\n\t        }\r\n\r\n\t        return runHi - lo;\r\n\t    }\r\n\r\n\t    function reverseRun(array, lo, hi) {\r\n\t        hi--;\r\n\r\n\t        while (lo < hi) {\r\n\t            var t = array[lo];\r\n\t            array[lo++] = array[hi];\r\n\t            array[hi--] = t;\r\n\t        }\r\n\t    }\r\n\r\n\t    function binaryInsertionSort(array, lo, hi, start, compare) {\r\n\t        if (start === lo) {\r\n\t            start++;\r\n\t        }\r\n\r\n\t        for (; start < hi; start++) {\r\n\t            var pivot = array[start];\r\n\r\n\t            var left = lo;\r\n\t            var right = start;\r\n\t            var mid;\r\n\r\n\t            while (left < right) {\r\n\t                mid = left + right >>> 1;\r\n\r\n\t                if (compare(pivot, array[mid]) < 0) {\r\n\t                    right = mid;\r\n\t                }\r\n\t                else {\r\n\t                    left = mid + 1;\r\n\t                }\r\n\t            }\r\n\r\n\t            var n = start - left;\r\n\r\n\t            switch (n) {\r\n\t                case 3:\r\n\t                    array[left + 3] = array[left + 2];\r\n\r\n\t                case 2:\r\n\t                    array[left + 2] = array[left + 1];\r\n\r\n\t                case 1:\r\n\t                    array[left + 1] = array[left];\r\n\t                    break;\r\n\t                default:\r\n\t                    while (n > 0) {\r\n\t                        array[left + n] = array[left + n - 1];\r\n\t                        n--;\r\n\t                    }\r\n\t            }\r\n\r\n\t            array[left] = pivot;\r\n\t        }\r\n\t    }\r\n\r\n\t    function gallopLeft(value, array, start, length, hint, compare) {\r\n\t        var lastOffset = 0;\r\n\t        var maxOffset = 0;\r\n\t        var offset = 1;\r\n\r\n\t        if (compare(value, array[start + hint]) > 0) {\r\n\t            maxOffset = length - hint;\r\n\r\n\t            while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\r\n\t                lastOffset = offset;\r\n\t                offset = (offset << 1) + 1;\r\n\r\n\t                if (offset <= 0) {\r\n\t                    offset = maxOffset;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (offset > maxOffset) {\r\n\t                offset = maxOffset;\r\n\t            }\r\n\r\n\t            lastOffset += hint;\r\n\t            offset += hint;\r\n\t        }\r\n\t        else {\r\n\t            maxOffset = hint + 1;\r\n\t            while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\r\n\t                lastOffset = offset;\r\n\t                offset = (offset << 1) + 1;\r\n\r\n\t                if (offset <= 0) {\r\n\t                    offset = maxOffset;\r\n\t                }\r\n\t            }\r\n\t            if (offset > maxOffset) {\r\n\t                offset = maxOffset;\r\n\t            }\r\n\r\n\t            var tmp = lastOffset;\r\n\t            lastOffset = hint - offset;\r\n\t            offset = hint - tmp;\r\n\t        }\r\n\r\n\t        lastOffset++;\r\n\t        while (lastOffset < offset) {\r\n\t            var m = lastOffset + (offset - lastOffset >>> 1);\r\n\r\n\t            if (compare(value, array[start + m]) > 0) {\r\n\t                lastOffset = m + 1;\r\n\t            }\r\n\t            else {\r\n\t                offset = m;\r\n\t            }\r\n\t        }\r\n\t        return offset;\r\n\t    }\r\n\r\n\t    function gallopRight(value, array, start, length, hint, compare) {\r\n\t        var lastOffset = 0;\r\n\t        var maxOffset = 0;\r\n\t        var offset = 1;\r\n\r\n\t        if (compare(value, array[start + hint]) < 0) {\r\n\t            maxOffset = hint + 1;\r\n\r\n\t            while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\r\n\t                lastOffset = offset;\r\n\t                offset = (offset << 1) + 1;\r\n\r\n\t                if (offset <= 0) {\r\n\t                    offset = maxOffset;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (offset > maxOffset) {\r\n\t                offset = maxOffset;\r\n\t            }\r\n\r\n\t            var tmp = lastOffset;\r\n\t            lastOffset = hint - offset;\r\n\t            offset = hint - tmp;\r\n\t        }\r\n\t        else {\r\n\t            maxOffset = length - hint;\r\n\r\n\t            while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\r\n\t                lastOffset = offset;\r\n\t                offset = (offset << 1) + 1;\r\n\r\n\t                if (offset <= 0) {\r\n\t                    offset = maxOffset;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (offset > maxOffset) {\r\n\t                offset = maxOffset;\r\n\t            }\r\n\r\n\t            lastOffset += hint;\r\n\t            offset += hint;\r\n\t        }\r\n\r\n\t        lastOffset++;\r\n\r\n\t        while (lastOffset < offset) {\r\n\t            var m = lastOffset + (offset - lastOffset >>> 1);\r\n\r\n\t            if (compare(value, array[start + m]) < 0) {\r\n\t                offset = m;\r\n\t            }\r\n\t            else {\r\n\t                lastOffset = m + 1;\r\n\t            }\r\n\t        }\r\n\r\n\t        return offset;\r\n\t    }\r\n\r\n\t    function TimSort(array, compare) {\r\n\t        var minGallop = DEFAULT_MIN_GALLOPING;\r\n\t        var length = 0;\r\n\t        var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\r\n\t        var stackLength = 0;\r\n\t        var runStart;\r\n\t        var runLength;\r\n\t        var stackSize = 0;\r\n\r\n\t        length = array.length;\r\n\r\n\t        if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\r\n\t            tmpStorageLength = length >>> 1;\r\n\t        }\r\n\r\n\t        var tmp = [];\r\n\r\n\t        stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;\r\n\r\n\t        runStart = [];\r\n\t        runLength = [];\r\n\r\n\t        function pushRun(_runStart, _runLength) {\r\n\t            runStart[stackSize] = _runStart;\r\n\t            runLength[stackSize] = _runLength;\r\n\t            stackSize += 1;\r\n\t        }\r\n\r\n\t        function mergeRuns() {\r\n\t            while (stackSize > 1) {\r\n\t                var n = stackSize - 2;\r\n\r\n\t                if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {\r\n\t                    if (runLength[n - 1] < runLength[n + 1]) {\r\n\t                        n--;\r\n\t                    }\r\n\t                }\r\n\t                else if (runLength[n] > runLength[n + 1]) {\r\n\t                    break;\r\n\t                }\r\n\t                mergeAt(n);\r\n\t            }\r\n\t        }\r\n\r\n\t        function forceMergeRuns() {\r\n\t            while (stackSize > 1) {\r\n\t                var n = stackSize - 2;\r\n\r\n\t                if (n > 0 && runLength[n - 1] < runLength[n + 1]) {\r\n\t                    n--;\r\n\t                }\r\n\r\n\t                mergeAt(n);\r\n\t            }\r\n\t        }\r\n\r\n\t        function mergeAt(i) {\r\n\t            var start1 = runStart[i];\r\n\t            var length1 = runLength[i];\r\n\t            var start2 = runStart[i + 1];\r\n\t            var length2 = runLength[i + 1];\r\n\r\n\t            runLength[i] = length1 + length2;\r\n\r\n\t            if (i === stackSize - 3) {\r\n\t                runStart[i + 1] = runStart[i + 2];\r\n\t                runLength[i + 1] = runLength[i + 2];\r\n\t            }\r\n\r\n\t            stackSize--;\r\n\r\n\t            var k = gallopRight(array[start2], array, start1, length1, 0, compare);\r\n\t            start1 += k;\r\n\t            length1 -= k;\r\n\r\n\t            if (length1 === 0) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\r\n\r\n\t            if (length2 === 0) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            if (length1 <= length2) {\r\n\t                mergeLow(start1, length1, start2, length2);\r\n\t            }\r\n\t            else {\r\n\t                mergeHigh(start1, length1, start2, length2);\r\n\t            }\r\n\t        }\r\n\r\n\t        function mergeLow(start1, length1, start2, length2) {\r\n\t            var i = 0;\r\n\r\n\t            for (i = 0; i < length1; i++) {\r\n\t                tmp[i] = array[start1 + i];\r\n\t            }\r\n\r\n\t            var cursor1 = 0;\r\n\t            var cursor2 = start2;\r\n\t            var dest = start1;\r\n\r\n\t            array[dest++] = array[cursor2++];\r\n\r\n\t            if (--length2 === 0) {\r\n\t                for (i = 0; i < length1; i++) {\r\n\t                    array[dest + i] = tmp[cursor1 + i];\r\n\t                }\r\n\t                return;\r\n\t            }\r\n\r\n\t            if (length1 === 1) {\r\n\t                for (i = 0; i < length2; i++) {\r\n\t                    array[dest + i] = array[cursor2 + i];\r\n\t                }\r\n\t                array[dest + length2] = tmp[cursor1];\r\n\t                return;\r\n\t            }\r\n\r\n\t            var _minGallop = minGallop;\r\n\t            var count1, count2, exit;\r\n\r\n\t            while (1) {\r\n\t                count1 = 0;\r\n\t                count2 = 0;\r\n\t                exit = false;\r\n\r\n\t                do {\r\n\t                    if (compare(array[cursor2], tmp[cursor1]) < 0) {\r\n\t                        array[dest++] = array[cursor2++];\r\n\t                        count2++;\r\n\t                        count1 = 0;\r\n\r\n\t                        if (--length2 === 0) {\r\n\t                            exit = true;\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        array[dest++] = tmp[cursor1++];\r\n\t                        count1++;\r\n\t                        count2 = 0;\r\n\t                        if (--length1 === 1) {\r\n\t                            exit = true;\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                } while ((count1 | count2) < _minGallop);\r\n\r\n\t                if (exit) {\r\n\t                    break;\r\n\t                }\r\n\r\n\t                do {\r\n\t                    count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\r\n\r\n\t                    if (count1 !== 0) {\r\n\t                        for (i = 0; i < count1; i++) {\r\n\t                            array[dest + i] = tmp[cursor1 + i];\r\n\t                        }\r\n\r\n\t                        dest += count1;\r\n\t                        cursor1 += count1;\r\n\t                        length1 -= count1;\r\n\t                        if (length1 <= 1) {\r\n\t                            exit = true;\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\r\n\t                    array[dest++] = array[cursor2++];\r\n\r\n\t                    if (--length2 === 0) {\r\n\t                        exit = true;\r\n\t                        break;\r\n\t                    }\r\n\r\n\t                    count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\r\n\r\n\t                    if (count2 !== 0) {\r\n\t                        for (i = 0; i < count2; i++) {\r\n\t                            array[dest + i] = array[cursor2 + i];\r\n\t                        }\r\n\r\n\t                        dest += count2;\r\n\t                        cursor2 += count2;\r\n\t                        length2 -= count2;\r\n\r\n\t                        if (length2 === 0) {\r\n\t                            exit = true;\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                    array[dest++] = tmp[cursor1++];\r\n\r\n\t                    if (--length1 === 1) {\r\n\t                        exit = true;\r\n\t                        break;\r\n\t                    }\r\n\r\n\t                    _minGallop--;\r\n\t                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\r\n\r\n\t                if (exit) {\r\n\t                    break;\r\n\t                }\r\n\r\n\t                if (_minGallop < 0) {\r\n\t                    _minGallop = 0;\r\n\t                }\r\n\r\n\t                _minGallop += 2;\r\n\t            }\r\n\r\n\t            minGallop = _minGallop;\r\n\r\n\t            minGallop < 1 && (minGallop = 1);\r\n\r\n\t            if (length1 === 1) {\r\n\t                for (i = 0; i < length2; i++) {\r\n\t                    array[dest + i] = array[cursor2 + i];\r\n\t                }\r\n\t                array[dest + length2] = tmp[cursor1];\r\n\t            }\r\n\t            else if (length1 === 0) {\r\n\t                throw new Error();\r\n\t                // throw new Error('mergeLow preconditions were not respected');\r\n\t            }\r\n\t            else {\r\n\t                for (i = 0; i < length1; i++) {\r\n\t                    array[dest + i] = tmp[cursor1 + i];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        function mergeHigh (start1, length1, start2, length2) {\r\n\t            var i = 0;\r\n\r\n\t            for (i = 0; i < length2; i++) {\r\n\t                tmp[i] = array[start2 + i];\r\n\t            }\r\n\r\n\t            var cursor1 = start1 + length1 - 1;\r\n\t            var cursor2 = length2 - 1;\r\n\t            var dest = start2 + length2 - 1;\r\n\t            var customCursor = 0;\r\n\t            var customDest = 0;\r\n\r\n\t            array[dest--] = array[cursor1--];\r\n\r\n\t            if (--length1 === 0) {\r\n\t                customCursor = dest - (length2 - 1);\r\n\r\n\t                for (i = 0; i < length2; i++) {\r\n\t                    array[customCursor + i] = tmp[i];\r\n\t                }\r\n\r\n\t                return;\r\n\t            }\r\n\r\n\t            if (length2 === 1) {\r\n\t                dest -= length1;\r\n\t                cursor1 -= length1;\r\n\t                customDest = dest + 1;\r\n\t                customCursor = cursor1 + 1;\r\n\r\n\t                for (i = length1 - 1; i >= 0; i--) {\r\n\t                    array[customDest + i] = array[customCursor + i];\r\n\t                }\r\n\r\n\t                array[dest] = tmp[cursor2];\r\n\t                return;\r\n\t            }\r\n\r\n\t            var _minGallop = minGallop;\r\n\r\n\t            while (true) {\r\n\t                var count1 = 0;\r\n\t                var count2 = 0;\r\n\t                var exit = false;\r\n\r\n\t                do {\r\n\t                    if (compare(tmp[cursor2], array[cursor1]) < 0) {\r\n\t                        array[dest--] = array[cursor1--];\r\n\t                        count1++;\r\n\t                        count2 = 0;\r\n\t                        if (--length1 === 0) {\r\n\t                            exit = true;\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        array[dest--] = tmp[cursor2--];\r\n\t                        count2++;\r\n\t                        count1 = 0;\r\n\t                        if (--length2 === 1) {\r\n\t                            exit = true;\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                } while ((count1 | count2) < _minGallop);\r\n\r\n\t                if (exit) {\r\n\t                    break;\r\n\t                }\r\n\r\n\t                do {\r\n\t                    count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\r\n\r\n\t                    if (count1 !== 0) {\r\n\t                        dest -= count1;\r\n\t                        cursor1 -= count1;\r\n\t                        length1 -= count1;\r\n\t                        customDest = dest + 1;\r\n\t                        customCursor = cursor1 + 1;\r\n\r\n\t                        for (i = count1 - 1; i >= 0; i--) {\r\n\t                            array[customDest + i] = array[customCursor + i];\r\n\t                        }\r\n\r\n\t                        if (length1 === 0) {\r\n\t                            exit = true;\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\r\n\t                    array[dest--] = tmp[cursor2--];\r\n\r\n\t                    if (--length2 === 1) {\r\n\t                        exit = true;\r\n\t                        break;\r\n\t                    }\r\n\r\n\t                    count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\r\n\r\n\t                    if (count2 !== 0) {\r\n\t                        dest -= count2;\r\n\t                        cursor2 -= count2;\r\n\t                        length2 -= count2;\r\n\t                        customDest = dest + 1;\r\n\t                        customCursor = cursor2 + 1;\r\n\r\n\t                        for (i = 0; i < count2; i++) {\r\n\t                            array[customDest + i] = tmp[customCursor + i];\r\n\t                        }\r\n\r\n\t                        if (length2 <= 1) {\r\n\t                            exit = true;\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\r\n\t                    array[dest--] = array[cursor1--];\r\n\r\n\t                    if (--length1 === 0) {\r\n\t                        exit = true;\r\n\t                        break;\r\n\t                    }\r\n\r\n\t                    _minGallop--;\r\n\t                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\r\n\r\n\t                if (exit) {\r\n\t                    break;\r\n\t                }\r\n\r\n\t                if (_minGallop < 0) {\r\n\t                    _minGallop = 0;\r\n\t                }\r\n\r\n\t                _minGallop += 2;\r\n\t            }\r\n\r\n\t            minGallop = _minGallop;\r\n\r\n\t            if (minGallop < 1) {\r\n\t                minGallop = 1;\r\n\t            }\r\n\r\n\t            if (length2 === 1) {\r\n\t                dest -= length1;\r\n\t                cursor1 -= length1;\r\n\t                customDest = dest + 1;\r\n\t                customCursor = cursor1 + 1;\r\n\r\n\t                for (i = length1 - 1; i >= 0; i--) {\r\n\t                    array[customDest + i] = array[customCursor + i];\r\n\t                }\r\n\r\n\t                array[dest] = tmp[cursor2];\r\n\t            }\r\n\t            else if (length2 === 0) {\r\n\t                throw new Error();\r\n\t                // throw new Error('mergeHigh preconditions were not respected');\r\n\t            }\r\n\t            else {\r\n\t                customCursor = dest - (length2 - 1);\r\n\t                for (i = 0; i < length2; i++) {\r\n\t                    array[customCursor + i] = tmp[i];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        this.mergeRuns = mergeRuns;\r\n\t        this.forceMergeRuns = forceMergeRuns;\r\n\t        this.pushRun = pushRun;\r\n\t    }\r\n\r\n\t    function sort(array, compare, lo, hi) {\r\n\t        if (!lo) {\r\n\t            lo = 0;\r\n\t        }\r\n\t        if (!hi) {\r\n\t            hi = array.length;\r\n\t        }\r\n\r\n\t        var remaining = hi - lo;\r\n\r\n\t        if (remaining < 2) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var runLength = 0;\r\n\r\n\t        if (remaining < DEFAULT_MIN_MERGE) {\r\n\t            runLength = makeAscendingRun(array, lo, hi, compare);\r\n\t            binaryInsertionSort(array, lo, hi, lo + runLength, compare);\r\n\t            return;\r\n\t        }\r\n\r\n\t        var ts = new TimSort(array, compare);\r\n\r\n\t        var minRun = minRunLength(remaining);\r\n\r\n\t        do {\r\n\t            runLength = makeAscendingRun(array, lo, hi, compare);\r\n\t            if (runLength < minRun) {\r\n\t                var force = remaining;\r\n\t                if (force > minRun) {\r\n\t                    force = minRun;\r\n\t                }\r\n\r\n\t                binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\r\n\t                runLength = force;\r\n\t            }\r\n\r\n\t            ts.pushRun(lo, runLength);\r\n\t            ts.mergeRuns();\r\n\r\n\t            remaining -= runLength;\r\n\t            lo += runLength;\r\n\t        } while (remaining !== 0);\r\n\r\n\t        ts.forceMergeRuns();\r\n\t    }\r\n\r\n\t    module.exports = sort;\r\n\r\n\r\n/***/ },\r\n/* 86 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * 动画主类, 调度和管理所有动画控制器\r\n\t *\r\n\t * @module zrender/animation/Animation\r\n\t * @author pissang(https://github.com/pissang)\r\n\t */\r\n\t// TODO Additive animation\r\n\t// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\r\n\t// https://developer.apple.com/videos/wwdc2014/#236\r\n\r\n\r\n\t    var util = __webpack_require__(4);\r\n\t    var Dispatcher = __webpack_require__(87).Dispatcher;\r\n\r\n\t    var requestAnimationFrame = __webpack_require__(88);\r\n\r\n\t    var Animator = __webpack_require__(36);\r\n\t    /**\r\n\t     * @typedef {Object} IZRenderStage\r\n\t     * @property {Function} update\r\n\t     */\r\n\r\n\t    /**\r\n\t     * @alias module:zrender/animation/Animation\r\n\t     * @constructor\r\n\t     * @param {Object} [options]\r\n\t     * @param {Function} [options.onframe]\r\n\t     * @param {IZRenderStage} [options.stage]\r\n\t     * @example\r\n\t     *     var animation = new Animation();\r\n\t     *     var obj = {\r\n\t     *         x: 100,\r\n\t     *         y: 100\r\n\t     *     };\r\n\t     *     animation.animate(node.position)\r\n\t     *         .when(1000, {\r\n\t     *             x: 500,\r\n\t     *             y: 500\r\n\t     *         })\r\n\t     *         .when(2000, {\r\n\t     *             x: 100,\r\n\t     *             y: 100\r\n\t     *         })\r\n\t     *         .start('spline');\r\n\t     */\r\n\t    var Animation = function (options) {\r\n\r\n\t        options = options || {};\r\n\r\n\t        this.stage = options.stage || {};\r\n\r\n\t        this.onframe = options.onframe || function() {};\r\n\r\n\t        // private properties\r\n\t        this._clips = [];\r\n\r\n\t        this._running = false;\r\n\r\n\t        this._time;\r\n\r\n\t        this._pausedTime;\r\n\r\n\t        this._pauseStart;\r\n\r\n\t        this._paused = false;\r\n\r\n\t        Dispatcher.call(this);\r\n\t    };\r\n\r\n\t    Animation.prototype = {\r\n\r\n\t        constructor: Animation,\r\n\t        /**\r\n\t         * 添加 clip\r\n\t         * @param {module:zrender/animation/Clip} clip\r\n\t         */\r\n\t        addClip: function (clip) {\r\n\t            this._clips.push(clip);\r\n\t        },\r\n\t        /**\r\n\t         * 添加 animator\r\n\t         * @param {module:zrender/animation/Animator} animator\r\n\t         */\r\n\t        addAnimator: function (animator) {\r\n\t            animator.animation = this;\r\n\t            var clips = animator.getClips();\r\n\t            for (var i = 0; i < clips.length; i++) {\r\n\t                this.addClip(clips[i]);\r\n\t            }\r\n\t        },\r\n\t        /**\r\n\t         * 删除动画片段\r\n\t         * @param {module:zrender/animation/Clip} clip\r\n\t         */\r\n\t        removeClip: function(clip) {\r\n\t            var idx = util.indexOf(this._clips, clip);\r\n\t            if (idx >= 0) {\r\n\t                this._clips.splice(idx, 1);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 删除动画片段\r\n\t         * @param {module:zrender/animation/Animator} animator\r\n\t         */\r\n\t        removeAnimator: function (animator) {\r\n\t            var clips = animator.getClips();\r\n\t            for (var i = 0; i < clips.length; i++) {\r\n\t                this.removeClip(clips[i]);\r\n\t            }\r\n\t            animator.animation = null;\r\n\t        },\r\n\r\n\t        _update: function() {\r\n\r\n\t            var time = new Date().getTime() - this._pausedTime;\r\n\t            var delta = time - this._time;\r\n\t            var clips = this._clips;\r\n\t            var len = clips.length;\r\n\r\n\t            var deferredEvents = [];\r\n\t            var deferredClips = [];\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                var clip = clips[i];\r\n\t                var e = clip.step(time);\r\n\t                // Throw out the events need to be called after\r\n\t                // stage.update, like destroy\r\n\t                if (e) {\r\n\t                    deferredEvents.push(e);\r\n\t                    deferredClips.push(clip);\r\n\t                }\r\n\t            }\r\n\r\n\t            // Remove the finished clip\r\n\t            for (var i = 0; i < len;) {\r\n\t                if (clips[i]._needsRemove) {\r\n\t                    clips[i] = clips[len - 1];\r\n\t                    clips.pop();\r\n\t                    len--;\r\n\t                }\r\n\t                else {\r\n\t                    i++;\r\n\t                }\r\n\t            }\r\n\r\n\t            len = deferredEvents.length;\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                deferredClips[i].fire(deferredEvents[i]);\r\n\t            }\r\n\r\n\t            this._time = time;\r\n\r\n\t            this.onframe(delta);\r\n\r\n\t            this.trigger('frame', delta);\r\n\r\n\t            if (this.stage.update) {\r\n\t                this.stage.update();\r\n\t            }\r\n\t        },\r\n\r\n\t        _startLoop: function () {\r\n\t            var self = this;\r\n\r\n\t            this._running = true;\r\n\r\n\t            function step() {\r\n\t                if (self._running) {\r\n\r\n\t                    requestAnimationFrame(step);\r\n\r\n\t                    !self._paused && self._update();\r\n\t                }\r\n\t            }\r\n\r\n\t            requestAnimationFrame(step);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 开始运行动画\r\n\t         */\r\n\t        start: function () {\r\n\r\n\t            this._time = new Date().getTime();\r\n\t            this._pausedTime = 0;\r\n\r\n\t            this._startLoop();\r\n\t        },\r\n\t        /**\r\n\t         * 停止运行动画\r\n\t         */\r\n\t        stop: function () {\r\n\t            this._running = false;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Pause\r\n\t         */\r\n\t        pause: function () {\r\n\t            if (!this._paused) {\r\n\t                this._pauseStart = new Date().getTime();\r\n\t                this._paused = true;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Resume\r\n\t         */\r\n\t        resume: function () {\r\n\t            if (this._paused) {\r\n\t                this._pausedTime += (new Date().getTime()) - this._pauseStart;\r\n\t                this._paused = false;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 清除所有动画片段\r\n\t         */\r\n\t        clear: function () {\r\n\t            this._clips = [];\r\n\t        },\r\n\t        /**\r\n\t         * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画\r\n\t         * @param  {Object} target\r\n\t         * @param  {Object} options\r\n\t         * @param  {boolean} [options.loop=false] 是否循环播放动画\r\n\t         * @param  {Function} [options.getter=null]\r\n\t         *         如果指定getter函数，会通过getter函数取属性值\r\n\t         * @param  {Function} [options.setter=null]\r\n\t         *         如果指定setter函数，会通过setter函数设置属性值\r\n\t         * @return {module:zrender/animation/Animation~Animator}\r\n\t         */\r\n\t        // TODO Gap\r\n\t        animate: function (target, options) {\r\n\t            options = options || {};\r\n\t            var animator = new Animator(\r\n\t                target,\r\n\t                options.loop,\r\n\t                options.getter,\r\n\t                options.setter\r\n\t            );\r\n\r\n\t            return animator;\r\n\t        }\r\n\t    };\r\n\r\n\t    util.mixin(Animation, Dispatcher);\r\n\r\n\t    module.exports = Animation;\r\n\r\n\r\n\r\n/***/ },\r\n/* 87 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * 事件辅助类\r\n\t * @module zrender/core/event\r\n\t * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\r\n\t */\r\n\r\n\r\n\t    var Eventful = __webpack_require__(33);\r\n\t    var env = __webpack_require__(2);\r\n\r\n\t    var isDomLevel2 = (typeof window !== 'undefined') && !!window.addEventListener;\r\n\r\n\t    function getBoundingClientRect(el) {\r\n\t        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect\r\n\t        return el.getBoundingClientRect ? el.getBoundingClientRect() : {left: 0, top: 0};\r\n\t    }\r\n\r\n\t    // `calculate` is optional, default false\r\n\t    function clientToLocal(el, e, out, calculate) {\r\n\t        out = out || {};\r\n\r\n\t        // According to the W3C Working Draft, offsetX and offsetY should be relative\r\n\t        // to the padding edge of the target element. The only browser using this convention\r\n\t        // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does\r\n\t        // not support the properties.\r\n\t        // (see http://www.jacklmoore.com/notes/mouse-position/)\r\n\t        // In zr painter.dom, padding edge equals to border edge.\r\n\r\n\t        // FIXME\r\n\t        // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and\r\n\t        // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y\r\n\t        // is too complex. So css-transfrom dont support in this case temporarily.\r\n\t        if (calculate) {\r\n\t            defaultGetZrXY(el, e, out);\r\n\t        }\r\n\t        // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned\r\n\t        // ancestor element, so we should make sure el is positioned (e.g., not position:static).\r\n\t        // BTW1, Webkit don't return the same results as FF in non-simple cases (like add\r\n\t        // zoom-factor, overflow / opacity layers, transforms ...)\r\n\t        // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.\r\n\t        // <https://bugs.jquery.com/ticket/8523#comment:14>\r\n\t        // BTW3, In ff, offsetX/offsetY is always 0.\r\n\t        else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {\r\n\t            out.zrX = e.layerX;\r\n\t            out.zrY = e.layerY;\r\n\t        }\r\n\t        // For IE6+, chrome, safari, opera. (When will ff support offsetX?)\r\n\t        else if (e.offsetX != null) {\r\n\t            out.zrX = e.offsetX;\r\n\t            out.zrY = e.offsetY;\r\n\t        }\r\n\t        // For some other device, e.g., IOS safari.\r\n\t        else {\r\n\t            defaultGetZrXY(el, e, out);\r\n\t        }\r\n\r\n\t        return out;\r\n\t    }\r\n\r\n\t    function defaultGetZrXY(el, e, out) {\r\n\t        // This well-known method below does not support css transform.\r\n\t        var box = getBoundingClientRect(el);\r\n\t        out.zrX = e.clientX - box.left;\r\n\t        out.zrY = e.clientY - box.top;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.\r\n\t     * `calculate` is optional, default false.\r\n\t     */\r\n\t    function normalizeEvent(el, e, calculate) {\r\n\r\n\t        e = e || window.event;\r\n\r\n\t        if (e.zrX != null) {\r\n\t            return e;\r\n\t        }\r\n\r\n\t        var eventType = e.type;\r\n\t        var isTouch = eventType && eventType.indexOf('touch') >= 0;\r\n\r\n\t        if (!isTouch) {\r\n\t            clientToLocal(el, e, e, calculate);\r\n\t            e.zrDelta = (e.wheelDelta) ? e.wheelDelta / 120 : -(e.detail || 0) / 3;\r\n\t        }\r\n\t        else {\r\n\t            var touch = eventType != 'touchend'\r\n\t                ? e.targetTouches[0]\r\n\t                : e.changedTouches[0];\r\n\t            touch && clientToLocal(el, touch, e, calculate);\r\n\t        }\r\n\r\n\t        return e;\r\n\t    }\r\n\r\n\t    function addEventListener(el, name, handler) {\r\n\t        if (isDomLevel2) {\r\n\t            el.addEventListener(name, handler);\r\n\t        }\r\n\t        else {\r\n\t            el.attachEvent('on' + name, handler);\r\n\t        }\r\n\t    }\r\n\r\n\t    function removeEventListener(el, name, handler) {\r\n\t        if (isDomLevel2) {\r\n\t            el.removeEventListener(name, handler);\r\n\t        }\r\n\t        else {\r\n\t            el.detachEvent('on' + name, handler);\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 停止冒泡和阻止默认行为\r\n\t     * @memberOf module:zrender/core/event\r\n\t     * @method\r\n\t     * @param {Event} e : event对象\r\n\t     */\r\n\t    var stop = isDomLevel2\r\n\t        ? function (e) {\r\n\t            e.preventDefault();\r\n\t            e.stopPropagation();\r\n\t            e.cancelBubble = true;\r\n\t        }\r\n\t        : function (e) {\r\n\t            e.returnValue = false;\r\n\t            e.cancelBubble = true;\r\n\t        };\r\n\r\n\t    module.exports = {\r\n\t        clientToLocal: clientToLocal,\r\n\t        normalizeEvent: normalizeEvent,\r\n\t        addEventListener: addEventListener,\r\n\t        removeEventListener: removeEventListener,\r\n\r\n\t        stop: stop,\r\n\t        // 做向上兼容\r\n\t        Dispatcher: Eventful\r\n\t    };\r\n\r\n\r\n\r\n/***/ },\r\n/* 88 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    module.exports = (typeof window !== 'undefined' &&\r\n\t                                    (window.requestAnimationFrame\r\n\t                                    || window.msRequestAnimationFrame\r\n\t                                    || window.mozRequestAnimationFrame\r\n\t                                    || window.webkitRequestAnimationFrame))\r\n\t                                || function (func) {\r\n\t                                    setTimeout(func, 16);\r\n\t                                };\r\n\r\n\r\n\r\n/***/ },\r\n/* 89 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var eventTool = __webpack_require__(87);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Eventful = __webpack_require__(33);\r\n\t    var env = __webpack_require__(2);\r\n\t    var GestureMgr = __webpack_require__(90);\r\n\r\n\t    var addEventListener = eventTool.addEventListener;\r\n\t    var removeEventListener = eventTool.removeEventListener;\r\n\t    var normalizeEvent = eventTool.normalizeEvent;\r\n\r\n\t    var TOUCH_CLICK_DELAY = 300;\r\n\r\n\t    var mouseHandlerNames = [\r\n\t        'click', 'dblclick', 'mousewheel', 'mouseout',\r\n\t        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\r\n\t    ];\r\n\r\n\t    var touchHandlerNames = [\r\n\t        'touchstart', 'touchend', 'touchmove'\r\n\t    ];\r\n\r\n\t    function eventNameFix(name) {\r\n\t        return (name === 'mousewheel' && env.browser.firefox) ? 'DOMMouseScroll' : name;\r\n\t    }\r\n\r\n\t    function processGesture(proxy, event, stage) {\r\n\t        var gestureMgr = proxy._gestureMgr;\r\n\r\n\t        stage === 'start' && gestureMgr.clear();\r\n\r\n\t        var gestureInfo = gestureMgr.recognize(\r\n\t            event,\r\n\t            proxy.handler.findHover(event.zrX, event.zrY, null),\r\n\t            proxy.dom\r\n\t        );\r\n\r\n\t        stage === 'end' && gestureMgr.clear();\r\n\r\n\t        if (gestureInfo) {\r\n\t            // eventTool.stop(event);\r\n\t            var type = gestureInfo.type;\r\n\t            event.gestureEvent = type;\r\n\r\n\t            proxy.handler.dispatchToElement(gestureInfo.target, type, gestureInfo.event);\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Prevent mouse event from being dispatched after Touch Events action\r\n\t     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\r\n\t     * 1. Mobile browsers dispatch mouse events 300ms after touchend.\r\n\t     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\r\n\t     * Result: Blocking Mouse Events for 700ms.\r\n\t     */\r\n\t    function setTouchTimer(instance) {\r\n\t        instance._touching = true;\r\n\t        clearTimeout(instance._touchTimer);\r\n\t        instance._touchTimer = setTimeout(function () {\r\n\t            instance._touching = false;\r\n\t        }, 700);\r\n\t    }\r\n\r\n\t    function useTouchEvent() {\r\n\t        return env.touchEventsSupported;\r\n\t    }\r\n\r\n\t    var domHandlers = {\r\n\t        /**\r\n\t         * Mouse move handler\r\n\t         * @inner\r\n\t         * @param {Event} event\r\n\t         */\r\n\t        mousemove: function (event) {\r\n\t            event = normalizeEvent(this.dom, event);\r\n\r\n\t            this.trigger('mousemove', event);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Mouse out handler\r\n\t         * @inner\r\n\t         * @param {Event} event\r\n\t         */\r\n\t        mouseout: function (event) {\r\n\t            event = normalizeEvent(this.dom, event);\r\n\r\n\t            var element = event.toElement || event.relatedTarget;\r\n\t            if (element != this.dom) {\r\n\t                while (element && element.nodeType != 9) {\r\n\t                    // 忽略包含在root中的dom引起的mouseOut\r\n\t                    if (element === this.dom) {\r\n\t                        return;\r\n\t                    }\r\n\r\n\t                    element = element.parentNode;\r\n\t                }\r\n\t            }\r\n\r\n\t            this.trigger('mouseout', event);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Touch开始响应函数\r\n\t         * @inner\r\n\t         * @param {Event} event\r\n\t         */\r\n\t        touchstart: function (event) {\r\n\t            // Default mouse behaviour should not be disabled here.\r\n\t            // For example, page may needs to be slided.\r\n\r\n\t            event = normalizeEvent(this.dom, event);\r\n\r\n\t            this._lastTouchMoment = new Date();\r\n\r\n\t            processGesture(this, event, 'start');\r\n\r\n\t            // 平板补充一次findHover\r\n\t            // this._mobileFindFixed(event);\r\n\t            // Trigger mousemove and mousedown\r\n\t            domHandlers.mousemove.call(this, event);\r\n\r\n\t            domHandlers.mousedown.call(this, event);\r\n\r\n\t            setTouchTimer(this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Touch移动响应函数\r\n\t         * @inner\r\n\t         * @param {Event} event\r\n\t         */\r\n\t        touchmove: function (event) {\r\n\r\n\t            event = normalizeEvent(this.dom, event);\r\n\r\n\t            processGesture(this, event, 'change');\r\n\r\n\t            // Mouse move should always be triggered no matter whether\r\n\t            // there is gestrue event, because mouse move and pinch may\r\n\t            // be used at the same time.\r\n\t            domHandlers.mousemove.call(this, event);\r\n\r\n\t            setTouchTimer(this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Touch结束响应函数\r\n\t         * @inner\r\n\t         * @param {Event} event\r\n\t         */\r\n\t        touchend: function (event) {\r\n\r\n\t            event = normalizeEvent(this.dom, event);\r\n\r\n\t            processGesture(this, event, 'end');\r\n\r\n\t            domHandlers.mouseup.call(this, event);\r\n\r\n\t            // click event should always be triggered no matter whether\r\n\t            // there is gestrue event. System click can not be prevented.\r\n\t            if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\r\n\t                domHandlers.click.call(this, event);\r\n\t            }\r\n\r\n\t            setTouchTimer(this);\r\n\t        }\r\n\t    };\r\n\r\n\t    // Common handlers\r\n\t    zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\r\n\t        domHandlers[name] = function (event) {\r\n\t            event = normalizeEvent(this.dom, event);\r\n\t            this.trigger(name, event);\r\n\t        };\r\n\t    });\r\n\r\n\t    /**\r\n\t     * 为控制类实例初始化dom 事件处理函数\r\n\t     *\r\n\t     * @inner\r\n\t     * @param {module:zrender/Handler} instance 控制类实例\r\n\t     */\r\n\t    function initDomHandler(instance) {\r\n\t        for (var i = 0; i < touchHandlerNames.length; i++) {\r\n\t            var name = touchHandlerNames[i];\r\n\t            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\r\n\t        }\r\n\r\n\t        for (var i = 0; i < mouseHandlerNames.length; i++) {\r\n\t            var name = mouseHandlerNames[i];\r\n\t            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);\r\n\t        }\r\n\r\n\t        function makeMouseHandler(fn, instance) {\r\n\t            return function () {\r\n\t                if (instance._touching) {\r\n\t                    return;\r\n\t                }\r\n\t                return fn.apply(instance, arguments);\r\n\t            };\r\n\t        }\r\n\t    }\r\n\r\n\r\n\t    function HandlerDomProxy(dom) {\r\n\t        Eventful.call(this);\r\n\r\n\t        this.dom = dom;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        this._touching = false;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {number}\r\n\t         */\r\n\t        this._touchTimer;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {module:zrender/core/GestureMgr}\r\n\t         */\r\n\t        this._gestureMgr = new GestureMgr();\r\n\r\n\t        this._handlers = {};\r\n\r\n\t        initDomHandler(this);\r\n\r\n\t        if (useTouchEvent()) {\r\n\t            mountHandlers(touchHandlerNames, this);\r\n\r\n\t            // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\r\n\t            // addEventListener(root, 'mouseout', this._mouseoutHandler);\r\n\t        }\r\n\r\n\t        // Considering some devices that both enable touch and mouse event (like MS Surface\r\n\t        // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\r\n\t        // mouse event can not be handle in those devices.\r\n\t        mountHandlers(mouseHandlerNames, this);\r\n\r\n\t        function mountHandlers(handlerNames, instance) {\r\n\t            zrUtil.each(handlerNames, function (name) {\r\n\t                addEventListener(dom, eventNameFix(name), instance._handlers[name]);\r\n\t            }, instance);\r\n\t        }\r\n\t    }\r\n\r\n\t    var handlerDomProxyProto = HandlerDomProxy.prototype;\r\n\t    handlerDomProxyProto.dispose = function () {\r\n\t        var handlerNames = mouseHandlerNames.concat(touchHandlerNames);\r\n\r\n\t        for (var i = 0; i < handlerNames.length; i++) {\r\n\t            var name = handlerNames[i];\r\n\t            removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);\r\n\t        }\r\n\t    };\r\n\r\n\t    handlerDomProxyProto.setCursor = function (cursorStyle) {\r\n\t        this.dom.style.cursor = cursorStyle || 'default';\r\n\t    };\r\n\r\n\t    zrUtil.mixin(HandlerDomProxy, Eventful);\r\n\r\n\t    module.exports = HandlerDomProxy;\r\n\r\n\r\n/***/ },\r\n/* 90 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * Only implements needed gestures for mobile.\r\n\t */\r\n\r\n\r\n\t    var eventUtil = __webpack_require__(87);\r\n\r\n\t    var GestureMgr = function () {\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Array.<Object>}\r\n\t         */\r\n\t        this._track = [];\r\n\t    };\r\n\r\n\t    GestureMgr.prototype = {\r\n\r\n\t        constructor: GestureMgr,\r\n\r\n\t        recognize: function (event, target, root) {\r\n\t            this._doTrack(event, target, root);\r\n\t            return this._recognize(event);\r\n\t        },\r\n\r\n\t        clear: function () {\r\n\t            this._track.length = 0;\r\n\t            return this;\r\n\t        },\r\n\r\n\t        _doTrack: function (event, target, root) {\r\n\t            var touches = event.touches;\r\n\r\n\t            if (!touches) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var trackItem = {\r\n\t                points: [],\r\n\t                touches: [],\r\n\t                target: target,\r\n\t                event: event\r\n\t            };\r\n\r\n\t            for (var i = 0, len = touches.length; i < len; i++) {\r\n\t                var touch = touches[i];\r\n\t                var pos = eventUtil.clientToLocal(root, touch, {});\r\n\t                trackItem.points.push([pos.zrX, pos.zrY]);\r\n\t                trackItem.touches.push(touch);\r\n\t            }\r\n\r\n\t            this._track.push(trackItem);\r\n\t        },\r\n\r\n\t        _recognize: function (event) {\r\n\t            for (var eventName in recognizers) {\r\n\t                if (recognizers.hasOwnProperty(eventName)) {\r\n\t                    var gestureInfo = recognizers[eventName](this._track, event);\r\n\t                    if (gestureInfo) {\r\n\t                        return gestureInfo;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    function dist(pointPair) {\r\n\t        var dx = pointPair[1][0] - pointPair[0][0];\r\n\t        var dy = pointPair[1][1] - pointPair[0][1];\r\n\r\n\t        return Math.sqrt(dx * dx + dy * dy);\r\n\t    }\r\n\r\n\t    function center(pointPair) {\r\n\t        return [\r\n\t            (pointPair[0][0] + pointPair[1][0]) / 2,\r\n\t            (pointPair[0][1] + pointPair[1][1]) / 2\r\n\t        ];\r\n\t    }\r\n\r\n\t    var recognizers = {\r\n\r\n\t        pinch: function (track, event) {\r\n\t            var trackLen = track.length;\r\n\r\n\t            if (!trackLen) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var pinchEnd = (track[trackLen - 1] || {}).points;\r\n\t            var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;\r\n\r\n\t            if (pinchPre\r\n\t                && pinchPre.length > 1\r\n\t                && pinchEnd\r\n\t                && pinchEnd.length > 1\r\n\t            ) {\r\n\t                var pinchScale = dist(pinchEnd) / dist(pinchPre);\r\n\t                !isFinite(pinchScale) && (pinchScale = 1);\r\n\r\n\t                event.pinchScale = pinchScale;\r\n\r\n\t                var pinchCenter = center(pinchEnd);\r\n\t                event.pinchX = pinchCenter[0];\r\n\t                event.pinchY = pinchCenter[1];\r\n\r\n\t                return {\r\n\t                    type: 'pinch',\r\n\t                    target: track[0].target,\r\n\t                    event: event\r\n\t                };\r\n\t            }\r\n\t        }\r\n\r\n\t        // Only pinch currently.\r\n\t    };\r\n\r\n\t    module.exports = GestureMgr;\r\n\r\n\r\n\r\n/***/ },\r\n/* 91 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * Default canvas painter\r\n\t * @module zrender/Painter\r\n\t * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\r\n\t *         errorrik (errorrik@gmail.com)\r\n\t *         pissang (https://www.github.com/pissang)\r\n\t */\r\n\t \r\n\r\n\t    var config = __webpack_require__(41);\r\n\t    var util = __webpack_require__(4);\r\n\t    var log = __webpack_require__(40);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\t    var timsort = __webpack_require__(85);\r\n\r\n\t    var Layer = __webpack_require__(92);\r\n\r\n\t    var requestAnimationFrame = __webpack_require__(88);\r\n\r\n\t    // PENDIGN\r\n\t    // Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.\r\n\t    //\r\n\t    // Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.\r\n\t    var MAX_PROGRESSIVE_LAYER_NUMBER = 5;\r\n\r\n\t    function parseInt10(val) {\r\n\t        return parseInt(val, 10);\r\n\t    }\r\n\r\n\t    function isLayerValid(layer) {\r\n\t        if (!layer) {\r\n\t            return false;\r\n\t        }\r\n\r\n\t        if (layer.isBuildin) {\r\n\t            return true;\r\n\t        }\r\n\r\n\t        if (typeof(layer.resize) !== 'function'\r\n\t            || typeof(layer.refresh) !== 'function'\r\n\t        ) {\r\n\t            return false;\r\n\t        }\r\n\r\n\t        return true;\r\n\t    }\r\n\r\n\t    function preProcessLayer(layer) {\r\n\t        layer.__unusedCount++;\r\n\t    }\r\n\r\n\t    function postProcessLayer(layer) {\r\n\t        if (layer.__unusedCount == 1) {\r\n\t            layer.clear();\r\n\t        }\r\n\t    }\r\n\r\n\t    var tmpRect = new BoundingRect(0, 0, 0, 0);\r\n\t    var viewRect = new BoundingRect(0, 0, 0, 0);\r\n\t    function isDisplayableCulled(el, width, height) {\r\n\t        tmpRect.copy(el.getBoundingRect());\r\n\t        if (el.transform) {\r\n\t            tmpRect.applyTransform(el.transform);\r\n\t        }\r\n\t        viewRect.width = width;\r\n\t        viewRect.height = height;\r\n\t        return !tmpRect.intersect(viewRect);\r\n\t    }\r\n\r\n\t    function isClipPathChanged(clipPaths, prevClipPaths) {\r\n\t        if (clipPaths == prevClipPaths) { // Can both be null or undefined\r\n\t            return false;\r\n\t        }\r\n\r\n\t        if (!clipPaths || !prevClipPaths || (clipPaths.length !== prevClipPaths.length)) {\r\n\t            return true;\r\n\t        }\r\n\t        for (var i = 0; i < clipPaths.length; i++) {\r\n\t            if (clipPaths[i] !== prevClipPaths[i]) {\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    function doClip(clipPaths, ctx) {\r\n\t        for (var i = 0; i < clipPaths.length; i++) {\r\n\t            var clipPath = clipPaths[i];\r\n\t            var path = clipPath.path;\r\n\r\n\t            clipPath.setTransform(ctx);\r\n\t            path.beginPath(ctx);\r\n\t            clipPath.buildPath(path, clipPath.shape);\r\n\t            ctx.clip();\r\n\t            // Transform back\r\n\t            clipPath.restoreTransform(ctx);\r\n\t        }\r\n\t    }\r\n\r\n\t    function createRoot(width, height) {\r\n\t        var domRoot = document.createElement('div');\r\n\r\n\t        // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬\r\n\t        domRoot.style.cssText = [\r\n\t            'position:relative',\r\n\t            'overflow:hidden',\r\n\t            'width:' + width + 'px',\r\n\t            'height:' + height + 'px',\r\n\t            'padding:0',\r\n\t            'margin:0',\r\n\t            'border-width:0'\r\n\t        ].join(';') + ';';\r\n\r\n\t        return domRoot;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @alias module:zrender/Painter\r\n\t     * @constructor\r\n\t     * @param {HTMLElement} root 绘图容器\r\n\t     * @param {module:zrender/Storage} storage\r\n\t     * @param {Ojbect} opts\r\n\t     */\r\n\t    var Painter = function (root, storage, opts) {\r\n\t        // In node environment using node-canvas\r\n\t        var singleCanvas = !root.nodeName // In node ?\r\n\t            || root.nodeName.toUpperCase() === 'CANVAS';\r\n\r\n\t        this._opts = opts = util.extend({}, opts || {});\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;\r\n\t        /**\r\n\t         * @type {boolean}\r\n\t         * @private\r\n\t         */\r\n\t        this._singleCanvas = singleCanvas;\r\n\t        /**\r\n\t         * 绘图容器\r\n\t         * @type {HTMLElement}\r\n\t         */\r\n\t        this.root = root;\r\n\r\n\t        var rootStyle = root.style;\r\n\r\n\t        if (rootStyle) {\r\n\t            rootStyle['-webkit-tap-highlight-color'] = 'transparent';\r\n\t            rootStyle['-webkit-user-select'] =\r\n\t            rootStyle['user-select'] =\r\n\t            rootStyle['-webkit-touch-callout'] = 'none';\r\n\r\n\t            root.innerHTML = '';\r\n\t        }\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/Storage}\r\n\t         */\r\n\t        this.storage = storage;\r\n\r\n\t        /**\r\n\t         * @type {Array.<number>}\r\n\t         * @private\r\n\t         */\r\n\t        var zlevelList = this._zlevelList = [];\r\n\r\n\t        /**\r\n\t         * @type {Object.<string, module:zrender/Layer>}\r\n\t         * @private\r\n\t         */\r\n\t        var layers = this._layers = {};\r\n\r\n\t        /**\r\n\t         * @type {Object.<string, Object>}\r\n\t         * @type {private}\r\n\t         */\r\n\t        this._layerConfig = {};\r\n\r\n\t        if (!singleCanvas) {\r\n\t            this._width = this._getSize(0);\r\n\t            this._height = this._getSize(1);\r\n\r\n\t            var domRoot = this._domRoot = createRoot(\r\n\t                this._width, this._height\r\n\t            );\r\n\t            root.appendChild(domRoot);\r\n\t        }\r\n\t        else {\r\n\t            // Use canvas width and height directly\r\n\t            var width = root.width;\r\n\t            var height = root.height;\r\n\t            this._width = width;\r\n\t            this._height = height;\r\n\r\n\t            // Create layer if only one given canvas\r\n\t            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height\r\n\t            var mainLayer = new Layer(root, this, 1);\r\n\t            mainLayer.initContext();\r\n\t            // FIXME Use canvas width and height\r\n\t            // mainLayer.resize(width, height);\r\n\t            layers[0] = mainLayer;\r\n\t            zlevelList.push(0);\r\n\t        }\r\n\r\n\t        this.pathToImage = this._createPathToImage();\r\n\r\n\t        // Layers for progressive rendering\r\n\t        this._progressiveLayers = [];\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/Layer}\r\n\t         * @private\r\n\t         */\r\n\t        this._hoverlayer;\r\n\r\n\t        this._hoverElements = [];\r\n\t    };\r\n\r\n\t    Painter.prototype = {\r\n\r\n\t        constructor: Painter,\r\n\r\n\t        /**\r\n\t         * If painter use a single canvas\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        isSingleCanvas: function () {\r\n\t            return this._singleCanvas;\r\n\t        },\r\n\t        /**\r\n\t         * @return {HTMLDivElement}\r\n\t         */\r\n\t        getViewportRoot: function () {\r\n\t            return this._singleCanvas ? this._layers[0].dom : this._domRoot;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 刷新\r\n\t         * @param {boolean} [paintAll=false] 强制绘制所有displayable\r\n\t         */\r\n\t        refresh: function (paintAll) {\r\n\r\n\t            var list = this.storage.getDisplayList(true);\r\n\r\n\t            var zlevelList = this._zlevelList;\r\n\r\n\t            this._paintList(list, paintAll);\r\n\r\n\t            // Paint custum layers\r\n\t            for (var i = 0; i < zlevelList.length; i++) {\r\n\t                var z = zlevelList[i];\r\n\t                var layer = this._layers[z];\r\n\t                if (!layer.isBuildin && layer.refresh) {\r\n\t                    layer.refresh();\r\n\t                }\r\n\t            }\r\n\r\n\t            this.refreshHover();\r\n\r\n\t            if (this._progressiveLayers.length) {\r\n\t                this._startProgessive();\r\n\t            }\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        addHover: function (el, hoverStyle) {\r\n\t            if (el.__hoverMir) {\r\n\t                return;\r\n\t            }\r\n\t            var elMirror = new el.constructor({\r\n\t                style: el.style,\r\n\t                shape: el.shape\r\n\t            });\r\n\t            elMirror.__from = el;\r\n\t            el.__hoverMir = elMirror;\r\n\t            elMirror.setStyle(hoverStyle);\r\n\t            this._hoverElements.push(elMirror);\r\n\t        },\r\n\r\n\t        removeHover: function (el) {\r\n\t            var elMirror = el.__hoverMir;\r\n\t            var hoverElements = this._hoverElements;\r\n\t            var idx = util.indexOf(hoverElements, elMirror);\r\n\t            if (idx >= 0) {\r\n\t                hoverElements.splice(idx, 1);\r\n\t            }\r\n\t            el.__hoverMir = null;\r\n\t        },\r\n\r\n\t        clearHover: function (el) {\r\n\t            var hoverElements = this._hoverElements;\r\n\t            for (var i = 0; i < hoverElements.length; i++) {\r\n\t                var from = hoverElements[i].__from;\r\n\t                if (from) {\r\n\t                    from.__hoverMir = null;\r\n\t                }\r\n\t            }\r\n\t            hoverElements.length = 0;\r\n\t        },\r\n\r\n\t        refreshHover: function () {\r\n\t            var hoverElements = this._hoverElements;\r\n\t            var len = hoverElements.length;\r\n\t            var hoverLayer = this._hoverlayer;\r\n\t            hoverLayer && hoverLayer.clear();\r\n\r\n\t            if (!len) {\r\n\t                return;\r\n\t            }\r\n\t            timsort(hoverElements, this.storage.displayableSortFunc);\r\n\r\n\t            // Use a extream large zlevel\r\n\t            // FIXME?\r\n\t            if (!hoverLayer) {\r\n\t                hoverLayer = this._hoverlayer = this.getLayer(1e5);\r\n\t            }\r\n\r\n\t            var scope = {};\r\n\t            hoverLayer.ctx.save();\r\n\t            for (var i = 0; i < len;) {\r\n\t                var el = hoverElements[i];\r\n\t                var originalEl = el.__from;\r\n\t                // Original el is removed\r\n\t                // PENDING\r\n\t                if (!(originalEl && originalEl.__zr)) {\r\n\t                    hoverElements.splice(i, 1);\r\n\t                    originalEl.__hoverMir = null;\r\n\t                    len--;\r\n\t                    continue;\r\n\t                }\r\n\t                i++;\r\n\r\n\t                // Use transform\r\n\t                // FIXME style and shape ?\r\n\t                if (!originalEl.invisible) {\r\n\t                    el.transform = originalEl.transform;\r\n\t                    el.invTransform = originalEl.invTransform;\r\n\t                    el.__clipPaths = originalEl.__clipPaths;\r\n\t                    // el.\r\n\t                    this._doPaintEl(el, hoverLayer, true, scope);\r\n\t                }\r\n\t            }\r\n\t            hoverLayer.ctx.restore();\r\n\t        },\r\n\r\n\t        _startProgessive: function () {\r\n\t            var self = this;\r\n\r\n\t            if (!self._furtherProgressive) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            // Use a token to stop progress steps triggered by\r\n\t            // previous zr.refresh calling.\r\n\t            var token = self._progressiveToken = +new Date();\r\n\r\n\t            self._progress++;\r\n\t            requestAnimationFrame(step);\r\n\r\n\t            function step() {\r\n\t                // In case refreshed or disposed\r\n\t                if (token === self._progressiveToken && self.storage) {\r\n\r\n\t                    self._doPaintList(self.storage.getDisplayList());\r\n\r\n\t                    if (self._furtherProgressive) {\r\n\t                        self._progress++;\r\n\t                        requestAnimationFrame(step);\r\n\t                    }\r\n\t                    else {\r\n\t                        self._progressiveToken = -1;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        _clearProgressive: function () {\r\n\t            this._progressiveToken = -1;\r\n\t            this._progress = 0;\r\n\t            util.each(this._progressiveLayers, function (layer) {\r\n\t                layer.__dirty && layer.clear();\r\n\t            });\r\n\t        },\r\n\r\n\t        _paintList: function (list, paintAll) {\r\n\r\n\t            if (paintAll == null) {\r\n\t                paintAll = false;\r\n\t            }\r\n\r\n\t            this._updateLayerStatus(list);\r\n\r\n\t            this._clearProgressive();\r\n\r\n\t            this.eachBuildinLayer(preProcessLayer);\r\n\r\n\t            this._doPaintList(list, paintAll);\r\n\r\n\t            this.eachBuildinLayer(postProcessLayer);\r\n\t        },\r\n\r\n\t        _doPaintList: function (list, paintAll) {\r\n\t            var currentLayer;\r\n\t            var currentZLevel;\r\n\t            var ctx;\r\n\r\n\t            // var invTransform = [];\r\n\t            var scope;\r\n\r\n\t            var progressiveLayerIdx = 0;\r\n\t            var currentProgressiveLayer;\r\n\r\n\t            var width = this._width;\r\n\t            var height = this._height;\r\n\t            var layerProgress;\r\n\t            var frame = this._progress;\r\n\t            function flushProgressiveLayer(layer) {\r\n\t                var dpr = ctx.dpr || 1;\r\n\t                ctx.save();\r\n\t                ctx.globalAlpha = 1;\r\n\t                ctx.shadowBlur = 0;\r\n\t                // Avoid layer don't clear in next progressive frame\r\n\t                currentLayer.__dirty = true;\r\n\t                ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\t                ctx.drawImage(layer.dom, 0, 0, width * dpr, height * dpr);\r\n\t                ctx.restore();\r\n\t            }\r\n\r\n\t            for (var i = 0, l = list.length; i < l; i++) {\r\n\t                var el = list[i];\r\n\t                var elZLevel = this._singleCanvas ? 0 : el.zlevel;\r\n\r\n\t                var elFrame = el.__frame;\r\n\r\n\t                // Flush at current context\r\n\t                // PENDING\r\n\t                if (elFrame < 0 && currentProgressiveLayer) {\r\n\t                    flushProgressiveLayer(currentProgressiveLayer);\r\n\t                    currentProgressiveLayer = null;\r\n\t                }\r\n\r\n\t                // Change draw layer\r\n\t                if (currentZLevel !== elZLevel) {\r\n\t                    if (ctx) {\r\n\t                        ctx.restore();\r\n\t                    }\r\n\r\n\t                    // Reset scope\r\n\t                    scope = {};\r\n\r\n\t                    // Only 0 zlevel if only has one canvas\r\n\t                    currentZLevel = elZLevel;\r\n\t                    currentLayer = this.getLayer(currentZLevel);\r\n\r\n\t                    if (!currentLayer.isBuildin) {\r\n\t                        log(\r\n\t                            'ZLevel ' + currentZLevel\r\n\t                            + ' has been used by unkown layer ' + currentLayer.id\r\n\t                        );\r\n\t                    }\r\n\r\n\t                    ctx = currentLayer.ctx;\r\n\t                    ctx.save();\r\n\r\n\t                    // Reset the count\r\n\t                    currentLayer.__unusedCount = 0;\r\n\r\n\t                    if (currentLayer.__dirty || paintAll) {\r\n\t                        currentLayer.clear();\r\n\t                    }\r\n\t                }\r\n\r\n\t                if (!(currentLayer.__dirty || paintAll)) {\r\n\t                    continue;\r\n\t                }\r\n\r\n\t                if (elFrame >= 0) {\r\n\t                    // Progressive layer changed\r\n\t                    if (!currentProgressiveLayer) {\r\n\t                        currentProgressiveLayer = this._progressiveLayers[\r\n\t                            Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)\r\n\t                        ];\r\n\r\n\t                        currentProgressiveLayer.ctx.save();\r\n\t                        currentProgressiveLayer.renderScope = {};\r\n\r\n\t                        if (currentProgressiveLayer\r\n\t                            && (currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress)\r\n\t                        ) {\r\n\t                            // flushProgressiveLayer(currentProgressiveLayer);\r\n\t                            // Quick jump all progressive elements\r\n\t                            // All progressive element are not dirty, jump over and flush directly\r\n\t                            i = currentProgressiveLayer.__nextIdxNotProg - 1;\r\n\t                            // currentProgressiveLayer = null;\r\n\t                            continue;\r\n\t                        }\r\n\r\n\t                        layerProgress = currentProgressiveLayer.__progress;\r\n\r\n\t                        if (!currentProgressiveLayer.__dirty) {\r\n\t                            // Keep rendering\r\n\t                            frame = layerProgress;\r\n\t                        }\r\n\r\n\t                        currentProgressiveLayer.__progress = frame + 1;\r\n\t                    }\r\n\r\n\t                    if (elFrame === frame) {\r\n\t                        this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    this._doPaintEl(el, currentLayer, paintAll, scope);\r\n\t                }\r\n\r\n\t                el.__dirty = false;\r\n\t            }\r\n\r\n\t            if (currentProgressiveLayer) {\r\n\t                flushProgressiveLayer(currentProgressiveLayer);\r\n\t            }\r\n\r\n\t            // Restore the lastLayer ctx\r\n\t            ctx && ctx.restore();\r\n\t            // If still has clipping state\r\n\t            // if (scope.prevElClipPaths) {\r\n\t            //     ctx.restore();\r\n\t            // }\r\n\r\n\t            this._furtherProgressive = false;\r\n\t            util.each(this._progressiveLayers, function (layer) {\r\n\t                if (layer.__maxProgress >= layer.__progress) {\r\n\t                    this._furtherProgressive = true;\r\n\t                }\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        _doPaintEl: function (el, currentLayer, forcePaint, scope) {\r\n\t            var ctx = currentLayer.ctx;\r\n\t            var m = el.transform;\r\n\t            if (\r\n\t                (currentLayer.__dirty || forcePaint)\r\n\t                // Ignore invisible element\r\n\t                && !el.invisible\r\n\t                // Ignore transparent element\r\n\t                && el.style.opacity !== 0\r\n\t                // Ignore scale 0 element, in some environment like node-canvas\r\n\t                // Draw a scale 0 element can cause all following draw wrong\r\n\t                // And setTransform with scale 0 will cause set back transform failed.\r\n\t                && !(m && !m[0] && !m[3])\r\n\t                // Ignore culled element\r\n\t                && !(el.culling && isDisplayableCulled(el, this._width, this._height))\r\n\t            ) {\r\n\r\n\t                var clipPaths = el.__clipPaths;\r\n\r\n\t                // Optimize when clipping on group with several elements\r\n\t                if (scope.prevClipLayer !== currentLayer\r\n\t                    || isClipPathChanged(clipPaths, scope.prevElClipPaths)\r\n\t                ) {\r\n\t                    // If has previous clipping state, restore from it\r\n\t                    if (scope.prevElClipPaths) {\r\n\t                        scope.prevClipLayer.ctx.restore();\r\n\t                        scope.prevClipLayer = scope.prevElClipPaths = null;\r\n\r\n\t                        // Reset prevEl since context has been restored\r\n\t                        scope.prevEl = null;\r\n\t                    }\r\n\t                    // New clipping state\r\n\t                    if (clipPaths) {\r\n\t                        ctx.save();\r\n\t                        doClip(clipPaths, ctx);\r\n\t                        scope.prevClipLayer = currentLayer;\r\n\t                        scope.prevElClipPaths = clipPaths;\r\n\t                    }\r\n\t                }\r\n\t                el.beforeBrush && el.beforeBrush(ctx);\r\n\r\n\t                el.brush(ctx, scope.prevEl || null);\r\n\t                scope.prevEl = el;\r\n\r\n\t                el.afterBrush && el.afterBrush(ctx);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 获取 zlevel 所在层，如果不存在则会创建一个新的层\r\n\t         * @param {number} zlevel\r\n\t         * @return {module:zrender/Layer}\r\n\t         */\r\n\t        getLayer: function (zlevel) {\r\n\t            if (this._singleCanvas) {\r\n\t                return this._layers[0];\r\n\t            }\r\n\r\n\t            var layer = this._layers[zlevel];\r\n\t            if (!layer) {\r\n\t                // Create a new layer\r\n\t                layer = new Layer('zr_' + zlevel, this, this.dpr);\r\n\t                layer.isBuildin = true;\r\n\r\n\t                if (this._layerConfig[zlevel]) {\r\n\t                    util.merge(layer, this._layerConfig[zlevel], true);\r\n\t                }\r\n\r\n\t                this.insertLayer(zlevel, layer);\r\n\r\n\t                // Context is created after dom inserted to document\r\n\t                // Or excanvas will get 0px clientWidth and clientHeight\r\n\t                layer.initContext();\r\n\t            }\r\n\r\n\t            return layer;\r\n\t        },\r\n\r\n\t        insertLayer: function (zlevel, layer) {\r\n\r\n\t            var layersMap = this._layers;\r\n\t            var zlevelList = this._zlevelList;\r\n\t            var len = zlevelList.length;\r\n\t            var prevLayer = null;\r\n\t            var i = -1;\r\n\t            var domRoot = this._domRoot;\r\n\r\n\t            if (layersMap[zlevel]) {\r\n\t                log('ZLevel ' + zlevel + ' has been used already');\r\n\t                return;\r\n\t            }\r\n\t            // Check if is a valid layer\r\n\t            if (!isLayerValid(layer)) {\r\n\t                log('Layer of zlevel ' + zlevel + ' is not valid');\r\n\t                return;\r\n\t            }\r\n\r\n\t            if (len > 0 && zlevel > zlevelList[0]) {\r\n\t                for (i = 0; i < len - 1; i++) {\r\n\t                    if (\r\n\t                        zlevelList[i] < zlevel\r\n\t                        && zlevelList[i + 1] > zlevel\r\n\t                    ) {\r\n\t                        break;\r\n\t                    }\r\n\t                }\r\n\t                prevLayer = layersMap[zlevelList[i]];\r\n\t            }\r\n\t            zlevelList.splice(i + 1, 0, zlevel);\r\n\r\n\t            if (prevLayer) {\r\n\t                var prevDom = prevLayer.dom;\r\n\t                if (prevDom.nextSibling) {\r\n\t                    domRoot.insertBefore(\r\n\t                        layer.dom,\r\n\t                        prevDom.nextSibling\r\n\t                    );\r\n\t                }\r\n\t                else {\r\n\t                    domRoot.appendChild(layer.dom);\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                if (domRoot.firstChild) {\r\n\t                    domRoot.insertBefore(layer.dom, domRoot.firstChild);\r\n\t                }\r\n\t                else {\r\n\t                    domRoot.appendChild(layer.dom);\r\n\t                }\r\n\t            }\r\n\r\n\t            layersMap[zlevel] = layer;\r\n\t        },\r\n\r\n\t        // Iterate each layer\r\n\t        eachLayer: function (cb, context) {\r\n\t            var zlevelList = this._zlevelList;\r\n\t            var z;\r\n\t            var i;\r\n\t            for (i = 0; i < zlevelList.length; i++) {\r\n\t                z = zlevelList[i];\r\n\t                cb.call(context, this._layers[z], z);\r\n\t            }\r\n\t        },\r\n\r\n\t        // Iterate each buildin layer\r\n\t        eachBuildinLayer: function (cb, context) {\r\n\t            var zlevelList = this._zlevelList;\r\n\t            var layer;\r\n\t            var z;\r\n\t            var i;\r\n\t            for (i = 0; i < zlevelList.length; i++) {\r\n\t                z = zlevelList[i];\r\n\t                layer = this._layers[z];\r\n\t                if (layer.isBuildin) {\r\n\t                    cb.call(context, layer, z);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        // Iterate each other layer except buildin layer\r\n\t        eachOtherLayer: function (cb, context) {\r\n\t            var zlevelList = this._zlevelList;\r\n\t            var layer;\r\n\t            var z;\r\n\t            var i;\r\n\t            for (i = 0; i < zlevelList.length; i++) {\r\n\t                z = zlevelList[i];\r\n\t                layer = this._layers[z];\r\n\t                if (! layer.isBuildin) {\r\n\t                    cb.call(context, layer, z);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 获取所有已创建的层\r\n\t         * @param {Array.<module:zrender/Layer>} [prevLayer]\r\n\t         */\r\n\t        getLayers: function () {\r\n\t            return this._layers;\r\n\t        },\r\n\r\n\t        _updateLayerStatus: function (list) {\r\n\r\n\t            var layers = this._layers;\r\n\t            var progressiveLayers = this._progressiveLayers;\r\n\r\n\t            var elCountsLastFrame = {};\r\n\t            var progressiveElCountsLastFrame = {};\r\n\r\n\t            this.eachBuildinLayer(function (layer, z) {\r\n\t                elCountsLastFrame[z] = layer.elCount;\r\n\t                layer.elCount = 0;\r\n\t                layer.__dirty = false;\r\n\t            });\r\n\r\n\t            util.each(progressiveLayers, function (layer, idx) {\r\n\t                progressiveElCountsLastFrame[idx] = layer.elCount;\r\n\t                layer.elCount = 0;\r\n\t                layer.__dirty = false;\r\n\t            });\r\n\r\n\t            var progressiveLayerCount = 0;\r\n\t            var currentProgressiveLayer;\r\n\t            var lastProgressiveKey;\r\n\t            var frameCount = 0;\r\n\t            for (var i = 0, l = list.length; i < l; i++) {\r\n\t                var el = list[i];\r\n\t                var zlevel = this._singleCanvas ? 0 : el.zlevel;\r\n\t                var layer = layers[zlevel];\r\n\t                var elProgress = el.progressive;\r\n\t                if (layer) {\r\n\t                    layer.elCount++;\r\n\t                    layer.__dirty = layer.__dirty || el.__dirty;\r\n\t                }\r\n\r\n\t                /////// Update progressive\r\n\t                if (elProgress >= 0) {\r\n\t                    // Fix wrong progressive sequence problem.\r\n\t                    if (lastProgressiveKey !== elProgress) {\r\n\t                        lastProgressiveKey = elProgress;\r\n\t                        frameCount++;\r\n\t                    }\r\n\t                    var elFrame = el.__frame = frameCount - 1;\r\n\t                    if (!currentProgressiveLayer) {\r\n\t                        var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);\r\n\t                        currentProgressiveLayer = progressiveLayers[idx];\r\n\t                        if (!currentProgressiveLayer) {\r\n\t                            currentProgressiveLayer = progressiveLayers[idx] = new Layer(\r\n\t                                'progressive', this, this.dpr\r\n\t                            );\r\n\t                            currentProgressiveLayer.initContext();\r\n\t                        }\r\n\t                        currentProgressiveLayer.__maxProgress = 0;\r\n\t                    }\r\n\t                    currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;\r\n\t                    currentProgressiveLayer.elCount++;\r\n\r\n\t                    currentProgressiveLayer.__maxProgress = Math.max(\r\n\t                        currentProgressiveLayer.__maxProgress, elFrame\r\n\t                    );\r\n\r\n\t                    if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {\r\n\t                        // Should keep rendering this  layer because progressive rendering is not finished yet\r\n\t                        layer.__dirty = true;\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    el.__frame = -1;\r\n\r\n\t                    if (currentProgressiveLayer) {\r\n\t                        currentProgressiveLayer.__nextIdxNotProg = i;\r\n\t                        progressiveLayerCount++;\r\n\t                        currentProgressiveLayer = null;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            if (currentProgressiveLayer) {\r\n\t                progressiveLayerCount++;\r\n\t                currentProgressiveLayer.__nextIdxNotProg = i;\r\n\t            }\r\n\r\n\t            // 层中的元素数量有发生变化\r\n\t            this.eachBuildinLayer(function (layer, z) {\r\n\t                if (elCountsLastFrame[z] !== layer.elCount) {\r\n\t                    layer.__dirty = true;\r\n\t                }\r\n\t            });\r\n\r\n\t            progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);\r\n\t            util.each(progressiveLayers, function (layer, idx) {\r\n\t                if (progressiveElCountsLastFrame[idx] !== layer.elCount) {\r\n\t                    el.__dirty = true;\r\n\t                }\r\n\t                if (layer.__dirty) {\r\n\t                    layer.__progress = 0;\r\n\t                }\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 清除hover层外所有内容\r\n\t         */\r\n\t        clear: function () {\r\n\t            this.eachBuildinLayer(this._clearLayer);\r\n\t            return this;\r\n\t        },\r\n\r\n\t        _clearLayer: function (layer) {\r\n\t            layer.clear();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 修改指定zlevel的绘制参数\r\n\t         *\r\n\t         * @param {string} zlevel\r\n\t         * @param {Object} config 配置对象\r\n\t         * @param {string} [config.clearColor=0] 每次清空画布的颜色\r\n\t         * @param {string} [config.motionBlur=false] 是否开启动态模糊\r\n\t         * @param {number} [config.lastFrameAlpha=0.7]\r\n\t         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\r\n\t         */\r\n\t        configLayer: function (zlevel, config) {\r\n\t            if (config) {\r\n\t                var layerConfig = this._layerConfig;\r\n\t                if (!layerConfig[zlevel]) {\r\n\t                    layerConfig[zlevel] = config;\r\n\t                }\r\n\t                else {\r\n\t                    util.merge(layerConfig[zlevel], config, true);\r\n\t                }\r\n\r\n\t                var layer = this._layers[zlevel];\r\n\r\n\t                if (layer) {\r\n\t                    util.merge(layer, layerConfig[zlevel], true);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 删除指定层\r\n\t         * @param {number} zlevel 层所在的zlevel\r\n\t         */\r\n\t        delLayer: function (zlevel) {\r\n\t            var layers = this._layers;\r\n\t            var zlevelList = this._zlevelList;\r\n\t            var layer = layers[zlevel];\r\n\t            if (!layer) {\r\n\t                return;\r\n\t            }\r\n\t            layer.dom.parentNode.removeChild(layer.dom);\r\n\t            delete layers[zlevel];\r\n\r\n\t            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 区域大小变化后重绘\r\n\t         */\r\n\t        resize: function (width, height) {\r\n\t            var domRoot = this._domRoot;\r\n\t            // FIXME Why ?\r\n\t            domRoot.style.display = 'none';\r\n\r\n\t            // Save input w/h\r\n\t            var opts = this._opts;\r\n\t            width != null && (opts.width = width);\r\n\t            height != null && (opts.height = height);\r\n\r\n\t            width = this._getSize(0);\r\n\t            height = this._getSize(1);\r\n\r\n\t            domRoot.style.display = '';\r\n\r\n\t            // 优化没有实际改变的resize\r\n\t            if (this._width != width || height != this._height) {\r\n\t                domRoot.style.width = width + 'px';\r\n\t                domRoot.style.height = height + 'px';\r\n\r\n\t                for (var id in this._layers) {\r\n\t                    if (this._layers.hasOwnProperty(id)) {\r\n\t                        this._layers[id].resize(width, height);\r\n\t                    }\r\n\t                }\r\n\t                util.each(this._progressiveLayers, function (layer) {\r\n\t                    layer.resize(width, height);\r\n\t                });\r\n\r\n\t                this.refresh(true);\r\n\t            }\r\n\r\n\t            this._width = width;\r\n\t            this._height = height;\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 清除单独的一个层\r\n\t         * @param {number} zlevel\r\n\t         */\r\n\t        clearLayer: function (zlevel) {\r\n\t            var layer = this._layers[zlevel];\r\n\t            if (layer) {\r\n\t                layer.clear();\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 释放\r\n\t         */\r\n\t        dispose: function () {\r\n\t            this.root.innerHTML = '';\r\n\r\n\t            this.root =\r\n\t            this.storage =\r\n\r\n\t            this._domRoot =\r\n\t            this._layers = null;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get canvas which has all thing rendered\r\n\t         * @param {Object} opts\r\n\t         * @param {string} [opts.backgroundColor]\r\n\t         */\r\n\t        getRenderedCanvas: function (opts) {\r\n\t            opts = opts || {};\r\n\t            if (this._singleCanvas) {\r\n\t                return this._layers[0].dom;\r\n\t            }\r\n\r\n\t            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);\r\n\t            imageLayer.initContext();\r\n\r\n\t            imageLayer.clearColor = opts.backgroundColor;\r\n\t            imageLayer.clear();\r\n\r\n\t            var displayList = this.storage.getDisplayList(true);\r\n\r\n\t            var scope = {};\r\n\t            for (var i = 0; i < displayList.length; i++) {\r\n\t                var el = displayList[i];\r\n\t                this._doPaintEl(el, imageLayer, true, scope);\r\n\t            }\r\n\r\n\t            return imageLayer.dom;\r\n\t        },\r\n\t        /**\r\n\t         * 获取绘图区域宽度\r\n\t         */\r\n\t        getWidth: function () {\r\n\t            return this._width;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 获取绘图区域高度\r\n\t         */\r\n\t        getHeight: function () {\r\n\t            return this._height;\r\n\t        },\r\n\r\n\t        _getSize: function (whIdx) {\r\n\t            var opts = this._opts;\r\n\t            var wh = ['width', 'height'][whIdx];\r\n\t            var cwh = ['clientWidth', 'clientHeight'][whIdx];\r\n\t            var plt = ['paddingLeft', 'paddingTop'][whIdx];\r\n\t            var prb = ['paddingRight', 'paddingBottom'][whIdx];\r\n\r\n\t            if (opts[wh] != null && opts[wh] !== 'auto') {\r\n\t                return parseFloat(opts[wh]);\r\n\t            }\r\n\r\n\t            var root = this.root;\r\n\t            var stl = document.defaultView.getComputedStyle(root);\r\n\r\n\t            return (\r\n\t                (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh]))\r\n\t                - (parseInt10(stl[plt]) || 0)\r\n\t                - (parseInt10(stl[prb]) || 0)\r\n\t            ) | 0;\r\n\t        },\r\n\r\n\t        _pathToImage: function (id, path, width, height, dpr) {\r\n\t            var canvas = document.createElement('canvas');\r\n\t            var ctx = canvas.getContext('2d');\r\n\r\n\t            canvas.width = width * dpr;\r\n\t            canvas.height = height * dpr;\r\n\r\n\t            ctx.clearRect(0, 0, width * dpr, height * dpr);\r\n\r\n\t            var pathTransform = {\r\n\t                position: path.position,\r\n\t                rotation: path.rotation,\r\n\t                scale: path.scale\r\n\t            };\r\n\t            path.position = [0, 0, 0];\r\n\t            path.rotation = 0;\r\n\t            path.scale = [1, 1];\r\n\t            if (path) {\r\n\t                path.brush(ctx);\r\n\t            }\r\n\r\n\t            var ImageShape = __webpack_require__(62);\r\n\t            var imgShape = new ImageShape({\r\n\t                id: id,\r\n\t                style: {\r\n\t                    x: 0,\r\n\t                    y: 0,\r\n\t                    image: canvas\r\n\t                }\r\n\t            });\r\n\r\n\t            if (pathTransform.position != null) {\r\n\t                imgShape.position = path.position = pathTransform.position;\r\n\t            }\r\n\r\n\t            if (pathTransform.rotation != null) {\r\n\t                imgShape.rotation = path.rotation = pathTransform.rotation;\r\n\t            }\r\n\r\n\t            if (pathTransform.scale != null) {\r\n\t                imgShape.scale = path.scale = pathTransform.scale;\r\n\t            }\r\n\r\n\t            return imgShape;\r\n\t        },\r\n\r\n\t        _createPathToImage: function () {\r\n\t            var me = this;\r\n\r\n\t            return function (id, e, width, height) {\r\n\t                return me._pathToImage(\r\n\t                    id, e, width, height, me.dpr\r\n\t                );\r\n\t            };\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = Painter;\r\n\r\n\r\n\r\n/***/ },\r\n/* 92 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module zrender/Layer\r\n\t * @author pissang(https://www.github.com/pissang)\r\n\t */\r\n\r\n\r\n\t    var util = __webpack_require__(4);\r\n\t    var config = __webpack_require__(41);\r\n\t    var Style = __webpack_require__(47);\r\n\t    var Pattern = __webpack_require__(59);\r\n\r\n\t    function returnFalse() {\r\n\t        return false;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 创建dom\r\n\t     *\r\n\t     * @inner\r\n\t     * @param {string} id dom id 待用\r\n\t     * @param {string} type dom type，such as canvas, div etc.\r\n\t     * @param {Painter} painter painter instance\r\n\t     * @param {number} number\r\n\t     */\r\n\t    function createDom(id, type, painter, dpr) {\r\n\t        var newDom = document.createElement(type);\r\n\t        var width = painter.getWidth();\r\n\t        var height = painter.getHeight();\r\n\r\n\t        var newDomStyle = newDom.style;\r\n\t        // 没append呢，请原谅我这样写，清晰~\r\n\t        newDomStyle.position = 'absolute';\r\n\t        newDomStyle.left = 0;\r\n\t        newDomStyle.top = 0;\r\n\t        newDomStyle.width = width + 'px';\r\n\t        newDomStyle.height = height + 'px';\r\n\t        newDom.width = width * dpr;\r\n\t        newDom.height = height * dpr;\r\n\r\n\t        // id不作为索引用，避免可能造成的重名，定义为私有属性\r\n\t        newDom.setAttribute('data-zr-dom-id', id);\r\n\t        return newDom;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @alias module:zrender/Layer\r\n\t     * @constructor\r\n\t     * @extends module:zrender/mixin/Transformable\r\n\t     * @param {string} id\r\n\t     * @param {module:zrender/Painter} painter\r\n\t     * @param {number} [dpr]\r\n\t     */\r\n\t    var Layer = function(id, painter, dpr) {\r\n\t        var dom;\r\n\t        dpr = dpr || config.devicePixelRatio;\r\n\t        if (typeof id === 'string') {\r\n\t            dom = createDom(id, 'canvas', painter, dpr);\r\n\t        }\r\n\t        // Not using isDom because in node it will return false\r\n\t        else if (util.isObject(id)) {\r\n\t            dom = id;\r\n\t            id = dom.id;\r\n\t        }\r\n\t        this.id = id;\r\n\t        this.dom = dom;\r\n\r\n\t        var domStyle = dom.style;\r\n\t        if (domStyle) { // Not in node\r\n\t            dom.onselectstart = returnFalse; // 避免页面选中的尴尬\r\n\t            domStyle['-webkit-user-select'] = 'none';\r\n\t            domStyle['user-select'] = 'none';\r\n\t            domStyle['-webkit-touch-callout'] = 'none';\r\n\t            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';\r\n\t            domStyle['padding'] = 0;\r\n\t            domStyle['margin'] = 0;\r\n\t            domStyle['border-width'] = 0;\r\n\t        }\r\n\r\n\t        this.domBack = null;\r\n\t        this.ctxBack = null;\r\n\r\n\t        this.painter = painter;\r\n\r\n\t        this.config = null;\r\n\r\n\t        // Configs\r\n\t        /**\r\n\t         * 每次清空画布的颜色\r\n\t         * @type {string}\r\n\t         * @default 0\r\n\t         */\r\n\t        this.clearColor = 0;\r\n\t        /**\r\n\t         * 是否开启动态模糊\r\n\t         * @type {boolean}\r\n\t         * @default false\r\n\t         */\r\n\t        this.motionBlur = false;\r\n\t        /**\r\n\t         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\r\n\t         * @type {number}\r\n\t         * @default 0.7\r\n\t         */\r\n\t        this.lastFrameAlpha = 0.7;\r\n\r\n\t        /**\r\n\t         * Layer dpr\r\n\t         * @type {number}\r\n\t         */\r\n\t        this.dpr = dpr;\r\n\t    };\r\n\r\n\t    Layer.prototype = {\r\n\r\n\t        constructor: Layer,\r\n\r\n\t        elCount: 0,\r\n\r\n\t        __dirty: true,\r\n\r\n\t        initContext: function () {\r\n\t            this.ctx = this.dom.getContext('2d');\r\n\r\n\t            this.ctx.dpr = this.dpr;\r\n\t        },\r\n\r\n\t        createBackBuffer: function () {\r\n\t            var dpr = this.dpr;\r\n\r\n\t            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);\r\n\t            this.ctxBack = this.domBack.getContext('2d');\r\n\r\n\t            if (dpr != 1) {\r\n\t                this.ctxBack.scale(dpr, dpr);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {number} width\r\n\t         * @param  {number} height\r\n\t         */\r\n\t        resize: function (width, height) {\r\n\t            var dpr = this.dpr;\r\n\r\n\t            var dom = this.dom;\r\n\t            var domStyle = dom.style;\r\n\t            var domBack = this.domBack;\r\n\r\n\t            domStyle.width = width + 'px';\r\n\t            domStyle.height = height + 'px';\r\n\r\n\t            dom.width = width * dpr;\r\n\t            dom.height = height * dpr;\r\n\r\n\t            if (domBack) {\r\n\t                domBack.width = width * dpr;\r\n\t                domBack.height = height * dpr;\r\n\r\n\t                if (dpr != 1) {\r\n\t                    this.ctxBack.scale(dpr, dpr);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 清空该层画布\r\n\t         * @param {boolean} clearAll Clear all with out motion blur\r\n\t         */\r\n\t        clear: function (clearAll) {\r\n\t            var dom = this.dom;\r\n\t            var ctx = this.ctx;\r\n\t            var width = dom.width;\r\n\t            var height = dom.height;\r\n\r\n\t            var clearColor = this.clearColor;\r\n\t            var haveMotionBLur = this.motionBlur && !clearAll;\r\n\t            var lastFrameAlpha = this.lastFrameAlpha;\r\n\r\n\t            var dpr = this.dpr;\r\n\r\n\t            if (haveMotionBLur) {\r\n\t                if (!this.domBack) {\r\n\t                    this.createBackBuffer();\r\n\t                }\r\n\r\n\t                this.ctxBack.globalCompositeOperation = 'copy';\r\n\t                this.ctxBack.drawImage(\r\n\t                    dom, 0, 0,\r\n\t                    width / dpr,\r\n\t                    height / dpr\r\n\t                );\r\n\t            }\r\n\r\n\t            ctx.clearRect(0, 0, width, height);\r\n\t            if (clearColor) {\r\n\t                var clearColorGradientOrPattern;\r\n\t                // Gradient\r\n\t                if (clearColor.colorStops) {\r\n\t                    // Cache canvas gradient\r\n\t                    clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {\r\n\t                        x: 0,\r\n\t                        y: 0,\r\n\t                        width: width,\r\n\t                        height: height\r\n\t                    });\r\n\r\n\t                    clearColor.__canvasGradient = clearColorGradientOrPattern;\r\n\t                }\r\n\t                // Pattern\r\n\t                else if (clearColor.image) {\r\n\t                    clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);\r\n\t                }\r\n\t                ctx.save();\r\n\t                ctx.fillStyle = clearColorGradientOrPattern || clearColor;\r\n\t                ctx.fillRect(0, 0, width, height);\r\n\t                ctx.restore();\r\n\t            }\r\n\r\n\t            if (haveMotionBLur) {\r\n\t                var domBack = this.domBack;\r\n\t                ctx.save();\r\n\t                ctx.globalAlpha = lastFrameAlpha;\r\n\t                ctx.drawImage(domBack, 0, 0, width, height);\r\n\t                ctx.restore();\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = Layer;\r\n\r\n\r\n/***/ },\r\n/* 93 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    var Gradient = __webpack_require__(61);\r\n\t    module.exports = function (ecModel) {\r\n\t        function encodeColor(seriesModel) {\r\n\t            var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');\r\n\t            var data = seriesModel.getData();\r\n\t            var color = seriesModel.get(colorAccessPath) // Set in itemStyle\r\n\t                || seriesModel.getColorFromPalette(seriesModel.get('name'));  // Default color\r\n\r\n\t            // FIXME Set color function or use the platte color\r\n\t            data.setVisual('color', color);\r\n\r\n\t            // Only visible series has each data be visual encoded\r\n\t            if (!ecModel.isSeriesFiltered(seriesModel)) {\r\n\t                if (typeof color === 'function' && !(color instanceof Gradient)) {\r\n\t                    data.each(function (idx) {\r\n\t                        data.setItemVisual(\r\n\t                            idx, 'color', color(seriesModel.getDataParams(idx))\r\n\t                        );\r\n\t                    });\r\n\t                }\r\n\r\n\t                // itemStyle in each data item\r\n\t                data.each(function (idx) {\r\n\t                    var itemModel = data.getItemModel(idx);\r\n\t                    var color = itemModel.get(colorAccessPath, true);\r\n\t                    if (color != null) {\r\n\t                        data.setItemVisual(idx, 'color', color);\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        }\r\n\t        ecModel.eachRawSeries(encodeColor);\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 94 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// Compatitable with 2.0\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var compatStyle = __webpack_require__(95);\r\n\r\n\t    function get(opt, path) {\r\n\t        path = path.split(',');\r\n\t        var obj = opt;\r\n\t        for (var i = 0; i < path.length; i++) {\r\n\t            obj = obj && obj[path[i]];\r\n\t            if (obj == null) {\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t        return obj;\r\n\t    }\r\n\r\n\t    function set(opt, path, val, overwrite) {\r\n\t        path = path.split(',');\r\n\t        var obj = opt;\r\n\t        var key;\r\n\t        for (var i = 0; i < path.length - 1; i++) {\r\n\t            key = path[i];\r\n\t            if (obj[key] == null) {\r\n\t                obj[key] = {};\r\n\t            }\r\n\t            obj = obj[key];\r\n\t        }\r\n\t        if (overwrite || obj[path[i]] == null) {\r\n\t            obj[path[i]] = val;\r\n\t        }\r\n\t    }\r\n\r\n\t    function compatLayoutProperties(option) {\r\n\t        each(LAYOUT_PROPERTIES, function (prop) {\r\n\t            if (prop[0] in option && !(prop[1] in option)) {\r\n\t                option[prop[1]] = option[prop[0]];\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    var LAYOUT_PROPERTIES = [\r\n\t        ['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']\r\n\t    ];\r\n\r\n\t    var COMPATITABLE_COMPONENTS = [\r\n\t        'grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'\r\n\t    ];\r\n\r\n\t    var COMPATITABLE_SERIES = [\r\n\t        'bar', 'boxplot', 'candlestick', 'chord', 'effectScatter',\r\n\t        'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel',\r\n\t        'pie', 'radar', 'sankey', 'scatter', 'treemap'\r\n\t    ];\r\n\r\n\t    var each = zrUtil.each;\r\n\r\n\t    module.exports = function (option) {\r\n\t        each(option.series, function (seriesOpt) {\r\n\t            if (!zrUtil.isObject(seriesOpt)) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var seriesType = seriesOpt.type;\r\n\r\n\t            compatStyle(seriesOpt);\r\n\r\n\t            if (seriesType === 'pie' || seriesType === 'gauge') {\r\n\t                if (seriesOpt.clockWise != null) {\r\n\t                    seriesOpt.clockwise = seriesOpt.clockWise;\r\n\t                }\r\n\t            }\r\n\t            if (seriesType === 'gauge') {\r\n\t                var pointerColor = get(seriesOpt, 'pointer.color');\r\n\t                pointerColor != null\r\n\t                    && set(seriesOpt, 'itemStyle.normal.color', pointerColor);\r\n\t            }\r\n\r\n\t            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {\r\n\t                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {\r\n\t                    compatLayoutProperties(seriesOpt);\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t        });\r\n\r\n\t        // dataRange has changed to visualMap\r\n\t        if (option.dataRange) {\r\n\t            option.visualMap = option.dataRange;\r\n\t        }\r\n\r\n\t        each(COMPATITABLE_COMPONENTS, function (componentName) {\r\n\t            var options = option[componentName];\r\n\t            if (options) {\r\n\t                if (!zrUtil.isArray(options)) {\r\n\t                    options = [options];\r\n\t                }\r\n\t                each(options, function (option) {\r\n\t                    compatLayoutProperties(option);\r\n\t                });\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 95 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var POSSIBLE_STYLES = [\r\n\t        'areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle',\r\n\t        'chordStyle', 'label', 'labelLine'\r\n\t    ];\r\n\r\n\t    function compatItemStyle(opt) {\r\n\t        var itemStyleOpt = opt && opt.itemStyle;\r\n\t        if (itemStyleOpt) {\r\n\t            zrUtil.each(POSSIBLE_STYLES, function (styleName) {\r\n\t                var normalItemStyleOpt = itemStyleOpt.normal;\r\n\t                var emphasisItemStyleOpt = itemStyleOpt.emphasis;\r\n\t                if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {\r\n\t                    opt[styleName] = opt[styleName] || {};\r\n\t                    if (!opt[styleName].normal) {\r\n\t                        opt[styleName].normal = normalItemStyleOpt[styleName];\r\n\t                    }\r\n\t                    else {\r\n\t                        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);\r\n\t                    }\r\n\t                    normalItemStyleOpt[styleName] = null;\r\n\t                }\r\n\t                if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {\r\n\t                    opt[styleName] = opt[styleName] || {};\r\n\t                    if (!opt[styleName].emphasis) {\r\n\t                        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];\r\n\t                    }\r\n\t                    else {\r\n\t                        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);\r\n\t                    }\r\n\t                    emphasisItemStyleOpt[styleName] = null;\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t    }\r\n\r\n\t    module.exports = function (seriesOpt) {\r\n\t        if (!seriesOpt) {\r\n\t            return;\r\n\t        }\r\n\t        compatItemStyle(seriesOpt);\r\n\t        compatItemStyle(seriesOpt.markPoint);\r\n\t        compatItemStyle(seriesOpt.markLine);\r\n\t        var data = seriesOpt.data;\r\n\t        if (data) {\r\n\t            for (var i = 0; i < data.length; i++) {\r\n\t                compatItemStyle(data[i]);\r\n\t            }\r\n\t            // mark point data\r\n\t            var markPoint = seriesOpt.markPoint;\r\n\t            if (markPoint && markPoint.data) {\r\n\t                var mpData = markPoint.data;\r\n\t                for (var i = 0; i < mpData.length; i++) {\r\n\t                    compatItemStyle(mpData[i]);\r\n\t                }\r\n\t            }\r\n\t            // mark line data\r\n\t            var markLine = seriesOpt.markLine;\r\n\t            if (markLine && markLine.data) {\r\n\t                var mlData = markLine.data;\r\n\t                for (var i = 0; i < mlData.length; i++) {\r\n\t                    if (zrUtil.isArray(mlData[i])) {\r\n\t                        compatItemStyle(mlData[i][0]);\r\n\t                        compatItemStyle(mlData[i][1]);\r\n\t                    }\r\n\t                    else {\r\n\t                        compatItemStyle(mlData[i]);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 96 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var PI = Math.PI;\r\n\t    /**\r\n\t     * @param {module:echarts/ExtensionAPI} api\r\n\t     * @param {Object} [opts]\r\n\t     * @param {string} [opts.text]\r\n\t     * @param {string} [opts.color]\r\n\t     * @param {string} [opts.textColor]\r\n\t     * @return {module:zrender/Element}\r\n\t     */\r\n\t    module.exports = function (api, opts) {\r\n\t        opts = opts || {};\r\n\t        zrUtil.defaults(opts, {\r\n\t            text: 'loading',\r\n\t            color: '#c23531',\r\n\t            textColor: '#000',\r\n\t            maskColor: 'rgba(255, 255, 255, 0.8)',\r\n\t            zlevel: 0\r\n\t        });\r\n\t        var mask = new graphic.Rect({\r\n\t            style: {\r\n\t                fill: opts.maskColor\r\n\t            },\r\n\t            zlevel: opts.zlevel,\r\n\t            z: 10000\r\n\t        });\r\n\t        var arc = new graphic.Arc({\r\n\t            shape: {\r\n\t                startAngle: -PI / 2,\r\n\t                endAngle: -PI / 2 + 0.1,\r\n\t                r: 10\r\n\t            },\r\n\t            style: {\r\n\t                stroke: opts.color,\r\n\t                lineCap: 'round',\r\n\t                lineWidth: 5\r\n\t            },\r\n\t            zlevel: opts.zlevel,\r\n\t            z: 10001\r\n\t        });\r\n\t        var labelRect = new graphic.Rect({\r\n\t            style: {\r\n\t                fill: 'none',\r\n\t                text: opts.text,\r\n\t                textPosition: 'right',\r\n\t                textDistance: 10,\r\n\t                textFill: opts.textColor\r\n\t            },\r\n\t            zlevel: opts.zlevel,\r\n\t            z: 10001\r\n\t        });\r\n\r\n\t        arc.animateShape(true)\r\n\t            .when(1000, {\r\n\t                endAngle: PI * 3 / 2\r\n\t            })\r\n\t            .start('circularInOut');\r\n\t        arc.animateShape(true)\r\n\t            .when(1000, {\r\n\t                startAngle: PI * 3 / 2\r\n\t            })\r\n\t            .delay(300)\r\n\t            .start('circularInOut');\r\n\r\n\t        var group = new graphic.Group();\r\n\t        group.add(arc);\r\n\t        group.add(labelRect);\r\n\t        group.add(mask);\r\n\t        // Inject resize\r\n\t        group.resize = function () {\r\n\t            var cx = api.getWidth() / 2;\r\n\t            var cy = api.getHeight() / 2;\r\n\t            arc.setShape({\r\n\t                cx: cx,\r\n\t                cy: cy\r\n\t            });\r\n\t            var r = arc.shape.r;\r\n\t            labelRect.setShape({\r\n\t                x: cx - r,\r\n\t                y: cy - r,\r\n\t                width: r * 2,\r\n\t                height: r * 2\r\n\t            });\r\n\r\n\t            mask.setShape({\r\n\t                x: 0,\r\n\t                y: 0,\r\n\t                width: api.getWidth(),\r\n\t                height: api.getHeight()\r\n\t            });\r\n\t        };\r\n\t        group.resize();\r\n\t        return group;\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 97 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\r\n\t * List for data storage\r\n\t * @module echarts/data/List\r\n\t */\r\n\r\n\r\n\t    var UNDEFINED = 'undefined';\r\n\t    var globalObj = typeof window === 'undefined' ? global : window;\r\n\t    var Float64Array = typeof globalObj.Float64Array === UNDEFINED\r\n\t        ? Array : globalObj.Float64Array;\r\n\t    var Int32Array = typeof globalObj.Int32Array === UNDEFINED\r\n\t        ? Array : globalObj.Int32Array;\r\n\r\n\t    var dataCtors = {\r\n\t        'float': Float64Array,\r\n\t        'int': Int32Array,\r\n\t        // Ordinal data type can be string or int\r\n\t        'ordinal': Array,\r\n\t        'number': Array,\r\n\t        'time': Array\r\n\t    };\r\n\r\n\t    var Model = __webpack_require__(12);\r\n\t    var DataDiffer = __webpack_require__(98);\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var isObject = zrUtil.isObject;\r\n\r\n\t    var TRANSFERABLE_PROPERTIES = [\r\n\t        'stackedOn', 'hasItemOption', '_nameList', '_idList', '_rawData'\r\n\t    ];\r\n\r\n\t    var transferProperties = function (a, b) {\r\n\t        zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {\r\n\t            if (b.hasOwnProperty(propName)) {\r\n\t                a[propName] = b[propName];\r\n\t            }\r\n\t        });\r\n\r\n\t        a.__wrappedMethods = b.__wrappedMethods;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @alias module:echarts/data/List\r\n\t     *\r\n\t     * @param {Array.<string>} dimensions\r\n\t     *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius\r\n\t     * @param {module:echarts/model/Model} hostModel\r\n\t     */\r\n\t    var List = function (dimensions, hostModel) {\r\n\r\n\t        dimensions = dimensions || ['x', 'y'];\r\n\r\n\t        var dimensionInfos = {};\r\n\t        var dimensionNames = [];\r\n\t        for (var i = 0; i < dimensions.length; i++) {\r\n\t            var dimensionName;\r\n\t            var dimensionInfo = {};\r\n\t            if (typeof dimensions[i] === 'string') {\r\n\t                dimensionName = dimensions[i];\r\n\t                dimensionInfo = {\r\n\t                    name: dimensionName,\r\n\t                    stackable: false,\r\n\t                    // Type can be 'float', 'int', 'number'\r\n\t                    // Default is number, Precision of float may not enough\r\n\t                    type: 'number'\r\n\t                };\r\n\t            }\r\n\t            else {\r\n\t                dimensionInfo = dimensions[i];\r\n\t                dimensionName = dimensionInfo.name;\r\n\t                dimensionInfo.type = dimensionInfo.type || 'number';\r\n\t            }\r\n\t            dimensionNames.push(dimensionName);\r\n\t            dimensionInfos[dimensionName] = dimensionInfo;\r\n\t        }\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {Array.<string>}\r\n\t         */\r\n\t        this.dimensions = dimensionNames;\r\n\r\n\t        /**\r\n\t         * Infomation of each data dimension, like data type.\r\n\t         * @type {Object}\r\n\t         */\r\n\t        this._dimensionInfos = dimensionInfos;\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/model/Model}\r\n\t         */\r\n\t        this.hostModel = hostModel;\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/model/Model}\r\n\t         */\r\n\t        this.dataType;\r\n\r\n\t        /**\r\n\t         * Indices stores the indices of data subset after filtered.\r\n\t         * This data subset will be used in chart.\r\n\t         * @type {Array.<number>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.indices = [];\r\n\r\n\t        /**\r\n\t         * Data storage\r\n\t         * @type {Object.<key, TypedArray|Array>}\r\n\t         * @private\r\n\t         */\r\n\t        this._storage = {};\r\n\r\n\t        /**\r\n\t         * @type {Array.<string>}\r\n\t         */\r\n\t        this._nameList = [];\r\n\t        /**\r\n\t         * @type {Array.<string>}\r\n\t         */\r\n\t        this._idList = [];\r\n\t        /**\r\n\t         * Models of data option is stored sparse for optimizing memory cost\r\n\t         * @type {Array.<module:echarts/model/Model>}\r\n\t         * @private\r\n\t         */\r\n\t        this._optionModels = [];\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/data/List}\r\n\t         */\r\n\t        this.stackedOn = null;\r\n\r\n\t        /**\r\n\t         * Global visual properties after visual coding\r\n\t         * @type {Object}\r\n\t         * @private\r\n\t         */\r\n\t        this._visual = {};\r\n\r\n\t        /**\r\n\t         * Globel layout properties.\r\n\t         * @type {Object}\r\n\t         * @private\r\n\t         */\r\n\t        this._layout = {};\r\n\r\n\t        /**\r\n\t         * Item visual properties after visual coding\r\n\t         * @type {Array.<Object>}\r\n\t         * @private\r\n\t         */\r\n\t        this._itemVisuals = [];\r\n\r\n\t        /**\r\n\t         * Item layout properties after layout\r\n\t         * @type {Array.<Object>}\r\n\t         * @private\r\n\t         */\r\n\t        this._itemLayouts = [];\r\n\r\n\t        /**\r\n\t         * Graphic elemnents\r\n\t         * @type {Array.<module:zrender/Element>}\r\n\t         * @private\r\n\t         */\r\n\t        this._graphicEls = [];\r\n\r\n\t        /**\r\n\t         * @type {Array.<Array|Object>}\r\n\t         * @private\r\n\t         */\r\n\t        this._rawData;\r\n\r\n\t        /**\r\n\t         * @type {Object}\r\n\t         * @private\r\n\t         */\r\n\t        this._extent;\r\n\t    };\r\n\r\n\t    var listProto = List.prototype;\r\n\r\n\t    listProto.type = 'list';\r\n\t    /**\r\n\t     * If each data item has it's own option\r\n\t     * @type {boolean}\r\n\t     */\r\n\t    listProto.hasItemOption = true;\r\n\r\n\t    /**\r\n\t     * Get dimension name\r\n\t     * @param {string|number} dim\r\n\t     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\r\n\t     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\r\n\t     * @return {string} Concrete dim name.\r\n\t     */\r\n\t    listProto.getDimension = function (dim) {\r\n\t        if (!isNaN(dim)) {\r\n\t            dim = this.dimensions[dim] || dim;\r\n\t        }\r\n\t        return dim;\r\n\t    };\r\n\t    /**\r\n\t     * Get type and stackable info of particular dimension\r\n\t     * @param {string|number} dim\r\n\t     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\r\n\t     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\r\n\t     */\r\n\t    listProto.getDimensionInfo = function (dim) {\r\n\t        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Initialize from data\r\n\t     * @param {Array.<Object|number|Array>} data\r\n\t     * @param {Array.<string>} [nameList]\r\n\t     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number\r\n\t     */\r\n\t    listProto.initData = function (data, nameList, dimValueGetter) {\r\n\t        data = data || [];\r\n\r\n\t        if (true) {\r\n\t            if (!zrUtil.isArray(data)) {\r\n\t                throw new Error('Invalid data.');\r\n\t            }\r\n\t        }\r\n\r\n\t        this._rawData = data;\r\n\r\n\t        // Clear\r\n\t        var storage = this._storage = {};\r\n\t        var indices = this.indices = [];\r\n\r\n\t        var dimensions = this.dimensions;\r\n\t        var size = data.length;\r\n\t        var dimensionInfoMap = this._dimensionInfos;\r\n\r\n\t        var idList = [];\r\n\t        var nameRepeatCount = {};\r\n\r\n\t        nameList = nameList || [];\r\n\r\n\t        // Init storage\r\n\t        for (var i = 0; i < dimensions.length; i++) {\r\n\t            var dimInfo = dimensionInfoMap[dimensions[i]];\r\n\t            var DataCtor = dataCtors[dimInfo.type];\r\n\t            storage[dimensions[i]] = new DataCtor(size);\r\n\t        }\r\n\r\n\t        var self = this;\r\n\t        if (!dimValueGetter) {\r\n\t            self.hasItemOption = false;\r\n\t        }\r\n\t        // Default dim value getter\r\n\t        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {\r\n\t            var value = modelUtil.getDataItemValue(dataItem);\r\n\t            // If any dataItem is like { value: 10 }\r\n\t            if (modelUtil.isDataItemOption(dataItem)) {\r\n\t                self.hasItemOption = true;\r\n\t            }\r\n\t            return modelUtil.converDataValue(\r\n\t                (value instanceof Array)\r\n\t                    ? value[dimIndex]\r\n\t                    // If value is a single number or something else not array.\r\n\t                    : value,\r\n\t                dimensionInfoMap[dimName]\r\n\t            );\r\n\t        };\r\n\r\n\t        for (var idx = 0; idx < data.length; idx++) {\r\n\t            var dataItem = data[idx];\r\n\t            // Each data item is value\r\n\t            // [1, 2]\r\n\t            // 2\r\n\t            // Bar chart, line chart which uses category axis\r\n\t            // only gives the 'y' value. 'x' value is the indices of cateogry\r\n\t            // Use a tempValue to normalize the value to be a (x, y) value\r\n\r\n\t            // Store the data by dimensions\r\n\t            for (var k = 0; k < dimensions.length; k++) {\r\n\t                var dim = dimensions[k];\r\n\t                var dimStorage = storage[dim];\r\n\t                // PENDING NULL is empty or zero\r\n\t                dimStorage[idx] = dimValueGetter(dataItem, dim, idx, k);\r\n\t            }\r\n\r\n\t            indices.push(idx);\r\n\t        }\r\n\r\n\t        // Use the name in option and create id\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            if (!nameList[i]) {\r\n\t                if (data[i] && data[i].name != null) {\r\n\t                    nameList[i] = data[i].name;\r\n\t                }\r\n\t            }\r\n\t            var name = nameList[i] || '';\r\n\t            // Try using the id in option\r\n\t            var id = data[i] && data[i].id;\r\n\r\n\t            if (!id && name) {\r\n\t                // Use name as id and add counter to avoid same name\r\n\t                nameRepeatCount[name] = nameRepeatCount[name] || 0;\r\n\t                id = name;\r\n\t                if (nameRepeatCount[name] > 0) {\r\n\t                    id += '__ec__' + nameRepeatCount[name];\r\n\t                }\r\n\t                nameRepeatCount[name]++;\r\n\t            }\r\n\t            id && (idList[i] = id);\r\n\t        }\r\n\r\n\t        this._nameList = nameList;\r\n\t        this._idList = idList;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @return {number}\r\n\t     */\r\n\t    listProto.count = function () {\r\n\t        return this.indices.length;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get value. Return NaN if idx is out of range.\r\n\t     * @param {string} dim Dim must be concrete name.\r\n\t     * @param {number} idx\r\n\t     * @param {boolean} stack\r\n\t     * @return {number}\r\n\t     */\r\n\t    listProto.get = function (dim, idx, stack) {\r\n\t        var storage = this._storage;\r\n\t        var dataIndex = this.indices[idx];\r\n\r\n\t        // If value not exists\r\n\t        if (dataIndex == null) {\r\n\t            return NaN;\r\n\t        }\r\n\r\n\t        var value = storage[dim] && storage[dim][dataIndex];\r\n\t        // FIXME ordinal data type is not stackable\r\n\t        if (stack) {\r\n\t            var dimensionInfo = this._dimensionInfos[dim];\r\n\t            if (dimensionInfo && dimensionInfo.stackable) {\r\n\t                var stackedOn = this.stackedOn;\r\n\t                while (stackedOn) {\r\n\t                    // Get no stacked data of stacked on\r\n\t                    var stackedValue = stackedOn.get(dim, idx);\r\n\t                    // Considering positive stack, negative stack and empty data\r\n\t                    if ((value >= 0 && stackedValue > 0)  // Positive stack\r\n\t                        || (value <= 0 && stackedValue < 0) // Negative stack\r\n\t                    ) {\r\n\t                        value += stackedValue;\r\n\t                    }\r\n\t                    stackedOn = stackedOn.stackedOn;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return value;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get value for multi dimensions.\r\n\t     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.\r\n\t     * @param {number} idx\r\n\t     * @param {boolean} stack\r\n\t     * @return {number}\r\n\t     */\r\n\t    listProto.getValues = function (dimensions, idx, stack) {\r\n\t        var values = [];\r\n\r\n\t        if (!zrUtil.isArray(dimensions)) {\r\n\t            stack = idx;\r\n\t            idx = dimensions;\r\n\t            dimensions = this.dimensions;\r\n\t        }\r\n\r\n\t        for (var i = 0, len = dimensions.length; i < len; i++) {\r\n\t            values.push(this.get(dimensions[i], idx, stack));\r\n\t        }\r\n\r\n\t        return values;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * If value is NaN. Inlcuding '-'\r\n\t     * @param {string} dim\r\n\t     * @param {number} idx\r\n\t     * @return {number}\r\n\t     */\r\n\t    listProto.hasValue = function (idx) {\r\n\t        var dimensions = this.dimensions;\r\n\t        var dimensionInfos = this._dimensionInfos;\r\n\t        for (var i = 0, len = dimensions.length; i < len; i++) {\r\n\t            if (\r\n\t                // Ordinal type can be string or number\r\n\t                dimensionInfos[dimensions[i]].type !== 'ordinal'\r\n\t                && isNaN(this.get(dimensions[i], idx))\r\n\t            ) {\r\n\t                return false;\r\n\t            }\r\n\t        }\r\n\t        return true;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get extent of data in one dimension\r\n\t     * @param {string} dim\r\n\t     * @param {boolean} stack\r\n\t     */\r\n\t    listProto.getDataExtent = function (dim, stack) {\r\n\t        dim = this.getDimension(dim);\r\n\t        var dimData = this._storage[dim];\r\n\t        var dimInfo = this.getDimensionInfo(dim);\r\n\t        stack = (dimInfo && dimInfo.stackable) && stack;\r\n\t        var dimExtent = (this._extent || (this._extent = {}))[dim + (!!stack)];\r\n\t        var value;\r\n\t        if (dimExtent) {\r\n\t            return dimExtent;\r\n\t        }\r\n\t        // var dimInfo = this._dimensionInfos[dim];\r\n\t        if (dimData) {\r\n\t            var min = Infinity;\r\n\t            var max = -Infinity;\r\n\t            // var isOrdinal = dimInfo.type === 'ordinal';\r\n\t            for (var i = 0, len = this.count(); i < len; i++) {\r\n\t                value = this.get(dim, i, stack);\r\n\t                // FIXME\r\n\t                // if (isOrdinal && typeof value === 'string') {\r\n\t                //     value = zrUtil.indexOf(dimData, value);\r\n\t                // }\r\n\t                value < min && (min = value);\r\n\t                value > max && (max = value);\r\n\t            }\r\n\t            return (this._extent[dim + !!stack] = [min, max]);\r\n\t        }\r\n\t        else {\r\n\t            return [Infinity, -Infinity];\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get sum of data in one dimension\r\n\t     * @param {string} dim\r\n\t     * @param {boolean} stack\r\n\t     */\r\n\t    listProto.getSum = function (dim, stack) {\r\n\t        var dimData = this._storage[dim];\r\n\t        var sum = 0;\r\n\t        if (dimData) {\r\n\t            for (var i = 0, len = this.count(); i < len; i++) {\r\n\t                var value = this.get(dim, i, stack);\r\n\t                if (!isNaN(value)) {\r\n\t                    sum += value;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return sum;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Retreive the index with given value\r\n\t     * @param {number} idx\r\n\t     * @param {number} value\r\n\t     * @return {number}\r\n\t     */\r\n\t    // FIXME Precision of float value\r\n\t    listProto.indexOf = function (dim, value) {\r\n\t        var storage = this._storage;\r\n\t        var dimData = storage[dim];\r\n\t        var indices = this.indices;\r\n\r\n\t        if (dimData) {\r\n\t            for (var i = 0, len = indices.length; i < len; i++) {\r\n\t                var rawIndex = indices[i];\r\n\t                if (dimData[rawIndex] === value) {\r\n\t                    return i;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return -1;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Retreive the index with given name\r\n\t     * @param {number} idx\r\n\t     * @param {number} name\r\n\t     * @return {number}\r\n\t     */\r\n\t    listProto.indexOfName = function (name) {\r\n\t        var indices = this.indices;\r\n\t        var nameList = this._nameList;\r\n\r\n\t        for (var i = 0, len = indices.length; i < len; i++) {\r\n\t            var rawIndex = indices[i];\r\n\t            if (nameList[rawIndex] === name) {\r\n\t                return i;\r\n\t            }\r\n\t        }\r\n\r\n\t        return -1;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Retreive the index with given raw data index\r\n\t     * @param {number} idx\r\n\t     * @param {number} name\r\n\t     * @return {number}\r\n\t     */\r\n\t    listProto.indexOfRawIndex = function (rawIndex) {\r\n\t        // Indices are ascending\r\n\t        var indices = this.indices;\r\n\r\n\t        // If rawIndex === dataIndex\r\n\t        var rawDataIndex = indices[rawIndex];\r\n\t        if (rawDataIndex != null && rawDataIndex === rawIndex) {\r\n\t            return rawIndex;\r\n\t        }\r\n\r\n\t        var left = 0;\r\n\t        var right = indices.length - 1;\r\n\t        while (left <= right) {\r\n\t            var mid = (left + right) / 2 | 0;\r\n\t            if (indices[mid] < rawIndex) {\r\n\t                left = mid + 1;\r\n\t            }\r\n\t            else if (indices[mid] > rawIndex) {\r\n\t                right = mid - 1;\r\n\t            }\r\n\t            else {\r\n\t                return mid;\r\n\t            }\r\n\t        }\r\n\t        return -1;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Retreive the index of nearest value\r\n\t     * @param {string} dim\r\n\t     * @param {number} value\r\n\t     * @param {boolean} stack If given value is after stacked\r\n\t     * @param {number} [maxDistance=Infinity]\r\n\t     * @return {number}\r\n\t     */\r\n\t    listProto.indexOfNearest = function (dim, value, stack, maxDistance) {\r\n\t        var storage = this._storage;\r\n\t        var dimData = storage[dim];\r\n\r\n\t        if (maxDistance == null) {\r\n\t            maxDistance = Infinity;\r\n\t        }\r\n\r\n\t        var nearestIdx = -1;\r\n\t        if (dimData) {\r\n\t            var minDist = Number.MAX_VALUE;\r\n\t            for (var i = 0, len = this.count(); i < len; i++) {\r\n\t                var diff = value - this.get(dim, i, stack);\r\n\t                var dist = Math.abs(diff);\r\n\t                if (\r\n\t                    diff <= maxDistance\r\n\t                    && (dist < minDist\r\n\t                        // For the case of two data are same on xAxis, which has sequence data.\r\n\t                        // Show the nearest index\r\n\t                        // https://github.com/ecomfe/echarts/issues/2869\r\n\t                        || (dist === minDist && diff > 0)\r\n\t                    )\r\n\t                ) {\r\n\t                    minDist = dist;\r\n\t                    nearestIdx = i;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return nearestIdx;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get raw data index\r\n\t     * @param {number} idx\r\n\t     * @return {number}\r\n\t     */\r\n\t    listProto.getRawIndex = function (idx) {\r\n\t        var rawIdx = this.indices[idx];\r\n\t        return rawIdx == null ? -1 : rawIdx;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get raw data item\r\n\t     * @param {number} idx\r\n\t     * @return {number}\r\n\t     */\r\n\t    listProto.getRawDataItem = function (idx) {\r\n\t        return this._rawData[this.getRawIndex(idx)];\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {number} idx\r\n\t     * @param {boolean} [notDefaultIdx=false]\r\n\t     * @return {string}\r\n\t     */\r\n\t    listProto.getName = function (idx) {\r\n\t        return this._nameList[this.indices[idx]] || '';\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {number} idx\r\n\t     * @param {boolean} [notDefaultIdx=false]\r\n\t     * @return {string}\r\n\t     */\r\n\t    listProto.getId = function (idx) {\r\n\t        return this._idList[this.indices[idx]] || (this.getRawIndex(idx) + '');\r\n\t    };\r\n\r\n\r\n\t    function normalizeDimensions(dimensions) {\r\n\t        if (!zrUtil.isArray(dimensions)) {\r\n\t            dimensions = [dimensions];\r\n\t        }\r\n\t        return dimensions;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Data iteration\r\n\t     * @param {string|Array.<string>}\r\n\t     * @param {Function} cb\r\n\t     * @param {boolean} [stack=false]\r\n\t     * @param {*} [context=this]\r\n\t     *\r\n\t     * @example\r\n\t     *  list.each('x', function (x, idx) {});\r\n\t     *  list.each(['x', 'y'], function (x, y, idx) {});\r\n\t     *  list.each(function (idx) {})\r\n\t     */\r\n\t    listProto.each = function (dims, cb, stack, context) {\r\n\t        if (typeof dims === 'function') {\r\n\t            context = stack;\r\n\t            stack = cb;\r\n\t            cb = dims;\r\n\t            dims = [];\r\n\t        }\r\n\r\n\t        dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);\r\n\r\n\t        var value = [];\r\n\t        var dimSize = dims.length;\r\n\t        var indices = this.indices;\r\n\r\n\t        context = context || this;\r\n\r\n\t        for (var i = 0; i < indices.length; i++) {\r\n\t            // Simple optimization\r\n\t            switch (dimSize) {\r\n\t                case 0:\r\n\t                    cb.call(context, i);\r\n\t                    break;\r\n\t                case 1:\r\n\t                    cb.call(context, this.get(dims[0], i, stack), i);\r\n\t                    break;\r\n\t                case 2:\r\n\t                    cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);\r\n\t                    break;\r\n\t                default:\r\n\t                    for (var k = 0; k < dimSize; k++) {\r\n\t                        value[k] = this.get(dims[k], i, stack);\r\n\t                    }\r\n\t                    // Index\r\n\t                    value[k] = i;\r\n\t                    cb.apply(context, value);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Data filter\r\n\t     * @param {string|Array.<string>}\r\n\t     * @param {Function} cb\r\n\t     * @param {boolean} [stack=false]\r\n\t     * @param {*} [context=this]\r\n\t     */\r\n\t    listProto.filterSelf = function (dimensions, cb, stack, context) {\r\n\t        if (typeof dimensions === 'function') {\r\n\t            context = stack;\r\n\t            stack = cb;\r\n\t            cb = dimensions;\r\n\t            dimensions = [];\r\n\t        }\r\n\r\n\t        dimensions = zrUtil.map(\r\n\t            normalizeDimensions(dimensions), this.getDimension, this\r\n\t        );\r\n\r\n\t        var newIndices = [];\r\n\t        var value = [];\r\n\t        var dimSize = dimensions.length;\r\n\t        var indices = this.indices;\r\n\r\n\t        context = context || this;\r\n\r\n\t        for (var i = 0; i < indices.length; i++) {\r\n\t            var keep;\r\n\t            // Simple optimization\r\n\t            if (dimSize === 1) {\r\n\t                keep = cb.call(\r\n\t                    context, this.get(dimensions[0], i, stack), i\r\n\t                );\r\n\t            }\r\n\t            else {\r\n\t                for (var k = 0; k < dimSize; k++) {\r\n\t                    value[k] = this.get(dimensions[k], i, stack);\r\n\t                }\r\n\t                value[k] = i;\r\n\t                keep = cb.apply(context, value);\r\n\t            }\r\n\t            if (keep) {\r\n\t                newIndices.push(indices[i]);\r\n\t            }\r\n\t        }\r\n\r\n\t        this.indices = newIndices;\r\n\r\n\t        // Reset data extent\r\n\t        this._extent = {};\r\n\r\n\t        return this;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Data mapping to a plain array\r\n\t     * @param {string|Array.<string>} [dimensions]\r\n\t     * @param {Function} cb\r\n\t     * @param {boolean} [stack=false]\r\n\t     * @param {*} [context=this]\r\n\t     * @return {Array}\r\n\t     */\r\n\t    listProto.mapArray = function (dimensions, cb, stack, context) {\r\n\t        if (typeof dimensions === 'function') {\r\n\t            context = stack;\r\n\t            stack = cb;\r\n\t            cb = dimensions;\r\n\t            dimensions = [];\r\n\t        }\r\n\r\n\t        var result = [];\r\n\t        this.each(dimensions, function () {\r\n\t            result.push(cb && cb.apply(this, arguments));\r\n\t        }, stack, context);\r\n\t        return result;\r\n\t    };\r\n\r\n\t    function cloneListForMapAndSample(original, excludeDimensions) {\r\n\t        var allDimensions = original.dimensions;\r\n\t        var list = new List(\r\n\t            zrUtil.map(allDimensions, original.getDimensionInfo, original),\r\n\t            original.hostModel\r\n\t        );\r\n\t        // FIXME If needs stackedOn, value may already been stacked\r\n\t        transferProperties(list, original);\r\n\r\n\t        var storage = list._storage = {};\r\n\t        var originalStorage = original._storage;\r\n\t        // Init storage\r\n\t        for (var i = 0; i < allDimensions.length; i++) {\r\n\t            var dim = allDimensions[i];\r\n\t            var dimStore = originalStorage[dim];\r\n\t            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {\r\n\t                storage[dim] = new dimStore.constructor(\r\n\t                    originalStorage[dim].length\r\n\t                );\r\n\t            }\r\n\t            else {\r\n\t                // Direct reference for other dimensions\r\n\t                storage[dim] = originalStorage[dim];\r\n\t            }\r\n\t        }\r\n\t        return list;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Data mapping to a new List with given dimensions\r\n\t     * @param {string|Array.<string>} dimensions\r\n\t     * @param {Function} cb\r\n\t     * @param {boolean} [stack=false]\r\n\t     * @param {*} [context=this]\r\n\t     * @return {Array}\r\n\t     */\r\n\t    listProto.map = function (dimensions, cb, stack, context) {\r\n\t        dimensions = zrUtil.map(\r\n\t            normalizeDimensions(dimensions), this.getDimension, this\r\n\t        );\r\n\r\n\t        var list = cloneListForMapAndSample(this, dimensions);\r\n\t        // Following properties are all immutable.\r\n\t        // So we can reference to the same value\r\n\t        var indices = list.indices = this.indices;\r\n\r\n\t        var storage = list._storage;\r\n\r\n\t        var tmpRetValue = [];\r\n\t        this.each(dimensions, function () {\r\n\t            var idx = arguments[arguments.length - 1];\r\n\t            var retValue = cb && cb.apply(this, arguments);\r\n\t            if (retValue != null) {\r\n\t                // a number\r\n\t                if (typeof retValue === 'number') {\r\n\t                    tmpRetValue[0] = retValue;\r\n\t                    retValue = tmpRetValue;\r\n\t                }\r\n\t                for (var i = 0; i < retValue.length; i++) {\r\n\t                    var dim = dimensions[i];\r\n\t                    var dimStore = storage[dim];\r\n\t                    var rawIdx = indices[idx];\r\n\t                    if (dimStore) {\r\n\t                        dimStore[rawIdx] = retValue[i];\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }, stack, context);\r\n\r\n\t        return list;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Large data down sampling on given dimension\r\n\t     * @param {string} dimension\r\n\t     * @param {number} rate\r\n\t     * @param {Function} sampleValue\r\n\t     * @param {Function} sampleIndex Sample index for name and id\r\n\t     */\r\n\t    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {\r\n\t        var list = cloneListForMapAndSample(this, [dimension]);\r\n\t        var storage = this._storage;\r\n\t        var targetStorage = list._storage;\r\n\r\n\t        var originalIndices = this.indices;\r\n\t        var indices = list.indices = [];\r\n\r\n\t        var frameValues = [];\r\n\t        var frameIndices = [];\r\n\t        var frameSize = Math.floor(1 / rate);\r\n\r\n\t        var dimStore = targetStorage[dimension];\r\n\t        var len = this.count();\r\n\t        // Copy data from original data\r\n\t        for (var i = 0; i < storage[dimension].length; i++) {\r\n\t            targetStorage[dimension][i] = storage[dimension][i];\r\n\t        }\r\n\t        for (var i = 0; i < len; i += frameSize) {\r\n\t            // Last frame\r\n\t            if (frameSize > len - i) {\r\n\t                frameSize = len - i;\r\n\t                frameValues.length = frameSize;\r\n\t            }\r\n\t            for (var k = 0; k < frameSize; k++) {\r\n\t                var idx = originalIndices[i + k];\r\n\t                frameValues[k] = dimStore[idx];\r\n\t                frameIndices[k] = idx;\r\n\t            }\r\n\t            var value = sampleValue(frameValues);\r\n\t            var idx = frameIndices[sampleIndex(frameValues, value) || 0];\r\n\t            // Only write value on the filtered data\r\n\t            dimStore[idx] = value;\r\n\t            indices.push(idx);\r\n\t        }\r\n\r\n\t        return list;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get model of one data item.\r\n\t     *\r\n\t     * @param {number} idx\r\n\t     */\r\n\t    // FIXME Model proxy ?\r\n\t    listProto.getItemModel = function (idx) {\r\n\t        var hostModel = this.hostModel;\r\n\t        idx = this.indices[idx];\r\n\t        return new Model(this._rawData[idx], hostModel, hostModel && hostModel.ecModel);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Create a data differ\r\n\t     * @param {module:echarts/data/List} otherList\r\n\t     * @return {module:echarts/data/DataDiffer}\r\n\t     */\r\n\t    listProto.diff = function (otherList) {\r\n\t        var idList = this._idList;\r\n\t        var otherIdList = otherList && otherList._idList;\r\n\t        return new DataDiffer(\r\n\t            otherList ? otherList.indices : [], this.indices, function (idx) {\r\n\t                return otherIdList[idx] || (idx + '');\r\n\t            }, function (idx) {\r\n\t                return idList[idx] || (idx + '');\r\n\t            }\r\n\t        );\r\n\t    };\r\n\t    /**\r\n\t     * Get visual property.\r\n\t     * @param {string} key\r\n\t     */\r\n\t    listProto.getVisual = function (key) {\r\n\t        var visual = this._visual;\r\n\t        return visual && visual[key];\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Set visual property\r\n\t     * @param {string|Object} key\r\n\t     * @param {*} [value]\r\n\t     *\r\n\t     * @example\r\n\t     *  setVisual('color', color);\r\n\t     *  setVisual({\r\n\t     *      'color': color\r\n\t     *  });\r\n\t     */\r\n\t    listProto.setVisual = function (key, val) {\r\n\t        if (isObject(key)) {\r\n\t            for (var name in key) {\r\n\t                if (key.hasOwnProperty(name)) {\r\n\t                    this.setVisual(name, key[name]);\r\n\t                }\r\n\t            }\r\n\t            return;\r\n\t        }\r\n\t        this._visual = this._visual || {};\r\n\t        this._visual[key] = val;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Set layout property.\r\n\t     * @param {string} key\r\n\t     * @param {*} [val]\r\n\t     */\r\n\t    listProto.setLayout = function (key, val) {\r\n\t        if (isObject(key)) {\r\n\t            for (var name in key) {\r\n\t                if (key.hasOwnProperty(name)) {\r\n\t                    this.setLayout(name, key[name]);\r\n\t                }\r\n\t            }\r\n\t            return;\r\n\t        }\r\n\t        this._layout[key] = val;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get layout property.\r\n\t     * @param  {string} key.\r\n\t     * @return {*}\r\n\t     */\r\n\t    listProto.getLayout = function (key) {\r\n\t        return this._layout[key];\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get layout of single data item\r\n\t     * @param {number} idx\r\n\t     */\r\n\t    listProto.getItemLayout = function (idx) {\r\n\t        return this._itemLayouts[idx];\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Set layout of single data item\r\n\t     * @param {number} idx\r\n\t     * @param {Object} layout\r\n\t     * @param {boolean=} [merge=false]\r\n\t     */\r\n\t    listProto.setItemLayout = function (idx, layout, merge) {\r\n\t        this._itemLayouts[idx] = merge\r\n\t            ? zrUtil.extend(this._itemLayouts[idx] || {}, layout)\r\n\t            : layout;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Clear all layout of single data item\r\n\t     */\r\n\t    listProto.clearItemLayouts = function () {\r\n\t        this._itemLayouts.length = 0;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get visual property of single data item\r\n\t     * @param {number} idx\r\n\t     * @param {string} key\r\n\t     * @param {boolean} ignoreParent\r\n\t     */\r\n\t    listProto.getItemVisual = function (idx, key, ignoreParent) {\r\n\t        var itemVisual = this._itemVisuals[idx];\r\n\t        var val = itemVisual && itemVisual[key];\r\n\t        if (val == null && !ignoreParent) {\r\n\t            // Use global visual property\r\n\t            return this.getVisual(key);\r\n\t        }\r\n\t        return val;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Set visual property of single data item\r\n\t     *\r\n\t     * @param {number} idx\r\n\t     * @param {string|Object} key\r\n\t     * @param {*} [value]\r\n\t     *\r\n\t     * @example\r\n\t     *  setItemVisual(0, 'color', color);\r\n\t     *  setItemVisual(0, {\r\n\t     *      'color': color\r\n\t     *  });\r\n\t     */\r\n\t    listProto.setItemVisual = function (idx, key, value) {\r\n\t        var itemVisual = this._itemVisuals[idx] || {};\r\n\t        this._itemVisuals[idx] = itemVisual;\r\n\r\n\t        if (isObject(key)) {\r\n\t            for (var name in key) {\r\n\t                if (key.hasOwnProperty(name)) {\r\n\t                    itemVisual[name] = key[name];\r\n\t                }\r\n\t            }\r\n\t            return;\r\n\t        }\r\n\t        itemVisual[key] = value;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Clear itemVisuals and list visual.\r\n\t     */\r\n\t    listProto.clearAllVisual = function () {\r\n\t        this._visual = {};\r\n\t        this._itemVisuals = [];\r\n\t    };\r\n\r\n\t    var setItemDataAndSeriesIndex = function (child) {\r\n\t        child.seriesIndex = this.seriesIndex;\r\n\t        child.dataIndex = this.dataIndex;\r\n\t        child.dataType = this.dataType;\r\n\t    };\r\n\t    /**\r\n\t     * Set graphic element relative to data. It can be set as null\r\n\t     * @param {number} idx\r\n\t     * @param {module:zrender/Element} [el]\r\n\t     */\r\n\t    listProto.setItemGraphicEl = function (idx, el) {\r\n\t        var hostModel = this.hostModel;\r\n\r\n\t        if (el) {\r\n\t            // Add data index and series index for indexing the data by element\r\n\t            // Useful in tooltip\r\n\t            el.dataIndex = idx;\r\n\t            el.dataType = this.dataType;\r\n\t            el.seriesIndex = hostModel && hostModel.seriesIndex;\r\n\t            if (el.type === 'group') {\r\n\t                el.traverse(setItemDataAndSeriesIndex, el);\r\n\t            }\r\n\t        }\r\n\r\n\t        this._graphicEls[idx] = el;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {number} idx\r\n\t     * @return {module:zrender/Element}\r\n\t     */\r\n\t    listProto.getItemGraphicEl = function (idx) {\r\n\t        return this._graphicEls[idx];\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {Function} cb\r\n\t     * @param {*} context\r\n\t     */\r\n\t    listProto.eachItemGraphicEl = function (cb, context) {\r\n\t        zrUtil.each(this._graphicEls, function (el, idx) {\r\n\t            if (el) {\r\n\t                cb && cb.call(context, el, idx);\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Shallow clone a new list except visual and layout properties, and graph elements.\r\n\t     * New list only change the indices.\r\n\t     */\r\n\t    listProto.cloneShallow = function () {\r\n\t        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);\r\n\t        var list = new List(dimensionInfoList, this.hostModel);\r\n\r\n\t        // FIXME\r\n\t        list._storage = this._storage;\r\n\r\n\t        transferProperties(list, this);\r\n\r\n\r\n\t        // Clone will not change the data extent and indices\r\n\t        list.indices = this.indices.slice();\r\n\r\n\t        if (this._extent) {\r\n\t            list._extent = zrUtil.extend({}, this._extent);\r\n\t        }\r\n\r\n\t        return list;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Wrap some method to add more feature\r\n\t     * @param {string} methodName\r\n\t     * @param {Function} injectFunction\r\n\t     */\r\n\t    listProto.wrapMethod = function (methodName, injectFunction) {\r\n\t        var originalMethod = this[methodName];\r\n\t        if (typeof originalMethod !== 'function') {\r\n\t            return;\r\n\t        }\r\n\t        this.__wrappedMethods = this.__wrappedMethods || [];\r\n\t        this.__wrappedMethods.push(methodName);\r\n\t        this[methodName] = function () {\r\n\t            var res = originalMethod.apply(this, arguments);\r\n\t            return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));\r\n\t        };\r\n\t    };\r\n\r\n\t    // Methods that create a new list based on this list should be listed here.\r\n\t    // Notice that those method should `RETURN` the new list.\r\n\t    listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map'];\r\n\t    // Methods that change indices of this list should be listed here.\r\n\t    listProto.CHANGABLE_METHODS = ['filterSelf'];\r\n\r\n\t    module.exports = List;\r\n\r\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\r\n\r\n/***/ },\r\n/* 98 */\r\n/***/ function(module, exports) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    function defaultKeyGetter(item) {\r\n\t        return item;\r\n\t    }\r\n\r\n\t    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {\r\n\t        this._old = oldArr;\r\n\t        this._new = newArr;\r\n\r\n\t        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\r\n\t        this._newKeyGetter = newKeyGetter || defaultKeyGetter;\r\n\t    }\r\n\r\n\t    DataDiffer.prototype = {\r\n\r\n\t        constructor: DataDiffer,\r\n\r\n\t        /**\r\n\t         * Callback function when add a data\r\n\t         */\r\n\t        add: function (func) {\r\n\t            this._add = func;\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Callback function when update a data\r\n\t         */\r\n\t        update: function (func) {\r\n\t            this._update = func;\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Callback function when remove a data\r\n\t         */\r\n\t        remove: function (func) {\r\n\t            this._remove = func;\r\n\t            return this;\r\n\t        },\r\n\r\n\t        execute: function () {\r\n\t            var oldArr = this._old;\r\n\t            var newArr = this._new;\r\n\t            var oldKeyGetter = this._oldKeyGetter;\r\n\t            var newKeyGetter = this._newKeyGetter;\r\n\r\n\t            var oldDataIndexMap = {};\r\n\t            var newDataIndexMap = {};\r\n\t            var oldDataKeyArr = [];\r\n\t            var newDataKeyArr = [];\r\n\t            var i;\r\n\r\n\t            initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, oldKeyGetter);\r\n\t            initIndexMap(newArr, newDataIndexMap, newDataKeyArr, newKeyGetter);\r\n\r\n\t            // Travel by inverted order to make sure order consistency\r\n\t            // when duplicate keys exists (consider newDataIndex.pop() below).\r\n\t            // For performance consideration, these code below do not look neat.\r\n\t            for (i = 0; i < oldArr.length; i++) {\r\n\t                var key = oldDataKeyArr[i];\r\n\t                var idx = newDataIndexMap[key];\r\n\r\n\t                // idx can never be empty array here. see 'set null' logic below.\r\n\t                if (idx != null) {\r\n\t                    // Consider there is duplicate key (for example, use dataItem.name as key).\r\n\t                    // We should make sure every item in newArr and oldArr can be visited.\r\n\t                    var len = idx.length;\r\n\t                    if (len) {\r\n\t                        len === 1 && (newDataIndexMap[key] = null);\r\n\t                        idx = idx.unshift();\r\n\t                    }\r\n\t                    else {\r\n\t                        newDataIndexMap[key] = null;\r\n\t                    }\r\n\t                    this._update && this._update(idx, i);\r\n\t                }\r\n\t                else {\r\n\t                    this._remove && this._remove(i);\r\n\t                }\r\n\t            }\r\n\r\n\t            for (var i = 0; i < newDataKeyArr.length; i++) {\r\n\t                var key = newDataKeyArr[i];\r\n\t                if (newDataIndexMap.hasOwnProperty(key)) {\r\n\t                    var idx = newDataIndexMap[key];\r\n\t                    if (idx == null) {\r\n\t                        continue;\r\n\t                    }\r\n\t                    // idx can never be empty array here. see 'set null' logic above.\r\n\t                    if (!idx.length) {\r\n\t                        this._add && this._add(idx);\r\n\t                    }\r\n\t                    else {\r\n\t                        for (var j = 0, len = idx.length; j < len; j++) {\r\n\t                            this._add && this._add(idx[j]);\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    function initIndexMap(arr, map, keyArr, keyGetter) {\r\n\t        for (var i = 0; i < arr.length; i++) {\r\n\t            var key = keyGetter(arr[i], i);\r\n\t            var existence = map[key];\r\n\t            if (existence == null) {\r\n\t                keyArr.push(key);\r\n\t                map[key] = i;\r\n\t            }\r\n\t            else {\r\n\t                if (!existence.length) {\r\n\t                    map[key] = existence = [existence];\r\n\t                }\r\n\t                existence.push(i);\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    module.exports = DataDiffer;\r\n\r\n\r\n/***/ },\r\n/* 99 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var PRIORITY = echarts.PRIORITY;\r\n\r\n\t    __webpack_require__(100);\r\n\t    __webpack_require__(103);\r\n\r\n\t    echarts.registerVisual(zrUtil.curry(\r\n\t        __webpack_require__(109), 'line', 'circle', 'line'\r\n\t    ));\r\n\t    echarts.registerLayout(zrUtil.curry(\r\n\t        __webpack_require__(110), 'line'\r\n\t    ));\r\n\r\n\t    // Down sample after filter\r\n\t    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(\r\n\t        __webpack_require__(111), 'line'\r\n\t    ));\r\n\r\n\t    // In case developer forget to include grid component\r\n\t    __webpack_require__(112);\r\n\r\n\r\n/***/ },\r\n/* 100 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var createListFromArray = __webpack_require__(101);\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\r\n\t    module.exports = SeriesModel.extend({\r\n\r\n\t        type: 'series.line',\r\n\r\n\t        dependencies: ['grid', 'polar'],\r\n\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            if (true) {\r\n\t                var coordSys = option.coordinateSystem;\r\n\t                if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {\r\n\t                    throw new Error('Line not support coordinateSystem besides cartesian and polar');\r\n\t                }\r\n\t            }\r\n\t            return createListFromArray(option.data, this, ecModel);\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,                  // 一级层叠\r\n\t            z: 2,                       // 二级层叠\r\n\t            coordinateSystem: 'cartesian2d',\r\n\t            legendHoverLink: true,\r\n\r\n\t            hoverAnimation: true,\r\n\t            // stack: null\r\n\t            // xAxisIndex: 0,\r\n\t            // yAxisIndex: 0,\r\n\r\n\t            // polarIndex: 0,\r\n\r\n\t            // If clip the overflow value\r\n\t            clipOverflow: true,\r\n\r\n\t            label: {\r\n\t                normal: {\r\n\t                    position: 'top'\r\n\t                }\r\n\t            },\r\n\t            // itemStyle: {\r\n\t            //     normal: {},\r\n\t            //     emphasis: {}\r\n\t            // },\r\n\t            lineStyle: {\r\n\t                normal: {\r\n\t                    width: 2,\r\n\t                    type: 'solid'\r\n\t                }\r\n\t            },\r\n\t            // areaStyle: {},\r\n\t            // false, 'start', 'end', 'middle'\r\n\t            step: false,\r\n\r\n\t            // Disabled if step is true\r\n\t            smooth: false,\r\n\t            smoothMonotone: null,\r\n\t            // 拐点图形类型\r\n\t            symbol: 'emptyCircle',\r\n\t            // 拐点图形大小\r\n\t            symbolSize: 4,\r\n\t            // 拐点图形旋转控制\r\n\t            symbolRotate: null,\r\n\r\n\t            // 是否显示 symbol, 只有在 tooltip hover 的时候显示\r\n\t            showSymbol: true,\r\n\t            // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\r\n\t            showAllSymbol: false,\r\n\r\n\t            // 是否连接断点\r\n\t            connectNulls: false,\r\n\r\n\t            // 数据过滤，'average', 'max', 'min', 'sum'\r\n\t            sampling: 'none',\r\n\r\n\t            animationEasing: 'linear',\r\n\r\n\t            // Disable progressive\r\n\t            progressive: 0,\r\n\t            hoverLayerThreshold: Infinity\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 101 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var List = __webpack_require__(97);\r\n\t    var completeDimensions = __webpack_require__(102);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var CoordinateSystem = __webpack_require__(26);\r\n\t    var getDataItemValue = modelUtil.getDataItemValue;\r\n\t    var converDataValue = modelUtil.converDataValue;\r\n\r\n\t    function firstDataNotNull(data) {\r\n\t        var i = 0;\r\n\t        while (i < data.length && data[i] == null) {\r\n\t            i++;\r\n\t        }\r\n\t        return data[i];\r\n\t    }\r\n\t    function ifNeedCompleteOrdinalData(data) {\r\n\t        var sampleItem = firstDataNotNull(data);\r\n\t        return sampleItem != null\r\n\t            && !zrUtil.isArray(getDataItemValue(sampleItem));\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Helper function to create a list from option data\r\n\t     */\r\n\t    function createListFromArray(data, seriesModel, ecModel) {\r\n\t        // If data is undefined\r\n\t        data = data || [];\r\n\r\n\t        if (true) {\r\n\t            if (!zrUtil.isArray(data)) {\r\n\t                throw new Error('Invalid data.');\r\n\t            }\r\n\t        }\r\n\r\n\t        var coordSysName = seriesModel.get('coordinateSystem');\r\n\t        var creator = creators[coordSysName];\r\n\t        var registeredCoordSys = CoordinateSystem.get(coordSysName);\r\n\t        // FIXME\r\n\t        var axesInfo = creator && creator(data, seriesModel, ecModel);\r\n\t        var dimensions = axesInfo && axesInfo.dimensions;\r\n\t        if (!dimensions) {\r\n\t            // Get dimensions from registered coordinate system\r\n\t            dimensions = (registeredCoordSys && registeredCoordSys.dimensions) || ['x', 'y'];\r\n\t            dimensions = completeDimensions(dimensions, data, dimensions.concat(['value']));\r\n\t        }\r\n\t        var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;\r\n\r\n\t        var list = new List(dimensions, seriesModel);\r\n\r\n\t        var nameList = createNameList(axesInfo, data);\r\n\r\n\t        var categories = {};\r\n\t        var dimValueGetter = (categoryIndex >= 0 && ifNeedCompleteOrdinalData(data))\r\n\t            ? function (itemOpt, dimName, dataIndex, dimIndex) {\r\n\t                // If any dataItem is like { value: 10 }\r\n\t                if (modelUtil.isDataItemOption(itemOpt)) {\r\n\t                    list.hasItemOption = true;\r\n\t                }\r\n\r\n\t                // Use dataIndex as ordinal value in categoryAxis\r\n\t                return dimIndex === categoryIndex\r\n\t                    ? dataIndex\r\n\t                    : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);\r\n\t            }\r\n\t            : function (itemOpt, dimName, dataIndex, dimIndex) {\r\n\t                var value = getDataItemValue(itemOpt);\r\n\t                var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);\r\n\t                // If any dataItem is like { value: 10 }\r\n\t                if (modelUtil.isDataItemOption(itemOpt)) {\r\n\t                    list.hasItemOption = true;\r\n\t                }\r\n\r\n\t                var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;\r\n\t                if (categoryAxesModels && categoryAxesModels[dimName]) {\r\n\t                    // If given value is a category string\r\n\t                    if (typeof val === 'string') {\r\n\t                        // Lazy get categories\r\n\t                        categories[dimName] = categories[dimName]\r\n\t                            || categoryAxesModels[dimName].getCategories();\r\n\t                        val = zrUtil.indexOf(categories[dimName], val);\r\n\t                        if (val < 0 && !isNaN(val)) {\r\n\t                            // In case some one write '1', '2' istead of 1, 2\r\n\t                            val = +val;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                return val;\r\n\t            };\r\n\r\n\t        list.hasItemOption = false;\r\n\t        list.initData(data, nameList, dimValueGetter);\r\n\r\n\t        return list;\r\n\t    }\r\n\r\n\t    function isStackable(axisType) {\r\n\t        return axisType !== 'category' && axisType !== 'time';\r\n\t    }\r\n\r\n\t    function getDimTypeByAxis(axisType) {\r\n\t        return axisType === 'category'\r\n\t            ? 'ordinal'\r\n\t            : axisType === 'time'\r\n\t            ? 'time'\r\n\t            : 'float';\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Creaters for each coord system.\r\n\t     */\r\n\t    var creators = {\r\n\r\n\t        cartesian2d: function (data, seriesModel, ecModel) {\r\n\r\n\t            var axesModels = zrUtil.map(['xAxis', 'yAxis'], function (name) {\r\n\t                return ecModel.queryComponents({\r\n\t                    mainType: name,\r\n\t                    index: seriesModel.get(name + 'Index'),\r\n\t                    id: seriesModel.get(name + 'Id')\r\n\t                })[0];\r\n\t            });\r\n\t            var xAxisModel = axesModels[0];\r\n\t            var yAxisModel = axesModels[1];\r\n\r\n\t            if (true) {\r\n\t                if (!xAxisModel) {\r\n\t                    throw new Error('xAxis \"' + zrUtil.retrieve(\r\n\t                        seriesModel.get('xAxisIndex'),\r\n\t                        seriesModel.get('xAxisId'),\r\n\t                        0\r\n\t                    ) + '\" not found');\r\n\t                }\r\n\t                if (!yAxisModel) {\r\n\t                    throw new Error('yAxis \"' + zrUtil.retrieve(\r\n\t                        seriesModel.get('xAxisIndex'),\r\n\t                        seriesModel.get('yAxisId'),\r\n\t                        0\r\n\t                    ) + '\" not found');\r\n\t                }\r\n\t            }\r\n\r\n\t            var xAxisType = xAxisModel.get('type');\r\n\t            var yAxisType = yAxisModel.get('type');\r\n\r\n\t            var dimensions = [\r\n\t                {\r\n\t                    name: 'x',\r\n\t                    type: getDimTypeByAxis(xAxisType),\r\n\t                    stackable: isStackable(xAxisType)\r\n\t                },\r\n\t                {\r\n\t                    name: 'y',\r\n\t                    // If two category axes\r\n\t                    type: getDimTypeByAxis(yAxisType),\r\n\t                    stackable: isStackable(yAxisType)\r\n\t                }\r\n\t            ];\r\n\r\n\t            var isXAxisCateogry = xAxisType === 'category';\r\n\t            var isYAxisCategory = yAxisType === 'category';\r\n\r\n\t            completeDimensions(dimensions, data, ['x', 'y', 'z']);\r\n\r\n\t            var categoryAxesModels = {};\r\n\t            if (isXAxisCateogry) {\r\n\t                categoryAxesModels.x = xAxisModel;\r\n\t            }\r\n\t            if (isYAxisCategory) {\r\n\t                categoryAxesModels.y = yAxisModel;\r\n\t            }\r\n\t            return {\r\n\t                dimensions: dimensions,\r\n\t                categoryIndex: isXAxisCateogry ? 0 : (isYAxisCategory ? 1 : -1),\r\n\t                categoryAxesModels: categoryAxesModels\r\n\t            };\r\n\t        },\r\n\r\n\t        polar: function (data, seriesModel, ecModel) {\r\n\t            var polarModel = ecModel.queryComponents({\r\n\t                mainType: 'polar',\r\n\t                index: seriesModel.get('polarIndex'),\r\n\t                id: seriesModel.get('polarId')\r\n\t            })[0];\r\n\r\n\t            var angleAxisModel = polarModel.findAxisModel('angleAxis');\r\n\t            var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\r\n\r\n\t            if (true) {\r\n\t                if (!angleAxisModel) {\r\n\t                    throw new Error('angleAxis option not found');\r\n\t                }\r\n\t                if (!radiusAxisModel) {\r\n\t                    throw new Error('radiusAxis option not found');\r\n\t                }\r\n\t            }\r\n\r\n\t            var radiusAxisType = radiusAxisModel.get('type');\r\n\t            var angleAxisType = angleAxisModel.get('type');\r\n\r\n\t            var dimensions = [\r\n\t                {\r\n\t                    name: 'radius',\r\n\t                    type: getDimTypeByAxis(radiusAxisType),\r\n\t                    stackable: isStackable(radiusAxisType)\r\n\t                },\r\n\t                {\r\n\t                    name: 'angle',\r\n\t                    type: getDimTypeByAxis(angleAxisType),\r\n\t                    stackable: isStackable(angleAxisType)\r\n\t                }\r\n\t            ];\r\n\t            var isAngleAxisCateogry = angleAxisType === 'category';\r\n\t            var isRadiusAxisCateogry = radiusAxisType === 'category';\r\n\r\n\t            completeDimensions(dimensions, data, ['radius', 'angle', 'value']);\r\n\r\n\t            var categoryAxesModels = {};\r\n\t            if (isRadiusAxisCateogry) {\r\n\t                categoryAxesModels.radius = radiusAxisModel;\r\n\t            }\r\n\t            if (isAngleAxisCateogry) {\r\n\t                categoryAxesModels.angle = angleAxisModel;\r\n\t            }\r\n\t            return {\r\n\t                dimensions: dimensions,\r\n\t                categoryIndex: isAngleAxisCateogry ? 1 : (isRadiusAxisCateogry ? 0 : -1),\r\n\t                categoryAxesModels: categoryAxesModels\r\n\t            };\r\n\t        },\r\n\r\n\t        geo: function (data, seriesModel, ecModel) {\r\n\t            // TODO Region\r\n\t            // 多个散点图系列在同一个地区的时候\r\n\t            return {\r\n\t                dimensions: completeDimensions([\r\n\t                    {name: 'lng'},\r\n\t                    {name: 'lat'}\r\n\t                ], data, ['lng', 'lat', 'value'])\r\n\t            };\r\n\t        }\r\n\t    };\r\n\r\n\t    function createNameList(result, data) {\r\n\t        var nameList = [];\r\n\r\n\t        var categoryDim = result && result.dimensions[result.categoryIndex];\r\n\t        var categoryAxisModel;\r\n\t        if (categoryDim) {\r\n\t            categoryAxisModel = result.categoryAxesModels[categoryDim.name];\r\n\t        }\r\n\r\n\t        if (categoryAxisModel) {\r\n\t            // FIXME Two category axis\r\n\t            var categories = categoryAxisModel.getCategories();\r\n\t            if (categories) {\r\n\t                var dataLen = data.length;\r\n\t                // Ordered data is given explicitly like\r\n\t                // [[3, 0.2], [1, 0.3], [2, 0.15]]\r\n\t                // or given scatter data,\r\n\t                // pick the category\r\n\t                if (zrUtil.isArray(data[0]) && data[0].length > 1) {\r\n\t                    nameList = [];\r\n\t                    for (var i = 0; i < dataLen; i++) {\r\n\t                        nameList[i] = categories[data[i][result.categoryIndex || 0]];\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    nameList = categories.slice(0);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        return nameList;\r\n\t    }\r\n\r\n\t    module.exports = createListFromArray;\r\n\r\n\r\n\r\n/***/ },\r\n/* 102 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Complete dimensions by data (guess dimension).\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    /**\r\n\t     * Complete the dimensions array guessed from the data structure.\r\n\t     * @param  {Array.<string>} dimensions      Necessary dimensions, like ['x', 'y']\r\n\t     * @param  {Array} data                     Data list. [[1, 2, 3], [2, 3, 4]]\r\n\t     * @param  {Array.<string>} defaultNames    Default names to fill not necessary dimensions, like ['value']\r\n\t     * @param  {string} extraPrefix             Prefix of name when filling the left dimensions.\r\n\t     * @return {Array.<string>}\r\n\t     */\r\n\t    function completeDimensions(dimensions, data, defaultNames, extraPrefix) {\r\n\t        if (!data) {\r\n\t            return dimensions;\r\n\t        }\r\n\r\n\t        var value0 = retrieveValue(data[0]);\r\n\t        var dimSize = zrUtil.isArray(value0) && value0.length || 1;\r\n\r\n\t        defaultNames = defaultNames || [];\r\n\t        extraPrefix = extraPrefix || 'extra';\r\n\t        for (var i = 0; i < dimSize; i++) {\r\n\t            if (!dimensions[i]) {\r\n\t                var name = defaultNames[i] || (extraPrefix + (i - defaultNames.length));\r\n\t                dimensions[i] = guessOrdinal(data, i)\r\n\t                    ? {type: 'ordinal', name: name}\r\n\t                    : name;\r\n\t            }\r\n\t        }\r\n\r\n\t        return dimensions;\r\n\t    }\r\n\r\n\t    // The rule should not be complex, otherwise user might not\r\n\t    // be able to known where the data is wrong.\r\n\t    var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {\r\n\t        for (var i = 0, len = data.length; i < len; i++) {\r\n\t            var value = retrieveValue(data[i]);\r\n\r\n\t            if (!zrUtil.isArray(value)) {\r\n\t                return false;\r\n\t            }\r\n\r\n\t            var value = value[dimIndex];\r\n\t            if (value != null && isFinite(value)) {\r\n\t                return false;\r\n\t            }\r\n\t            else if (zrUtil.isString(value) && value !== '-') {\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\r\n\t    function retrieveValue(o) {\r\n\t        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value: o;\r\n\t    }\r\n\r\n\t    module.exports = completeDimensions;\r\n\r\n\r\n\r\n/***/ },\r\n/* 103 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t// FIXME step not support polar\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var SymbolDraw = __webpack_require__(104);\r\n\t    var Symbol = __webpack_require__(105);\r\n\t    var lineAnimationDiff = __webpack_require__(107);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\r\n\t    var polyHelper = __webpack_require__(108);\r\n\r\n\t    var ChartView = __webpack_require__(42);\r\n\r\n\t    function isPointsSame(points1, points2) {\r\n\t        if (points1.length !== points2.length) {\r\n\t            return;\r\n\t        }\r\n\t        for (var i = 0; i < points1.length; i++) {\r\n\t            var p1 = points1[i];\r\n\t            var p2 = points2[i];\r\n\t            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {\r\n\t                return;\r\n\t            }\r\n\t        }\r\n\t        return true;\r\n\t    }\r\n\r\n\t    function getSmooth(smooth) {\r\n\t        return typeof (smooth) === 'number' ? smooth : (smooth ? 0.3 : 0);\r\n\t    }\r\n\r\n\t    function getAxisExtentWithGap(axis) {\r\n\t        var extent = axis.getGlobalExtent();\r\n\t        if (axis.onBand) {\r\n\t            // Remove extra 1px to avoid line miter in clipped edge\r\n\t            var halfBandWidth = axis.getBandWidth() / 2 - 1;\r\n\t            var dir = extent[1] > extent[0] ? 1 : -1;\r\n\t            extent[0] += dir * halfBandWidth;\r\n\t            extent[1] -= dir * halfBandWidth;\r\n\t        }\r\n\t        return extent;\r\n\t    }\r\n\r\n\t    function sign(val) {\r\n\t        return val >= 0 ? 1 : -1;\r\n\t    }\r\n\t    /**\r\n\t     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys\r\n\t     * @param {module:echarts/data/List} data\r\n\t     * @param {Array.<Array.<number>>} points\r\n\t     * @private\r\n\t     */\r\n\t    function getStackedOnPoints(coordSys, data) {\r\n\t        var baseAxis = coordSys.getBaseAxis();\r\n\t        var valueAxis = coordSys.getOtherAxis(baseAxis);\r\n\t        var valueStart = baseAxis.onZero\r\n\t            ? 0 : valueAxis.scale.getExtent()[0];\r\n\r\n\t        var valueDim = valueAxis.dim;\r\n\r\n\t        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\r\n\r\n\t        return data.mapArray([valueDim], function (val, idx) {\r\n\t            var stackedOnSameSign;\r\n\t            var stackedOn = data.stackedOn;\r\n\t            // Find first stacked value with same sign\r\n\t            while (stackedOn &&\r\n\t                sign(stackedOn.get(valueDim, idx)) === sign(val)\r\n\t            ) {\r\n\t                stackedOnSameSign = stackedOn;\r\n\t                break;\r\n\t            }\r\n\t            var stackedData = [];\r\n\t            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\r\n\t            stackedData[1 - baseDataOffset] = stackedOnSameSign\r\n\t                ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\r\n\r\n\t            return coordSys.dataToPoint(stackedData);\r\n\t        }, true);\r\n\t    }\r\n\r\n\t    function createGridClipShape(cartesian, hasAnimation, seriesModel) {\r\n\t        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));\r\n\t        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));\r\n\t        var isHorizontal = cartesian.getBaseAxis().isHorizontal();\r\n\r\n\t        var x = Math.min(xExtent[0], xExtent[1]);\r\n\t        var y = Math.min(yExtent[0], yExtent[1]);\r\n\t        var width = Math.max(xExtent[0], xExtent[1]) - x;\r\n\t        var height = Math.max(yExtent[0], yExtent[1]) - y;\r\n\t        var lineWidth = seriesModel.get('lineStyle.normal.width') || 2;\r\n\t        // Expand clip shape to avoid clipping when line value exceeds axis\r\n\t        var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);\r\n\t        if (isHorizontal) {\r\n\t            y -= expandSize;\r\n\t            height += expandSize * 2;\r\n\t        }\r\n\t        else {\r\n\t            x -= expandSize;\r\n\t            width += expandSize * 2;\r\n\t        }\r\n\r\n\t        var clipPath = new graphic.Rect({\r\n\t            shape: {\r\n\t                x: x,\r\n\t                y: y,\r\n\t                width: width,\r\n\t                height: height\r\n\t            }\r\n\t        });\r\n\r\n\t        if (hasAnimation) {\r\n\t            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;\r\n\t            graphic.initProps(clipPath, {\r\n\t                shape: {\r\n\t                    width: width,\r\n\t                    height: height\r\n\t                }\r\n\t            }, seriesModel);\r\n\t        }\r\n\r\n\t        return clipPath;\r\n\t    }\r\n\r\n\t    function createPolarClipShape(polar, hasAnimation, seriesModel) {\r\n\t        var angleAxis = polar.getAngleAxis();\r\n\t        var radiusAxis = polar.getRadiusAxis();\r\n\r\n\t        var radiusExtent = radiusAxis.getExtent();\r\n\t        var angleExtent = angleAxis.getExtent();\r\n\r\n\t        var RADIAN = Math.PI / 180;\r\n\r\n\t        var clipPath = new graphic.Sector({\r\n\t            shape: {\r\n\t                cx: polar.cx,\r\n\t                cy: polar.cy,\r\n\t                r0: radiusExtent[0],\r\n\t                r: radiusExtent[1],\r\n\t                startAngle: -angleExtent[0] * RADIAN,\r\n\t                endAngle: -angleExtent[1] * RADIAN,\r\n\t                clockwise: angleAxis.inverse\r\n\t            }\r\n\t        });\r\n\r\n\t        if (hasAnimation) {\r\n\t            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;\r\n\t            graphic.initProps(clipPath, {\r\n\t                shape: {\r\n\t                    endAngle: -angleExtent[1] * RADIAN\r\n\t                }\r\n\t            }, seriesModel);\r\n\t        }\r\n\r\n\t        return clipPath;\r\n\t    }\r\n\r\n\t    function createClipShape(coordSys, hasAnimation, seriesModel) {\r\n\t        return coordSys.type === 'polar'\r\n\t            ? createPolarClipShape(coordSys, hasAnimation, seriesModel)\r\n\t            : createGridClipShape(coordSys, hasAnimation, seriesModel);\r\n\t    }\r\n\r\n\t    function turnPointsIntoStep(points, coordSys, stepTurnAt) {\r\n\t        var baseAxis = coordSys.getBaseAxis();\r\n\t        var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\r\n\r\n\t        var stepPoints = [];\r\n\t        for (var i = 0; i < points.length - 1; i++) {\r\n\t            var nextPt = points[i + 1];\r\n\t            var pt = points[i];\r\n\t            stepPoints.push(pt);\r\n\r\n\t            var stepPt = [];\r\n\t            switch (stepTurnAt) {\r\n\t                case 'end':\r\n\t                    stepPt[baseIndex] = nextPt[baseIndex];\r\n\t                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\r\n\t                    // default is start\r\n\t                    stepPoints.push(stepPt);\r\n\t                    break;\r\n\t                case 'middle':\r\n\t                    // default is start\r\n\t                    var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;\r\n\t                    var stepPt2 = [];\r\n\t                    stepPt[baseIndex] = stepPt2[baseIndex] = middle;\r\n\t                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\r\n\t                    stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];\r\n\t                    stepPoints.push(stepPt);\r\n\t                    stepPoints.push(stepPt2);\r\n\t                    break;\r\n\t                default:\r\n\t                    stepPt[baseIndex] = pt[baseIndex];\r\n\t                    stepPt[1 - baseIndex] = nextPt[1 - baseIndex];\r\n\t                    // default is start\r\n\t                    stepPoints.push(stepPt);\r\n\t            }\r\n\t        }\r\n\t        // Last points\r\n\t        points[i] && stepPoints.push(points[i]);\r\n\t        return stepPoints;\r\n\t    }\r\n\r\n\t    function clamp(number, extent) {\r\n\t        return Math.max(Math.min(number, extent[1]), extent[0]);\r\n\t    }\r\n\r\n\t    function getVisualGradient(data, coordSys) {\r\n\t        var visualMetaList = data.getVisual('visualMeta');\r\n\t        if (!visualMetaList || !visualMetaList.length || !data.count()) {\r\n\t            // When data.count() is 0, gradient range can not be calculated.\r\n\t            return;\r\n\t        }\r\n\r\n\t        var visualMeta;\r\n\t        for (var i = visualMetaList.length - 1; i >= 0; i--) {\r\n\t            // Can only be x or y\r\n\t            if (visualMetaList[i].dimension < 2) {\r\n\t                visualMeta = visualMetaList[i];\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t        if (!visualMeta || coordSys.type !== 'cartesian2d') {\r\n\t            if (true) {\r\n\t                console.warn('Visual map on line style only support x or y dimension.');\r\n\t            }\r\n\t            return;\r\n\t        }\r\n\r\n\t        var dimension = visualMeta.dimension;\r\n\t        var dimName = data.dimensions[dimension];\r\n\t        var dataExtent = data.getDataExtent(dimName);\r\n\r\n\t        var stops = visualMeta.stops;\r\n\r\n\t        var colorStops = [];\r\n\t        if (stops[0].interval) {\r\n\t            stops.sort(function (a, b) {\r\n\t                return a.interval[0] - b.interval[0];\r\n\t            });\r\n\t        }\r\n\r\n\t        var firstStop = stops[0];\r\n\t        var lastStop = stops[stops.length - 1];\r\n\t        // Interval can be infinity in piecewise case\r\n\t        var min = firstStop.interval ? clamp(firstStop.interval[0], dataExtent) : firstStop.value;\r\n\t        var max = lastStop.interval ? clamp(lastStop.interval[1], dataExtent) : lastStop.value;\r\n\t        var stopsSpan = max - min;\r\n\r\n\t        // In the piecewise case data out of visual range\r\n\t        // ----dataMin----dataMax-----visualMin----visualMax\r\n\t        if (stopsSpan === 0) {\r\n\t            return data.getItemVisual(0, 'color');\r\n\t        }\r\n\t        for (var i = 0; i < stops.length; i++) {\r\n\t            // Piecewise\r\n\t            if (stops[i].interval) {\r\n\t                if (stops[i].interval[1] === stops[i].interval[0]) {\r\n\t                    continue;\r\n\t                }\r\n\t                colorStops.push({\r\n\t                    // Make sure offset is between 0 and 1\r\n\t                    offset: (clamp(stops[i].interval[0], dataExtent) - min) / stopsSpan,\r\n\t                    color: stops[i].color\r\n\t                }, {\r\n\t                    offset: (clamp(stops[i].interval[1], dataExtent) - min) / stopsSpan,\r\n\t                    color: stops[i].color\r\n\t                });\r\n\t            }\r\n\t            // Continous\r\n\t            else {\r\n\t                // if (i > 0 && stops[i].value === stops[i - 1].value) {\r\n\t                //     continue;\r\n\t                // }\r\n\t                colorStops.push({\r\n\t                    offset: (stops[i].value - min) / stopsSpan,\r\n\t                    color: stops[i].color\r\n\t                });\r\n\t            }\r\n\t        }\r\n\r\n\t        var gradient = new graphic.LinearGradient(\r\n\t            0, 0, 0, 0, colorStops, true\r\n\t        );\r\n\t        var axis = coordSys.getAxis(dimName);\r\n\r\n\t        var start = axis.toGlobalCoord(axis.dataToCoord(min));\r\n\t        var end = axis.toGlobalCoord(axis.dataToCoord(max));\r\n\t        // zrUtil.each(colorStops, function (colorStop) {\r\n\t        //     // Make sure each offset has rounded px to avoid not sharp edge\r\n\t        //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);\r\n\t        // });\r\n\r\n\t        gradient[dimName] = start;\r\n\t        gradient[dimName + '2'] = end;\r\n\r\n\t        return gradient;\r\n\t    }\r\n\r\n\t    module.exports = ChartView.extend({\r\n\r\n\t        type: 'line',\r\n\r\n\t        init: function () {\r\n\t            var lineGroup = new graphic.Group();\r\n\r\n\t            var symbolDraw = new SymbolDraw();\r\n\t            this.group.add(symbolDraw.group);\r\n\r\n\t            this._symbolDraw = symbolDraw;\r\n\t            this._lineGroup = lineGroup;\r\n\t        },\r\n\r\n\t        render: function (seriesModel, ecModel, api) {\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            var group = this.group;\r\n\t            var data = seriesModel.getData();\r\n\t            var lineStyleModel = seriesModel.getModel('lineStyle.normal');\r\n\t            var areaStyleModel = seriesModel.getModel('areaStyle.normal');\r\n\r\n\t            var points = data.mapArray(data.getItemLayout, true);\r\n\r\n\t            var isCoordSysPolar = coordSys.type === 'polar';\r\n\t            var prevCoordSys = this._coordSys;\r\n\r\n\t            var symbolDraw = this._symbolDraw;\r\n\t            var polyline = this._polyline;\r\n\t            var polygon = this._polygon;\r\n\r\n\t            var lineGroup = this._lineGroup;\r\n\r\n\t            var hasAnimation = seriesModel.get('animation');\r\n\r\n\t            var isAreaChart = !areaStyleModel.isEmpty();\r\n\t            var stackedOnPoints = getStackedOnPoints(coordSys, data);\r\n\r\n\t            var showSymbol = seriesModel.get('showSymbol');\r\n\r\n\t            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol')\r\n\t                && this._getSymbolIgnoreFunc(data, coordSys);\r\n\r\n\t            // Remove temporary symbols\r\n\t            var oldData = this._data;\r\n\t            oldData && oldData.eachItemGraphicEl(function (el, idx) {\r\n\t                if (el.__temp) {\r\n\t                    group.remove(el);\r\n\t                    oldData.setItemGraphicEl(idx, null);\r\n\t                }\r\n\t            });\r\n\r\n\t            // Remove previous created symbols if showSymbol changed to false\r\n\t            if (!showSymbol) {\r\n\t                symbolDraw.remove();\r\n\t            }\r\n\r\n\t            group.add(lineGroup);\r\n\r\n\t            // FIXME step not support polar\r\n\t            var step = !isCoordSysPolar && seriesModel.get('step');\r\n\t            // Initialization animation or coordinate system changed\r\n\t            if (\r\n\t                !(polyline && prevCoordSys.type === coordSys.type && step === this._step)\r\n\t            ) {\r\n\t                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\r\n\r\n\t                if (step) {\r\n\t                    // TODO If stacked series is not step\r\n\t                    points = turnPointsIntoStep(points, coordSys, step);\r\n\t                    stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\r\n\t                }\r\n\r\n\t                polyline = this._newPolyline(points, coordSys, hasAnimation);\r\n\t                if (isAreaChart) {\r\n\t                    polygon = this._newPolygon(\r\n\t                        points, stackedOnPoints,\r\n\t                        coordSys, hasAnimation\r\n\t                    );\r\n\t                }\r\n\t                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));\r\n\t            }\r\n\t            else {\r\n\t                if (isAreaChart && !polygon) {\r\n\t                    // If areaStyle is added\r\n\t                    polygon = this._newPolygon(\r\n\t                        points, stackedOnPoints,\r\n\t                        coordSys, hasAnimation\r\n\t                    );\r\n\t                }\r\n\t                else if (polygon && !isAreaChart) {\r\n\t                    // If areaStyle is removed\r\n\t                    lineGroup.remove(polygon);\r\n\t                    polygon = this._polygon = null;\r\n\t                }\r\n\r\n\t                // Update clipPath\r\n\t                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));\r\n\r\n\t                // Always update, or it is wrong in the case turning on legend\r\n\t                // because points are not changed\r\n\t                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\r\n\r\n\t                // Stop symbol animation and sync with line points\r\n\t                // FIXME performance?\r\n\t                data.eachItemGraphicEl(function (el) {\r\n\t                    el.stopAnimation(true);\r\n\t                });\r\n\r\n\t                // In the case data zoom triggerred refreshing frequently\r\n\t                // Data may not change if line has a category axis. So it should animate nothing\r\n\t                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints)\r\n\t                    || !isPointsSame(this._points, points)\r\n\t                ) {\r\n\t                    if (hasAnimation) {\r\n\t                        this._updateAnimation(\r\n\t                            data, stackedOnPoints, coordSys, api, step\r\n\t                        );\r\n\t                    }\r\n\t                    else {\r\n\t                        // Not do it in update with animation\r\n\t                        if (step) {\r\n\t                            // TODO If stacked series is not step\r\n\t                            points = turnPointsIntoStep(points, coordSys, step);\r\n\t                            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\r\n\t                        }\r\n\r\n\t                        polyline.setShape({\r\n\t                            points: points\r\n\t                        });\r\n\t                        polygon && polygon.setShape({\r\n\t                            points: points,\r\n\t                            stackedOnPoints: stackedOnPoints\r\n\t                        });\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');\r\n\r\n\t            polyline.useStyle(zrUtil.defaults(\r\n\t                // Use color in lineStyle first\r\n\t                lineStyleModel.getLineStyle(),\r\n\t                {\r\n\t                    fill: 'none',\r\n\t                    stroke: visualColor,\r\n\t                    lineJoin: 'bevel'\r\n\t                }\r\n\t            ));\r\n\r\n\t            var smooth = seriesModel.get('smooth');\r\n\t            smooth = getSmooth(seriesModel.get('smooth'));\r\n\t            polyline.setShape({\r\n\t                smooth: smooth,\r\n\t                smoothMonotone: seriesModel.get('smoothMonotone'),\r\n\t                connectNulls: seriesModel.get('connectNulls')\r\n\t            });\r\n\r\n\t            if (polygon) {\r\n\t                var stackedOn = data.stackedOn;\r\n\t                var stackedOnSmooth = 0;\r\n\r\n\t                polygon.useStyle(zrUtil.defaults(\r\n\t                    areaStyleModel.getAreaStyle(),\r\n\t                    {\r\n\t                        fill: visualColor,\r\n\t                        opacity: 0.7,\r\n\t                        lineJoin: 'bevel'\r\n\t                    }\r\n\t                ));\r\n\r\n\t                if (stackedOn) {\r\n\t                    var stackedOnSeries = stackedOn.hostModel;\r\n\t                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));\r\n\t                }\r\n\r\n\t                polygon.setShape({\r\n\t                    smooth: smooth,\r\n\t                    stackedOnSmooth: stackedOnSmooth,\r\n\t                    smoothMonotone: seriesModel.get('smoothMonotone'),\r\n\t                    connectNulls: seriesModel.get('connectNulls')\r\n\t                });\r\n\t            }\r\n\r\n\t            this._data = data;\r\n\t            // Save the coordinate system for transition animation when data changed\r\n\t            this._coordSys = coordSys;\r\n\t            this._stackedOnPoints = stackedOnPoints;\r\n\t            this._points = points;\r\n\t            this._step = step;\r\n\t        },\r\n\r\n\t        dispose: function () {},\r\n\r\n\t        highlight: function (seriesModel, ecModel, api, payload) {\r\n\t            var data = seriesModel.getData();\r\n\t            var dataIndex = modelUtil.queryDataIndex(data, payload);\r\n\r\n\t            if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {\r\n\t                var symbol = data.getItemGraphicEl(dataIndex);\r\n\t                if (!symbol) {\r\n\t                    // Create a temporary symbol if it is not exists\r\n\t                    var pt = data.getItemLayout(dataIndex);\r\n\t                    symbol = new Symbol(data, dataIndex);\r\n\t                    symbol.position = pt;\r\n\t                    symbol.setZ(\r\n\t                        seriesModel.get('zlevel'),\r\n\t                        seriesModel.get('z')\r\n\t                    );\r\n\t                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);\r\n\t                    symbol.__temp = true;\r\n\t                    data.setItemGraphicEl(dataIndex, symbol);\r\n\r\n\t                    // Stop scale animation\r\n\t                    symbol.stopSymbolAnimation(true);\r\n\r\n\t                    this.group.add(symbol);\r\n\t                }\r\n\t                symbol.highlight();\r\n\t            }\r\n\t            else {\r\n\t                // Highlight whole series\r\n\t                ChartView.prototype.highlight.call(\r\n\t                    this, seriesModel, ecModel, api, payload\r\n\t                );\r\n\t            }\r\n\t        },\r\n\r\n\t        downplay: function (seriesModel, ecModel, api, payload) {\r\n\t            var data = seriesModel.getData();\r\n\t            var dataIndex = modelUtil.queryDataIndex(data, payload);\r\n\t            if (dataIndex != null && dataIndex >= 0) {\r\n\t                var symbol = data.getItemGraphicEl(dataIndex);\r\n\t                if (symbol) {\r\n\t                    if (symbol.__temp) {\r\n\t                        data.setItemGraphicEl(dataIndex, null);\r\n\t                        this.group.remove(symbol);\r\n\t                    }\r\n\t                    else {\r\n\t                        symbol.downplay();\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                // Downplay whole series\r\n\t                ChartView.prototype.downplay.call(\r\n\t                    this, seriesModel, ecModel, api, payload\r\n\t                );\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:zrender/container/Group} group\r\n\t         * @param {Array.<Array.<number>>} points\r\n\t         * @private\r\n\t         */\r\n\t        _newPolyline: function (points) {\r\n\t            var polyline = this._polyline;\r\n\t            // Remove previous created polyline\r\n\t            if (polyline) {\r\n\t                this._lineGroup.remove(polyline);\r\n\t            }\r\n\r\n\t            polyline = new polyHelper.Polyline({\r\n\t                shape: {\r\n\t                    points: points\r\n\t                },\r\n\t                silent: true,\r\n\t                z2: 10\r\n\t            });\r\n\r\n\t            this._lineGroup.add(polyline);\r\n\r\n\t            this._polyline = polyline;\r\n\r\n\t            return polyline;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:zrender/container/Group} group\r\n\t         * @param {Array.<Array.<number>>} stackedOnPoints\r\n\t         * @param {Array.<Array.<number>>} points\r\n\t         * @private\r\n\t         */\r\n\t        _newPolygon: function (points, stackedOnPoints) {\r\n\t            var polygon = this._polygon;\r\n\t            // Remove previous created polygon\r\n\t            if (polygon) {\r\n\t                this._lineGroup.remove(polygon);\r\n\t            }\r\n\r\n\t            polygon = new polyHelper.Polygon({\r\n\t                shape: {\r\n\t                    points: points,\r\n\t                    stackedOnPoints: stackedOnPoints\r\n\t                },\r\n\t                silent: true\r\n\t            });\r\n\r\n\t            this._lineGroup.add(polygon);\r\n\r\n\t            this._polygon = polygon;\r\n\t            return polygon;\r\n\t        },\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _getSymbolIgnoreFunc: function (data, coordSys) {\r\n\t            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\r\n\t            // `getLabelInterval` is provided by echarts/component/axis\r\n\t            if (categoryAxis && categoryAxis.isLabelIgnored) {\r\n\t                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        // FIXME Two value axis\r\n\t        _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {\r\n\t            var polyline = this._polyline;\r\n\t            var polygon = this._polygon;\r\n\t            var seriesModel = data.hostModel;\r\n\r\n\t            var diff = lineAnimationDiff(\r\n\t                this._data, data,\r\n\t                this._stackedOnPoints, stackedOnPoints,\r\n\t                this._coordSys, coordSys\r\n\t            );\r\n\r\n\t            var current = diff.current;\r\n\t            var stackedOnCurrent = diff.stackedOnCurrent;\r\n\t            var next = diff.next;\r\n\t            var stackedOnNext = diff.stackedOnNext;\r\n\t            if (step) {\r\n\t                // TODO If stacked series is not step\r\n\t                current = turnPointsIntoStep(diff.current, coordSys, step);\r\n\t                stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);\r\n\t                next = turnPointsIntoStep(diff.next, coordSys, step);\r\n\t                stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);\r\n\t            }\r\n\t            // `diff.current` is subset of `current` (which should be ensured by\r\n\t            // turnPointsIntoStep), so points in `__points` can be updated when\r\n\t            // points in `current` are update during animation.\r\n\t            polyline.shape.__points = diff.current;\r\n\t            polyline.shape.points = current;\r\n\r\n\t            graphic.updateProps(polyline, {\r\n\t                shape: {\r\n\t                    points: next\r\n\t                }\r\n\t            }, seriesModel);\r\n\r\n\t            if (polygon) {\r\n\t                polygon.setShape({\r\n\t                    points: current,\r\n\t                    stackedOnPoints: stackedOnCurrent\r\n\t                });\r\n\t                graphic.updateProps(polygon, {\r\n\t                    shape: {\r\n\t                        points: next,\r\n\t                        stackedOnPoints: stackedOnNext\r\n\t                    }\r\n\t                }, seriesModel);\r\n\t            }\r\n\r\n\t            var updatedDataInfo = [];\r\n\t            var diffStatus = diff.status;\r\n\r\n\t            for (var i = 0; i < diffStatus.length; i++) {\r\n\t                var cmd = diffStatus[i].cmd;\r\n\t                if (cmd === '=') {\r\n\t                    var el = data.getItemGraphicEl(diffStatus[i].idx1);\r\n\t                    if (el) {\r\n\t                        updatedDataInfo.push({\r\n\t                            el: el,\r\n\t                            ptIdx: i    // Index of points\r\n\t                        });\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            if (polyline.animators && polyline.animators.length) {\r\n\t                polyline.animators[0].during(function () {\r\n\t                    for (var i = 0; i < updatedDataInfo.length; i++) {\r\n\t                        var el = updatedDataInfo[i].el;\r\n\t                        el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        remove: function (ecModel) {\r\n\t            var group = this.group;\r\n\t            var oldData = this._data;\r\n\t            this._lineGroup.removeAll();\r\n\t            this._symbolDraw.remove(true);\r\n\t            // Remove temporary created elements when highlighting\r\n\t            oldData && oldData.eachItemGraphicEl(function (el, idx) {\r\n\t                if (el.__temp) {\r\n\t                    group.remove(el);\r\n\t                    oldData.setItemGraphicEl(idx, null);\r\n\t                }\r\n\t            });\r\n\r\n\t            this._polyline =\r\n\t            this._polygon =\r\n\t            this._coordSys =\r\n\t            this._points =\r\n\t            this._stackedOnPoints =\r\n\t            this._data = null;\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 104 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/chart/helper/SymbolDraw\r\n\t */\r\n\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var Symbol = __webpack_require__(105);\r\n\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @alias module:echarts/chart/helper/SymbolDraw\r\n\t     * @param {module:zrender/graphic/Group} [symbolCtor]\r\n\t     */\r\n\t    function SymbolDraw(symbolCtor) {\r\n\t        this.group = new graphic.Group();\r\n\r\n\t        this._symbolCtor = symbolCtor || Symbol;\r\n\t    }\r\n\r\n\t    var symbolDrawProto = SymbolDraw.prototype;\r\n\r\n\t    function symbolNeedsDraw(data, idx, isIgnore) {\r\n\t        var point = data.getItemLayout(idx);\r\n\t        // Is an object\r\n\t        // if (point && point.hasOwnProperty('point')) {\r\n\t        //     point = point.point;\r\n\t        // }\r\n\t        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx))\r\n\t                    && data.getItemVisual(idx, 'symbol') !== 'none';\r\n\t    }\r\n\t    /**\r\n\t     * Update symbols draw by new data\r\n\t     * @param {module:echarts/data/List} data\r\n\t     * @param {Array.<boolean>} [isIgnore]\r\n\t     */\r\n\t    symbolDrawProto.updateData = function (data, isIgnore) {\r\n\t        var group = this.group;\r\n\t        var seriesModel = data.hostModel;\r\n\t        var oldData = this._data;\r\n\r\n\t        var SymbolCtor = this._symbolCtor;\r\n\r\n\t        var seriesScope = {\r\n\t            itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),\r\n\t            hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),\r\n\t            symbolRotate: seriesModel.get('symbolRotate'),\r\n\t            symbolOffset: seriesModel.get('symbolOffset'),\r\n\t            hoverAnimation: seriesModel.get('hoverAnimation'),\r\n\r\n\t            labelModel: seriesModel.getModel('label.normal'),\r\n\t            hoverLabelModel: seriesModel.getModel('label.emphasis')\r\n\t        };\r\n\r\n\t        data.diff(oldData)\r\n\t            .add(function (newIdx) {\r\n\t                var point = data.getItemLayout(newIdx);\r\n\t                if (symbolNeedsDraw(data, newIdx, isIgnore)) {\r\n\t                    var symbolEl = new SymbolCtor(data, newIdx, seriesScope);\r\n\t                    symbolEl.attr('position', point);\r\n\t                    data.setItemGraphicEl(newIdx, symbolEl);\r\n\t                    group.add(symbolEl);\r\n\t                }\r\n\t            })\r\n\t            .update(function (newIdx, oldIdx) {\r\n\t                var symbolEl = oldData.getItemGraphicEl(oldIdx);\r\n\t                var point = data.getItemLayout(newIdx);\r\n\t                if (!symbolNeedsDraw(data, newIdx, isIgnore)) {\r\n\t                    group.remove(symbolEl);\r\n\t                    return;\r\n\t                }\r\n\t                if (!symbolEl) {\r\n\t                    symbolEl = new SymbolCtor(data, newIdx);\r\n\t                    symbolEl.attr('position', point);\r\n\t                }\r\n\t                else {\r\n\t                    symbolEl.updateData(data, newIdx, seriesScope);\r\n\t                    graphic.updateProps(symbolEl, {\r\n\t                        position: point\r\n\t                    }, seriesModel);\r\n\t                }\r\n\r\n\t                // Add back\r\n\t                group.add(symbolEl);\r\n\r\n\t                data.setItemGraphicEl(newIdx, symbolEl);\r\n\t            })\r\n\t            .remove(function (oldIdx) {\r\n\t                var el = oldData.getItemGraphicEl(oldIdx);\r\n\t                el && el.fadeOut(function () {\r\n\t                    group.remove(el);\r\n\t                });\r\n\t            })\r\n\t            .execute();\r\n\r\n\t        this._data = data;\r\n\t    };\r\n\r\n\t    symbolDrawProto.updateLayout = function () {\r\n\t        var data = this._data;\r\n\t        if (data) {\r\n\t            // Not use animation\r\n\t            data.eachItemGraphicEl(function (el, idx) {\r\n\t                var point = data.getItemLayout(idx);\r\n\t                el.attr('position', point);\r\n\t            });\r\n\t        }\r\n\t    };\r\n\r\n\t    symbolDrawProto.remove = function (enableAnimation) {\r\n\t        var group = this.group;\r\n\t        var data = this._data;\r\n\t        if (data) {\r\n\t            if (enableAnimation) {\r\n\t                data.eachItemGraphicEl(function (el) {\r\n\t                    el.fadeOut(function () {\r\n\t                        group.remove(el);\r\n\t                    });\r\n\t                });\r\n\t            }\r\n\t            else {\r\n\t                group.removeAll();\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = SymbolDraw;\r\n\r\n\r\n/***/ },\r\n/* 105 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/chart/helper/Symbol\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var symbolUtil = __webpack_require__(106);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\r\n\t    function normalizeSymbolSize(symbolSize) {\r\n\t        symbolSize = symbolSize instanceof Array\r\n\t            ? symbolSize.slice()\r\n\t            : [+symbolSize, +symbolSize];\r\n\t        symbolSize[0] /= 2;\r\n\t        symbolSize[1] /= 2;\r\n\t        return symbolSize;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @alias {module:echarts/chart/helper/Symbol}\r\n\t     * @param {module:echarts/data/List} data\r\n\t     * @param {number} idx\r\n\t     * @extends {module:zrender/graphic/Group}\r\n\t     */\r\n\t    function Symbol(data, idx, seriesScope) {\r\n\t        graphic.Group.call(this);\r\n\r\n\t        this.updateData(data, idx, seriesScope);\r\n\t    }\r\n\r\n\t    var symbolProto = Symbol.prototype;\r\n\r\n\t    function driftSymbol(dx, dy) {\r\n\t        this.parent.drift(dx, dy);\r\n\t    }\r\n\r\n\t    symbolProto._createSymbol = function (symbolType, data, idx) {\r\n\t        // Remove paths created before\r\n\t        this.removeAll();\r\n\r\n\t        var seriesModel = data.hostModel;\r\n\t        var color = data.getItemVisual(idx, 'color');\r\n\r\n\t        // var symbolPath = symbolUtil.createSymbol(\r\n\t        //     symbolType, -0.5, -0.5, 1, 1, color\r\n\t        // );\r\n\t        // If width/height are set too small (e.g., set to 1) on ios10\r\n\t        // and macOS Sierra, a circle stroke become a rect, no matter what\r\n\t        // the scale is set. So we set width/height as 2. See #4150.\r\n\t        var symbolPath = symbolUtil.createSymbol(\r\n\t            symbolType, -1, -1, 2, 2, color\r\n\t        );\r\n\r\n\t        symbolPath.attr({\r\n\t            z2: 100,\r\n\t            culling: true,\r\n\t            scale: [0, 0]\r\n\t        });\r\n\t        // Rewrite drift method\r\n\t        symbolPath.drift = driftSymbol;\r\n\r\n\t        var size = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));\r\n\r\n\t        graphic.initProps(symbolPath, {\r\n\t            scale: size\r\n\t        }, seriesModel, idx);\r\n\t        this._symbolType = symbolType;\r\n\r\n\t        this.add(symbolPath);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Stop animation\r\n\t     * @param {boolean} toLastFrame\r\n\t     */\r\n\t    symbolProto.stopSymbolAnimation = function (toLastFrame) {\r\n\t        this.childAt(0).stopAnimation(toLastFrame);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get symbol path element\r\n\t     */\r\n\t    symbolProto.getSymbolPath = function () {\r\n\t        return this.childAt(0);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get scale(aka, current symbol size).\r\n\t     * Including the change caused by animation\r\n\t     */\r\n\t    symbolProto.getScale = function () {\r\n\t        return this.childAt(0).scale;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Highlight symbol\r\n\t     */\r\n\t    symbolProto.highlight = function () {\r\n\t        this.childAt(0).trigger('emphasis');\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Downplay symbol\r\n\t     */\r\n\t    symbolProto.downplay = function () {\r\n\t        this.childAt(0).trigger('normal');\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {number} zlevel\r\n\t     * @param {number} z\r\n\t     */\r\n\t    symbolProto.setZ = function (zlevel, z) {\r\n\t        var symbolPath = this.childAt(0);\r\n\t        symbolPath.zlevel = zlevel;\r\n\t        symbolPath.z = z;\r\n\t    };\r\n\r\n\t    symbolProto.setDraggable = function (draggable) {\r\n\t        var symbolPath = this.childAt(0);\r\n\t        symbolPath.draggable = draggable;\r\n\t        symbolPath.cursor = draggable ? 'move' : 'pointer';\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Update symbol properties\r\n\t     * @param  {module:echarts/data/List} data\r\n\t     * @param  {number} idx\r\n\t     */\r\n\t    symbolProto.updateData = function (data, idx, seriesScope) {\r\n\t        this.silent = false;\r\n\r\n\t        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';\r\n\t        var seriesModel = data.hostModel;\r\n\t        var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));\r\n\t        if (symbolType !== this._symbolType) {\r\n\t            this._createSymbol(symbolType, data, idx);\r\n\t        }\r\n\t        else {\r\n\t            var symbolPath = this.childAt(0);\r\n\t            graphic.updateProps(symbolPath, {\r\n\t                scale: symbolSize\r\n\t            }, seriesModel, idx);\r\n\t        }\r\n\t        this._updateCommon(data, idx, symbolSize, seriesScope);\r\n\t        this._seriesModel = seriesModel;\r\n\t    };\r\n\r\n\t    // Update common properties\r\n\t    var normalStyleAccessPath = ['itemStyle', 'normal'];\r\n\t    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];\r\n\t    var normalLabelAccessPath = ['label', 'normal'];\r\n\t    var emphasisLabelAccessPath = ['label', 'emphasis'];\r\n\r\n\t    symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {\r\n\t        var symbolPath = this.childAt(0);\r\n\t        var seriesModel = data.hostModel;\r\n\t        var color = data.getItemVisual(idx, 'color');\r\n\r\n\t        // Reset style\r\n\t        if (symbolPath.type !== 'image') {\r\n\t            symbolPath.useStyle({\r\n\t                strokeNoScale: true\r\n\t            });\r\n\t        }\r\n\r\n\t        seriesScope = seriesScope || null;\r\n\r\n\t        var itemStyle = seriesScope && seriesScope.itemStyle;\r\n\t        var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;\r\n\t        var symbolRotate = seriesScope && seriesScope.symbolRotate;\r\n\t        var symbolOffset = seriesScope && seriesScope.symbolOffset;\r\n\t        var labelModel = seriesScope && seriesScope.labelModel;\r\n\t        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;\r\n\t        var hoverAnimation = seriesScope && seriesScope.hoverAnimation;\r\n\r\n\t        if (!seriesScope || data.hasItemOption) {\r\n\t            var itemModel = data.getItemModel(idx);\r\n\r\n\t            // Color must be excluded.\r\n\t            // Because symbol provide setColor individually to set fill and stroke\r\n\t            itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);\r\n\t            hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();\r\n\r\n\t            symbolRotate = itemModel.getShallow('symbolRotate');\r\n\t            symbolOffset = itemModel.getShallow('symbolOffset');\r\n\r\n\t            labelModel = itemModel.getModel(normalLabelAccessPath);\r\n\t            hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);\r\n\t            hoverAnimation = itemModel.getShallow('hoverAnimation');\r\n\t        }\r\n\t        else {\r\n\t            hoverItemStyle = zrUtil.extend({}, hoverItemStyle);\r\n\t        }\r\n\r\n\t        var elStyle = symbolPath.style;\r\n\r\n\t        symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);\r\n\r\n\t        if (symbolOffset) {\r\n\t            symbolPath.attr('position', [\r\n\t                numberUtil.parsePercent(symbolOffset[0], symbolSize[0]),\r\n\t                numberUtil.parsePercent(symbolOffset[1], symbolSize[1])\r\n\t            ]);\r\n\t        }\r\n\r\n\t        // PENDING setColor before setStyle!!!\r\n\t        symbolPath.setColor(color);\r\n\r\n\t        symbolPath.setStyle(itemStyle);\r\n\r\n\t        var opacity = data.getItemVisual(idx, 'opacity');\r\n\t        if (opacity != null) {\r\n\t            elStyle.opacity = opacity;\r\n\t        }\r\n\r\n\t        // Get last value dim\r\n\t        var dimensions = data.dimensions.slice();\r\n\t        var valueDim;\r\n\t        var dataType;\r\n\t        while (dimensions.length && (\r\n\t            valueDim = dimensions.pop(),\r\n\t            dataType = data.getDimensionInfo(valueDim).type,\r\n\t            dataType === 'ordinal' || dataType === 'time'\r\n\t        )) {} // jshint ignore:line\r\n\r\n\t        if (valueDim != null && labelModel.getShallow('show')) {\r\n\t            graphic.setText(elStyle, labelModel, color);\r\n\t            elStyle.text = zrUtil.retrieve(\r\n\t                seriesModel.getFormattedLabel(idx, 'normal'),\r\n\t                data.get(valueDim, idx)\r\n\t            );\r\n\t        }\r\n\t        else {\r\n\t            elStyle.text = '';\r\n\t        }\r\n\r\n\t        if (valueDim != null && hoverLabelModel.getShallow('show')) {\r\n\t            graphic.setText(hoverItemStyle, hoverLabelModel, color);\r\n\t            hoverItemStyle.text = zrUtil.retrieve(\r\n\t                seriesModel.getFormattedLabel(idx, 'emphasis'),\r\n\t                data.get(valueDim, idx)\r\n\t            );\r\n\t        }\r\n\t        else {\r\n\t            hoverItemStyle.text = '';\r\n\t        }\r\n\r\n\t        var size = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));\r\n\r\n\t        symbolPath.off('mouseover')\r\n\t            .off('mouseout')\r\n\t            .off('emphasis')\r\n\t            .off('normal');\r\n\r\n\t        symbolPath.hoverStyle = hoverItemStyle;\r\n\r\n\t        graphic.setHoverStyle(symbolPath);\r\n\r\n\t        if (hoverAnimation && seriesModel.ifEnableAnimation()) {\r\n\t            var onEmphasis = function() {\r\n\t                var ratio = size[1] / size[0];\r\n\t                this.animateTo({\r\n\t                    scale: [\r\n\t                        Math.max(size[0] * 1.1, size[0] + 3),\r\n\t                        Math.max(size[1] * 1.1, size[1] + 3 * ratio)\r\n\t                    ]\r\n\t                }, 400, 'elasticOut');\r\n\t            };\r\n\t            var onNormal = function() {\r\n\t                this.animateTo({\r\n\t                    scale: size\r\n\t                }, 400, 'elasticOut');\r\n\t            };\r\n\t            symbolPath.on('mouseover', onEmphasis)\r\n\t                .on('mouseout', onNormal)\r\n\t                .on('emphasis', onEmphasis)\r\n\t                .on('normal', onNormal);\r\n\t        }\r\n\t    };\r\n\r\n\t    symbolProto.fadeOut = function (cb) {\r\n\t        var symbolPath = this.childAt(0);\r\n\t        // Avoid mistaken hover when fading out\r\n\t        this.silent = true;\r\n\t        // Not show text when animating\r\n\t        symbolPath.style.text = '';\r\n\t        graphic.updateProps(symbolPath, {\r\n\t            scale: [0, 0]\r\n\t        }, this._seriesModel, this.dataIndex, cb);\r\n\t    };\r\n\r\n\t    zrUtil.inherits(Symbol, graphic.Group);\r\n\r\n\t    module.exports = Symbol;\r\n\r\n\r\n/***/ },\r\n/* 106 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t// Symbol factory\r\n\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\r\n\t    /**\r\n\t     * Triangle shape\r\n\t     * @inner\r\n\t     */\r\n\t    var Triangle = graphic.extendShape({\r\n\t        type: 'triangle',\r\n\t        shape: {\r\n\t            cx: 0,\r\n\t            cy: 0,\r\n\t            width: 0,\r\n\t            height: 0\r\n\t        },\r\n\t        buildPath: function (path, shape) {\r\n\t            var cx = shape.cx;\r\n\t            var cy = shape.cy;\r\n\t            var width = shape.width / 2;\r\n\t            var height = shape.height / 2;\r\n\t            path.moveTo(cx, cy - height);\r\n\t            path.lineTo(cx + width, cy + height);\r\n\t            path.lineTo(cx - width, cy + height);\r\n\t            path.closePath();\r\n\t        }\r\n\t    });\r\n\t    /**\r\n\t     * Diamond shape\r\n\t     * @inner\r\n\t     */\r\n\t    var Diamond = graphic.extendShape({\r\n\t        type: 'diamond',\r\n\t        shape: {\r\n\t            cx: 0,\r\n\t            cy: 0,\r\n\t            width: 0,\r\n\t            height: 0\r\n\t        },\r\n\t        buildPath: function (path, shape) {\r\n\t            var cx = shape.cx;\r\n\t            var cy = shape.cy;\r\n\t            var width = shape.width / 2;\r\n\t            var height = shape.height / 2;\r\n\t            path.moveTo(cx, cy - height);\r\n\t            path.lineTo(cx + width, cy);\r\n\t            path.lineTo(cx, cy + height);\r\n\t            path.lineTo(cx - width, cy);\r\n\t            path.closePath();\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Pin shape\r\n\t     * @inner\r\n\t     */\r\n\t    var Pin = graphic.extendShape({\r\n\t        type: 'pin',\r\n\t        shape: {\r\n\t            // x, y on the cusp\r\n\t            x: 0,\r\n\t            y: 0,\r\n\t            width: 0,\r\n\t            height: 0\r\n\t        },\r\n\r\n\t        buildPath: function (path, shape) {\r\n\t            var x = shape.x;\r\n\t            var y = shape.y;\r\n\t            var w = shape.width / 5 * 3;\r\n\t            // Height must be larger than width\r\n\t            var h = Math.max(w, shape.height);\r\n\t            var r = w / 2;\r\n\r\n\t            // Dist on y with tangent point and circle center\r\n\t            var dy = r * r / (h - r);\r\n\t            var cy = y - h + r + dy;\r\n\t            var angle = Math.asin(dy / r);\r\n\t            // Dist on x with tangent point and circle center\r\n\t            var dx = Math.cos(angle) * r;\r\n\r\n\t            var tanX = Math.sin(angle);\r\n\t            var tanY = Math.cos(angle);\r\n\r\n\t            path.arc(\r\n\t                x, cy, r,\r\n\t                Math.PI - angle,\r\n\t                Math.PI * 2 + angle\r\n\t            );\r\n\r\n\t            var cpLen = r * 0.6;\r\n\t            var cpLen2 = r * 0.7;\r\n\t            path.bezierCurveTo(\r\n\t                x + dx - tanX * cpLen, cy + dy + tanY * cpLen,\r\n\t                x, y - cpLen2,\r\n\t                x, y\r\n\t            );\r\n\t            path.bezierCurveTo(\r\n\t                x, y - cpLen2,\r\n\t                x - dx + tanX * cpLen, cy + dy + tanY * cpLen,\r\n\t                x - dx, cy + dy\r\n\t            );\r\n\t            path.closePath();\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Arrow shape\r\n\t     * @inner\r\n\t     */\r\n\t    var Arrow = graphic.extendShape({\r\n\r\n\t        type: 'arrow',\r\n\r\n\t        shape: {\r\n\t            x: 0,\r\n\t            y: 0,\r\n\t            width: 0,\r\n\t            height: 0\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\t            var height = shape.height;\r\n\t            var width = shape.width;\r\n\t            var x = shape.x;\r\n\t            var y = shape.y;\r\n\t            var dx = width / 3 * 2;\r\n\t            ctx.moveTo(x, y);\r\n\t            ctx.lineTo(x + dx, y + height);\r\n\t            ctx.lineTo(x, y + height / 4 * 3);\r\n\t            ctx.lineTo(x - dx, y + height);\r\n\t            ctx.lineTo(x, y);\r\n\t            ctx.closePath();\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Map of path contructors\r\n\t     * @type {Object.<string, module:zrender/graphic/Path>}\r\n\t     */\r\n\t    var symbolCtors = {\r\n\t        line: graphic.Line,\r\n\r\n\t        rect: graphic.Rect,\r\n\r\n\t        roundRect: graphic.Rect,\r\n\r\n\t        square: graphic.Rect,\r\n\r\n\t        circle: graphic.Circle,\r\n\r\n\t        diamond: Diamond,\r\n\r\n\t        pin: Pin,\r\n\r\n\t        arrow: Arrow,\r\n\r\n\t        triangle: Triangle\r\n\t    };\r\n\r\n\t    var symbolShapeMakers = {\r\n\r\n\t        line: function (x, y, w, h, shape) {\r\n\t            // FIXME\r\n\t            shape.x1 = x;\r\n\t            shape.y1 = y + h / 2;\r\n\t            shape.x2 = x + w;\r\n\t            shape.y2 = y + h / 2;\r\n\t        },\r\n\r\n\t        rect: function (x, y, w, h, shape) {\r\n\t            shape.x = x;\r\n\t            shape.y = y;\r\n\t            shape.width = w;\r\n\t            shape.height = h;\r\n\t        },\r\n\r\n\t        roundRect: function (x, y, w, h, shape) {\r\n\t            shape.x = x;\r\n\t            shape.y = y;\r\n\t            shape.width = w;\r\n\t            shape.height = h;\r\n\t            shape.r = Math.min(w, h) / 4;\r\n\t        },\r\n\r\n\t        square: function (x, y, w, h, shape) {\r\n\t            var size = Math.min(w, h);\r\n\t            shape.x = x;\r\n\t            shape.y = y;\r\n\t            shape.width = size;\r\n\t            shape.height = size;\r\n\t        },\r\n\r\n\t        circle: function (x, y, w, h, shape) {\r\n\t            // Put circle in the center of square\r\n\t            shape.cx = x + w / 2;\r\n\t            shape.cy = y + h / 2;\r\n\t            shape.r = Math.min(w, h) / 2;\r\n\t        },\r\n\r\n\t        diamond: function (x, y, w, h, shape) {\r\n\t            shape.cx = x + w / 2;\r\n\t            shape.cy = y + h / 2;\r\n\t            shape.width = w;\r\n\t            shape.height = h;\r\n\t        },\r\n\r\n\t        pin: function (x, y, w, h, shape) {\r\n\t            shape.x = x + w / 2;\r\n\t            shape.y = y + h / 2;\r\n\t            shape.width = w;\r\n\t            shape.height = h;\r\n\t        },\r\n\r\n\t        arrow: function (x, y, w, h, shape) {\r\n\t            shape.x = x + w / 2;\r\n\t            shape.y = y + h / 2;\r\n\t            shape.width = w;\r\n\t            shape.height = h;\r\n\t        },\r\n\r\n\t        triangle: function (x, y, w, h, shape) {\r\n\t            shape.cx = x + w / 2;\r\n\t            shape.cy = y + h / 2;\r\n\t            shape.width = w;\r\n\t            shape.height = h;\r\n\t        }\r\n\t    };\r\n\r\n\t    var symbolBuildProxies = {};\r\n\t    for (var name in symbolCtors) {\r\n\t        if (symbolCtors.hasOwnProperty(name)) {\r\n\t            symbolBuildProxies[name] = new symbolCtors[name]();\r\n\t        }\r\n\t    }\r\n\r\n\t    var Symbol = graphic.extendShape({\r\n\r\n\t        type: 'symbol',\r\n\r\n\t        shape: {\r\n\t            symbolType: '',\r\n\t            x: 0,\r\n\t            y: 0,\r\n\t            width: 0,\r\n\t            height: 0\r\n\t        },\r\n\r\n\t        beforeBrush: function () {\r\n\t            var style = this.style;\r\n\t            var shape = this.shape;\r\n\t            // FIXME\r\n\t            if (shape.symbolType === 'pin' && style.textPosition === 'inside') {\r\n\t                style.textPosition = ['50%', '40%'];\r\n\t                style.textAlign = 'center';\r\n\t                style.textVerticalAlign = 'middle';\r\n\t            }\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape, inBundle) {\r\n\t            var symbolType = shape.symbolType;\r\n\t            var proxySymbol = symbolBuildProxies[symbolType];\r\n\t            if (shape.symbolType !== 'none') {\r\n\t                if (!proxySymbol) {\r\n\t                    // Default rect\r\n\t                    symbolType = 'rect';\r\n\t                    proxySymbol = symbolBuildProxies[symbolType];\r\n\t                }\r\n\t                symbolShapeMakers[symbolType](\r\n\t                    shape.x, shape.y, shape.width, shape.height, proxySymbol.shape\r\n\t                );\r\n\t                proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    // Provide setColor helper method to avoid determine if set the fill or stroke outside\r\n\t    var symbolPathSetColor = function (color) {\r\n\t        if (this.type !== 'image') {\r\n\t            var symbolStyle = this.style;\r\n\t            var symbolShape = this.shape;\r\n\t            if (symbolShape && symbolShape.symbolType === 'line') {\r\n\t                symbolStyle.stroke = color;\r\n\t            }\r\n\t            else if (this.__isEmptyBrush) {\r\n\t                symbolStyle.stroke = color;\r\n\t                symbolStyle.fill = '#fff';\r\n\t            }\r\n\t            else {\r\n\t                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?\r\n\t                symbolStyle.fill && (symbolStyle.fill = color);\r\n\t                symbolStyle.stroke && (symbolStyle.stroke = color);\r\n\t            }\r\n\t            this.dirty(false);\r\n\t        }\r\n\t    };\r\n\r\n\t    var symbolUtil = {\r\n\t        /**\r\n\t         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color\r\n\t         * @param {string} symbolType\r\n\t         * @param {number} x\r\n\t         * @param {number} y\r\n\t         * @param {number} w\r\n\t         * @param {number} h\r\n\t         * @param {string} color\r\n\t         */\r\n\t        createSymbol: function (symbolType, x, y, w, h, color) {\r\n\t            var isEmpty = symbolType.indexOf('empty') === 0;\r\n\t            if (isEmpty) {\r\n\t                symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);\r\n\t            }\r\n\t            var symbolPath;\r\n\r\n\t            if (symbolType.indexOf('image://') === 0) {\r\n\t                symbolPath = new graphic.Image({\r\n\t                    style: {\r\n\t                        image: symbolType.slice(8),\r\n\t                        x: x,\r\n\t                        y: y,\r\n\t                        width: w,\r\n\t                        height: h\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t            else if (symbolType.indexOf('path://') === 0) {\r\n\t                symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));\r\n\t            }\r\n\t            else {\r\n\t                symbolPath = new Symbol({\r\n\t                    shape: {\r\n\t                        symbolType: symbolType,\r\n\t                        x: x,\r\n\t                        y: y,\r\n\t                        width: w,\r\n\t                        height: h\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\r\n\t            symbolPath.__isEmptyBrush = isEmpty;\r\n\r\n\t            symbolPath.setColor = symbolPathSetColor;\r\n\r\n\t            symbolPath.setColor(color);\r\n\r\n\t            return symbolPath;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = symbolUtil;\r\n\r\n\r\n/***/ },\r\n/* 107 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    // var arrayDiff = require('zrender/lib/core/arrayDiff');\r\n\t    // 'zrender/core/arrayDiff' has been used before, but it did\r\n\t    // not do well in performance when roam with fixed dataZoom window.\r\n\r\n\t    function sign(val) {\r\n\t        return val >= 0 ? 1 : -1;\r\n\t    }\r\n\r\n\t    function getStackedOnPoint(coordSys, data, idx) {\r\n\t        var baseAxis = coordSys.getBaseAxis();\r\n\t        var valueAxis = coordSys.getOtherAxis(baseAxis);\r\n\t        var valueStart = baseAxis.onZero\r\n\t            ? 0 : valueAxis.scale.getExtent()[0];\r\n\r\n\t        var valueDim = valueAxis.dim;\r\n\t        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\r\n\r\n\t        var stackedOnSameSign;\r\n\t        var stackedOn = data.stackedOn;\r\n\t        var val = data.get(valueDim, idx);\r\n\t        // Find first stacked value with same sign\r\n\t        while (stackedOn &&\r\n\t            sign(stackedOn.get(valueDim, idx)) === sign(val)\r\n\t        ) {\r\n\t            stackedOnSameSign = stackedOn;\r\n\t            break;\r\n\t        }\r\n\t        var stackedData = [];\r\n\t        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\r\n\t        stackedData[1 - baseDataOffset] = stackedOnSameSign\r\n\t            ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\r\n\r\n\t        return coordSys.dataToPoint(stackedData);\r\n\t    }\r\n\r\n\t    // function convertToIntId(newIdList, oldIdList) {\r\n\t    //     // Generate int id instead of string id.\r\n\t    //     // Compare string maybe slow in score function of arrDiff\r\n\r\n\t    //     // Assume id in idList are all unique\r\n\t    //     var idIndicesMap = {};\r\n\t    //     var idx = 0;\r\n\t    //     for (var i = 0; i < newIdList.length; i++) {\r\n\t    //         idIndicesMap[newIdList[i]] = idx;\r\n\t    //         newIdList[i] = idx++;\r\n\t    //     }\r\n\t    //     for (var i = 0; i < oldIdList.length; i++) {\r\n\t    //         var oldId = oldIdList[i];\r\n\t    //         // Same with newIdList\r\n\t    //         if (idIndicesMap[oldId]) {\r\n\t    //             oldIdList[i] = idIndicesMap[oldId];\r\n\t    //         }\r\n\t    //         else {\r\n\t    //             oldIdList[i] = idx++;\r\n\t    //         }\r\n\t    //     }\r\n\t    // }\r\n\r\n\t    function diffData(oldData, newData) {\r\n\t        var diffResult = [];\r\n\r\n\t        newData.diff(oldData)\r\n\t            .add(function (idx) {\r\n\t                diffResult.push({cmd: '+', idx: idx});\r\n\t            })\r\n\t            .update(function (newIdx, oldIdx) {\r\n\t                diffResult.push({cmd: '=', idx: oldIdx, idx1: newIdx});\r\n\t            })\r\n\t            .remove(function (idx) {\r\n\t                diffResult.push({cmd: '-', idx: idx});\r\n\t            })\r\n\t            .execute();\r\n\r\n\t        return diffResult;\r\n\t    }\r\n\r\n\t    module.exports = function (\r\n\t        oldData, newData,\r\n\t        oldStackedOnPoints, newStackedOnPoints,\r\n\t        oldCoordSys, newCoordSys\r\n\t    ) {\r\n\t        var diff = diffData(oldData, newData);\r\n\r\n\t        // var newIdList = newData.mapArray(newData.getId);\r\n\t        // var oldIdList = oldData.mapArray(oldData.getId);\r\n\r\n\t        // convertToIntId(newIdList, oldIdList);\r\n\r\n\t        // // FIXME One data ?\r\n\t        // diff = arrayDiff(oldIdList, newIdList);\r\n\r\n\t        var currPoints = [];\r\n\t        var nextPoints = [];\r\n\t        // Points for stacking base line\r\n\t        var currStackedPoints = [];\r\n\t        var nextStackedPoints = [];\r\n\r\n\t        var status = [];\r\n\t        var sortedIndices = [];\r\n\t        var rawIndices = [];\r\n\t        var dims = newCoordSys.dimensions;\r\n\t        for (var i = 0; i < diff.length; i++) {\r\n\t            var diffItem = diff[i];\r\n\t            var pointAdded = true;\r\n\r\n\t            // FIXME, animation is not so perfect when dataZoom window moves fast\r\n\t            // Which is in case remvoing or add more than one data in the tail or head\r\n\t            switch (diffItem.cmd) {\r\n\t                case '=':\r\n\t                    var currentPt = oldData.getItemLayout(diffItem.idx);\r\n\t                    var nextPt = newData.getItemLayout(diffItem.idx1);\r\n\t                    // If previous data is NaN, use next point directly\r\n\t                    if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {\r\n\t                        currentPt = nextPt.slice();\r\n\t                    }\r\n\t                    currPoints.push(currentPt);\r\n\t                    nextPoints.push(nextPt);\r\n\r\n\t                    currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);\r\n\t                    nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);\r\n\r\n\t                    rawIndices.push(newData.getRawIndex(diffItem.idx1));\r\n\t                    break;\r\n\t                case '+':\r\n\t                    var idx = diffItem.idx;\r\n\t                    currPoints.push(\r\n\t                        oldCoordSys.dataToPoint([\r\n\t                            newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)\r\n\t                        ])\r\n\t                    );\r\n\r\n\t                    nextPoints.push(newData.getItemLayout(idx).slice());\r\n\r\n\t                    currStackedPoints.push(\r\n\t                        getStackedOnPoint(oldCoordSys, newData, idx)\r\n\t                    );\r\n\t                    nextStackedPoints.push(newStackedOnPoints[idx]);\r\n\r\n\t                    rawIndices.push(newData.getRawIndex(idx));\r\n\t                    break;\r\n\t                case '-':\r\n\t                    var idx = diffItem.idx;\r\n\t                    var rawIndex = oldData.getRawIndex(idx);\r\n\t                    // Data is replaced. In the case of dynamic data queue\r\n\t                    // FIXME FIXME FIXME\r\n\t                    if (rawIndex !== idx) {\r\n\t                        currPoints.push(oldData.getItemLayout(idx));\r\n\t                        nextPoints.push(newCoordSys.dataToPoint([\r\n\t                            oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)\r\n\t                        ]));\r\n\r\n\t                        currStackedPoints.push(oldStackedOnPoints[idx]);\r\n\t                        nextStackedPoints.push(\r\n\t                            getStackedOnPoint(\r\n\t                                newCoordSys, oldData, idx\r\n\t                            )\r\n\t                        );\r\n\r\n\t                        rawIndices.push(rawIndex);\r\n\t                    }\r\n\t                    else {\r\n\t                        pointAdded = false;\r\n\t                    }\r\n\t            }\r\n\r\n\t            // Original indices\r\n\t            if (pointAdded) {\r\n\t                status.push(diffItem);\r\n\t                sortedIndices.push(sortedIndices.length);\r\n\t            }\r\n\t        }\r\n\r\n\t        // Diff result may be crossed if all items are changed\r\n\t        // Sort by data index\r\n\t        sortedIndices.sort(function (a, b) {\r\n\t            return rawIndices[a] - rawIndices[b];\r\n\t        });\r\n\r\n\t        var sortedCurrPoints = [];\r\n\t        var sortedNextPoints = [];\r\n\r\n\t        var sortedCurrStackedPoints = [];\r\n\t        var sortedNextStackedPoints = [];\r\n\r\n\t        var sortedStatus = [];\r\n\t        for (var i = 0; i < sortedIndices.length; i++) {\r\n\t            var idx = sortedIndices[i];\r\n\t            sortedCurrPoints[i] = currPoints[idx];\r\n\t            sortedNextPoints[i] = nextPoints[idx];\r\n\r\n\t            sortedCurrStackedPoints[i] = currStackedPoints[idx];\r\n\t            sortedNextStackedPoints[i] = nextStackedPoints[idx];\r\n\r\n\t            sortedStatus[i] = status[idx];\r\n\t        }\r\n\r\n\t        return {\r\n\t            current: sortedCurrPoints,\r\n\t            next: sortedNextPoints,\r\n\r\n\t            stackedOnCurrent: sortedCurrStackedPoints,\r\n\t            stackedOnNext: sortedNextStackedPoints,\r\n\r\n\t            status: sortedStatus\r\n\t        };\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 108 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// Poly path support NaN point\r\n\r\n\r\n\t    var Path = __webpack_require__(45);\r\n\t    var vec2 = __webpack_require__(10);\r\n\r\n\t    var vec2Min = vec2.min;\r\n\t    var vec2Max = vec2.max;\r\n\r\n\t    var scaleAndAdd = vec2.scaleAndAdd;\r\n\t    var v2Copy = vec2.copy;\r\n\r\n\t    // Temporary variable\r\n\t    var v = [];\r\n\t    var cp0 = [];\r\n\t    var cp1 = [];\r\n\r\n\t    function isPointNull(p) {\r\n\t        return isNaN(p[0]) || isNaN(p[1]);\r\n\t    }\r\n\r\n\t    function drawSegment(\r\n\t        ctx, points, start, segLen, allLen,\r\n\t        dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls\r\n\t    ) {\r\n\t        var prevIdx = 0;\r\n\t        var idx = start;\r\n\t        for (var k = 0; k < segLen; k++) {\r\n\t            var p = points[idx];\r\n\t            if (idx >= allLen || idx < 0) {\r\n\t                break;\r\n\t            }\r\n\t            if (isPointNull(p)) {\r\n\t                if (connectNulls) {\r\n\t                    idx += dir;\r\n\t                    continue;\r\n\t                }\r\n\t                break;\r\n\t            }\r\n\r\n\t            if (idx === start) {\r\n\t                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);\r\n\t                v2Copy(cp0, p);\r\n\t            }\r\n\t            else {\r\n\t                if (smooth > 0) {\r\n\t                    var nextIdx = idx + dir;\r\n\t                    var nextP = points[nextIdx];\r\n\t                    if (connectNulls) {\r\n\t                        // Find next point not null\r\n\t                        while (nextP && isPointNull(points[nextIdx])) {\r\n\t                            nextIdx += dir;\r\n\t                            nextP = points[nextIdx];\r\n\t                        }\r\n\t                    }\r\n\r\n\t                    var ratioNextSeg = 0.5;\r\n\t                    var prevP = points[prevIdx];\r\n\t                    var nextP = points[nextIdx];\r\n\t                    // Last point\r\n\t                    if (!nextP || isPointNull(nextP)) {\r\n\t                        v2Copy(cp1, p);\r\n\t                    }\r\n\t                    else {\r\n\t                        // If next data is null in not connect case\r\n\t                        if (isPointNull(nextP) && !connectNulls) {\r\n\t                            nextP = p;\r\n\t                        }\r\n\r\n\t                        vec2.sub(v, nextP, prevP);\r\n\r\n\t                        var lenPrevSeg;\r\n\t                        var lenNextSeg;\r\n\t                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {\r\n\t                            var dim = smoothMonotone === 'x' ? 0 : 1;\r\n\t                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);\r\n\t                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);\r\n\t                        }\r\n\t                        else {\r\n\t                            lenPrevSeg = vec2.dist(p, prevP);\r\n\t                            lenNextSeg = vec2.dist(p, nextP);\r\n\t                        }\r\n\r\n\t                        // Use ratio of seg length\r\n\t                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);\r\n\r\n\t                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));\r\n\t                    }\r\n\t                    // Smooth constraint\r\n\t                    vec2Min(cp0, cp0, smoothMax);\r\n\t                    vec2Max(cp0, cp0, smoothMin);\r\n\t                    vec2Min(cp1, cp1, smoothMax);\r\n\t                    vec2Max(cp1, cp1, smoothMin);\r\n\r\n\t                    ctx.bezierCurveTo(\r\n\t                        cp0[0], cp0[1],\r\n\t                        cp1[0], cp1[1],\r\n\t                        p[0], p[1]\r\n\t                    );\r\n\t                    // cp0 of next segment\r\n\t                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);\r\n\t                }\r\n\t                else {\r\n\t                    ctx.lineTo(p[0], p[1]);\r\n\t                }\r\n\t            }\r\n\r\n\t            prevIdx = idx;\r\n\t            idx += dir;\r\n\t        }\r\n\r\n\t        return k;\r\n\t    }\r\n\r\n\t    function getBoundingBox(points, smoothConstraint) {\r\n\t        var ptMin = [Infinity, Infinity];\r\n\t        var ptMax = [-Infinity, -Infinity];\r\n\t        if (smoothConstraint) {\r\n\t            for (var i = 0; i < points.length; i++) {\r\n\t                var pt = points[i];\r\n\t                if (pt[0] < ptMin[0]) { ptMin[0] = pt[0]; }\r\n\t                if (pt[1] < ptMin[1]) { ptMin[1] = pt[1]; }\r\n\t                if (pt[0] > ptMax[0]) { ptMax[0] = pt[0]; }\r\n\t                if (pt[1] > ptMax[1]) { ptMax[1] = pt[1]; }\r\n\t            }\r\n\t        }\r\n\t        return {\r\n\t            min: smoothConstraint ? ptMin : ptMax,\r\n\t            max: smoothConstraint ? ptMax : ptMin\r\n\t        };\r\n\t    }\r\n\r\n\t    module.exports = {\r\n\r\n\t        Polyline: Path.extend({\r\n\r\n\t            type: 'ec-polyline',\r\n\r\n\t            shape: {\r\n\t                points: [],\r\n\r\n\t                smooth: 0,\r\n\r\n\t                smoothConstraint: true,\r\n\r\n\t                smoothMonotone: null,\r\n\r\n\t                connectNulls: false\r\n\t            },\r\n\r\n\t            style: {\r\n\t                fill: null,\r\n\r\n\t                stroke: '#000'\r\n\t            },\r\n\r\n\t            buildPath: function (ctx, shape) {\r\n\t                var points = shape.points;\r\n\r\n\t                var i = 0;\r\n\t                var len = points.length;\r\n\r\n\t                var result = getBoundingBox(points, shape.smoothConstraint);\r\n\r\n\t                if (shape.connectNulls) {\r\n\t                    // Must remove first and last null values avoid draw error in polygon\r\n\t                    for (; len > 0; len--) {\r\n\t                        if (!isPointNull(points[len - 1])) {\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                    for (; i < len; i++) {\r\n\t                        if (!isPointNull(points[i])) {\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                while (i < len) {\r\n\t                    i += drawSegment(\r\n\t                        ctx, points, i, len, len,\r\n\t                        1, result.min, result.max, shape.smooth,\r\n\t                        shape.smoothMonotone, shape.connectNulls\r\n\t                    ) + 1;\r\n\t                }\r\n\t            }\r\n\t        }),\r\n\r\n\t        Polygon: Path.extend({\r\n\r\n\t            type: 'ec-polygon',\r\n\r\n\t            shape: {\r\n\t                points: [],\r\n\r\n\t                // Offset between stacked base points and points\r\n\t                stackedOnPoints: [],\r\n\r\n\t                smooth: 0,\r\n\r\n\t                stackedOnSmooth: 0,\r\n\r\n\t                smoothConstraint: true,\r\n\r\n\t                smoothMonotone: null,\r\n\r\n\t                connectNulls: false\r\n\t            },\r\n\r\n\t            buildPath: function (ctx, shape) {\r\n\t                var points = shape.points;\r\n\t                var stackedOnPoints = shape.stackedOnPoints;\r\n\r\n\t                var i = 0;\r\n\t                var len = points.length;\r\n\t                var smoothMonotone = shape.smoothMonotone;\r\n\t                var bbox = getBoundingBox(points, shape.smoothConstraint);\r\n\t                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);\r\n\r\n\t                if (shape.connectNulls) {\r\n\t                    // Must remove first and last null values avoid draw error in polygon\r\n\t                    for (; len > 0; len--) {\r\n\t                        if (!isPointNull(points[len - 1])) {\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                    for (; i < len; i++) {\r\n\t                        if (!isPointNull(points[i])) {\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                while (i < len) {\r\n\t                    var k = drawSegment(\r\n\t                        ctx, points, i, len, len,\r\n\t                        1, bbox.min, bbox.max, shape.smooth,\r\n\t                        smoothMonotone, shape.connectNulls\r\n\t                    );\r\n\t                    drawSegment(\r\n\t                        ctx, stackedOnPoints, i + k - 1, k, len,\r\n\t                        -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth,\r\n\t                        smoothMonotone, shape.connectNulls\r\n\t                    );\r\n\t                    i += k + 1;\r\n\r\n\t                    ctx.closePath();\r\n\t                }\r\n\t            }\r\n\t        })\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 109 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {\r\n\r\n\t        // Encoding visual for all series include which is filtered for legend drawing\r\n\t        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\r\n\t            var data = seriesModel.getData();\r\n\r\n\t            var symbolType = seriesModel.get('symbol') || defaultSymbolType;\r\n\t            var symbolSize = seriesModel.get('symbolSize');\r\n\r\n\t            data.setVisual({\r\n\t                legendSymbol: legendSymbol || symbolType,\r\n\t                symbol: symbolType,\r\n\t                symbolSize: symbolSize\r\n\t            });\r\n\r\n\t            // Only visible series has each data be visual encoded\r\n\t            if (!ecModel.isSeriesFiltered(seriesModel)) {\r\n\t                if (typeof symbolSize === 'function') {\r\n\t                    data.each(function (idx) {\r\n\t                        var rawValue = seriesModel.getRawValue(idx);\r\n\t                        // FIXME\r\n\t                        var params = seriesModel.getDataParams(idx);\r\n\t                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));\r\n\t                    });\r\n\t                }\r\n\t                data.each(function (idx) {\r\n\t                    var itemModel = data.getItemModel(idx);\r\n\t                    var itemSymbolType = itemModel.getShallow('symbol', true);\r\n\t                    var itemSymbolSize = itemModel.getShallow('symbolSize', true);\r\n\t                    // If has item symbol\r\n\t                    if (itemSymbolType != null) {\r\n\t                        data.setItemVisual(idx, 'symbol', itemSymbolType);\r\n\t                    }\r\n\t                    if (itemSymbolSize != null) {\r\n\t                        // PENDING Transform symbolSize ?\r\n\t                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 110 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    module.exports = function (seriesType, ecModel) {\r\n\t        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\r\n\t            var data = seriesModel.getData();\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\r\n\t            if (coordSys) {\r\n\t                var dims = coordSys.dimensions;\r\n\r\n\t                if (coordSys.type === 'singleAxis') {\r\n\t                    data.each(dims[0], function (x, idx) {\r\n\t                        // Also {Array.<number>}, not undefined to avoid if...else... statement\r\n\t                        data.setItemLayout(idx, isNaN(x) ? [NaN, NaN] : coordSys.dataToPoint(x));\r\n\t                    });\r\n\t                }\r\n\t                else {\r\n\t                    data.each(dims, function (x, y, idx) {\r\n\t                        // Also {Array.<number>}, not undefined to avoid if...else... statement\r\n\t                        data.setItemLayout(\r\n\t                            idx, (isNaN(x) || isNaN(y)) ? [NaN, NaN] : coordSys.dataToPoint([x, y])\r\n\t                        );\r\n\t                    }, true);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 111 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\t    var samplers = {\r\n\t        average: function (frame) {\r\n\t            var sum = 0;\r\n\t            var count = 0;\r\n\t            for (var i = 0; i < frame.length; i++) {\r\n\t                if (!isNaN(frame[i])) {\r\n\t                    sum += frame[i];\r\n\t                    count++;\r\n\t                }\r\n\t            }\r\n\t            // Return NaN if count is 0\r\n\t            return count === 0 ? NaN : sum / count;\r\n\t        },\r\n\t        sum: function (frame) {\r\n\t            var sum = 0;\r\n\t            for (var i = 0; i < frame.length; i++) {\r\n\t                // Ignore NaN\r\n\t                sum += frame[i] || 0;\r\n\t            }\r\n\t            return sum;\r\n\t        },\r\n\t        max: function (frame) {\r\n\t            var max = -Infinity;\r\n\t            for (var i = 0; i < frame.length; i++) {\r\n\t                frame[i] > max && (max = frame[i]);\r\n\t            }\r\n\t            return max;\r\n\t        },\r\n\t        min: function (frame) {\r\n\t            var min = Infinity;\r\n\t            for (var i = 0; i < frame.length; i++) {\r\n\t                frame[i] < min && (min = frame[i]);\r\n\t            }\r\n\t            return min;\r\n\t        },\r\n\t        // TODO\r\n\t        // Median\r\n\t        nearest: function (frame) {\r\n\t            return frame[0];\r\n\t        }\r\n\t    };\r\n\r\n\t    var indexSampler = function (frame, value) {\r\n\t        return Math.round(frame.length / 2);\r\n\t    };\r\n\t    module.exports = function (seriesType, ecModel, api) {\r\n\t        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\r\n\t            var data = seriesModel.getData();\r\n\t            var sampling = seriesModel.get('sampling');\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            // Only cartesian2d support down sampling\r\n\t            if (coordSys.type === 'cartesian2d' && sampling) {\r\n\t                var baseAxis = coordSys.getBaseAxis();\r\n\t                var valueAxis = coordSys.getOtherAxis(baseAxis);\r\n\t                var extent = baseAxis.getExtent();\r\n\t                // Coordinste system has been resized\r\n\t                var size = extent[1] - extent[0];\r\n\t                var rate = Math.round(data.count() / size);\r\n\t                if (rate > 1) {\r\n\t                    var sampler;\r\n\t                    if (typeof sampling === 'string') {\r\n\t                        sampler = samplers[sampling];\r\n\t                    }\r\n\t                    else if (typeof sampling === 'function') {\r\n\t                        sampler = sampling;\r\n\t                    }\r\n\t                    if (sampler) {\r\n\t                        data = data.downSample(\r\n\t                            valueAxis.dim, 1 / rate, sampler, indexSampler\r\n\t                        );\r\n\t                        seriesModel.setData(data);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }, this);\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 112 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    __webpack_require__(113);\r\n\r\n\t    __webpack_require__(131);\r\n\r\n\t    // Grid view\r\n\t    echarts.extendComponentView({\r\n\r\n\t        type: 'grid',\r\n\r\n\t        render: function (gridModel, ecModel) {\r\n\t            this.group.removeAll();\r\n\t            if (gridModel.get('show')) {\r\n\t                this.group.add(new graphic.Rect({\r\n\t                    shape: gridModel.coordinateSystem.getRect(),\r\n\t                    style: zrUtil.defaults({\r\n\t                        fill: gridModel.get('backgroundColor')\r\n\t                    }, gridModel.getItemStyle()),\r\n\t                    silent: true,\r\n\t                    z2: -1\r\n\t                }));\r\n\t            }\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    echarts.registerPreprocessor(function (option) {\r\n\t        // Only create grid when need\r\n\t        if (option.xAxis && option.yAxis && !option.grid) {\r\n\t            option.grid = {};\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 113 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Grid is a region which contains at most 4 cartesian systems\r\n\t *\r\n\t * TODO Default cartesian\r\n\t */\r\n\tvar factory = exports;\r\n\r\n\t    var layout = __webpack_require__(21);\r\n\t    var axisHelper = __webpack_require__(114);\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Cartesian2D = __webpack_require__(120);\r\n\t    var Axis2D = __webpack_require__(122);\r\n\r\n\t    var each = zrUtil.each;\r\n\r\n\t    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;\r\n\t    var niceScaleExtent = axisHelper.niceScaleExtent;\r\n\r\n\t    // 依赖 GridModel, AxisModel 做预处理\r\n\t    __webpack_require__(125);\r\n\r\n\t    /**\r\n\t     * Check if the axis is used in the specified grid\r\n\t     * @inner\r\n\t     */\r\n\t    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {\r\n\t        return axisModel.findGridModel() === gridModel;\r\n\t    }\r\n\r\n\t    function getLabelUnionRect(axis) {\r\n\t        var axisModel = axis.model;\r\n\t        var labels = axisModel.getFormattedLabels();\r\n\t        var rect;\r\n\t        var step = 1;\r\n\t        var labelCount = labels.length;\r\n\t        if (labelCount > 40) {\r\n\t            // Simple optimization for large amount of labels\r\n\t            step = Math.ceil(labelCount / 40);\r\n\t        }\r\n\t        for (var i = 0; i < labelCount; i += step) {\r\n\t            if (!axis.isLabelIgnored(i)) {\r\n\t                var singleRect = axisModel.getTextRect(labels[i]);\r\n\t                // FIXME consider label rotate\r\n\t                rect ? rect.union(singleRect) : (rect = singleRect);\r\n\t            }\r\n\t        }\r\n\t        return rect;\r\n\t    }\r\n\r\n\t    function Grid(gridModel, ecModel, api) {\r\n\t        /**\r\n\t         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}\r\n\t         * @private\r\n\t         */\r\n\t        this._coordsMap = {};\r\n\r\n\t        /**\r\n\t         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}\r\n\t         * @private\r\n\t         */\r\n\t        this._coordsList = [];\r\n\r\n\t        /**\r\n\t         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}\r\n\t         * @private\r\n\t         */\r\n\t        this._axesMap = {};\r\n\r\n\t        /**\r\n\t         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}\r\n\t         * @private\r\n\t         */\r\n\t        this._axesList = [];\r\n\r\n\t        this._initCartesian(gridModel, ecModel, api);\r\n\r\n\t        this._model = gridModel;\r\n\t    }\r\n\r\n\t    var gridProto = Grid.prototype;\r\n\r\n\t    gridProto.type = 'grid';\r\n\r\n\t    gridProto.getRect = function () {\r\n\t        return this._rect;\r\n\t    };\r\n\r\n\t    gridProto.update = function (ecModel, api) {\r\n\r\n\t        var axesMap = this._axesMap;\r\n\r\n\t        this._updateScale(ecModel, this._model);\r\n\r\n\t        function ifAxisCanNotOnZero(otherAxisDim) {\r\n\t            var axes = axesMap[otherAxisDim];\r\n\t            for (var idx in axes) {\r\n\t                if (axes.hasOwnProperty(idx)) {\r\n\t                    var axis = axes[idx];\r\n\t                    if (axis && (axis.type === 'category' || !ifAxisCrossZero(axis))) {\r\n\t                        return true;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            return false;\r\n\t        }\r\n\r\n\t        each(axesMap.x, function (xAxis) {\r\n\t            niceScaleExtent(xAxis, xAxis.model);\r\n\t        });\r\n\t        each(axesMap.y, function (yAxis) {\r\n\t            niceScaleExtent(yAxis, yAxis.model);\r\n\t        });\r\n\t        // Fix configuration\r\n\t        each(axesMap.x, function (xAxis) {\r\n\t            // onZero can not be enabled in these two situations\r\n\t            // 1. When any other axis is a category axis\r\n\t            // 2. When any other axis not across 0 point\r\n\t            if (ifAxisCanNotOnZero('y')) {\r\n\t                xAxis.onZero = false;\r\n\t            }\r\n\t        });\r\n\t        each(axesMap.y, function (yAxis) {\r\n\t            if (ifAxisCanNotOnZero('x')) {\r\n\t                yAxis.onZero = false;\r\n\t            }\r\n\t        });\r\n\r\n\t        // Resize again if containLabel is enabled\r\n\t        // FIXME It may cause getting wrong grid size in data processing stage\r\n\t        this.resize(this._model, api);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Resize the grid\r\n\t     * @param {module:echarts/coord/cartesian/GridModel} gridModel\r\n\t     * @param {module:echarts/ExtensionAPI} api\r\n\t     */\r\n\t    gridProto.resize = function (gridModel, api) {\r\n\r\n\t        var gridRect = layout.getLayoutRect(\r\n\t            gridModel.getBoxLayoutParams(), {\r\n\t                width: api.getWidth(),\r\n\t                height: api.getHeight()\r\n\t            });\r\n\r\n\t        this._rect = gridRect;\r\n\r\n\t        var axesList = this._axesList;\r\n\r\n\t        adjustAxes();\r\n\r\n\t        // Minus label size\r\n\t        if (gridModel.get('containLabel')) {\r\n\t            each(axesList, function (axis) {\r\n\t                if (!axis.model.get('axisLabel.inside')) {\r\n\t                    var labelUnionRect = getLabelUnionRect(axis);\r\n\t                    if (labelUnionRect) {\r\n\t                        var dim = axis.isHorizontal() ? 'height' : 'width';\r\n\t                        var margin = axis.model.get('axisLabel.margin');\r\n\t                        gridRect[dim] -= labelUnionRect[dim] + margin;\r\n\t                        if (axis.position === 'top') {\r\n\t                            gridRect.y += labelUnionRect.height + margin;\r\n\t                        }\r\n\t                        else if (axis.position === 'left')  {\r\n\t                            gridRect.x += labelUnionRect.width + margin;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\r\n\t            adjustAxes();\r\n\t        }\r\n\r\n\t        function adjustAxes() {\r\n\t            each(axesList, function (axis) {\r\n\t                var isHorizontal = axis.isHorizontal();\r\n\t                var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];\r\n\t                var idx = axis.inverse ? 1 : 0;\r\n\t                axis.setExtent(extent[idx], extent[1 - idx]);\r\n\t                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);\r\n\t            });\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {string} axisType\r\n\t     * @param {ndumber} [axisIndex]\r\n\t     */\r\n\t    gridProto.getAxis = function (axisType, axisIndex) {\r\n\t        var axesMapOnDim = this._axesMap[axisType];\r\n\t        if (axesMapOnDim != null) {\r\n\t            if (axisIndex == null) {\r\n\t                // Find first axis\r\n\t                for (var name in axesMapOnDim) {\r\n\t                    if (axesMapOnDim.hasOwnProperty(name)) {\r\n\t                        return axesMapOnDim[name];\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            return axesMapOnDim[axisIndex];\r\n\t        }\r\n\t    };\r\n\r\n\t    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {\r\n\t        if (xAxisIndex != null && yAxisIndex != null) {\r\n\t            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\r\n\t            return this._coordsMap[key];\r\n\t        }\r\n\t        else {\r\n\t            // When only xAxisIndex or yAxisIndex given, find its first cartesian.\r\n\t            for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {\r\n\t                if (coordList[i].getAxis('x').index === xAxisIndex\r\n\t                    || coordList[i].getAxis('y').index === yAxisIndex\r\n\t                ) {\r\n\t                    return coordList[i];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @implements\r\n\t     * see {module:echarts/CoodinateSystem}\r\n\t     */\r\n\t    gridProto.convertToPixel = function (ecModel, finder, value) {\r\n\t        var target = this._findConvertTarget(ecModel, finder);\r\n\r\n\t        return target.cartesian\r\n\t            ? target.cartesian.dataToPoint(value)\r\n\t            : target.axis\r\n\t            ? target.axis.toGlobalCoord(target.axis.dataToCoord(value))\r\n\t            : null;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @implements\r\n\t     * see {module:echarts/CoodinateSystem}\r\n\t     */\r\n\t    gridProto.convertFromPixel = function (ecModel, finder, value) {\r\n\t        var target = this._findConvertTarget(ecModel, finder);\r\n\r\n\t        return target.cartesian\r\n\t            ? target.cartesian.pointToData(value)\r\n\t            : target.axis\r\n\t            ? target.axis.coordToData(target.axis.toLocalCoord(value))\r\n\t            : null;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    gridProto._findConvertTarget = function (ecModel, finder) {\r\n\t        var seriesModel = finder.seriesModel;\r\n\t        var xAxisModel = finder.xAxisModel\r\n\t            || (seriesModel && seriesModel.getReferringComponents('xAxis')[0]);\r\n\t        var yAxisModel = finder.yAxisModel\r\n\t            || (seriesModel && seriesModel.getReferringComponents('yAxis')[0]);\r\n\t        var gridModel = finder.gridModel;\r\n\t        var coordsList = this._coordsList;\r\n\t        var cartesian;\r\n\t        var axis;\r\n\r\n\t        if (seriesModel) {\r\n\t            cartesian = seriesModel.coordinateSystem;\r\n\t            zrUtil.indexOf(coordsList, cartesian) < 0 && (cartesian = null);\r\n\t        }\r\n\t        else if (xAxisModel && yAxisModel) {\r\n\t            cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\r\n\t        }\r\n\t        else if (xAxisModel) {\r\n\t            axis = this.getAxis('x', xAxisModel.componentIndex);\r\n\t        }\r\n\t        else if (yAxisModel) {\r\n\t            axis = this.getAxis('y', yAxisModel.componentIndex);\r\n\t        }\r\n\t        // Lowest priority.\r\n\t        else if (gridModel) {\r\n\t            var grid = gridModel.coordinateSystem;\r\n\t            if (grid === this) {\r\n\t                cartesian = this._coordsList[0];\r\n\t            }\r\n\t        }\r\n\r\n\t        return {cartesian: cartesian, axis: axis};\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @implements\r\n\t     * see {module:echarts/CoodinateSystem}\r\n\t     */\r\n\t    gridProto.containPoint = function (point) {\r\n\t        var coord = this._coordsList[0];\r\n\t        if (coord) {\r\n\t            return coord.containPoint(point);\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Initialize cartesian coordinate systems\r\n\t     * @private\r\n\t     */\r\n\t    gridProto._initCartesian = function (gridModel, ecModel, api) {\r\n\t        var axisPositionUsed = {\r\n\t            left: false,\r\n\t            right: false,\r\n\t            top: false,\r\n\t            bottom: false\r\n\t        };\r\n\r\n\t        var axesMap = {\r\n\t            x: {},\r\n\t            y: {}\r\n\t        };\r\n\t        var axesCount = {\r\n\t            x: 0,\r\n\t            y: 0\r\n\t        };\r\n\r\n\t        /// Create axis\r\n\t        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);\r\n\t        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);\r\n\r\n\t        if (!axesCount.x || !axesCount.y) {\r\n\t            // Roll back when there no either x or y axis\r\n\t            this._axesMap = {};\r\n\t            this._axesList = [];\r\n\t            return;\r\n\t        }\r\n\r\n\t        this._axesMap = axesMap;\r\n\r\n\t        /// Create cartesian2d\r\n\t        each(axesMap.x, function (xAxis, xAxisIndex) {\r\n\t            each(axesMap.y, function (yAxis, yAxisIndex) {\r\n\t                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\r\n\t                var cartesian = new Cartesian2D(key);\r\n\r\n\t                cartesian.grid = this;\r\n\r\n\t                this._coordsMap[key] = cartesian;\r\n\t                this._coordsList.push(cartesian);\r\n\r\n\t                cartesian.addAxis(xAxis);\r\n\t                cartesian.addAxis(yAxis);\r\n\t            }, this);\r\n\t        }, this);\r\n\r\n\t        function createAxisCreator(axisType) {\r\n\t            return function (axisModel, idx) {\r\n\t                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var axisPosition = axisModel.get('position');\r\n\t                if (axisType === 'x') {\r\n\t                    // Fix position\r\n\t                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {\r\n\t                        // Default bottom of X\r\n\t                        axisPosition = 'bottom';\r\n\t                        if (axisPositionUsed[axisPosition]) {\r\n\t                            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    // Fix position\r\n\t                    if (axisPosition !== 'left' && axisPosition !== 'right') {\r\n\t                        // Default left of Y\r\n\t                        axisPosition = 'left';\r\n\t                        if (axisPositionUsed[axisPosition]) {\r\n\t                            axisPosition = axisPosition === 'left' ? 'right' : 'left';\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                axisPositionUsed[axisPosition] = true;\r\n\r\n\t                var axis = new Axis2D(\r\n\t                    axisType, axisHelper.createScaleByModel(axisModel),\r\n\t                    [0, 0],\r\n\t                    axisModel.get('type'),\r\n\t                    axisPosition\r\n\t                );\r\n\r\n\t                var isCategory = axis.type === 'category';\r\n\t                axis.onBand = isCategory && axisModel.get('boundaryGap');\r\n\t                axis.inverse = axisModel.get('inverse');\r\n\r\n\t                axis.onZero = axisModel.get('axisLine.onZero');\r\n\r\n\t                // Inject axis into axisModel\r\n\t                axisModel.axis = axis;\r\n\r\n\t                // Inject axisModel into axis\r\n\t                axis.model = axisModel;\r\n\r\n\t                // Inject grid info axis\r\n\t                axis.grid = this;\r\n\r\n\t                // Index of axis, can be used as key\r\n\t                axis.index = idx;\r\n\r\n\t                this._axesList.push(axis);\r\n\r\n\t                axesMap[axisType][idx] = axis;\r\n\t                axesCount[axisType]++;\r\n\t            };\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Update cartesian properties from series\r\n\t     * @param  {module:echarts/model/Option} option\r\n\t     * @private\r\n\t     */\r\n\t    gridProto._updateScale = function (ecModel, gridModel) {\r\n\t        // Reset scale\r\n\t        zrUtil.each(this._axesList, function (axis) {\r\n\t            axis.scale.setExtent(Infinity, -Infinity);\r\n\t        });\r\n\t        ecModel.eachSeries(function (seriesModel) {\r\n\t            if (isCartesian2D(seriesModel)) {\r\n\t                var axesModels = findAxesModels(seriesModel, ecModel);\r\n\t                var xAxisModel = axesModels[0];\r\n\t                var yAxisModel = axesModels[1];\r\n\r\n\t                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel)\r\n\t                    || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)\r\n\t                 ) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var cartesian = this.getCartesian(\r\n\t                    xAxisModel.componentIndex, yAxisModel.componentIndex\r\n\t                );\r\n\t                var data = seriesModel.getData();\r\n\t                var xAxis = cartesian.getAxis('x');\r\n\t                var yAxis = cartesian.getAxis('y');\r\n\r\n\t                if (data.type === 'list') {\r\n\t                    unionExtent(data, xAxis, seriesModel);\r\n\t                    unionExtent(data, yAxis, seriesModel);\r\n\t                }\r\n\t            }\r\n\t        }, this);\r\n\r\n\t        function unionExtent(data, axis, seriesModel) {\r\n\t            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {\r\n\t                axis.scale.unionExtent(data.getDataExtent(\r\n\t                    dim, axis.scale.type !== 'ordinal'\r\n\t                ));\r\n\t            });\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function updateAxisTransfrom(axis, coordBase) {\r\n\t        var axisExtent = axis.getExtent();\r\n\t        var axisExtentSum = axisExtent[0] + axisExtent[1];\r\n\r\n\t        // Fast transform\r\n\t        axis.toGlobalCoord = axis.dim === 'x'\r\n\t            ? function (coord) {\r\n\t                return coord + coordBase;\r\n\t            }\r\n\t            : function (coord) {\r\n\t                return axisExtentSum - coord + coordBase;\r\n\t            };\r\n\t        axis.toLocalCoord = axis.dim === 'x'\r\n\t            ? function (coord) {\r\n\t                return coord - coordBase;\r\n\t            }\r\n\t            : function (coord) {\r\n\t                return axisExtentSum - coord + coordBase;\r\n\t            };\r\n\t    }\r\n\r\n\t    var axesTypes = ['xAxis', 'yAxis'];\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function findAxesModels(seriesModel, ecModel) {\r\n\t        return zrUtil.map(axesTypes, function (axisType) {\r\n\t            var axisModel = seriesModel.getReferringComponents(axisType)[0];\r\n\r\n\t            if (true) {\r\n\t                if (!axisModel) {\r\n\t                    throw new Error(axisType + ' \"' + zrUtil.retrieve(\r\n\t                        seriesModel.get(axisType + 'Index'),\r\n\t                        seriesModel.get(axisType + 'Id'),\r\n\t                        0\r\n\t                    ) + '\" not found');\r\n\t                }\r\n\t            }\r\n\t            return axisModel;\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function isCartesian2D(seriesModel) {\r\n\t        return seriesModel.get('coordinateSystem') === 'cartesian2d';\r\n\t    }\r\n\r\n\t    Grid.create = function (ecModel, api) {\r\n\t        var grids = [];\r\n\t        ecModel.eachComponent('grid', function (gridModel, idx) {\r\n\t            var grid = new Grid(gridModel, ecModel, api);\r\n\t            grid.name = 'grid_' + idx;\r\n\t            grid.resize(gridModel, api);\r\n\r\n\t            gridModel.coordinateSystem = grid;\r\n\r\n\t            grids.push(grid);\r\n\t        });\r\n\r\n\t        // Inject the coordinateSystems into seriesModel\r\n\t        ecModel.eachSeries(function (seriesModel) {\r\n\t            if (!isCartesian2D(seriesModel)) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var axesModels = findAxesModels(seriesModel, ecModel);\r\n\t            var xAxisModel = axesModels[0];\r\n\t            var yAxisModel = axesModels[1];\r\n\r\n\t            var gridModel = xAxisModel.findGridModel();\r\n\r\n\t            if (true) {\r\n\t                if (!gridModel) {\r\n\t                    throw new Error(\r\n\t                        'Grid \"' + zrUtil.retrieve(\r\n\t                            xAxisModel.get('gridIndex'),\r\n\t                            xAxisModel.get('gridId'),\r\n\t                            0\r\n\t                        ) + '\" not found'\r\n\t                    );\r\n\t                }\r\n\t                if (xAxisModel.findGridModel() !== yAxisModel.findGridModel()) {\r\n\t                    throw new Error('xAxis and yAxis must use the same grid');\r\n\t                }\r\n\t            }\r\n\r\n\t            var grid = gridModel.coordinateSystem;\r\n\r\n\t            seriesModel.coordinateSystem = grid.getCartesian(\r\n\t                xAxisModel.componentIndex, yAxisModel.componentIndex\r\n\t            );\r\n\t        });\r\n\r\n\t        return grids;\r\n\t    };\r\n\r\n\t    // For deciding which dimensions to use when creating list data\r\n\t    Grid.dimensions = Cartesian2D.prototype.dimensions;\r\n\r\n\t    __webpack_require__(26).register('cartesian2d', Grid);\r\n\r\n\t    module.exports = Grid;\r\n\r\n\r\n/***/ },\r\n/* 114 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var OrdinalScale = __webpack_require__(115);\r\n\t    var IntervalScale = __webpack_require__(117);\r\n\t    __webpack_require__(118);\r\n\t    __webpack_require__(119);\r\n\t    var Scale = __webpack_require__(116);\r\n\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var textContain = __webpack_require__(8);\r\n\t    var axisHelper = {};\r\n\r\n\t    /**\r\n\t     * Get axis scale extent before niced.\r\n\t     */\r\n\t    axisHelper.getScaleExtent = function (axis, model) {\r\n\t        var scale = axis.scale;\r\n\t        var originalExtent = scale.getExtent();\r\n\t        var span = originalExtent[1] - originalExtent[0];\r\n\t        if (scale.type === 'ordinal') {\r\n\t            // If series has no data, scale extent may be wrong\r\n\t            if (!isFinite(span)) {\r\n\t                return [0, 0];\r\n\t            }\r\n\t            else {\r\n\t                return originalExtent;\r\n\t            }\r\n\t        }\r\n\t        var min = model.getMin ? model.getMin() : model.get('min');\r\n\t        var max = model.getMax ? model.getMax() : model.get('max');\r\n\t        var crossZero = model.getNeedCrossZero\r\n\t            ? model.getNeedCrossZero() : !model.get('scale');\r\n\t        var boundaryGap = model.get('boundaryGap');\r\n\t        if (!zrUtil.isArray(boundaryGap)) {\r\n\t            boundaryGap = [boundaryGap || 0, boundaryGap || 0];\r\n\t        }\r\n\t        boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);\r\n\t        boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);\r\n\t        var fixMin = true;\r\n\t        var fixMax = true;\r\n\t        // Add boundary gap\r\n\t        if (min == null) {\r\n\t            min = originalExtent[0] - boundaryGap[0] * span;\r\n\t            fixMin = false;\r\n\t        }\r\n\t        if (max == null) {\r\n\t            max = originalExtent[1] + boundaryGap[1] * span;\r\n\t            fixMax = false;\r\n\t        }\r\n\t        if (min === 'dataMin') {\r\n\t            min = originalExtent[0];\r\n\t        }\r\n\t        if (max === 'dataMax') {\r\n\t            max = originalExtent[1];\r\n\t        }\r\n\t        // Evaluate if axis needs cross zero\r\n\t        if (crossZero) {\r\n\t            // Axis is over zero and min is not set\r\n\t            if (min > 0 && max > 0 && !fixMin) {\r\n\t                min = 0;\r\n\t            }\r\n\t            // Axis is under zero and max is not set\r\n\t            if (min < 0 && max < 0 && !fixMax) {\r\n\t                max = 0;\r\n\t            }\r\n\t        }\r\n\t        return [min, max];\r\n\t    };\r\n\r\n\t    axisHelper.niceScaleExtent = function (axis, model) {\r\n\t        var scale = axis.scale;\r\n\t        var extent = axisHelper.getScaleExtent(axis, model);\r\n\t        var fixMin = (model.getMin ? model.getMin() : model.get('min')) != null;\r\n\t        var fixMax = (model.getMax ? model.getMax() : model.get('max')) != null;\r\n\t        var splitNumber = model.get('splitNumber');\r\n\r\n\t        if (scale.type === 'log') {\r\n\t            scale.base = model.get('logBase');\r\n\t        }\r\n\r\n\t        scale.setExtent(extent[0], extent[1]);\r\n\t        scale.niceExtent(splitNumber, fixMin, fixMax);\r\n\r\n\t        // Use minInterval to constraint the calculated interval.\r\n\t        // If calculated interval is less than minInterval. increase the interval quantity until\r\n\t        // it is larger than minInterval.\r\n\t        // For example:\r\n\t        //  minInterval is 1, calculated interval is 0.2, so increase it to be 1. In this way we can get\r\n\t        //  an integer axis.\r\n\t        var minInterval = model.get('minInterval');\r\n\t        if (isFinite(minInterval) && !fixMin && !fixMax && scale.type === 'interval') {\r\n\t            var interval = scale.getInterval();\r\n\t            var intervalScale = Math.max(Math.abs(interval), minInterval) / interval;\r\n\t            // while (interval < minInterval) {\r\n\t            //     var quantity = numberUtil.quantity(interval);\r\n\t            //     interval = quantity * 10;\r\n\t            //     scaleQuantity *= 10;\r\n\t            // }\r\n\t            extent = scale.getExtent();\r\n\t            var origin = (extent[1] + extent[0]) / 2;\r\n\t            scale.setExtent(\r\n\t                intervalScale * (extent[0] - origin) + origin,\r\n\t                intervalScale * (extent[1] - origin) + origin\r\n\t            );\r\n\t            scale.niceExtent(splitNumber);\r\n\t        }\r\n\r\n\t        // If some one specified the min, max. And the default calculated interval\r\n\t        // is not good enough. He can specify the interval. It is often appeared\r\n\t        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard\r\n\t        // to be 60.\r\n\t        // FIXME\r\n\t        var interval = model.get('interval');\r\n\t        if (interval != null) {\r\n\t            scale.setInterval && scale.setInterval(interval);\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {module:echarts/model/Model} model\r\n\t     * @param {string} [axisType] Default retrieve from model.type\r\n\t     * @return {module:echarts/scale/*}\r\n\t     */\r\n\t    axisHelper.createScaleByModel = function(model, axisType) {\r\n\t        axisType = axisType || model.get('type');\r\n\t        if (axisType) {\r\n\t            switch (axisType) {\r\n\t                // Buildin scale\r\n\t                case 'category':\r\n\t                    return new OrdinalScale(\r\n\t                        model.getCategories(), [Infinity, -Infinity]\r\n\t                    );\r\n\t                case 'value':\r\n\t                    return new IntervalScale();\r\n\t                // Extended scale, like time and log\r\n\t                default:\r\n\t                    return (Scale.getClass(axisType) || IntervalScale).create(model);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Check if the axis corss 0\r\n\t     */\r\n\t    axisHelper.ifAxisCrossZero = function (axis) {\r\n\t        var dataExtent = axis.scale.getExtent();\r\n\t        var min = dataExtent[0];\r\n\t        var max = dataExtent[1];\r\n\t        return !((min > 0 && max > 0) || (min < 0 && max < 0));\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {Array.<number>} tickCoords In axis self coordinate.\r\n\t     * @param {Array.<string>} labels\r\n\t     * @param {string} font\r\n\t     * @param {boolean} isAxisHorizontal\r\n\t     * @return {number}\r\n\t     */\r\n\t    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {\r\n\t        // FIXME\r\n\t        // 不同角的axis和label，不只是horizontal和vertical.\r\n\r\n\t        var textSpaceTakenRect;\r\n\t        var autoLabelInterval = 0;\r\n\t        var accumulatedLabelInterval = 0;\r\n\r\n\t        var step = 1;\r\n\t        if (labels.length > 40) {\r\n\t            // Simple optimization for large amount of labels\r\n\t            step = Math.floor(labels.length / 40);\r\n\t        }\r\n\r\n\t        for (var i = 0; i < tickCoords.length; i += step) {\r\n\t            var tickCoord = tickCoords[i];\r\n\t            var rect = textContain.getBoundingRect(\r\n\t                labels[i], font, 'center', 'top'\r\n\t            );\r\n\t            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;\r\n\t            // FIXME Magic number 1.5\r\n\t            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.3;\r\n\t            if (!textSpaceTakenRect) {\r\n\t                textSpaceTakenRect = rect.clone();\r\n\t            }\r\n\t            // There is no space for current label;\r\n\t            else if (textSpaceTakenRect.intersect(rect)) {\r\n\t                accumulatedLabelInterval++;\r\n\t                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);\r\n\t            }\r\n\t            else {\r\n\t                textSpaceTakenRect.union(rect);\r\n\t                // Reset\r\n\t                accumulatedLabelInterval = 0;\r\n\t            }\r\n\t        }\r\n\t        if (autoLabelInterval === 0 && step > 1) {\r\n\t            return step;\r\n\t        }\r\n\t        return (autoLabelInterval + 1) * step - 1;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {Object} axis\r\n\t     * @param {Function} labelFormatter\r\n\t     * @return {Array.<string>}\r\n\t     */\r\n\t    axisHelper.getFormattedLabels = function (axis, labelFormatter) {\r\n\t        var scale = axis.scale;\r\n\t        var labels = scale.getTicksLabels();\r\n\t        var ticks = scale.getTicks();\r\n\t        if (typeof labelFormatter === 'string') {\r\n\t            labelFormatter = (function (tpl) {\r\n\t                return function (val) {\r\n\t                    return tpl.replace('{value}', val);\r\n\t                };\r\n\t            })(labelFormatter);\r\n\t            return zrUtil.map(labels, labelFormatter);\r\n\t        }\r\n\t        else if (typeof labelFormatter === 'function') {\r\n\t            return zrUtil.map(ticks, function (tick, idx) {\r\n\t                return labelFormatter(\r\n\t                    axis.type === 'category' ? scale.getLabel(tick) : tick,\r\n\t                    idx\r\n\t                );\r\n\t            }, this);\r\n\t        }\r\n\t        else {\r\n\t            return labels;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = axisHelper;\r\n\r\n\r\n/***/ },\r\n/* 115 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Linear continuous scale\r\n\t * @module echarts/coord/scale/Ordinal\r\n\t *\r\n\t * http://en.wikipedia.org/wiki/Level_of_measurement\r\n\t */\r\n\r\n\t// FIXME only one data\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Scale = __webpack_require__(116);\r\n\r\n\t    var scaleProto = Scale.prototype;\r\n\r\n\t    var OrdinalScale = Scale.extend({\r\n\r\n\t        type: 'ordinal',\r\n\r\n\t        init: function (data, extent) {\r\n\t            this._data = data;\r\n\t            this._extent = extent || [0, data.length - 1];\r\n\t        },\r\n\r\n\t        parse: function (val) {\r\n\t            return typeof val === 'string'\r\n\t                ? zrUtil.indexOf(this._data, val)\r\n\t                // val might be float.\r\n\t                : Math.round(val);\r\n\t        },\r\n\r\n\t        contain: function (rank) {\r\n\t            rank = this.parse(rank);\r\n\t            return scaleProto.contain.call(this, rank)\r\n\t                && this._data[rank] != null;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Normalize given rank or name to linear [0, 1]\r\n\t         * @param {number|string} [val]\r\n\t         * @return {number}\r\n\t         */\r\n\t        normalize: function (val) {\r\n\t            return scaleProto.normalize.call(this, this.parse(val));\r\n\t        },\r\n\r\n\t        scale: function (val) {\r\n\t            return Math.round(scaleProto.scale.call(this, val));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {Array}\r\n\t         */\r\n\t        getTicks: function () {\r\n\t            var ticks = [];\r\n\t            var extent = this._extent;\r\n\t            var rank = extent[0];\r\n\r\n\t            while (rank <= extent[1]) {\r\n\t                ticks.push(rank);\r\n\t                rank++;\r\n\t            }\r\n\r\n\t            return ticks;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get item on rank n\r\n\t         * @param {number} n\r\n\t         * @return {string}\r\n\t         */\r\n\t        getLabel: function (n) {\r\n\t            return this._data[n];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {number}\r\n\t         */\r\n\t        count: function () {\r\n\t            return this._extent[1] - this._extent[0] + 1;\r\n\t        },\r\n\r\n\t        niceTicks: zrUtil.noop,\r\n\t        niceExtent: zrUtil.noop\r\n\t    });\r\n\r\n\t    /**\r\n\t     * @return {module:echarts/scale/Time}\r\n\t     */\r\n\t    OrdinalScale.create = function () {\r\n\t        return new OrdinalScale();\r\n\t    };\r\n\r\n\t    module.exports = OrdinalScale;\r\n\r\n\r\n/***/ },\r\n/* 116 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * // Scale class management\r\n\t * @module echarts/scale/Scale\r\n\t */\r\n\r\n\r\n\t    var clazzUtil = __webpack_require__(13);\r\n\r\n\t    function Scale() {\r\n\t        /**\r\n\t         * Extent\r\n\t         * @type {Array.<number>}\r\n\t         * @protected\r\n\t         */\r\n\t        this._extent = [Infinity, -Infinity];\r\n\r\n\t        /**\r\n\t         * Step is calculated in adjustExtent\r\n\t         * @type {Array.<number>}\r\n\t         * @protected\r\n\t         */\r\n\t        this._interval = 0;\r\n\r\n\t        this.init && this.init.apply(this, arguments);\r\n\t    }\r\n\r\n\t    var scaleProto = Scale.prototype;\r\n\r\n\t    /**\r\n\t     * Parse input val to valid inner number.\r\n\t     * @param {*} val\r\n\t     * @return {number}\r\n\t     */\r\n\t    scaleProto.parse = function (val) {\r\n\t        // Notice: This would be a trap here, If the implementation\r\n\t        // of this method depends on extent, and this method is used\r\n\t        // before extent set (like in dataZoom), it would be wrong.\r\n\t        // Nevertheless, parse does not depend on extent generally.\r\n\t        return val;\r\n\t    };\r\n\r\n\t    scaleProto.contain = function (val) {\r\n\t        var extent = this._extent;\r\n\t        return val >= extent[0] && val <= extent[1];\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Normalize value to linear [0, 1], return 0.5 if extent span is 0\r\n\t     * @param {number} val\r\n\t     * @return {number}\r\n\t     */\r\n\t    scaleProto.normalize = function (val) {\r\n\t        var extent = this._extent;\r\n\t        if (extent[1] === extent[0]) {\r\n\t            return 0.5;\r\n\t        }\r\n\t        return (val - extent[0]) / (extent[1] - extent[0]);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Scale normalized value\r\n\t     * @param {number} val\r\n\t     * @return {number}\r\n\t     */\r\n\t    scaleProto.scale = function (val) {\r\n\t        var extent = this._extent;\r\n\t        return val * (extent[1] - extent[0]) + extent[0];\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Set extent from data\r\n\t     * @param {Array.<number>} other\r\n\t     */\r\n\t    scaleProto.unionExtent = function (other) {\r\n\t        var extent = this._extent;\r\n\t        other[0] < extent[0] && (extent[0] = other[0]);\r\n\t        other[1] > extent[1] && (extent[1] = other[1]);\r\n\t        // not setExtent because in log axis it may transformed to power\r\n\t        // this.setExtent(extent[0], extent[1]);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get extent\r\n\t     * @return {Array.<number>}\r\n\t     */\r\n\t    scaleProto.getExtent = function () {\r\n\t        return this._extent.slice();\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Set extent\r\n\t     * @param {number} start\r\n\t     * @param {number} end\r\n\t     */\r\n\t    scaleProto.setExtent = function (start, end) {\r\n\t        var thisExtent = this._extent;\r\n\t        if (!isNaN(start)) {\r\n\t            thisExtent[0] = start;\r\n\t        }\r\n\t        if (!isNaN(end)) {\r\n\t            thisExtent[1] = end;\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @return {Array.<string>}\r\n\t     */\r\n\t    scaleProto.getTicksLabels = function () {\r\n\t        var labels = [];\r\n\t        var ticks = this.getTicks();\r\n\t        for (var i = 0; i < ticks.length; i++) {\r\n\t            labels.push(this.getLabel(ticks[i]));\r\n\t        }\r\n\t        return labels;\r\n\t    };\r\n\r\n\t    clazzUtil.enableClassExtend(Scale);\r\n\t    clazzUtil.enableClassManagement(Scale, {\r\n\t        registerWhenExtend: true\r\n\t    });\r\n\r\n\t    module.exports = Scale;\r\n\r\n\r\n/***/ },\r\n/* 117 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Interval scale\r\n\t * @module echarts/scale/Interval\r\n\t */\r\n\r\n\r\n\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var Scale = __webpack_require__(116);\r\n\r\n\t    var mathFloor = Math.floor;\r\n\t    var mathCeil = Math.ceil;\r\n\r\n\t    var getPrecisionSafe = numberUtil.getPrecisionSafe;\r\n\t    var roundingErrorFix = numberUtil.round;\r\n\t    /**\r\n\t     * @alias module:echarts/coord/scale/Interval\r\n\t     * @constructor\r\n\t     */\r\n\t    var IntervalScale = Scale.extend({\r\n\r\n\t        type: 'interval',\r\n\r\n\t        _interval: 0,\r\n\r\n\t        setExtent: function (start, end) {\r\n\t            var thisExtent = this._extent;\r\n\t            //start,end may be a Number like '25',so...\r\n\t            if (!isNaN(start)) {\r\n\t                thisExtent[0] = parseFloat(start);\r\n\t            }\r\n\t            if (!isNaN(end)) {\r\n\t                thisExtent[1] = parseFloat(end);\r\n\t            }\r\n\t        },\r\n\r\n\t        unionExtent: function (other) {\r\n\t            var extent = this._extent;\r\n\t            other[0] < extent[0] && (extent[0] = other[0]);\r\n\t            other[1] > extent[1] && (extent[1] = other[1]);\r\n\r\n\t            // unionExtent may called by it's sub classes\r\n\t            IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);\r\n\t        },\r\n\t        /**\r\n\t         * Get interval\r\n\t         */\r\n\t        getInterval: function () {\r\n\t            if (!this._interval) {\r\n\t                this.niceTicks();\r\n\t            }\r\n\t            return this._interval;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Set interval\r\n\t         */\r\n\t        setInterval: function (interval) {\r\n\t            this._interval = interval;\r\n\t            // Dropped auto calculated niceExtent and use user setted extent\r\n\t            // We assume user wan't to set both interval, min, max to get a better result\r\n\t            this._niceExtent = this._extent.slice();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        getTicks: function () {\r\n\t            if (!this._interval) {\r\n\t                this.niceTicks();\r\n\t            }\r\n\t            var interval = this._interval;\r\n\t            var extent = this._extent;\r\n\t            var ticks = [];\r\n\r\n\t            // Consider this case: using dataZoom toolbox, zoom and zoom.\r\n\t            var safeLimit = 10000;\r\n\r\n\t            if (interval) {\r\n\t                var niceExtent = this._niceExtent;\r\n\t                var precision = getPrecisionSafe(interval) + 2;\r\n\r\n\t                if (extent[0] < niceExtent[0]) {\r\n\t                    ticks.push(extent[0]);\r\n\t                }\r\n\t                var tick = niceExtent[0];\r\n\r\n\t                while (tick <= niceExtent[1]) {\r\n\t                    ticks.push(tick);\r\n\t                    // Avoid rounding error\r\n\t                    tick = roundingErrorFix(tick + interval, precision);\r\n\t                    if (ticks.length > safeLimit) {\r\n\t                        return [];\r\n\t                    }\r\n\t                }\r\n\t                // Consider this case: the last item of ticks is smaller\r\n\t                // than niceExtent[1] and niceExtent[1] === extent[1].\r\n\t                if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceExtent[1])) {\r\n\t                    ticks.push(extent[1]);\r\n\t                }\r\n\t            }\r\n\r\n\t            return ticks;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {Array.<string>}\r\n\t         */\r\n\t        getTicksLabels: function () {\r\n\t            var labels = [];\r\n\t            var ticks = this.getTicks();\r\n\t            for (var i = 0; i < ticks.length; i++) {\r\n\t                labels.push(this.getLabel(ticks[i]));\r\n\t            }\r\n\t            return labels;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {number} n\r\n\t         * @return {number}\r\n\t         */\r\n\t        getLabel: function (data) {\r\n\t            return formatUtil.addCommas(data);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Update interval and extent of intervals for nice ticks\r\n\t         *\r\n\t         * @param {number} [splitNumber = 5] Desired number of ticks\r\n\t         */\r\n\t        niceTicks: function (splitNumber) {\r\n\t            splitNumber = splitNumber || 5;\r\n\t            var extent = this._extent;\r\n\t            var span = extent[1] - extent[0];\r\n\t            if (!isFinite(span)) {\r\n\t                return;\r\n\t            }\r\n\t            // User may set axis min 0 and data are all negative\r\n\t            // FIXME If it needs to reverse ?\r\n\t            if (span < 0) {\r\n\t                span = -span;\r\n\t                extent.reverse();\r\n\t            }\r\n\r\n\t            // From \"Nice Numbers for Graph Labels\" of Graphic Gems\r\n\t            // var niceSpan = numberUtil.nice(span, false);\r\n\t            var step = roundingErrorFix(\r\n\t                numberUtil.nice(span / splitNumber, true),\r\n\t                Math.max(\r\n\t                    getPrecisionSafe(extent[0]),\r\n\t                    getPrecisionSafe(extent[1])\r\n\t                // extent may be [0, 1], and step should have 1 more digits.\r\n\t                // To make it safe we add 2 more digits\r\n\t                ) + 2\r\n\t            );\r\n\r\n\t            var precision = getPrecisionSafe(step) + 2;\r\n\t            // Niced extent inside original extent\r\n\t            var niceExtent = [\r\n\t                roundingErrorFix(mathCeil(extent[0] / step) * step, precision),\r\n\t                roundingErrorFix(mathFloor(extent[1] / step) * step, precision)\r\n\t            ];\r\n\r\n\t            this._interval = step;\r\n\t            this._niceExtent = niceExtent;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Nice extent.\r\n\t         * @param {number} [splitNumber = 5] Given approx tick number\r\n\t         * @param {boolean} [fixMin=false]\r\n\t         * @param {boolean} [fixMax=false]\r\n\t         */\r\n\t        niceExtent: function (splitNumber, fixMin, fixMax) {\r\n\t            var extent = this._extent;\r\n\t            // If extent start and end are same, expand them\r\n\t            if (extent[0] === extent[1]) {\r\n\t                if (extent[0] !== 0) {\r\n\t                    // Expand extent\r\n\t                    var expandSize = extent[0];\r\n\t                    // In the fowllowing case\r\n\t                    //      Axis has been fixed max 100\r\n\t                    //      Plus data are all 100 and axis extent are [100, 100].\r\n\t                    // Extend to the both side will cause expanded max is larger than fixed max.\r\n\t                    // So only expand to the smaller side.\r\n\t                    if (!fixMax) {\r\n\t                        extent[1] += expandSize / 2;\r\n\t                        extent[0] -= expandSize / 2;\r\n\t                    }\r\n\t                    else {\r\n\t                        extent[0] -= expandSize / 2;\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    extent[1] = 1;\r\n\t                }\r\n\t            }\r\n\t            var span = extent[1] - extent[0];\r\n\t            // If there are no data and extent are [Infinity, -Infinity]\r\n\t            if (!isFinite(span)) {\r\n\t                extent[0] = 0;\r\n\t                extent[1] = 1;\r\n\t            }\r\n\r\n\t            this.niceTicks(splitNumber);\r\n\r\n\t            // var extent = this._extent;\r\n\t            var interval = this._interval;\r\n\r\n\t            if (!fixMin) {\r\n\t                extent[0] = roundingErrorFix(mathFloor(extent[0] / interval) * interval);\r\n\t            }\r\n\t            if (!fixMax) {\r\n\t                extent[1] = roundingErrorFix(mathCeil(extent[1] / interval) * interval);\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * @return {module:echarts/scale/Time}\r\n\t     */\r\n\t    IntervalScale.create = function () {\r\n\t        return new IntervalScale();\r\n\t    };\r\n\r\n\t    module.exports = IntervalScale;\r\n\r\n\r\n\r\n/***/ },\r\n/* 118 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Interval scale\r\n\t * @module echarts/coord/scale/Time\r\n\t */\r\n\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var formatUtil = __webpack_require__(6);\r\n\r\n\t    var IntervalScale = __webpack_require__(117);\r\n\r\n\t    var intervalScaleProto = IntervalScale.prototype;\r\n\r\n\t    var mathCeil = Math.ceil;\r\n\t    var mathFloor = Math.floor;\r\n\t    var ONE_SECOND = 1000;\r\n\t    var ONE_MINUTE = ONE_SECOND * 60;\r\n\t    var ONE_HOUR = ONE_MINUTE * 60;\r\n\t    var ONE_DAY = ONE_HOUR * 24;\r\n\r\n\t    // FIXME 公用？\r\n\t    var bisect = function (a, x, lo, hi) {\r\n\t        while (lo < hi) {\r\n\t            var mid = lo + hi >>> 1;\r\n\t            if (a[mid][2] < x) {\r\n\t                lo = mid + 1;\r\n\t            }\r\n\t            else {\r\n\t                hi  = mid;\r\n\t            }\r\n\t        }\r\n\t        return lo;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @alias module:echarts/coord/scale/Time\r\n\t     * @constructor\r\n\t     */\r\n\t    var TimeScale = IntervalScale.extend({\r\n\t        type: 'time',\r\n\r\n\t        // Overwrite\r\n\t        getLabel: function (val) {\r\n\t            var stepLvl = this._stepLvl;\r\n\r\n\t            var date = new Date(val);\r\n\r\n\t            return formatUtil.formatTime(stepLvl[0], date);\r\n\t        },\r\n\r\n\t        // Overwrite\r\n\t        niceExtent: function (approxTickNum, fixMin, fixMax) {\r\n\t            var extent = this._extent;\r\n\t            // If extent start and end are same, expand them\r\n\t            if (extent[0] === extent[1]) {\r\n\t                // Expand extent\r\n\t                extent[0] -= ONE_DAY;\r\n\t                extent[1] += ONE_DAY;\r\n\t            }\r\n\t            // If there are no data and extent are [Infinity, -Infinity]\r\n\t            if (extent[1] === -Infinity && extent[0] === Infinity) {\r\n\t                var d = new Date();\r\n\t                extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());\r\n\t                extent[0] = extent[1] - ONE_DAY;\r\n\t            }\r\n\r\n\t            this.niceTicks(approxTickNum);\r\n\r\n\t            // var extent = this._extent;\r\n\t            var interval = this._interval;\r\n\r\n\t            if (!fixMin) {\r\n\t                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);\r\n\t            }\r\n\t            if (!fixMax) {\r\n\t                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);\r\n\t            }\r\n\t        },\r\n\r\n\t        // Overwrite\r\n\t        niceTicks: function (approxTickNum) {\r\n\t            approxTickNum = approxTickNum || 10;\r\n\r\n\t            var extent = this._extent;\r\n\t            var span = extent[1] - extent[0];\r\n\t            var approxInterval = span / approxTickNum;\r\n\t            var scaleLevelsLen = scaleLevels.length;\r\n\t            var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);\r\n\r\n\t            var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];\r\n\t            var interval = level[2];\r\n\t            // Same with interval scale if span is much larger than 1 year\r\n\t            if (level[0] === 'year') {\r\n\t                var yearSpan = span / interval;\r\n\r\n\t                // From \"Nice Numbers for Graph Labels\" of Graphic Gems\r\n\t                // var niceYearSpan = numberUtil.nice(yearSpan, false);\r\n\t                var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);\r\n\r\n\t                interval *= yearStep;\r\n\t            }\r\n\r\n\t            var niceExtent = [\r\n\t                mathCeil(extent[0] / interval) * interval,\r\n\t                mathFloor(extent[1] / interval) * interval\r\n\t            ];\r\n\r\n\t            this._stepLvl = level;\r\n\t            // Interval will be used in getTicks\r\n\t            this._interval = interval;\r\n\t            this._niceExtent = niceExtent;\r\n\t        },\r\n\r\n\t        parse: function (val) {\r\n\t            // val might be float.\r\n\t            return +numberUtil.parseDate(val);\r\n\t        }\r\n\t    });\r\n\r\n\t    zrUtil.each(['contain', 'normalize'], function (methodName) {\r\n\t        TimeScale.prototype[methodName] = function (val) {\r\n\t            return intervalScaleProto[methodName].call(this, this.parse(val));\r\n\t        };\r\n\t    });\r\n\r\n\t    // Steps from d3\r\n\t    var scaleLevels = [\r\n\t        // Format       step    interval\r\n\t        ['hh:mm:ss',    1,      ONE_SECOND],           // 1s\r\n\t        ['hh:mm:ss',    5,      ONE_SECOND * 5],       // 5s\r\n\t        ['hh:mm:ss',    10,     ONE_SECOND * 10],      // 10s\r\n\t        ['hh:mm:ss',    15,     ONE_SECOND * 15],      // 15s\r\n\t        ['hh:mm:ss',    30,     ONE_SECOND * 30],      // 30s\r\n\t        ['hh:mm\\nMM-dd',1,      ONE_MINUTE],          // 1m\r\n\t        ['hh:mm\\nMM-dd',5,      ONE_MINUTE * 5],      // 5m\r\n\t        ['hh:mm\\nMM-dd',10,     ONE_MINUTE * 10],     // 10m\r\n\t        ['hh:mm\\nMM-dd',15,     ONE_MINUTE * 15],     // 15m\r\n\t        ['hh:mm\\nMM-dd',30,     ONE_MINUTE * 30],     // 30m\r\n\t        ['hh:mm\\nMM-dd',1,      ONE_HOUR],        // 1h\r\n\t        ['hh:mm\\nMM-dd',2,      ONE_HOUR * 2],    // 2h\r\n\t        ['hh:mm\\nMM-dd',6,      ONE_HOUR * 6],    // 6h\r\n\t        ['hh:mm\\nMM-dd',12,     ONE_HOUR * 12],   // 12h\r\n\t        ['MM-dd\\nyyyy', 1,      ONE_DAY],   // 1d\r\n\t        ['week',        7,      ONE_DAY * 7],        // 7d\r\n\t        ['month',       1,      ONE_DAY * 31],       // 1M\r\n\t        ['quarter',     3,      ONE_DAY * 380 / 4],  // 3M\r\n\t        ['half-year',   6,      ONE_DAY * 380 / 2],  // 6M\r\n\t        ['year',        1,      ONE_DAY * 380]       // 1Y\r\n\t    ];\r\n\r\n\t    /**\r\n\t     * @return {module:echarts/scale/Time}\r\n\t     */\r\n\t    TimeScale.create = function () {\r\n\t        return new TimeScale();\r\n\t    };\r\n\r\n\t    module.exports = TimeScale;\r\n\r\n\r\n/***/ },\r\n/* 119 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Log scale\r\n\t * @module echarts/scale/Log\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Scale = __webpack_require__(116);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\r\n\t    // Use some method of IntervalScale\r\n\t    var IntervalScale = __webpack_require__(117);\r\n\r\n\t    var scaleProto = Scale.prototype;\r\n\t    var intervalScaleProto = IntervalScale.prototype;\r\n\r\n\t    var getPrecisionSafe = numberUtil.getPrecisionSafe;\r\n\t    var roundingErrorFix = numberUtil.round;\r\n\r\n\t    var mathFloor = Math.floor;\r\n\t    var mathCeil = Math.ceil;\r\n\t    var mathPow = Math.pow;\r\n\r\n\t    var mathLog = Math.log;\r\n\r\n\t    var LogScale = Scale.extend({\r\n\r\n\t        type: 'log',\r\n\r\n\t        base: 10,\r\n\r\n\t        $constructor: function () {\r\n\t            Scale.apply(this, arguments);\r\n\t            this._originalScale = new IntervalScale();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        getTicks: function () {\r\n\t            var originalScale = this._originalScale;\r\n\t            var extent = this._extent;\r\n\t            var originalExtent = originalScale.getExtent();\r\n\r\n\t            return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {\r\n\t                var powVal = numberUtil.round(mathPow(this.base, val));\r\n\r\n\t                // Fix #4158\r\n\t                powVal = (val === extent[0] && originalScale.__fixMin)\r\n\t                    ? fixRoundingError(powVal, originalExtent[0])\r\n\t                    : powVal;\r\n\t                powVal = (val === extent[1] && originalScale.__fixMax)\r\n\t                    ? fixRoundingError(powVal, originalExtent[1])\r\n\t                    : powVal;\r\n\r\n\t                return powVal;\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {number} val\r\n\t         * @return {string}\r\n\t         */\r\n\t        getLabel: intervalScaleProto.getLabel,\r\n\r\n\t        /**\r\n\t         * @param  {number} val\r\n\t         * @return {number}\r\n\t         */\r\n\t        scale: function (val) {\r\n\t            val = scaleProto.scale.call(this, val);\r\n\t            return mathPow(this.base, val);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {number} start\r\n\t         * @param {number} end\r\n\t         */\r\n\t        setExtent: function (start, end) {\r\n\t            var base = this.base;\r\n\t            start = mathLog(start) / mathLog(base);\r\n\t            end = mathLog(end) / mathLog(base);\r\n\t            intervalScaleProto.setExtent.call(this, start, end);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {number} end\r\n\t         */\r\n\t        getExtent: function () {\r\n\t            var base = this.base;\r\n\t            var extent = scaleProto.getExtent.call(this);\r\n\t            extent[0] = mathPow(base, extent[0]);\r\n\t            extent[1] = mathPow(base, extent[1]);\r\n\r\n\t            // Fix #4158\r\n\t            var originalScale = this._originalScale;\r\n\t            var originalExtent = originalScale.getExtent();\r\n\t            originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\r\n\t            originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\r\n\r\n\t            return extent;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {Array.<number>} extent\r\n\t         */\r\n\t        unionExtent: function (extent) {\r\n\t            this._originalScale.unionExtent(extent);\r\n\r\n\t            var base = this.base;\r\n\t            extent[0] = mathLog(extent[0]) / mathLog(base);\r\n\t            extent[1] = mathLog(extent[1]) / mathLog(base);\r\n\t            scaleProto.unionExtent.call(this, extent);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Update interval and extent of intervals for nice ticks\r\n\t         * @param  {number} [approxTickNum = 10] Given approx tick number\r\n\t         */\r\n\t        niceTicks: function (approxTickNum) {\r\n\t            approxTickNum = approxTickNum || 10;\r\n\t            var extent = this._extent;\r\n\t            var span = extent[1] - extent[0];\r\n\t            if (span === Infinity || span <= 0) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var interval = numberUtil.quantity(span);\r\n\t            var err = approxTickNum / span * interval;\r\n\r\n\t            // Filter ticks to get closer to the desired count.\r\n\t            if (err <= 0.5) {\r\n\t                interval *= 10;\r\n\t            }\r\n\r\n\t            // Interval should be integer\r\n\t            while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\r\n\t                interval *= 10;\r\n\t            }\r\n\r\n\t            var niceExtent = [\r\n\t                numberUtil.round(mathCeil(extent[0] / interval) * interval),\r\n\t                numberUtil.round(mathFloor(extent[1] / interval) * interval)\r\n\t            ];\r\n\r\n\t            this._interval = interval;\r\n\t            this._niceExtent = niceExtent;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Nice extent.\r\n\t         * @param {number} [approxTickNum = 10] Given approx tick number\r\n\t         * @param {boolean} [fixMin=false]\r\n\t         * @param {boolean} [fixMax=false]\r\n\t         */\r\n\t        niceExtent: function (splitNumber, fixMin, fixMax) {\r\n\t            intervalScaleProto.niceExtent.call(this, splitNumber, fixMin, fixMax);\r\n\r\n\t            var originalScale = this._originalScale;\r\n\t            originalScale.__fixMin = fixMin;\r\n\t            originalScale.__fixMax = fixMax;\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    zrUtil.each(['contain', 'normalize'], function (methodName) {\r\n\t        LogScale.prototype[methodName] = function (val) {\r\n\t            val = mathLog(val) / mathLog(this.base);\r\n\t            return scaleProto[methodName].call(this, val);\r\n\t        };\r\n\t    });\r\n\r\n\t    LogScale.create = function () {\r\n\t        return new LogScale();\r\n\t    };\r\n\r\n\t    function fixRoundingError(val, originalVal) {\r\n\t        return roundingErrorFix(val, getPrecisionSafe(originalVal));\r\n\t    }\r\n\r\n\t    module.exports = LogScale;\r\n\r\n\r\n/***/ },\r\n/* 120 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Cartesian = __webpack_require__(121);\r\n\r\n\t    function Cartesian2D(name) {\r\n\r\n\t        Cartesian.call(this, name);\r\n\t    }\r\n\r\n\t    Cartesian2D.prototype = {\r\n\r\n\t        constructor: Cartesian2D,\r\n\r\n\t        type: 'cartesian2d',\r\n\r\n\t        /**\r\n\t         * @type {Array.<string>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        dimensions: ['x', 'y'],\r\n\r\n\t        /**\r\n\t         * Base axis will be used on stacking.\r\n\t         *\r\n\t         * @return {module:echarts/coord/cartesian/Axis2D}\r\n\t         */\r\n\t        getBaseAxis: function () {\r\n\t            return this.getAxesByScale('ordinal')[0]\r\n\t                || this.getAxesByScale('time')[0]\r\n\t                || this.getAxis('x');\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If contain point\r\n\t         * @param {Array.<number>} point\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        containPoint: function (point) {\r\n\t            var axisX = this.getAxis('x');\r\n\t            var axisY = this.getAxis('y');\r\n\t            return axisX.contain(axisX.toLocalCoord(point[0]))\r\n\t                && axisY.contain(axisY.toLocalCoord(point[1]));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If contain data\r\n\t         * @param {Array.<number>} data\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        containData: function (data) {\r\n\t            return this.getAxis('x').containData(data[0])\r\n\t                && this.getAxis('y').containData(data[1]);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert series data to an array of points\r\n\t         * @param {module:echarts/data/List} data\r\n\t         * @param {boolean} stack\r\n\t         * @return {Array}\r\n\t         *  Return array of points. For example:\r\n\t         *  `[[10, 10], [20, 20], [30, 30]]`\r\n\t         */\r\n\t        dataToPoints: function (data, stack) {\r\n\t            return data.mapArray(['x', 'y'], function (x, y) {\r\n\t                return this.dataToPoint([x, y]);\r\n\t            }, stack, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Array.<number>} data\r\n\t         * @param {boolean} [clamp=false]\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        dataToPoint: function (data, clamp) {\r\n\t            var xAxis = this.getAxis('x');\r\n\t            var yAxis = this.getAxis('y');\r\n\t            return [\r\n\t                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),\r\n\t                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))\r\n\t            ];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Array.<number>} point\r\n\t         * @param {boolean} [clamp=false]\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        pointToData: function (point, clamp) {\r\n\t            var xAxis = this.getAxis('x');\r\n\t            var yAxis = this.getAxis('y');\r\n\t            return [\r\n\t                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),\r\n\t                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)\r\n\t            ];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get other axis\r\n\t         * @param {module:echarts/coord/cartesian/Axis2D} axis\r\n\t         */\r\n\t        getOtherAxis: function (axis) {\r\n\t            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');\r\n\t        }\r\n\t    };\r\n\r\n\t    zrUtil.inherits(Cartesian2D, Cartesian);\r\n\r\n\t    module.exports = Cartesian2D;\r\n\r\n\r\n/***/ },\r\n/* 121 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * Cartesian coordinate system\r\n\t * @module  echarts/coord/Cartesian\r\n\t *\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    function dimAxisMapper(dim) {\r\n\t        return this._axes[dim];\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @alias module:echarts/coord/Cartesian\r\n\t     * @constructor\r\n\t     */\r\n\t    var Cartesian = function (name) {\r\n\t        this._axes = {};\r\n\r\n\t        this._dimList = [];\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.name = name || '';\r\n\t    };\r\n\r\n\t    Cartesian.prototype = {\r\n\r\n\t        constructor: Cartesian,\r\n\r\n\t        type: 'cartesian',\r\n\r\n\t        /**\r\n\t         * Get axis\r\n\t         * @param  {number|string} dim\r\n\t         * @return {module:echarts/coord/Cartesian~Axis}\r\n\t         */\r\n\t        getAxis: function (dim) {\r\n\t            return this._axes[dim];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get axes list\r\n\t         * @return {Array.<module:echarts/coord/Cartesian~Axis>}\r\n\t         */\r\n\t        getAxes: function () {\r\n\t            return zrUtil.map(this._dimList, dimAxisMapper, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get axes list by given scale type\r\n\t         */\r\n\t        getAxesByScale: function (scaleType) {\r\n\t            scaleType = scaleType.toLowerCase();\r\n\t            return zrUtil.filter(\r\n\t                this.getAxes(),\r\n\t                function (axis) {\r\n\t                    return axis.scale.type === scaleType;\r\n\t                }\r\n\t            );\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Add axis\r\n\t         * @param {module:echarts/coord/Cartesian.Axis}\r\n\t         */\r\n\t        addAxis: function (axis) {\r\n\t            var dim = axis.dim;\r\n\r\n\t            this._axes[dim] = axis;\r\n\r\n\t            this._dimList.push(dim);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert data to coord in nd space\r\n\t         * @param {Array.<number>|Object.<string, number>} val\r\n\t         * @return {Array.<number>|Object.<string, number>}\r\n\t         */\r\n\t        dataToCoord: function (val) {\r\n\t            return this._dataCoordConvert(val, 'dataToCoord');\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert coord in nd space to data\r\n\t         * @param  {Array.<number>|Object.<string, number>} val\r\n\t         * @return {Array.<number>|Object.<string, number>}\r\n\t         */\r\n\t        coordToData: function (val) {\r\n\t            return this._dataCoordConvert(val, 'coordToData');\r\n\t        },\r\n\r\n\t        _dataCoordConvert: function (input, method) {\r\n\t            var dimList = this._dimList;\r\n\r\n\t            var output = input instanceof Array ? [] : {};\r\n\r\n\t            for (var i = 0; i < dimList.length; i++) {\r\n\t                var dim = dimList[i];\r\n\t                var axis = this._axes[dim];\r\n\r\n\t                output[dim] = axis[method](input[dim]);\r\n\t            }\r\n\r\n\t            return output;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = Cartesian;\r\n\r\n\r\n/***/ },\r\n/* 122 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Axis = __webpack_require__(123);\r\n\t    var axisLabelInterval = __webpack_require__(124);\r\n\r\n\t    /**\r\n\t     * Extend axis 2d\r\n\t     * @constructor module:echarts/coord/cartesian/Axis2D\r\n\t     * @extends {module:echarts/coord/cartesian/Axis}\r\n\t     * @param {string} dim\r\n\t     * @param {*} scale\r\n\t     * @param {Array.<number>} coordExtent\r\n\t     * @param {string} axisType\r\n\t     * @param {string} position\r\n\t     */\r\n\t    var Axis2D = function (dim, scale, coordExtent, axisType, position) {\r\n\t        Axis.call(this, dim, scale, coordExtent);\r\n\t        /**\r\n\t         * Axis type\r\n\t         *  - 'category'\r\n\t         *  - 'value'\r\n\t         *  - 'time'\r\n\t         *  - 'log'\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.type = axisType || 'value';\r\n\r\n\t        /**\r\n\t         * Axis position\r\n\t         *  - 'top'\r\n\t         *  - 'bottom'\r\n\t         *  - 'left'\r\n\t         *  - 'right'\r\n\t         */\r\n\t        this.position = position || 'bottom';\r\n\t    };\r\n\r\n\t    Axis2D.prototype = {\r\n\r\n\t        constructor: Axis2D,\r\n\r\n\t        /**\r\n\t         * Index of axis, can be used as key\r\n\t         */\r\n\t        index: 0,\r\n\t        /**\r\n\t         * If axis is on the zero position of the other axis\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        onZero: false,\r\n\r\n\t        /**\r\n\t         * Axis model\r\n\t         * @param {module:echarts/coord/cartesian/AxisModel}\r\n\t         */\r\n\t        model: null,\r\n\r\n\t        isHorizontal: function () {\r\n\t            var position = this.position;\r\n\t            return position === 'top' || position === 'bottom';\r\n\t        },\r\n\r\n\t        getGlobalExtent: function () {\r\n\t            var ret = this.getExtent();\r\n\t            ret[0] = this.toGlobalCoord(ret[0]);\r\n\t            ret[1] = this.toGlobalCoord(ret[1]);\r\n\t            return ret;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {number}\r\n\t         */\r\n\t        getLabelInterval: function () {\r\n\t            var labelInterval = this._labelInterval;\r\n\t            if (!labelInterval) {\r\n\t                labelInterval = this._labelInterval = axisLabelInterval(this);\r\n\t            }\r\n\t            return labelInterval;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If label is ignored.\r\n\t         * Automatically used when axis is category and label can not be all shown\r\n\t         * @param  {number}  idx\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        isLabelIgnored: function (idx) {\r\n\t            if (this.type === 'category') {\r\n\t                var labelInterval = this.getLabelInterval();\r\n\t                return ((typeof labelInterval === 'function')\r\n\t                    && !labelInterval(idx, this.scale.getLabel(idx)))\r\n\t                    || idx % (labelInterval + 1);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Transform global coord to local coord,\r\n\t         * i.e. var localCoord = axis.toLocalCoord(80);\r\n\t         * designate by module:echarts/coord/cartesian/Grid.\r\n\t         * @type {Function}\r\n\t         */\r\n\t        toLocalCoord: null,\r\n\r\n\t        /**\r\n\t         * Transform global coord to local coord,\r\n\t         * i.e. var globalCoord = axis.toLocalCoord(40);\r\n\t         * designate by module:echarts/coord/cartesian/Grid.\r\n\t         * @type {Function}\r\n\t         */\r\n\t        toGlobalCoord: null\r\n\r\n\t    };\r\n\t    zrUtil.inherits(Axis2D, Axis);\r\n\r\n\t    module.exports = Axis2D;\r\n\r\n\r\n/***/ },\r\n/* 123 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var linearMap = numberUtil.linearMap;\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    function fixExtentWithBands(extent, nTick) {\r\n\t        var size = extent[1] - extent[0];\r\n\t        var len = nTick;\r\n\t        var margin = size / len / 2;\r\n\t        extent[0] += margin;\r\n\t        extent[1] -= margin;\r\n\t    }\r\n\r\n\t    var normalizedExtent = [0, 1];\r\n\t    /**\r\n\t     * @name module:echarts/coord/CartesianAxis\r\n\t     * @constructor\r\n\t     */\r\n\t    var Axis = function (dim, scale, extent) {\r\n\r\n\t        /**\r\n\t         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.dim = dim;\r\n\r\n\t        /**\r\n\t         * Axis scale\r\n\t         * @type {module:echarts/coord/scale/*}\r\n\t         */\r\n\t        this.scale = scale;\r\n\r\n\t        /**\r\n\t         * @type {Array.<number>}\r\n\t         * @private\r\n\t         */\r\n\t        this._extent = extent || [0, 0];\r\n\r\n\t        /**\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        this.inverse = false;\r\n\r\n\t        /**\r\n\t         * Usually true when axis has a ordinal scale\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        this.onBand = false;\r\n\t    };\r\n\r\n\t    Axis.prototype = {\r\n\r\n\t        constructor: Axis,\r\n\r\n\t        /**\r\n\t         * If axis extent contain given coord\r\n\t         * @param {number} coord\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        contain: function (coord) {\r\n\t            var extent = this._extent;\r\n\t            var min = Math.min(extent[0], extent[1]);\r\n\t            var max = Math.max(extent[0], extent[1]);\r\n\t            return coord >= min && coord <= max;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If axis extent contain given data\r\n\t         * @param {number} data\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        containData: function (data) {\r\n\t            return this.contain(this.dataToCoord(data));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get coord extent.\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        getExtent: function () {\r\n\t            var ret = this._extent.slice();\r\n\t            return ret;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get precision used for formatting\r\n\t         * @param {Array.<number>} [dataExtent]\r\n\t         * @return {number}\r\n\t         */\r\n\t        getPixelPrecision: function (dataExtent) {\r\n\t            return numberUtil.getPixelPrecision(\r\n\t                dataExtent || this.scale.getExtent(),\r\n\t                this._extent\r\n\t            );\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Set coord extent\r\n\t         * @param {number} start\r\n\t         * @param {number} end\r\n\t         */\r\n\t        setExtent: function (start, end) {\r\n\t            var extent = this._extent;\r\n\t            extent[0] = start;\r\n\t            extent[1] = end;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert data to coord. Data is the rank if it has a ordinal scale\r\n\t         * @param {number} data\r\n\t         * @param  {boolean} clamp\r\n\t         * @return {number}\r\n\t         */\r\n\t        dataToCoord: function (data, clamp) {\r\n\t            var extent = this._extent;\r\n\t            var scale = this.scale;\r\n\t            data = scale.normalize(data);\r\n\r\n\t            if (this.onBand && scale.type === 'ordinal') {\r\n\t                extent = extent.slice();\r\n\t                fixExtentWithBands(extent, scale.count());\r\n\t            }\r\n\r\n\t            return linearMap(data, normalizedExtent, extent, clamp);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert coord to data. Data is the rank if it has a ordinal scale\r\n\t         * @param {number} coord\r\n\t         * @param  {boolean} clamp\r\n\t         * @return {number}\r\n\t         */\r\n\t        coordToData: function (coord, clamp) {\r\n\t            var extent = this._extent;\r\n\t            var scale = this.scale;\r\n\r\n\t            if (this.onBand && scale.type === 'ordinal') {\r\n\t                extent = extent.slice();\r\n\t                fixExtentWithBands(extent, scale.count());\r\n\t            }\r\n\r\n\t            var t = linearMap(coord, extent, normalizedExtent, clamp);\r\n\r\n\t            return this.scale.scale(t);\r\n\t        },\r\n\t        /**\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        getTicksCoords: function (alignWithLabel) {\r\n\t            if (this.onBand && !alignWithLabel) {\r\n\t                var bands = this.getBands();\r\n\t                var coords = [];\r\n\t                for (var i = 0; i < bands.length; i++) {\r\n\t                    coords.push(bands[i][0]);\r\n\t                }\r\n\t                if (bands[i - 1]) {\r\n\t                    coords.push(bands[i - 1][1]);\r\n\t                }\r\n\t                return coords;\r\n\t            }\r\n\t            else {\r\n\t                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Coords of labels are on the ticks or on the middle of bands\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        getLabelsCoords: function () {\r\n\t            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get bands.\r\n\t         *\r\n\t         * If axis has labels [1, 2, 3, 4]. Bands on the axis are\r\n\t         * |---1---|---2---|---3---|---4---|.\r\n\t         *\r\n\t         * @return {Array}\r\n\t         */\r\n\t         // FIXME Situation when labels is on ticks\r\n\t        getBands: function () {\r\n\t            var extent = this.getExtent();\r\n\t            var bands = [];\r\n\t            var len = this.scale.count();\r\n\t            var start = extent[0];\r\n\t            var end = extent[1];\r\n\t            var span = end - start;\r\n\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                bands.push([\r\n\t                    span * i / len + start,\r\n\t                    span * (i + 1) / len + start\r\n\t                ]);\r\n\t            }\r\n\t            return bands;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get width of band\r\n\t         * @return {number}\r\n\t         */\r\n\t        getBandWidth: function () {\r\n\t            var axisExtent = this._extent;\r\n\t            var dataExtent = this.scale.getExtent();\r\n\r\n\t            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);\r\n\t            // Fix #2728, avoid NaN when only one data.\r\n\t            len === 0 && (len = 1);\r\n\r\n\t            var size = Math.abs(axisExtent[1] - axisExtent[0]);\r\n\r\n\t            return Math.abs(size) / len;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = Axis;\r\n\r\n\r\n/***/ },\r\n/* 124 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * Helper function for axisLabelInterval calculation\r\n\t */\r\n\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var axisHelper = __webpack_require__(114);\r\n\r\n\t    module.exports = function (axis) {\r\n\t        var axisModel = axis.model;\r\n\t        var labelModel = axisModel.getModel('axisLabel');\r\n\t        var labelInterval = labelModel.get('interval');\r\n\t        if (!(axis.type === 'category' && labelInterval === 'auto')) {\r\n\t            return labelInterval === 'auto' ? 0 : labelInterval;\r\n\t        }\r\n\r\n\t        return axisHelper.getAxisLabelInterval(\r\n\t            zrUtil.map(axis.scale.getTicks(), axis.dataToCoord, axis),\r\n\t            axisModel.getFormattedLabels(),\r\n\t            labelModel.getModel('textStyle').getFont(),\r\n\t            axis.isHorizontal()\r\n\t        );\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 125 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t// Grid 是在有直角坐标系的时候必须要存在的\r\n\t// 所以这里也要被 Cartesian2D 依赖\r\n\r\n\r\n\t    __webpack_require__(126);\r\n\t    var ComponentModel = __webpack_require__(19);\r\n\r\n\t    module.exports = ComponentModel.extend({\r\n\r\n\t        type: 'grid',\r\n\r\n\t        dependencies: ['xAxis', 'yAxis'],\r\n\r\n\t        layoutMode: 'box',\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/cartesian/Grid}\r\n\t         */\r\n\t        coordinateSystem: null,\r\n\r\n\t        defaultOption: {\r\n\t            show: false,\r\n\t            zlevel: 0,\r\n\t            z: 0,\r\n\t            left: '10%',\r\n\t            top: 60,\r\n\t            right: '10%',\r\n\t            bottom: 60,\r\n\t            // If grid size contain label\r\n\t            containLabel: false,\r\n\t            // width: {totalWidth} - left - right,\r\n\t            // height: {totalHeight} - top - bottom,\r\n\t            backgroundColor: 'rgba(0,0,0,0)',\r\n\t            borderWidth: 1,\r\n\t            borderColor: '#ccc'\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 126 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var ComponentModel = __webpack_require__(19);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var axisModelCreator = __webpack_require__(127);\r\n\r\n\t    var AxisModel = ComponentModel.extend({\r\n\r\n\t        type: 'cartesian2dAxis',\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/cartesian/Axis2D}\r\n\t         */\r\n\t        axis: null,\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        init: function () {\r\n\t            AxisModel.superApply(this, 'init', arguments);\r\n\t            this.resetRange();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        mergeOption: function () {\r\n\t            AxisModel.superApply(this, 'mergeOption', arguments);\r\n\t            this.resetRange();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        restoreData: function () {\r\n\t            AxisModel.superApply(this, 'restoreData', arguments);\r\n\t            this.resetRange();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:echarts/model/Model}\r\n\t         */\r\n\t        findGridModel: function () {\r\n\t            return this.ecModel.queryComponents({\r\n\t                mainType: 'grid',\r\n\t                index: this.get('gridIndex'),\r\n\t                id: this.get('gridId')\r\n\t            })[0];\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    function getAxisType(axisDim, option) {\r\n\t        // Default axis with data is category axis\r\n\t        return option.type || (option.data ? 'category' : 'value');\r\n\t    }\r\n\r\n\t    zrUtil.merge(AxisModel.prototype, __webpack_require__(129));\r\n\t    zrUtil.merge(AxisModel.prototype, __webpack_require__(130));\r\n\r\n\t    var extraOption = {\r\n\t        // gridIndex: 0,\r\n\t        // gridId: '',\r\n\r\n\t        // Offset is for multiple axis on the same position\r\n\t        offset: 0\r\n\t    };\r\n\r\n\t    axisModelCreator('x', AxisModel, getAxisType, extraOption);\r\n\t    axisModelCreator('y', AxisModel, getAxisType, extraOption);\r\n\r\n\t    module.exports = AxisModel;\r\n\r\n\r\n/***/ },\r\n/* 127 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var axisDefault = __webpack_require__(128);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var ComponentModel = __webpack_require__(19);\r\n\t    var layout = __webpack_require__(21);\r\n\r\n\t    // FIXME axisType is fixed ?\r\n\t    var AXIS_TYPES = ['value', 'category', 'time', 'log'];\r\n\r\n\t    /**\r\n\t     * Generate sub axis model class\r\n\t     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'\r\n\t     * @param {module:echarts/model/Component} BaseAxisModelClass\r\n\t     * @param {Function} axisTypeDefaulter\r\n\t     * @param {Object} [extraDefaultOption]\r\n\t     */\r\n\t    module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {\r\n\r\n\t        zrUtil.each(AXIS_TYPES, function (axisType) {\r\n\r\n\t            BaseAxisModelClass.extend({\r\n\r\n\t                type: axisName + 'Axis.' + axisType,\r\n\r\n\t                mergeDefaultAndTheme: function (option, ecModel) {\r\n\t                    var layoutMode = this.layoutMode;\r\n\t                    var inputPositionParams = layoutMode\r\n\t                        ? layout.getLayoutParams(option) : {};\r\n\r\n\t                    var themeModel = ecModel.getTheme();\r\n\t                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));\r\n\t                    zrUtil.merge(option, this.getDefaultOption());\r\n\r\n\t                    option.type = axisTypeDefaulter(axisName, option);\r\n\r\n\t                    if (layoutMode) {\r\n\t                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\r\n\t                    }\r\n\t                },\r\n\r\n\t                defaultOption: zrUtil.mergeAll(\r\n\t                    [\r\n\t                        {},\r\n\t                        axisDefault[axisType + 'Axis'],\r\n\t                        extraDefaultOption\r\n\t                    ],\r\n\t                    true\r\n\t                )\r\n\t            });\r\n\t        });\r\n\r\n\t        ComponentModel.registerSubTypeDefaulter(\r\n\t            axisName + 'Axis',\r\n\t            zrUtil.curry(axisTypeDefaulter, axisName)\r\n\t        );\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 128 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var defaultOption = {\r\n\t        show: true,\r\n\t        zlevel: 0,                  // 一级层叠\r\n\t        z: 0,                       // 二级层叠\r\n\t        // 反向坐标轴\r\n\t        inverse: false,\r\n\r\n\t        // 坐标轴名字，默认为空\r\n\t        name: '',\r\n\t        // 坐标轴名字位置，支持'start' | 'middle' | 'end'\r\n\t        nameLocation: 'end',\r\n\t        // 坐标轴名字旋转，degree。\r\n\t        nameRotate: null, // Adapt to axis rotate, when nameLocation is 'middle'.\r\n\t        nameTruncate: {\r\n\t            maxWidth: null,\r\n\t            ellipsis: '...',\r\n\t            placeholder: '.'\r\n\t        },\r\n\t        // 坐标轴文字样式，默认取全局样式\r\n\t        nameTextStyle: {},\r\n\t        // 文字与轴线距离\r\n\t        nameGap: 15,\r\n\r\n\t        silent: false, // Default false to support tooltip.\r\n\t        triggerEvent: false, // Default false to avoid legacy user event listener fail.\r\n\r\n\t        tooltip: {\r\n\t            show: false\r\n\t        },\r\n\r\n\t        // 坐标轴线\r\n\t        axisLine: {\r\n\t            // 默认显示，属性show控制显示与否\r\n\t            show: true,\r\n\t            onZero: true,\r\n\t            // 属性lineStyle控制线条样式\r\n\t            lineStyle: {\r\n\t                color: '#333',\r\n\t                width: 1,\r\n\t                type: 'solid'\r\n\t            }\r\n\t        },\r\n\t        // 坐标轴小标记\r\n\t        axisTick: {\r\n\t            // 属性show控制显示与否，默认显示\r\n\t            show: true,\r\n\t            // 控制小标记是否在grid里\r\n\t            inside: false,\r\n\t            // 属性length控制线长\r\n\t            length: 5,\r\n\t            // 属性lineStyle控制线条样式\r\n\t            lineStyle: {\r\n\t                width: 1\r\n\t            }\r\n\t        },\r\n\t        // 坐标轴文本标签，详见axis.axisLabel\r\n\t        axisLabel: {\r\n\t            show: true,\r\n\t            // 控制文本标签是否在grid里\r\n\t            inside: false,\r\n\t            rotate: 0,\r\n\t            margin: 8,\r\n\t            // formatter: null,\r\n\t            // 其余属性默认使用全局文本样式，详见TEXTSTYLE\r\n\t            textStyle: {\r\n\t                fontSize: 12\r\n\t            }\r\n\t        },\r\n\t        // 分隔线\r\n\t        splitLine: {\r\n\t            // 默认显示，属性show控制显示与否\r\n\t            show: true,\r\n\t            // 属性lineStyle（详见lineStyle）控制线条样式\r\n\t            lineStyle: {\r\n\t                color: ['#ccc'],\r\n\t                width: 1,\r\n\t                type: 'solid'\r\n\t            }\r\n\t        },\r\n\t        // 分隔区域\r\n\t        splitArea: {\r\n\t            // 默认不显示，属性show控制显示与否\r\n\t            show: false,\r\n\t            // 属性areaStyle（详见areaStyle）控制区域样式\r\n\t            areaStyle: {\r\n\t                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    var categoryAxis = zrUtil.merge({\r\n\t        // 类目起始和结束两端空白策略\r\n\t        boundaryGap: true,\r\n\t        // splitArea: {\r\n\t            // show: false\r\n\t        // },\r\n\t        splitLine: {\r\n\t            show: false\r\n\t        },\r\n\t        // 坐标轴小标记\r\n\t        axisTick: {\r\n\t            // If tick is align with label when boundaryGap is true\r\n\t            // Default with axisTick\r\n\t            alignWithLabel: false,\r\n\t            interval: 'auto'\r\n\t        },\r\n\t        // 坐标轴文本标签，详见axis.axisLabel\r\n\t        axisLabel: {\r\n\t            interval: 'auto'\r\n\t        }\r\n\t    }, defaultOption);\r\n\r\n\t    var valueAxis = zrUtil.merge({\r\n\t        // 数值起始和结束两端空白策略\r\n\t        boundaryGap: [0, 0],\r\n\t        // 最小值, 设置成 'dataMin' 则从数据中计算最小值\r\n\t        // min: null,\r\n\t        // 最大值，设置成 'dataMax' 则从数据中计算最大值\r\n\t        // max: null,\r\n\t        // Readonly prop, specifies start value of the range when using data zoom.\r\n\t        // rangeStart: null\r\n\t        // Readonly prop, specifies end value of the range when using data zoom.\r\n\t        // rangeEnd: null\r\n\t        // 脱离0值比例，放大聚焦到最终_min，_max区间\r\n\t        // scale: false,\r\n\t        // 分割段数，默认为5\r\n\t        splitNumber: 5\r\n\t        // Minimum interval\r\n\t        // minInterval: null\r\n\t    }, defaultOption);\r\n\r\n\t    // FIXME\r\n\t    var timeAxis = zrUtil.defaults({\r\n\t        scale: true,\r\n\t        min: 'dataMin',\r\n\t        max: 'dataMax'\r\n\t    }, valueAxis);\r\n\t    var logAxis = zrUtil.defaults({\r\n\t        logBase: 10\r\n\t    }, valueAxis);\r\n\t    logAxis.scale = true;\r\n\r\n\t    module.exports = {\r\n\t        categoryAxis: categoryAxis,\r\n\t        valueAxis: valueAxis,\r\n\t        timeAxis: timeAxis,\r\n\t        logAxis: logAxis\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 129 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var axisHelper = __webpack_require__(114);\r\n\r\n\t    function getName(obj) {\r\n\t        if (zrUtil.isObject(obj) && obj.value != null) {\r\n\t            return obj.value;\r\n\t        }\r\n\t        else {\r\n\t            return obj;\r\n\t        }\r\n\t    }\r\n\t    /**\r\n\t     * Get categories\r\n\t     */\r\n\t    function getCategories() {\r\n\t        return this.get('type') === 'category'\r\n\t            && zrUtil.map(this.get('data'), getName);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Format labels\r\n\t     * @return {Array.<string>}\r\n\t     */\r\n\t    function getFormattedLabels() {\r\n\t        return axisHelper.getFormattedLabels(\r\n\t            this.axis,\r\n\t            this.get('axisLabel.formatter')\r\n\t        );\r\n\t    }\r\n\r\n\t    module.exports = {\r\n\r\n\t        getFormattedLabels: getFormattedLabels,\r\n\r\n\t        getCategories: getCategories\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 130 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    module.exports = {\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @return {Array.<number|string|Date>}\r\n\t         */\r\n\t        getMin: function () {\r\n\t            var option = this.option;\r\n\t            var min = option.rangeStart != null ? option.rangeStart : option.min;\r\n\t            // In case of axis.type === 'time', Date should be converted to timestamp.\r\n\t            // In other cases, min/max should be a number or null/undefined or 'dataMin/Max'.\r\n\t            if (min instanceof Date) {\r\n\t                min = +min;\r\n\t            }\r\n\t            return min;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @return {Array.<number|string|Date>}\r\n\t         */\r\n\t        getMax: function () {\r\n\t            var option = this.option;\r\n\t            var max = option.rangeEnd != null ? option.rangeEnd : option.max;\r\n\t            // In case of axis.type === 'time', Date should be converted to timestamp.\r\n\t            // In other cases, min/max should be a number or null/undefined or 'dataMin/Max'.\r\n\t            if (max instanceof Date) {\r\n\t                max = +max;\r\n\t            }\r\n\t            return max;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        getNeedCrossZero: function () {\r\n\t            var option = this.option;\r\n\t            return (option.rangeStart != null || option.rangeEnd != null)\r\n\t                ? false : !option.scale;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {number} rangeStart\r\n\t         * @param {number} rangeEnd\r\n\t         */\r\n\t        setRange: function (rangeStart, rangeEnd) {\r\n\t            this.option.rangeStart = rangeStart;\r\n\t            this.option.rangeEnd = rangeEnd;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         */\r\n\t        resetRange: function () {\r\n\t            // rangeStart and rangeEnd is readonly.\r\n\t            this.option.rangeStart = this.option.rangeEnd = null;\r\n\t        }\r\n\t    };\r\n\r\n\r\n\r\n/***/ },\r\n/* 131 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t// TODO boundaryGap\r\n\r\n\r\n\t    __webpack_require__(126);\r\n\r\n\t    __webpack_require__(132);\r\n\r\n\r\n/***/ },\r\n/* 132 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var AxisBuilder = __webpack_require__(133);\r\n\t    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;\r\n\t    var getInterval = AxisBuilder.getInterval;\r\n\r\n\t    var axisBuilderAttrs = [\r\n\t        'axisLine', 'axisLabel', 'axisTick', 'axisName'\r\n\t    ];\r\n\t    var selfBuilderAttrs = [\r\n\t        'splitArea', 'splitLine'\r\n\t    ];\r\n\r\n\t    // function getAlignWithLabel(model, axisModel) {\r\n\t    //     var alignWithLabel = model.get('alignWithLabel');\r\n\t    //     if (alignWithLabel === 'auto') {\r\n\t    //         alignWithLabel = axisModel.get('axisTick.alignWithLabel');\r\n\t    //     }\r\n\t    //     return alignWithLabel;\r\n\t    // }\r\n\r\n\t    var AxisView = __webpack_require__(1).extendComponentView({\r\n\r\n\t        type: 'axis',\r\n\r\n\t        render: function (axisModel, ecModel) {\r\n\r\n\t            this.group.removeAll();\r\n\r\n\t            var oldAxisGroup = this._axisGroup;\r\n\t            this._axisGroup = new graphic.Group();\r\n\r\n\t            this.group.add(this._axisGroup);\r\n\r\n\t            if (!axisModel.get('show')) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var gridModel = axisModel.findGridModel();\r\n\r\n\t            var layout = layoutAxis(gridModel, axisModel);\r\n\r\n\t            var axisBuilder = new AxisBuilder(axisModel, layout);\r\n\r\n\t            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\r\n\r\n\t            this._axisGroup.add(axisBuilder.getGroup());\r\n\r\n\t            zrUtil.each(selfBuilderAttrs, function (name) {\r\n\t                if (axisModel.get(name + '.show')) {\r\n\t                    this['_' + name](axisModel, gridModel, layout.labelInterval);\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\r\n\t         * @param {module:echarts/coord/cartesian/GridModel} gridModel\r\n\t         * @param {number|Function} labelInterval\r\n\t         * @private\r\n\t         */\r\n\t        _splitLine: function (axisModel, gridModel, labelInterval) {\r\n\t            var axis = axisModel.axis;\r\n\r\n\t            var splitLineModel = axisModel.getModel('splitLine');\r\n\t            var lineStyleModel = splitLineModel.getModel('lineStyle');\r\n\t            var lineColors = lineStyleModel.get('color');\r\n\r\n\t            var lineInterval = getInterval(splitLineModel, labelInterval);\r\n\r\n\t            lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\r\n\r\n\t            var gridRect = gridModel.coordinateSystem.getRect();\r\n\t            var isHorizontal = axis.isHorizontal();\r\n\r\n\t            var lineCount = 0;\r\n\r\n\t            var ticksCoords = axis.getTicksCoords(\r\n\t                // splitLineModel.get('alignWithLabel')\r\n\t            );\r\n\t            var ticks = axis.scale.getTicks();\r\n\r\n\t            var p1 = [];\r\n\t            var p2 = [];\r\n\t            // Simple optimization\r\n\t            // Batching the lines if color are the same\r\n\t            var lineStyle = lineStyleModel.getLineStyle();\r\n\t            for (var i = 0; i < ticksCoords.length; i++) {\r\n\t                if (ifIgnoreOnTick(axis, i, lineInterval)) {\r\n\t                    continue;\r\n\t                }\r\n\r\n\t                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\r\n\r\n\t                if (isHorizontal) {\r\n\t                    p1[0] = tickCoord;\r\n\t                    p1[1] = gridRect.y;\r\n\t                    p2[0] = tickCoord;\r\n\t                    p2[1] = gridRect.y + gridRect.height;\r\n\t                }\r\n\t                else {\r\n\t                    p1[0] = gridRect.x;\r\n\t                    p1[1] = tickCoord;\r\n\t                    p2[0] = gridRect.x + gridRect.width;\r\n\t                    p2[1] = tickCoord;\r\n\t                }\r\n\r\n\t                var colorIndex = (lineCount++) % lineColors.length;\r\n\t                this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({\r\n\t                    anid: 'line_' + ticks[i],\r\n\r\n\t                    shape: {\r\n\t                        x1: p1[0],\r\n\t                        y1: p1[1],\r\n\t                        x2: p2[0],\r\n\t                        y2: p2[1]\r\n\t                    },\r\n\t                    style: zrUtil.defaults({\r\n\t                        stroke: lineColors[colorIndex]\r\n\t                    }, lineStyle),\r\n\t                    silent: true\r\n\t                })));\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\r\n\t         * @param {module:echarts/coord/cartesian/GridModel} gridModel\r\n\t         * @param {number|Function} labelInterval\r\n\t         * @private\r\n\t         */\r\n\t        _splitArea: function (axisModel, gridModel, labelInterval) {\r\n\t            var axis = axisModel.axis;\r\n\r\n\t            var splitAreaModel = axisModel.getModel('splitArea');\r\n\t            var areaStyleModel = splitAreaModel.getModel('areaStyle');\r\n\t            var areaColors = areaStyleModel.get('color');\r\n\r\n\t            var gridRect = gridModel.coordinateSystem.getRect();\r\n\r\n\t            var ticksCoords = axis.getTicksCoords(\r\n\t                // splitAreaModel.get('alignWithLabel')\r\n\t            );\r\n\t            var ticks = axis.scale.getTicks();\r\n\r\n\t            var prevX = axis.toGlobalCoord(ticksCoords[0]);\r\n\t            var prevY = axis.toGlobalCoord(ticksCoords[0]);\r\n\r\n\t            var count = 0;\r\n\r\n\t            var areaInterval = getInterval(splitAreaModel, labelInterval);\r\n\r\n\t            var areaStyle = areaStyleModel.getAreaStyle();\r\n\t            areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];\r\n\r\n\t            for (var i = 1; i < ticksCoords.length; i++) {\r\n\t                if (ifIgnoreOnTick(axis, i, areaInterval)) {\r\n\t                    continue;\r\n\t                }\r\n\r\n\t                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\r\n\r\n\t                var x;\r\n\t                var y;\r\n\t                var width;\r\n\t                var height;\r\n\t                if (axis.isHorizontal()) {\r\n\t                    x = prevX;\r\n\t                    y = gridRect.y;\r\n\t                    width = tickCoord - x;\r\n\t                    height = gridRect.height;\r\n\t                }\r\n\t                else {\r\n\t                    x = gridRect.x;\r\n\t                    y = prevY;\r\n\t                    width = gridRect.width;\r\n\t                    height = tickCoord - y;\r\n\t                }\r\n\r\n\t                var colorIndex = (count++) % areaColors.length;\r\n\t                this._axisGroup.add(new graphic.Rect({\r\n\t                    anid: 'area_' + ticks[i],\r\n\r\n\t                    shape: {\r\n\t                        x: x,\r\n\t                        y: y,\r\n\t                        width: width,\r\n\t                        height: height\r\n\t                    },\r\n\t                    style: zrUtil.defaults({\r\n\t                        fill: areaColors[colorIndex]\r\n\t                    }, areaStyle),\r\n\t                    silent: true\r\n\t                }));\r\n\r\n\t                prevX = x + width;\r\n\t                prevY = y + height;\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    AxisView.extend({\r\n\t        type: 'xAxis'\r\n\t    });\r\n\t    AxisView.extend({\r\n\t        type: 'yAxis'\r\n\t    });\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function layoutAxis(gridModel, axisModel) {\r\n\t        var grid = gridModel.coordinateSystem;\r\n\t        var axis = axisModel.axis;\r\n\t        var layout = {};\r\n\r\n\t        var rawAxisPosition = axis.position;\r\n\t        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;\r\n\t        var axisDim = axis.dim;\r\n\r\n\t        // [left, right, top, bottom]\r\n\t        var rect = grid.getRect();\r\n\t        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];\r\n\r\n\t        var axisOffset = axisModel.get('offset') || 0;\r\n\r\n\t        var posMap = {\r\n\t            x: { top: rectBound[2] - axisOffset, bottom: rectBound[3] + axisOffset },\r\n\t            y: { left: rectBound[0] - axisOffset, right: rectBound[1] + axisOffset }\r\n\t        };\r\n\r\n\t        posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);\r\n\t        posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);\r\n\r\n\t        function getZero(dim, val) {\r\n\t            var theAxis = grid.getAxis(dim);\r\n\t            return theAxis.toGlobalCoord(theAxis.dataToCoord(0));\r\n\t        }\r\n\r\n\t        // Axis position\r\n\t        layout.position = [\r\n\t            axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0],\r\n\t            axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]\r\n\t        ];\r\n\r\n\t        // Axis rotation\r\n\t        layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1);\r\n\r\n\t        // Tick and label direction, x y is axisDim\r\n\t        var dirMap = {top: -1, bottom: 1, left: -1, right: 1};\r\n\r\n\t        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];\r\n\t        if (axis.onZero) {\r\n\t            layout.labelOffset = posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero;\r\n\t        }\r\n\r\n\t        if (axisModel.getModel('axisTick').get('inside')) {\r\n\t            layout.tickDirection = -layout.tickDirection;\r\n\t        }\r\n\t        if (axisModel.getModel('axisLabel').get('inside')) {\r\n\t            layout.labelDirection = -layout.labelDirection;\r\n\t        }\r\n\r\n\t        // Special label rotation\r\n\t        var labelRotation = axisModel.getModel('axisLabel').get('rotate');\r\n\t        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;\r\n\r\n\t        // label interval when auto mode.\r\n\t        layout.labelInterval = axis.getLabelInterval();\r\n\r\n\t        // Over splitLine and splitArea\r\n\t        layout.z2 = 1;\r\n\r\n\t        return layout;\r\n\t    }\r\n\r\n\r\n/***/ },\r\n/* 133 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var Model = __webpack_require__(12);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var remRadian = numberUtil.remRadian;\r\n\t    var isRadianAroundZero = numberUtil.isRadianAroundZero;\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    var v2ApplyTransform = vec2.applyTransform;\r\n\t    var retrieve = zrUtil.retrieve;\r\n\r\n\t    var PI = Math.PI;\r\n\r\n\t    function makeAxisEventDataBase(axisModel) {\r\n\t        var eventData = {\r\n\t            componentType: axisModel.mainType\r\n\t        };\r\n\t        eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;\r\n\t        return eventData;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * A final axis is translated and rotated from a \"standard axis\".\r\n\t     * So opt.position and opt.rotation is required.\r\n\t     *\r\n\t     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],\r\n\t     * for example: (0, 0) ------------> (0, 50)\r\n\t     *\r\n\t     * nameDirection or tickDirection or labelDirection is 1 means tick\r\n\t     * or label is below the standard axis, whereas is -1 means above\r\n\t     * the standard axis. labelOffset means offset between label and axis,\r\n\t     * which is useful when 'onZero', where axisLabel is in the grid and\r\n\t     * label in outside grid.\r\n\t     *\r\n\t     * Tips: like always,\r\n\t     * positive rotation represents anticlockwise, and negative rotation\r\n\t     * represents clockwise.\r\n\t     * The direction of position coordinate is the same as the direction\r\n\t     * of screen coordinate.\r\n\t     *\r\n\t     * Do not need to consider axis 'inverse', which is auto processed by\r\n\t     * axis extent.\r\n\t     *\r\n\t     * @param {module:zrender/container/Group} group\r\n\t     * @param {Object} axisModel\r\n\t     * @param {Object} opt Standard axis parameters.\r\n\t     * @param {Array.<number>} opt.position [x, y]\r\n\t     * @param {number} opt.rotation by radian\r\n\t     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.\r\n\t     * @param {number} [opt.tickDirection=1] 1 or -1\r\n\t     * @param {number} [opt.labelDirection=1] 1 or -1\r\n\t     * @param {number} [opt.labelOffset=0] Usefull when onZero.\r\n\t     * @param {string} [opt.axisLabelShow] default get from axisModel.\r\n\t     * @param {string} [opt.axisName] default get from axisModel.\r\n\t     * @param {number} [opt.axisNameAvailableWidth]\r\n\t     * @param {number} [opt.labelRotation] by degree, default get from axisModel.\r\n\t     * @param {number} [opt.labelInterval] Default label interval when label\r\n\t     *                                     interval from model is null or 'auto'.\r\n\t     * @param {number} [opt.strokeContainThreshold] Default label interval when label\r\n\t     */\r\n\t    var AxisBuilder = function (axisModel, opt) {\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.opt = opt;\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.axisModel = axisModel;\r\n\r\n\t        // Default value\r\n\t        zrUtil.defaults(\r\n\t            opt,\r\n\t            {\r\n\t                labelOffset: 0,\r\n\t                nameDirection: 1,\r\n\t                tickDirection: 1,\r\n\t                labelDirection: 1,\r\n\t                silent: true\r\n\t            }\r\n\t        );\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.group = new graphic.Group();\r\n\r\n\t        // FIXME Not use a seperate text group?\r\n\t        var dumbGroup = new graphic.Group({\r\n\t            position: opt.position.slice(),\r\n\t            rotation: opt.rotation\r\n\t        });\r\n\r\n\t        // this.group.add(dumbGroup);\r\n\t        // this._dumbGroup = dumbGroup;\r\n\r\n\t        dumbGroup.updateTransform();\r\n\t        this._transform = dumbGroup.transform;\r\n\r\n\t        this._dumbGroup = dumbGroup;\r\n\t    };\r\n\r\n\t    AxisBuilder.prototype = {\r\n\r\n\t        constructor: AxisBuilder,\r\n\r\n\t        hasBuilder: function (name) {\r\n\t            return !!builders[name];\r\n\t        },\r\n\r\n\t        add: function (name) {\r\n\t            builders[name].call(this);\r\n\t        },\r\n\r\n\t        getGroup: function () {\r\n\t            return this.group;\r\n\t        }\r\n\r\n\t    };\r\n\r\n\t    var builders = {\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        axisLine: function () {\r\n\t            var opt = this.opt;\r\n\t            var axisModel = this.axisModel;\r\n\r\n\t            if (!axisModel.get('axisLine.show')) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var extent = this.axisModel.axis.getExtent();\r\n\r\n\t            var matrix = this._transform;\r\n\t            var pt1 = [extent[0], 0];\r\n\t            var pt2 = [extent[1], 0];\r\n\t            if (matrix) {\r\n\t                v2ApplyTransform(pt1, pt1, matrix);\r\n\t                v2ApplyTransform(pt2, pt2, matrix);\r\n\t            }\r\n\r\n\t            this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\r\n\r\n\t                // Id for animation\r\n\t                anid: 'line',\r\n\r\n\t                shape: {\r\n\t                    x1: pt1[0],\r\n\t                    y1: pt1[1],\r\n\t                    x2: pt2[0],\r\n\t                    y2: pt2[1]\r\n\t                },\r\n\t                style: zrUtil.extend(\r\n\t                    {lineCap: 'round'},\r\n\t                    axisModel.getModel('axisLine.lineStyle').getLineStyle()\r\n\t                ),\r\n\t                strokeContainThreshold: opt.strokeContainThreshold || 5,\r\n\t                silent: true,\r\n\t                z2: 1\r\n\t            })));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        axisTick: function () {\r\n\t            var axisModel = this.axisModel;\r\n\r\n\t            if (!axisModel.get('axisTick.show')) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var axis = axisModel.axis;\r\n\t            var tickModel = axisModel.getModel('axisTick');\r\n\t            var opt = this.opt;\r\n\r\n\t            var lineStyleModel = tickModel.getModel('lineStyle');\r\n\t            var tickLen = tickModel.get('length');\r\n\r\n\t            var tickInterval = getInterval(tickModel, opt.labelInterval);\r\n\t            var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel'));\r\n\t            var ticks = axis.scale.getTicks();\r\n\r\n\t            var pt1 = [];\r\n\t            var pt2 = [];\r\n\t            var matrix = this._transform;\r\n\r\n\t            for (var i = 0; i < ticksCoords.length; i++) {\r\n\t                // Only ordinal scale support tick interval\r\n\t                if (ifIgnoreOnTick(axis, i, tickInterval)) {\r\n\t                     continue;\r\n\t                }\r\n\r\n\t                var tickCoord = ticksCoords[i];\r\n\r\n\t                pt1[0] = tickCoord;\r\n\t                pt1[1] = 0;\r\n\t                pt2[0] = tickCoord;\r\n\t                pt2[1] = opt.tickDirection * tickLen;\r\n\r\n\t                if (matrix) {\r\n\t                    v2ApplyTransform(pt1, pt1, matrix);\r\n\t                    v2ApplyTransform(pt2, pt2, matrix);\r\n\t                }\r\n\t                // Tick line, Not use group transform to have better line draw\r\n\t                this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\r\n\r\n\t                    // Id for animation\r\n\t                    anid: 'tick_' + ticks[i],\r\n\r\n\t                    shape: {\r\n\t                        x1: pt1[0],\r\n\t                        y1: pt1[1],\r\n\t                        x2: pt2[0],\r\n\t                        y2: pt2[1]\r\n\t                    },\r\n\t                    style: zrUtil.defaults(\r\n\t                        lineStyleModel.getLineStyle(),\r\n\t                        {\r\n\t                            stroke: axisModel.get('axisLine.lineStyle.color')\r\n\t                        }\r\n\t                    ),\r\n\t                    z2: 2,\r\n\t                    silent: true\r\n\t                })));\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\r\n\t         * @param {module:echarts/coord/cartesian/GridModel} gridModel\r\n\t         * @private\r\n\t         */\r\n\t        axisLabel: function () {\r\n\t            var opt = this.opt;\r\n\t            var axisModel = this.axisModel;\r\n\t            var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));\r\n\r\n\t            if (!show) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var axis = axisModel.axis;\r\n\t            var labelModel = axisModel.getModel('axisLabel');\r\n\t            var textStyleModel = labelModel.getModel('textStyle');\r\n\t            var labelMargin = labelModel.get('margin');\r\n\t            var ticks = axis.scale.getTicks();\r\n\t            var labels = axisModel.getFormattedLabels();\r\n\r\n\t            // Special label rotate.\r\n\t            var labelRotation = retrieve(opt.labelRotation, labelModel.get('rotate')) || 0;\r\n\t            // To radian.\r\n\t            labelRotation = labelRotation * PI / 180;\r\n\r\n\t            var labelLayout = innerTextLayout(opt, labelRotation, opt.labelDirection);\r\n\t            var categoryData = axisModel.get('data');\r\n\r\n\t            var textEls = [];\r\n\t            var silent = isSilent(axisModel);\r\n\t            var triggerEvent = axisModel.get('triggerEvent');\r\n\r\n\t            for (var i = 0; i < ticks.length; i++) {\r\n\t                if (ifIgnoreOnTick(axis, i, opt.labelInterval)) {\r\n\t                     continue;\r\n\t                }\r\n\r\n\t                var itemTextStyleModel = textStyleModel;\r\n\t                if (categoryData && categoryData[i] && categoryData[i].textStyle) {\r\n\t                    itemTextStyleModel = new Model(\r\n\t                        categoryData[i].textStyle, textStyleModel, axisModel.ecModel\r\n\t                    );\r\n\t                }\r\n\t                var textColor = itemTextStyleModel.getTextColor()\r\n\t                    || axisModel.get('axisLine.lineStyle.color');\r\n\r\n\t                var tickCoord = axis.dataToCoord(ticks[i]);\r\n\t                var pos = [\r\n\t                    tickCoord,\r\n\t                    opt.labelOffset + opt.labelDirection * labelMargin\r\n\t                ];\r\n\t                var labelBeforeFormat = axis.scale.getLabel(ticks[i]);\r\n\r\n\t                var textEl = new graphic.Text({\r\n\r\n\t                    // Id for animation\r\n\t                    anid: 'label_' + ticks[i],\r\n\r\n\t                    style: {\r\n\t                        text: labels[i],\r\n\t                        textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,\r\n\t                        textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.verticalAlign,\r\n\t                        textFont: itemTextStyleModel.getFont(),\r\n\t                        fill: typeof textColor === 'function' ? textColor(labelBeforeFormat) : textColor\r\n\t                    },\r\n\t                    position: pos,\r\n\t                    rotation: labelLayout.rotation,\r\n\t                    silent: silent,\r\n\t                    z2: 10\r\n\t                });\r\n\r\n\t                // Pack data for mouse event\r\n\t                if (triggerEvent) {\r\n\t                    textEl.eventData = makeAxisEventDataBase(axisModel);\r\n\t                    textEl.eventData.targetType = 'axisLabel';\r\n\t                    textEl.eventData.value = labelBeforeFormat;\r\n\t                }\r\n\r\n\r\n\t                // FIXME\r\n\t                this._dumbGroup.add(textEl);\r\n\t                textEl.updateTransform();\r\n\r\n\t                textEls.push(textEl);\r\n\t                this.group.add(textEl);\r\n\r\n\t                textEl.decomposeTransform();\r\n\t            }\r\n\r\n\t            function isTwoLabelOverlapped(current, next) {\r\n\t                var firstRect = current && current.getBoundingRect().clone();\r\n\t                var nextRect = next && next.getBoundingRect().clone();\r\n\t                if (firstRect && nextRect) {\r\n\t                    firstRect.applyTransform(current.getLocalTransform());\r\n\t                    nextRect.applyTransform(next.getLocalTransform());\r\n\t                    return firstRect.intersect(nextRect);\r\n\t                }\r\n\t            }\r\n\t            if (axis.type !== 'category') {\r\n\t                // If min or max are user set, we need to check\r\n\t                // If the tick on min(max) are overlap on their neighbour tick\r\n\t                // If they are overlapped, we need to hide the min(max) tick label\r\n\t                if (axisModel.getMin ? axisModel.getMin() : axisModel.get('min')) {\r\n\t                    var firstLabel = textEls[0];\r\n\t                    var nextLabel = textEls[1];\r\n\t                    if (isTwoLabelOverlapped(firstLabel, nextLabel)) {\r\n\t                        firstLabel.ignore = true;\r\n\t                    }\r\n\t                }\r\n\t                if (axisModel.getMax ? axisModel.getMax() : axisModel.get('max')) {\r\n\t                    var lastLabel = textEls[textEls.length - 1];\r\n\t                    var prevLabel = textEls[textEls.length - 2];\r\n\t                    if (isTwoLabelOverlapped(prevLabel, lastLabel)) {\r\n\t                        lastLabel.ignore = true;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        axisName: function () {\r\n\t            var opt = this.opt;\r\n\t            var axisModel = this.axisModel;\r\n\t            var name = retrieve(opt.axisName, axisModel.get('name'));\r\n\r\n\t            if (!name) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var nameLocation = axisModel.get('nameLocation');\r\n\t            var nameDirection = opt.nameDirection;\r\n\t            var textStyleModel = axisModel.getModel('nameTextStyle');\r\n\t            var gap = axisModel.get('nameGap') || 0;\r\n\r\n\t            var extent = this.axisModel.axis.getExtent();\r\n\t            var gapSignal = extent[0] > extent[1] ? -1 : 1;\r\n\t            var pos = [\r\n\t                nameLocation === 'start'\r\n\t                    ? extent[0] - gapSignal * gap\r\n\t                    : nameLocation === 'end'\r\n\t                    ? extent[1] + gapSignal * gap\r\n\t                    : (extent[0] + extent[1]) / 2, // 'middle'\r\n\t                // Reuse labelOffset.\r\n\t                nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0\r\n\t            ];\r\n\r\n\t            var labelLayout;\r\n\r\n\t            var nameRotation = axisModel.get('nameRotate');\r\n\t            if (nameRotation != null) {\r\n\t                nameRotation = nameRotation * PI / 180; // To radian.\r\n\t            }\r\n\r\n\t            var axisNameAvailableWidth;\r\n\r\n\t            if (nameLocation === 'middle') {\r\n\t                labelLayout = innerTextLayout(\r\n\t                    opt,\r\n\t                    nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.\r\n\t                    nameDirection\r\n\t                );\r\n\t            }\r\n\t            else {\r\n\t                labelLayout = endTextLayout(\r\n\t                    opt, nameLocation, nameRotation || 0, extent\r\n\t                );\r\n\r\n\t                axisNameAvailableWidth = opt.axisNameAvailableWidth;\r\n\t                if (axisNameAvailableWidth != null) {\r\n\t                    axisNameAvailableWidth = Math.abs(\r\n\t                        axisNameAvailableWidth / Math.sin(labelLayout.rotation)\r\n\t                    );\r\n\t                    !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);\r\n\t                }\r\n\t            }\r\n\r\n\t            var textFont = textStyleModel.getFont();\r\n\r\n\t            var truncateOpt = axisModel.get('nameTruncate', true) || {};\r\n\t            var ellipsis = truncateOpt.ellipsis;\r\n\t            var maxWidth = retrieve(truncateOpt.maxWidth, axisNameAvailableWidth);\r\n\t            var truncatedText = (ellipsis != null && maxWidth != null)\r\n\t                ? formatUtil.truncateText(\r\n\t                    name, maxWidth, textFont, ellipsis,\r\n\t                    {minChar: 2, placeholder: truncateOpt.placeholder}\r\n\t                )\r\n\t                : name;\r\n\r\n\t            var tooltipOpt = axisModel.get('tooltip', true);\r\n\r\n\t            var mainType = axisModel.mainType;\r\n\t            var formatterParams = {\r\n\t                componentType: mainType,\r\n\t                name: name,\r\n\t                $vars: ['name']\r\n\t            };\r\n\t            formatterParams[mainType + 'Index'] = axisModel.componentIndex;\r\n\r\n\t            var textEl = new graphic.Text({\r\n\r\n\t                // Id for animation\r\n\t                anid: 'name',\r\n\r\n\t                __fullText: name,\r\n\t                __truncatedText: truncatedText,\r\n\r\n\t                style: {\r\n\t                    text: truncatedText,\r\n\t                    textFont: textFont,\r\n\t                    fill: textStyleModel.getTextColor()\r\n\t                        || axisModel.get('axisLine.lineStyle.color'),\r\n\t                    textAlign: labelLayout.textAlign,\r\n\t                    textVerticalAlign: labelLayout.verticalAlign\r\n\t                },\r\n\t                position: pos,\r\n\t                rotation: labelLayout.rotation,\r\n\t                silent: isSilent(axisModel),\r\n\t                z2: 1,\r\n\t                tooltip: (tooltipOpt && tooltipOpt.show)\r\n\t                    ? zrUtil.extend({\r\n\t                        content: name,\r\n\t                        formatter: function () {\r\n\t                            return name;\r\n\t                        },\r\n\t                        formatterParams: formatterParams\r\n\t                    }, tooltipOpt)\r\n\t                    : null\r\n\t            });\r\n\r\n\t            if (axisModel.get('triggerEvent')) {\r\n\t                textEl.eventData = makeAxisEventDataBase(axisModel);\r\n\t                textEl.eventData.targetType = 'axisName';\r\n\t                textEl.eventData.name = name;\r\n\t            }\r\n\r\n\t            // FIXME\r\n\t            this._dumbGroup.add(textEl);\r\n\t            textEl.updateTransform();\r\n\r\n\t            this.group.add(textEl);\r\n\r\n\t            textEl.decomposeTransform();\r\n\t        }\r\n\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function innerTextLayout(opt, textRotation, direction) {\r\n\t        var rotationDiff = remRadian(textRotation - opt.rotation);\r\n\t        var textAlign;\r\n\t        var verticalAlign;\r\n\r\n\t        if (isRadianAroundZero(rotationDiff)) { // Label is parallel with axis line.\r\n\t            verticalAlign = direction > 0 ? 'top' : 'bottom';\r\n\t            textAlign = 'center';\r\n\t        }\r\n\t        else if (isRadianAroundZero(rotationDiff - PI)) { // Label is inverse parallel with axis line.\r\n\t            verticalAlign = direction > 0 ? 'bottom' : 'top';\r\n\t            textAlign = 'center';\r\n\t        }\r\n\t        else {\r\n\t            verticalAlign = 'middle';\r\n\r\n\t            if (rotationDiff > 0 && rotationDiff < PI) {\r\n\t                textAlign = direction > 0 ? 'right' : 'left';\r\n\t            }\r\n\t            else {\r\n\t                textAlign = direction > 0 ? 'left' : 'right';\r\n\t            }\r\n\t        }\r\n\r\n\t        return {\r\n\t            rotation: rotationDiff,\r\n\t            textAlign: textAlign,\r\n\t            verticalAlign: verticalAlign\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function endTextLayout(opt, textPosition, textRotate, extent) {\r\n\t        var rotationDiff = remRadian(textRotate - opt.rotation);\r\n\t        var textAlign;\r\n\t        var verticalAlign;\r\n\t        var inverse = extent[0] > extent[1];\r\n\t        var onLeft = (textPosition === 'start' && !inverse)\r\n\t            || (textPosition !== 'start' && inverse);\r\n\r\n\t        if (isRadianAroundZero(rotationDiff - PI / 2)) {\r\n\t            verticalAlign = onLeft ? 'bottom' : 'top';\r\n\t            textAlign = 'center';\r\n\t        }\r\n\t        else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {\r\n\t            verticalAlign = onLeft ? 'top' : 'bottom';\r\n\t            textAlign = 'center';\r\n\t        }\r\n\t        else {\r\n\t            verticalAlign = 'middle';\r\n\t            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {\r\n\t                textAlign = onLeft ? 'left' : 'right';\r\n\t            }\r\n\t            else {\r\n\t                textAlign = onLeft ? 'right' : 'left';\r\n\t            }\r\n\t        }\r\n\r\n\t        return {\r\n\t            rotation: rotationDiff,\r\n\t            textAlign: textAlign,\r\n\t            verticalAlign: verticalAlign\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function isSilent(axisModel) {\r\n\t        var tooltipOpt = axisModel.get('tooltip');\r\n\t        return axisModel.get('silent')\r\n\t            // Consider mouse cursor, add these restrictions.\r\n\t            || !(\r\n\t                axisModel.get('triggerEvent') || (tooltipOpt && tooltipOpt.show)\r\n\t            );\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @static\r\n\t     */\r\n\t    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {\r\n\t        var rawTick;\r\n\t        var scale = axis.scale;\r\n\t        return scale.type === 'ordinal'\r\n\t            && (\r\n\t                typeof interval === 'function'\r\n\t                    ? (\r\n\t                        rawTick = scale.getTicks()[i],\r\n\t                        !interval(rawTick, scale.getLabel(rawTick))\r\n\t                    )\r\n\t                    : i % (interval + 1)\r\n\t            );\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @static\r\n\t     */\r\n\t    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {\r\n\t        var interval = model.get('interval');\r\n\t        if (interval == null || interval == 'auto') {\r\n\t            interval = labelInterval;\r\n\t        }\r\n\t        return interval;\r\n\t    };\r\n\r\n\t    module.exports = AxisBuilder;\r\n\r\n\r\n\r\n/***/ },\r\n/* 134 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    __webpack_require__(113);\r\n\r\n\t    __webpack_require__(135);\r\n\t    __webpack_require__(136);\r\n\r\n\t    var barLayoutGrid = __webpack_require__(138);\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));\r\n\t    // Visual coding for legend\r\n\t    echarts.registerVisual(function (ecModel) {\r\n\t        ecModel.eachSeriesByType('bar', function (seriesModel) {\r\n\t            var data = seriesModel.getData();\r\n\t            data.setVisual('legendSymbol', 'roundRect');\r\n\t        });\r\n\t    });\r\n\r\n\t    // In case developer forget to include grid component\r\n\t    __webpack_require__(112);\r\n\r\n\r\n/***/ },\r\n/* 135 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\t    var createListFromArray = __webpack_require__(101);\r\n\r\n\t    module.exports = SeriesModel.extend({\r\n\r\n\t        type: 'series.bar',\r\n\r\n\t        dependencies: ['grid', 'polar'],\r\n\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            if (true) {\r\n\t                var coordSys = option.coordinateSystem;\r\n\t                if (coordSys !== 'cartesian2d') {\r\n\t                    throw new Error('Bar only support cartesian2d coordinateSystem');\r\n\t                }\r\n\t            }\r\n\t            return createListFromArray(option.data, this, ecModel);\r\n\t        },\r\n\r\n\t        getMarkerPosition: function (value) {\r\n\t            var coordSys = this.coordinateSystem;\r\n\t            if (coordSys) {\r\n\t                // PENDING if clamp ?\r\n\t                var pt = coordSys.dataToPoint(value, true);\r\n\t                var data = this.getData();\r\n\t                var offset = data.getLayout('offset');\r\n\t                var size = data.getLayout('size');\r\n\t                var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;\r\n\t                pt[offsetIndex] += offset + size / 2;\r\n\t                return pt;\r\n\t            }\r\n\t            return [NaN, NaN];\r\n\t        },\r\n\r\n\t        brushSelector: 'rect',\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,                  // 一级层叠\r\n\t            z: 2,                       // 二级层叠\r\n\t            coordinateSystem: 'cartesian2d',\r\n\t            legendHoverLink: true,\r\n\t            // stack: null\r\n\r\n\t            // Cartesian coordinate system\r\n\t            // xAxisIndex: 0,\r\n\t            // yAxisIndex: 0,\r\n\r\n\t            // 最小高度改为0\r\n\t            barMinHeight: 0,\r\n\r\n\t            // barMaxWidth: null,\r\n\t            // 默认自适应\r\n\t            // barWidth: null,\r\n\t            // 柱间距离，默认为柱形宽度的30%，可设固定值\r\n\t            // barGap: '30%',\r\n\t            // 类目间柱形距离，默认为类目间距的20%，可设固定值\r\n\t            // barCategoryGap: '20%',\r\n\t            // label: {\r\n\t            //     normal: {\r\n\t            //         show: false\r\n\t            //     }\r\n\t            // },\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    // color: '各异'\r\n\t                },\r\n\t                emphasis: {}\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 136 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\r\n\t    zrUtil.extend(__webpack_require__(12).prototype, __webpack_require__(137));\r\n\r\n\t    function fixLayoutWithLineWidth(layout, lineWidth) {\r\n\t        var signX = layout.width > 0 ? 1 : -1;\r\n\t        var signY = layout.height > 0 ? 1 : -1;\r\n\t        // In case width or height are too small.\r\n\t        lineWidth = Math.min(lineWidth, Math.abs(layout.width), Math.abs(layout.height));\r\n\t        layout.x += signX * lineWidth / 2;\r\n\t        layout.y += signY * lineWidth / 2;\r\n\t        layout.width -= signX * lineWidth;\r\n\t        layout.height -= signY * lineWidth;\r\n\t    }\r\n\r\n\t    module.exports = __webpack_require__(1).extendChartView({\r\n\r\n\t        type: 'bar',\r\n\r\n\t        render: function (seriesModel, ecModel, api) {\r\n\t            var coordinateSystemType = seriesModel.get('coordinateSystem');\r\n\r\n\t            if (coordinateSystemType === 'cartesian2d') {\r\n\t                this._renderOnCartesian(seriesModel, ecModel, api);\r\n\t            }\r\n\r\n\t            return this.group;\r\n\t        },\r\n\r\n\t        dispose: zrUtil.noop,\r\n\r\n\t        _renderOnCartesian: function (seriesModel, ecModel, api) {\r\n\t            var group = this.group;\r\n\t            var data = seriesModel.getData();\r\n\t            var oldData = this._data;\r\n\r\n\t            var cartesian = seriesModel.coordinateSystem;\r\n\t            var baseAxis = cartesian.getBaseAxis();\r\n\t            var isHorizontal = baseAxis.isHorizontal();\r\n\r\n\t            var enableAnimation = seriesModel.get('animation');\r\n\r\n\t            var barBorderWidthQuery = ['itemStyle', 'normal', 'barBorderWidth'];\r\n\r\n\t            function createRect(dataIndex, isUpdate) {\r\n\t                var layout = data.getItemLayout(dataIndex);\r\n\t                var lineWidth = data.getItemModel(dataIndex).get(barBorderWidthQuery) || 0;\r\n\t                fixLayoutWithLineWidth(layout, lineWidth);\r\n\r\n\t                var rect = new graphic.Rect({\r\n\t                    shape: zrUtil.extend({}, layout)\r\n\t                });\r\n\t                // Animation\r\n\t                if (enableAnimation) {\r\n\t                    var rectShape = rect.shape;\r\n\t                    var animateProperty = isHorizontal ? 'height' : 'width';\r\n\t                    var animateTarget = {};\r\n\t                    rectShape[animateProperty] = 0;\r\n\t                    animateTarget[animateProperty] = layout[animateProperty];\r\n\t                    graphic[isUpdate? 'updateProps' : 'initProps'](rect, {\r\n\t                        shape: animateTarget\r\n\t                    }, seriesModel, dataIndex);\r\n\t                }\r\n\t                return rect;\r\n\t            }\r\n\t            data.diff(oldData)\r\n\t                .add(function (dataIndex) {\r\n\t                    // 空数据\r\n\t                    if (!data.hasValue(dataIndex)) {\r\n\t                        return;\r\n\t                    }\r\n\r\n\t                    var rect = createRect(dataIndex);\r\n\r\n\t                    data.setItemGraphicEl(dataIndex, rect);\r\n\r\n\t                    group.add(rect);\r\n\r\n\t                })\r\n\t                .update(function (newIndex, oldIndex) {\r\n\t                    var rect = oldData.getItemGraphicEl(oldIndex);\r\n\t                    // 空数据\r\n\t                    if (!data.hasValue(newIndex)) {\r\n\t                        group.remove(rect);\r\n\t                        return;\r\n\t                    }\r\n\t                    if (!rect) {\r\n\t                        rect = createRect(newIndex, true);\r\n\t                    }\r\n\r\n\t                    var layout = data.getItemLayout(newIndex);\r\n\t                    var lineWidth = data.getItemModel(newIndex).get(barBorderWidthQuery) || 0;\r\n\t                    fixLayoutWithLineWidth(layout, lineWidth);\r\n\r\n\t                    graphic.updateProps(rect, {\r\n\t                        shape: layout\r\n\t                    }, seriesModel, newIndex);\r\n\r\n\t                    data.setItemGraphicEl(newIndex, rect);\r\n\r\n\t                    // Add back\r\n\t                    group.add(rect);\r\n\t                })\r\n\t                .remove(function (idx) {\r\n\t                    var rect = oldData.getItemGraphicEl(idx);\r\n\t                    if (rect) {\r\n\t                        // Not show text when animating\r\n\t                        rect.style.text = '';\r\n\t                        graphic.updateProps(rect, {\r\n\t                            shape: {\r\n\t                                width: 0\r\n\t                            }\r\n\t                        }, seriesModel, idx, function () {\r\n\t                            group.remove(rect);\r\n\t                        });\r\n\t                    }\r\n\t                })\r\n\t                .execute();\r\n\r\n\t            this._updateStyle(seriesModel, data, isHorizontal);\r\n\r\n\t            this._data = data;\r\n\t        },\r\n\r\n\t        _updateStyle: function (seriesModel, data, isHorizontal) {\r\n\t            function setLabel(style, model, color, labelText, labelPositionOutside) {\r\n\t                graphic.setText(style, model, color);\r\n\t                style.text = labelText;\r\n\t                if (style.textPosition === 'outside') {\r\n\t                    style.textPosition = labelPositionOutside;\r\n\t                }\r\n\t            }\r\n\r\n\t            data.eachItemGraphicEl(function (rect, idx) {\r\n\t                var itemModel = data.getItemModel(idx);\r\n\t                var color = data.getItemVisual(idx, 'color');\r\n\t                var opacity = data.getItemVisual(idx, 'opacity');\r\n\t                var layout = data.getItemLayout(idx);\r\n\t                var itemStyleModel = itemModel.getModel('itemStyle.normal');\r\n\r\n\t                var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();\r\n\r\n\t                rect.setShape('r', itemStyleModel.get('barBorderRadius') || 0);\r\n\r\n\t                rect.useStyle(zrUtil.defaults(\r\n\t                    {\r\n\t                        fill: color,\r\n\t                        opacity: opacity\r\n\t                    },\r\n\t                    itemStyleModel.getBarItemStyle()\r\n\t                ));\r\n\r\n\t                var labelPositionOutside = isHorizontal\r\n\t                    ? (layout.height > 0 ? 'bottom' : 'top')\r\n\t                    : (layout.width > 0 ? 'left' : 'right');\r\n\r\n\t                var labelModel = itemModel.getModel('label.normal');\r\n\t                var hoverLabelModel = itemModel.getModel('label.emphasis');\r\n\t                var rectStyle = rect.style;\r\n\t                if (labelModel.get('show')) {\r\n\t                    setLabel(\r\n\t                        rectStyle, labelModel, color,\r\n\t                        zrUtil.retrieve(\r\n\t                            seriesModel.getFormattedLabel(idx, 'normal'),\r\n\t                            seriesModel.getRawValue(idx)\r\n\t                        ),\r\n\t                        labelPositionOutside\r\n\t                    );\r\n\t                }\r\n\t                else {\r\n\t                    rectStyle.text = '';\r\n\t                }\r\n\t                if (hoverLabelModel.get('show')) {\r\n\t                    setLabel(\r\n\t                        hoverStyle, hoverLabelModel, color,\r\n\t                        zrUtil.retrieve(\r\n\t                            seriesModel.getFormattedLabel(idx, 'emphasis'),\r\n\t                            seriesModel.getRawValue(idx)\r\n\t                        ),\r\n\t                        labelPositionOutside\r\n\t                    );\r\n\t                }\r\n\t                else {\r\n\t                    hoverStyle.text = '';\r\n\t                }\r\n\t                graphic.setHoverStyle(rect, hoverStyle);\r\n\t            });\r\n\t        },\r\n\r\n\t        remove: function (ecModel, api) {\r\n\t            var group = this.group;\r\n\t            if (ecModel.get('animation')) {\r\n\t                if (this._data) {\r\n\t                    this._data.eachItemGraphicEl(function (el) {\r\n\t                        // Not show text when animating\r\n\t                        el.style.text = '';\r\n\t                        graphic.updateProps(el, {\r\n\t                            shape: {\r\n\t                                width: 0\r\n\t                            }\r\n\t                        }, ecModel, el.dataIndex, function () {\r\n\t                            group.remove(el);\r\n\t                        });\r\n\t                    });\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                group.removeAll();\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 137 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\r\n\t    var getBarItemStyle = __webpack_require__(15)(\r\n\t        [\r\n\t            ['fill', 'color'],\r\n\t            ['stroke', 'borderColor'],\r\n\t            ['lineWidth', 'borderWidth'],\r\n\t            // Compatitable with 2\r\n\t            ['stroke', 'barBorderColor'],\r\n\t            ['lineWidth', 'barBorderWidth'],\r\n\t            ['opacity'],\r\n\t            ['shadowBlur'],\r\n\t            ['shadowOffsetX'],\r\n\t            ['shadowOffsetY'],\r\n\t            ['shadowColor']\r\n\t        ]\r\n\t    );\r\n\t    module.exports = {\r\n\t        getBarItemStyle: function (excludes) {\r\n\t            var style = getBarItemStyle.call(this, excludes);\r\n\t            if (this.getBorderLineDash) {\r\n\t                var lineDash = this.getBorderLineDash();\r\n\t                lineDash && (style.lineDash = lineDash);\r\n\t            }\r\n\t            return style;\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 138 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var parsePercent = numberUtil.parsePercent;\r\n\r\n\t    function getSeriesStackId(seriesModel) {\r\n\t        return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;\r\n\t    }\r\n\r\n\t    function getAxisKey(axis) {\r\n\t        return axis.dim + axis.index;\r\n\t    }\r\n\r\n\t    function calBarWidthAndOffset(barSeries, api) {\r\n\t        // Columns info on each category axis. Key is cartesian name\r\n\t        var columnsMap = {};\r\n\r\n\t        zrUtil.each(barSeries, function (seriesModel, idx) {\r\n\t            var data = seriesModel.getData();\r\n\t            var cartesian = seriesModel.coordinateSystem;\r\n\r\n\t            var baseAxis = cartesian.getBaseAxis();\r\n\t            var axisExtent = baseAxis.getExtent();\r\n\t            var bandWidth = baseAxis.type === 'category'\r\n\t                ? baseAxis.getBandWidth()\r\n\t                : (Math.abs(axisExtent[1] - axisExtent[0]) / data.count());\r\n\r\n\t            var columnsOnAxis = columnsMap[getAxisKey(baseAxis)] || {\r\n\t                bandWidth: bandWidth,\r\n\t                remainedWidth: bandWidth,\r\n\t                autoWidthCount: 0,\r\n\t                categoryGap: '20%',\r\n\t                gap: '30%',\r\n\t                stacks: {}\r\n\t            };\r\n\t            var stacks = columnsOnAxis.stacks;\r\n\t            columnsMap[getAxisKey(baseAxis)] = columnsOnAxis;\r\n\r\n\t            var stackId = getSeriesStackId(seriesModel);\r\n\r\n\t            if (!stacks[stackId]) {\r\n\t                columnsOnAxis.autoWidthCount++;\r\n\t            }\r\n\t            stacks[stackId] = stacks[stackId] || {\r\n\t                width: 0,\r\n\t                maxWidth: 0\r\n\t            };\r\n\r\n\t            var barWidth = parsePercent(\r\n\t                seriesModel.get('barWidth'), bandWidth\r\n\t            );\r\n\t            var barMaxWidth = parsePercent(\r\n\t                seriesModel.get('barMaxWidth'), bandWidth\r\n\t            );\r\n\t            var barGap = seriesModel.get('barGap');\r\n\t            var barCategoryGap = seriesModel.get('barCategoryGap');\r\n\t            // TODO\r\n\t            if (barWidth && !stacks[stackId].width) {\r\n\t                barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\r\n\t                stacks[stackId].width = barWidth;\r\n\t                columnsOnAxis.remainedWidth -= barWidth;\r\n\t            }\r\n\r\n\t            barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\r\n\t            (barGap != null) && (columnsOnAxis.gap = barGap);\r\n\t            (barCategoryGap != null) && (columnsOnAxis.categoryGap = barCategoryGap);\r\n\t        });\r\n\r\n\t        var result = {};\r\n\r\n\t        zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\r\n\r\n\t            result[coordSysName] = {};\r\n\r\n\t            var stacks = columnsOnAxis.stacks;\r\n\t            var bandWidth = columnsOnAxis.bandWidth;\r\n\t            var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\r\n\t            var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\r\n\r\n\t            var remainedWidth = columnsOnAxis.remainedWidth;\r\n\t            var autoWidthCount = columnsOnAxis.autoWidthCount;\r\n\t            var autoWidth = (remainedWidth - categoryGap)\r\n\t                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\r\n\t            autoWidth = Math.max(autoWidth, 0);\r\n\r\n\t            // Find if any auto calculated bar exceeded maxBarWidth\r\n\t            zrUtil.each(stacks, function (column, stack) {\r\n\t                var maxWidth = column.maxWidth;\r\n\t                if (!column.width && maxWidth && maxWidth < autoWidth) {\r\n\t                    maxWidth = Math.min(maxWidth, remainedWidth);\r\n\t                    remainedWidth -= maxWidth;\r\n\t                    column.width = maxWidth;\r\n\t                    autoWidthCount--;\r\n\t                }\r\n\t            });\r\n\r\n\t            // Recalculate width again\r\n\t            autoWidth = (remainedWidth - categoryGap)\r\n\t                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\r\n\t            autoWidth = Math.max(autoWidth, 0);\r\n\r\n\t            var widthSum = 0;\r\n\t            var lastColumn;\r\n\t            zrUtil.each(stacks, function (column, idx) {\r\n\t                if (!column.width) {\r\n\t                    column.width = autoWidth;\r\n\t                }\r\n\t                lastColumn = column;\r\n\t                widthSum += column.width * (1 + barGapPercent);\r\n\t            });\r\n\t            if (lastColumn) {\r\n\t                widthSum -= lastColumn.width * barGapPercent;\r\n\t            }\r\n\r\n\t            var offset = -widthSum / 2;\r\n\t            zrUtil.each(stacks, function (column, stackId) {\r\n\t                result[coordSysName][stackId] = result[coordSysName][stackId] || {\r\n\t                    offset: offset,\r\n\t                    width: column.width\r\n\t                };\r\n\r\n\t                offset += column.width * (1 + barGapPercent);\r\n\t            });\r\n\t        });\r\n\r\n\t        return result;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {string} seriesType\r\n\t     * @param {module:echarts/model/Global} ecModel\r\n\t     * @param {module:echarts/ExtensionAPI} api\r\n\t     */\r\n\t    function barLayoutGrid(seriesType, ecModel, api) {\r\n\r\n\t        var barWidthAndOffset = calBarWidthAndOffset(\r\n\t            zrUtil.filter(\r\n\t                ecModel.getSeriesByType(seriesType),\r\n\t                function (seriesModel) {\r\n\t                    return !ecModel.isSeriesFiltered(seriesModel)\r\n\t                        && seriesModel.coordinateSystem\r\n\t                        && seriesModel.coordinateSystem.type === 'cartesian2d';\r\n\t                }\r\n\t            )\r\n\t        );\r\n\r\n\t        var lastStackCoords = {};\r\n\t        var lastStackCoordsOrigin = {};\r\n\r\n\t        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\r\n\r\n\t            var data = seriesModel.getData();\r\n\t            var cartesian = seriesModel.coordinateSystem;\r\n\t            var baseAxis = cartesian.getBaseAxis();\r\n\r\n\t            var stackId = getSeriesStackId(seriesModel);\r\n\t            var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\r\n\t            var columnOffset = columnLayoutInfo.offset;\r\n\t            var columnWidth = columnLayoutInfo.width;\r\n\t            var valueAxis = cartesian.getOtherAxis(baseAxis);\r\n\r\n\t            var barMinHeight = seriesModel.get('barMinHeight') || 0;\r\n\r\n\t            var valueAxisStart = baseAxis.onZero\r\n\t                ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0))\r\n\t                : valueAxis.getGlobalExtent()[0];\r\n\r\n\t            var coords = cartesian.dataToPoints(data, true);\r\n\t            lastStackCoords[stackId] = lastStackCoords[stackId] || [];\r\n\t            lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243\r\n\r\n\t            data.setLayout({\r\n\t                offset: columnOffset,\r\n\t                size: columnWidth\r\n\t            });\r\n\r\n\t            data.each(valueAxis.dim, function (value, idx) {\r\n\t                // 空数据\r\n\t                if (isNaN(value)) {\r\n\t                    return;\r\n\t                }\r\n\t                if (!lastStackCoords[stackId][idx]) {\r\n\t                    lastStackCoords[stackId][idx] = {\r\n\t                        p: valueAxisStart, // Positive stack\r\n\t                        n: valueAxisStart  // Negative stack\r\n\t                    };\r\n\t                    lastStackCoordsOrigin[stackId][idx] = {\r\n\t                        p: valueAxisStart, // Positive stack\r\n\t                        n: valueAxisStart  // Negative stack\r\n\t                    };\r\n\t                }\r\n\t                var sign = value >= 0 ? 'p' : 'n';\r\n\t                var coord = coords[idx];\r\n\t                var lastCoord = lastStackCoords[stackId][idx][sign];\r\n\t                var lastCoordOrigin = lastStackCoordsOrigin[stackId][idx][sign];\r\n\t                var x;\r\n\t                var y;\r\n\t                var width;\r\n\t                var height;\r\n\r\n\t                if (valueAxis.isHorizontal()) {\r\n\t                    x = lastCoord;\r\n\t                    y = coord[1] + columnOffset;\r\n\t                    width = coord[0] - lastCoordOrigin;\r\n\t                    height = columnWidth;\r\n\r\n\t                    lastStackCoordsOrigin[stackId][idx][sign] += width;\r\n\t                    if (Math.abs(width) < barMinHeight) {\r\n\t                        width = (width < 0 ? -1 : 1) * barMinHeight;\r\n\t                    }\r\n\t                    lastStackCoords[stackId][idx][sign] += width;\r\n\t                }\r\n\t                else {\r\n\t                    x = coord[0] + columnOffset;\r\n\t                    y = lastCoord;\r\n\t                    width = columnWidth;\r\n\t                    height = coord[1] - lastCoordOrigin;\r\n\r\n\t                    lastStackCoordsOrigin[stackId][idx][sign] += height;\r\n\t                    if (Math.abs(height) < barMinHeight) {\r\n\t                        // Include zero to has a positive bar\r\n\t                        height = (height <= 0 ? -1 : 1) * barMinHeight;\r\n\t                    }\r\n\t                    lastStackCoords[stackId][idx][sign] += height;\r\n\t                }\r\n\r\n\t                data.setItemLayout(idx, {\r\n\t                    x: x,\r\n\t                    y: y,\r\n\t                    width: width,\r\n\t                    height: height\r\n\t                });\r\n\t            }, true);\r\n\r\n\t        }, this);\r\n\t    }\r\n\r\n\t    module.exports = barLayoutGrid;\r\n\r\n\r\n/***/ },\r\n/* 139 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    __webpack_require__(140);\r\n\t    __webpack_require__(142);\r\n\r\n\t    __webpack_require__(143)('pie', [{\r\n\t        type: 'pieToggleSelect',\r\n\t        event: 'pieselectchanged',\r\n\t        method: 'toggleSelected'\r\n\t    }, {\r\n\t        type: 'pieSelect',\r\n\t        event: 'pieselected',\r\n\t        method: 'select'\r\n\t    }, {\r\n\t        type: 'pieUnSelect',\r\n\t        event: 'pieunselected',\r\n\t        method: 'unSelect'\r\n\t    }]);\r\n\r\n\t    echarts.registerVisual(zrUtil.curry(__webpack_require__(144), 'pie'));\r\n\r\n\t    echarts.registerLayout(zrUtil.curry(\r\n\t        __webpack_require__(145), 'pie'\r\n\t    ));\r\n\r\n\t    echarts.registerProcessor(zrUtil.curry(__webpack_require__(147), 'pie'));\r\n\r\n\r\n/***/ },\r\n/* 140 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var List = __webpack_require__(97);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var completeDimensions = __webpack_require__(102);\r\n\r\n\t    var dataSelectableMixin = __webpack_require__(141);\r\n\r\n\t    var PieSeries = __webpack_require__(1).extendSeriesModel({\r\n\r\n\t        type: 'series.pie',\r\n\r\n\t        // Overwrite\r\n\t        init: function (option) {\r\n\t            PieSeries.superApply(this, 'init', arguments);\r\n\r\n\t            // Enable legend selection for each data item\r\n\t            // Use a function instead of direct access because data reference may changed\r\n\t            this.legendDataProvider = function () {\r\n\t                return this._dataBeforeProcessed;\r\n\t            };\r\n\r\n\t            this.updateSelectedMap(option.data);\r\n\r\n\t            this._defaultLabelLine(option);\r\n\t        },\r\n\r\n\t        // Overwrite\r\n\t        mergeOption: function (newOption) {\r\n\t            PieSeries.superCall(this, 'mergeOption', newOption);\r\n\t            this.updateSelectedMap(this.option.data);\r\n\t        },\r\n\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            var dimensions = completeDimensions(['value'], option.data);\r\n\t            var list = new List(dimensions, this);\r\n\t            list.initData(option.data);\r\n\t            return list;\r\n\t        },\r\n\r\n\t        // Overwrite\r\n\t        getDataParams: function (dataIndex) {\r\n\t            var data = this._data;\r\n\t            var params = PieSeries.superCall(this, 'getDataParams', dataIndex);\r\n\t            var sum = data.getSum('value');\r\n\t            // FIXME toFixed?\r\n\t            //\r\n\t            // Percent is 0 if sum is 0\r\n\t            params.percent = !sum ? 0 : +(data.get('value', dataIndex) / sum * 100).toFixed(2);\r\n\r\n\t            params.$vars.push('percent');\r\n\t            return params;\r\n\t        },\r\n\r\n\t        _defaultLabelLine: function (option) {\r\n\t            // Extend labelLine emphasis\r\n\t            modelUtil.defaultEmphasis(option.labelLine, ['show']);\r\n\r\n\t            var labelLineNormalOpt = option.labelLine.normal;\r\n\t            var labelLineEmphasisOpt = option.labelLine.emphasis;\r\n\t            // Not show label line if `label.normal.show = false`\r\n\t            labelLineNormalOpt.show = labelLineNormalOpt.show\r\n\t                && option.label.normal.show;\r\n\t            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show\r\n\t                && option.label.emphasis.show;\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,\r\n\t            z: 2,\r\n\t            legendHoverLink: true,\r\n\r\n\t            hoverAnimation: true,\r\n\t            // 默认全局居中\r\n\t            center: ['50%', '50%'],\r\n\t            radius: [0, '75%'],\r\n\t            // 默认顺时针\r\n\t            clockwise: true,\r\n\t            startAngle: 90,\r\n\t            // 最小角度改为0\r\n\t            minAngle: 0,\r\n\t            // 选中是扇区偏移量\r\n\t            selectedOffset: 10,\r\n\r\n\t            // If use strategy to avoid label overlapping\r\n\t            avoidLabelOverlap: true,\r\n\t            // 选择模式，默认关闭，可选single，multiple\r\n\t            // selectedMode: false,\r\n\t            // 南丁格尔玫瑰图模式，'radius'（半径） | 'area'（面积）\r\n\t            // roseType: null,\r\n\r\n\t            label: {\r\n\t                normal: {\r\n\t                    // If rotate around circle\r\n\t                    rotate: false,\r\n\t                    show: true,\r\n\t                    // 'outer', 'inside', 'center'\r\n\t                    position: 'outer'\r\n\t                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调\r\n\t                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\r\n\t                    // distance: 当position为inner时有效，为label位置到圆心的距离与圆半径(环状图为内外半径和)的比例系数\r\n\t                },\r\n\t                emphasis: {}\r\n\t            },\r\n\t            // Enabled when label.normal.position is 'outer'\r\n\t            labelLine: {\r\n\t                normal: {\r\n\t                    show: true,\r\n\t                    // 引导线两段中的第一段长度\r\n\t                    length: 15,\r\n\t                    // 引导线两段中的第二段长度\r\n\t                    length2: 15,\r\n\t                    smooth: false,\r\n\t                    lineStyle: {\r\n\t                        // color: 各异,\r\n\t                        width: 1,\r\n\t                        type: 'solid'\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    borderWidth: 1\r\n\t                },\r\n\t                emphasis: {}\r\n\t            },\r\n\r\n\t            animationEasing: 'cubicOut',\r\n\r\n\t            data: []\r\n\t        }\r\n\t    });\r\n\r\n\t    zrUtil.mixin(PieSeries, dataSelectableMixin);\r\n\r\n\t    module.exports = PieSeries;\r\n\r\n\r\n/***/ },\r\n/* 141 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Data selectable mixin for chart series.\r\n\t * To eanble data select, option of series must have `selectedMode`.\r\n\t * And each data item will use `selected` to toggle itself selected status\r\n\t *\r\n\t * @module echarts/chart/helper/DataSelectable\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    module.exports = {\r\n\r\n\t        updateSelectedMap: function (targetList) {\r\n\t            this._selectTargetMap = zrUtil.reduce(targetList || [], function (targetMap, target) {\r\n\t                targetMap[target.name] = target;\r\n\t                return targetMap;\r\n\t            }, {});\r\n\t        },\r\n\t        /**\r\n\t         * @param {string} name\r\n\t         */\r\n\t        // PENGING If selectedMode is null ?\r\n\t        select: function (name) {\r\n\t            var targetMap = this._selectTargetMap;\r\n\t            var target = targetMap[name];\r\n\t            var selectedMode = this.get('selectedMode');\r\n\t            if (selectedMode === 'single') {\r\n\t                zrUtil.each(targetMap, function (target) {\r\n\t                    target.selected = false;\r\n\t                });\r\n\t            }\r\n\t            target && (target.selected = true);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} name\r\n\t         */\r\n\t        unSelect: function (name) {\r\n\t            var target = this._selectTargetMap[name];\r\n\t            // var selectedMode = this.get('selectedMode');\r\n\t            // selectedMode !== 'single' && target && (target.selected = false);\r\n\t            target && (target.selected = false);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} name\r\n\t         */\r\n\t        toggleSelected: function (name) {\r\n\t            var target = this._selectTargetMap[name];\r\n\t            if (target != null) {\r\n\t                this[target.selected ? 'unSelect' : 'select'](name);\r\n\t                return target.selected;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} name\r\n\t         */\r\n\t        isSelected: function (name) {\r\n\t            var target = this._selectTargetMap[name];\r\n\t            return target && target.selected;\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 142 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    /**\r\n\t     * @param {module:echarts/model/Series} seriesModel\r\n\t     * @param {boolean} hasAnimation\r\n\t     * @inner\r\n\t     */\r\n\t    function updateDataSelected(uid, seriesModel, hasAnimation, api) {\r\n\t        var data = seriesModel.getData();\r\n\t        var dataIndex = this.dataIndex;\r\n\t        var name = data.getName(dataIndex);\r\n\t        var selectedOffset = seriesModel.get('selectedOffset');\r\n\r\n\t        api.dispatchAction({\r\n\t            type: 'pieToggleSelect',\r\n\t            from: uid,\r\n\t            name: name,\r\n\t            seriesId: seriesModel.id\r\n\t        });\r\n\r\n\t        data.each(function (idx) {\r\n\t            toggleItemSelected(\r\n\t                data.getItemGraphicEl(idx),\r\n\t                data.getItemLayout(idx),\r\n\t                seriesModel.isSelected(data.getName(idx)),\r\n\t                selectedOffset,\r\n\t                hasAnimation\r\n\t            );\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {module:zrender/graphic/Sector} el\r\n\t     * @param {Object} layout\r\n\t     * @param {boolean} isSelected\r\n\t     * @param {number} selectedOffset\r\n\t     * @param {boolean} hasAnimation\r\n\t     * @inner\r\n\t     */\r\n\t    function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {\r\n\t        var midAngle = (layout.startAngle + layout.endAngle) / 2;\r\n\r\n\t        var dx = Math.cos(midAngle);\r\n\t        var dy = Math.sin(midAngle);\r\n\r\n\t        var offset = isSelected ? selectedOffset : 0;\r\n\t        var position = [dx * offset, dy * offset];\r\n\r\n\t        hasAnimation\r\n\t            // animateTo will stop revious animation like update transition\r\n\t            ? el.animate()\r\n\t                .when(200, {\r\n\t                    position: position\r\n\t                })\r\n\t                .start('bounceOut')\r\n\t            : el.attr('position', position);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Piece of pie including Sector, Label, LabelLine\r\n\t     * @constructor\r\n\t     * @extends {module:zrender/graphic/Group}\r\n\t     */\r\n\t    function PiePiece(data, idx) {\r\n\r\n\t        graphic.Group.call(this);\r\n\r\n\t        var sector = new graphic.Sector({\r\n\t            z2: 2\r\n\t        });\r\n\t        var polyline = new graphic.Polyline();\r\n\t        var text = new graphic.Text();\r\n\t        this.add(sector);\r\n\t        this.add(polyline);\r\n\t        this.add(text);\r\n\r\n\t        this.updateData(data, idx, true);\r\n\r\n\t        // Hover to change label and labelLine\r\n\t        function onEmphasis() {\r\n\t            polyline.ignore = polyline.hoverIgnore;\r\n\t            text.ignore = text.hoverIgnore;\r\n\t        }\r\n\t        function onNormal() {\r\n\t            polyline.ignore = polyline.normalIgnore;\r\n\t            text.ignore = text.normalIgnore;\r\n\t        }\r\n\t        this.on('emphasis', onEmphasis)\r\n\t            .on('normal', onNormal)\r\n\t            .on('mouseover', onEmphasis)\r\n\t            .on('mouseout', onNormal);\r\n\t    }\r\n\r\n\t    var piePieceProto = PiePiece.prototype;\r\n\r\n\t    function getLabelStyle(data, idx, state, labelModel, labelPosition) {\r\n\t        var textStyleModel = labelModel.getModel('textStyle');\r\n\t        var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';\r\n\t        return {\r\n\t            fill: textStyleModel.getTextColor()\r\n\t                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),\r\n\t            opacity: data.getItemVisual(idx, 'opacity'),\r\n\t            textFont: textStyleModel.getFont(),\r\n\t            text: zrUtil.retrieve(\r\n\t                data.hostModel.getFormattedLabel(idx, state), data.getName(idx)\r\n\t            )\r\n\t        };\r\n\t    }\r\n\r\n\t    piePieceProto.updateData = function (data, idx, firstCreate) {\r\n\r\n\t        var sector = this.childAt(0);\r\n\r\n\t        var seriesModel = data.hostModel;\r\n\t        var itemModel = data.getItemModel(idx);\r\n\t        var layout = data.getItemLayout(idx);\r\n\t        var sectorShape = zrUtil.extend({}, layout);\r\n\t        sectorShape.label = null;\r\n\t        if (firstCreate) {\r\n\t            sector.setShape(sectorShape);\r\n\t            sector.shape.endAngle = layout.startAngle;\r\n\t            graphic.updateProps(sector, {\r\n\t                shape: {\r\n\t                    endAngle: layout.endAngle\r\n\t                }\r\n\t            }, seriesModel, idx);\r\n\t        }\r\n\t        else {\r\n\t            graphic.updateProps(sector, {\r\n\t                shape: sectorShape\r\n\t            }, seriesModel, idx);\r\n\t        }\r\n\r\n\t        // Update common style\r\n\t        var itemStyleModel = itemModel.getModel('itemStyle');\r\n\t        var visualColor = data.getItemVisual(idx, 'color');\r\n\r\n\t        sector.useStyle(\r\n\t            zrUtil.defaults(\r\n\t                {\r\n\t                    lineJoin: 'bevel',\r\n\t                    fill: visualColor\r\n\t                },\r\n\t                itemStyleModel.getModel('normal').getItemStyle()\r\n\t            )\r\n\t        );\r\n\t        sector.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();\r\n\r\n\t        // Toggle selected\r\n\t        toggleItemSelected(\r\n\t            this,\r\n\t            data.getItemLayout(idx),\r\n\t            itemModel.get('selected'),\r\n\t            seriesModel.get('selectedOffset'),\r\n\t            seriesModel.get('animation')\r\n\t        );\r\n\r\n\t        function onEmphasis() {\r\n\t            // Sector may has animation of updating data. Force to move to the last frame\r\n\t            // Or it may stopped on the wrong shape\r\n\t            sector.stopAnimation(true);\r\n\t            sector.animateTo({\r\n\t                shape: {\r\n\t                    r: layout.r + 10\r\n\t                }\r\n\t            }, 300, 'elasticOut');\r\n\t        }\r\n\t        function onNormal() {\r\n\t            sector.stopAnimation(true);\r\n\t            sector.animateTo({\r\n\t                shape: {\r\n\t                    r: layout.r\r\n\t                }\r\n\t            }, 300, 'elasticOut');\r\n\t        }\r\n\t        sector.off('mouseover').off('mouseout').off('emphasis').off('normal');\r\n\t        if (itemModel.get('hoverAnimation') && seriesModel.ifEnableAnimation()) {\r\n\t            sector\r\n\t                .on('mouseover', onEmphasis)\r\n\t                .on('mouseout', onNormal)\r\n\t                .on('emphasis', onEmphasis)\r\n\t                .on('normal', onNormal);\r\n\t        }\r\n\r\n\t        this._updateLabel(data, idx);\r\n\r\n\t        graphic.setHoverStyle(this);\r\n\t    };\r\n\r\n\t    piePieceProto._updateLabel = function (data, idx) {\r\n\r\n\t        var labelLine = this.childAt(1);\r\n\t        var labelText = this.childAt(2);\r\n\r\n\t        var seriesModel = data.hostModel;\r\n\t        var itemModel = data.getItemModel(idx);\r\n\t        var layout = data.getItemLayout(idx);\r\n\t        var labelLayout = layout.label;\r\n\t        var visualColor = data.getItemVisual(idx, 'color');\r\n\r\n\t        graphic.updateProps(labelLine, {\r\n\t            shape: {\r\n\t                points: labelLayout.linePoints || [\r\n\t                    [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y]\r\n\t                ]\r\n\t            }\r\n\t        }, seriesModel, idx);\r\n\r\n\t        graphic.updateProps(labelText, {\r\n\t            style: {\r\n\t                x: labelLayout.x,\r\n\t                y: labelLayout.y\r\n\t            }\r\n\t        }, seriesModel, idx);\r\n\t        labelText.attr({\r\n\t            style: {\r\n\t                textVerticalAlign: labelLayout.verticalAlign,\r\n\t                textAlign: labelLayout.textAlign,\r\n\t                textFont: labelLayout.font\r\n\t            },\r\n\t            rotation: labelLayout.rotation,\r\n\t            origin: [labelLayout.x, labelLayout.y],\r\n\t            z2: 10\r\n\t        });\r\n\r\n\t        var labelModel = itemModel.getModel('label.normal');\r\n\t        var labelHoverModel = itemModel.getModel('label.emphasis');\r\n\t        var labelLineModel = itemModel.getModel('labelLine.normal');\r\n\t        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');\r\n\t        var labelPosition = labelModel.get('position') || labelHoverModel.get('position');\r\n\r\n\t        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel, labelPosition));\r\n\r\n\t        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');\r\n\t        labelText.hoverIgnore = !labelHoverModel.get('show');\r\n\r\n\t        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');\r\n\t        labelLine.hoverIgnore = !labelLineHoverModel.get('show');\r\n\r\n\t        // Default use item visual color\r\n\t        labelLine.setStyle({\r\n\t            stroke: visualColor,\r\n\t            opacity: data.getItemVisual(idx, 'opacity')\r\n\t        });\r\n\t        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());\r\n\r\n\t        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel, labelPosition);\r\n\t        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();\r\n\r\n\t        var smooth = labelLineModel.get('smooth');\r\n\t        if (smooth && smooth === true) {\r\n\t            smooth = 0.4;\r\n\t        }\r\n\t        labelLine.setShape({\r\n\t            smooth: smooth\r\n\t        });\r\n\t    };\r\n\r\n\t    zrUtil.inherits(PiePiece, graphic.Group);\r\n\r\n\r\n\t    // Pie view\r\n\t    var Pie = __webpack_require__(42).extend({\r\n\r\n\t        type: 'pie',\r\n\r\n\t        init: function () {\r\n\t            var sectorGroup = new graphic.Group();\r\n\t            this._sectorGroup = sectorGroup;\r\n\t        },\r\n\r\n\t        render: function (seriesModel, ecModel, api, payload) {\r\n\t            if (payload && (payload.from === this.uid)) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var data = seriesModel.getData();\r\n\t            var oldData = this._data;\r\n\t            var group = this.group;\r\n\r\n\t            var hasAnimation = ecModel.get('animation');\r\n\t            var isFirstRender = !oldData;\r\n\r\n\t            var onSectorClick = zrUtil.curry(\r\n\t                updateDataSelected, this.uid, seriesModel, hasAnimation, api\r\n\t            );\r\n\r\n\t            var selectedMode = seriesModel.get('selectedMode');\r\n\r\n\t            data.diff(oldData)\r\n\t                .add(function (idx) {\r\n\t                    var piePiece = new PiePiece(data, idx);\r\n\t                    if (isFirstRender) {\r\n\t                        piePiece.eachChild(function (child) {\r\n\t                            child.stopAnimation(true);\r\n\t                        });\r\n\t                    }\r\n\r\n\t                    selectedMode && piePiece.on('click', onSectorClick);\r\n\r\n\t                    data.setItemGraphicEl(idx, piePiece);\r\n\r\n\t                    group.add(piePiece);\r\n\t                })\r\n\t                .update(function (newIdx, oldIdx) {\r\n\t                    var piePiece = oldData.getItemGraphicEl(oldIdx);\r\n\r\n\t                    piePiece.updateData(data, newIdx);\r\n\r\n\t                    piePiece.off('click');\r\n\t                    selectedMode && piePiece.on('click', onSectorClick);\r\n\t                    group.add(piePiece);\r\n\t                    data.setItemGraphicEl(newIdx, piePiece);\r\n\t                })\r\n\t                .remove(function (idx) {\r\n\t                    var piePiece = oldData.getItemGraphicEl(idx);\r\n\t                    group.remove(piePiece);\r\n\t                })\r\n\t                .execute();\r\n\r\n\t            if (hasAnimation && isFirstRender && data.count() > 0) {\r\n\t                var shape = data.getItemLayout(0);\r\n\t                var r = Math.max(api.getWidth(), api.getHeight()) / 2;\r\n\r\n\t                var removeClipPath = zrUtil.bind(group.removeClipPath, group);\r\n\t                group.setClipPath(this._createClipPath(\r\n\t                    shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel\r\n\t                ));\r\n\t            }\r\n\r\n\t            this._data = data;\r\n\t        },\r\n\r\n\t        dispose: function () {},\r\n\r\n\t        _createClipPath: function (\r\n\t            cx, cy, r, startAngle, clockwise, cb, seriesModel\r\n\t        ) {\r\n\t            var clipPath = new graphic.Sector({\r\n\t                shape: {\r\n\t                    cx: cx,\r\n\t                    cy: cy,\r\n\t                    r0: 0,\r\n\t                    r: r,\r\n\t                    startAngle: startAngle,\r\n\t                    endAngle: startAngle,\r\n\t                    clockwise: clockwise\r\n\t                }\r\n\t            });\r\n\r\n\t            graphic.initProps(clipPath, {\r\n\t                shape: {\r\n\t                    endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2\r\n\t                }\r\n\t            }, seriesModel, cb);\r\n\r\n\t            return clipPath;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @implement\r\n\t         */\r\n\t        containPoint: function (point, seriesModel) {\r\n\t            var data = seriesModel.getData();\r\n\t            var itemLayout = data.getItemLayout(0);\r\n\t            if (itemLayout) {\r\n\t                var dx = point[0] - itemLayout.cx;\r\n\t                var dy = point[1] - itemLayout.cy;\r\n\t                var radius = Math.sqrt(dx * dx + dy * dy);\r\n\t                return radius <= itemLayout.r && radius >= itemLayout.r0;\r\n\t            }\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    module.exports = Pie;\r\n\r\n\r\n/***/ },\r\n/* 143 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    module.exports = function (seriesType, actionInfos) {\r\n\t        zrUtil.each(actionInfos, function (actionInfo) {\r\n\t            actionInfo.update = 'updateView';\r\n\t            /**\r\n\t             * @payload\r\n\t             * @property {string} seriesName\r\n\t             * @property {string} name\r\n\t             */\r\n\t            echarts.registerAction(actionInfo, function (payload, ecModel) {\r\n\t                var selected = {};\r\n\t                ecModel.eachComponent(\r\n\t                    {mainType: 'series', subType: seriesType, query: payload},\r\n\t                    function (seriesModel) {\r\n\t                        if (seriesModel[actionInfo.method]) {\r\n\t                            seriesModel[actionInfo.method](payload.name);\r\n\t                        }\r\n\t                        var data = seriesModel.getData();\r\n\t                        // Create selected map\r\n\t                        data.each(function (idx) {\r\n\t                            var name = data.getName(idx);\r\n\t                            selected[name] = seriesModel.isSelected(name) || false;\r\n\t                        });\r\n\t                    }\r\n\t                );\r\n\t                return {\r\n\t                    name: payload.name,\r\n\t                    selected: selected\r\n\t                };\r\n\t            });\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 144 */\r\n/***/ function(module, exports) {\r\n\r\n\t// Pick color from palette for each data item\r\n\r\n\r\n\t    module.exports = function (seriesType, ecModel) {\r\n\t        // Pie and funnel may use diferrent scope\r\n\t        var paletteScope = {};\r\n\t        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\r\n\t            var dataAll = seriesModel.getRawData();\r\n\t            var idxMap = {};\r\n\t            if (!ecModel.isSeriesFiltered(seriesModel)) {\r\n\t                var data = seriesModel.getData();\r\n\t                data.each(function (idx) {\r\n\t                    var rawIdx = data.getRawIndex(idx);\r\n\t                    idxMap[rawIdx] = idx;\r\n\t                });\r\n\t                dataAll.each(function (rawIdx) {\r\n\t                    // FIXME Performance\r\n\t                    var itemModel = dataAll.getItemModel(rawIdx);\r\n\t                    var filteredIdx = idxMap[rawIdx];\r\n\r\n\t                    // If series.itemStyle.normal.color is a function. itemVisual may be encoded\r\n\t                    var singleDataColor = filteredIdx != null\r\n\t                        && data.getItemVisual(filteredIdx, 'color', true);\r\n\r\n\t                    if (!singleDataColor) {\r\n\t                        var color = itemModel.get('itemStyle.normal.color')\r\n\t                            || seriesModel.getColorFromPalette(dataAll.getName(rawIdx), paletteScope);\r\n\t                        // Legend may use the visual info in data before processed\r\n\t                        dataAll.setItemVisual(rawIdx, 'color', color);\r\n\r\n\t                        // Data is not filtered\r\n\t                        if (filteredIdx != null) {\r\n\t                            data.setItemVisual(filteredIdx, 'color', color);\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        // Set data all color for legend\r\n\t                        dataAll.setItemVisual(rawIdx, 'color', singleDataColor);\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 145 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// TODO minAngle\r\n\r\n\r\n\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var parsePercent = numberUtil.parsePercent;\r\n\t    var labelLayout = __webpack_require__(146);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var PI2 = Math.PI * 2;\r\n\t    var RADIAN = Math.PI / 180;\r\n\r\n\t    module.exports = function (seriesType, ecModel, api, payload) {\r\n\t        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\r\n\t            var center = seriesModel.get('center');\r\n\t            var radius = seriesModel.get('radius');\r\n\r\n\t            if (!zrUtil.isArray(radius)) {\r\n\t                radius = [0, radius];\r\n\t            }\r\n\t            if (!zrUtil.isArray(center)) {\r\n\t                center = [center, center];\r\n\t            }\r\n\r\n\t            var width = api.getWidth();\r\n\t            var height = api.getHeight();\r\n\t            var size = Math.min(width, height);\r\n\t            var cx = parsePercent(center[0], width);\r\n\t            var cy = parsePercent(center[1], height);\r\n\t            var r0 = parsePercent(radius[0], size / 2);\r\n\t            var r = parsePercent(radius[1], size / 2);\r\n\r\n\t            var data = seriesModel.getData();\r\n\r\n\t            var startAngle = -seriesModel.get('startAngle') * RADIAN;\r\n\r\n\t            var minAngle = seriesModel.get('minAngle') * RADIAN;\r\n\r\n\t            var sum = data.getSum('value');\r\n\t            // Sum may be 0\r\n\t            var unitRadian = Math.PI / (sum || data.count()) * 2;\r\n\r\n\t            var clockwise = seriesModel.get('clockwise');\r\n\r\n\t            var roseType = seriesModel.get('roseType');\r\n\r\n\t            // [0...max]\r\n\t            var extent = data.getDataExtent('value');\r\n\t            extent[0] = 0;\r\n\r\n\t            // In the case some sector angle is smaller than minAngle\r\n\t            var restAngle = PI2;\r\n\t            var valueSumLargerThanMinAngle = 0;\r\n\r\n\t            var currentAngle = startAngle;\r\n\r\n\t            var dir = clockwise ? 1 : -1;\r\n\t            data.each('value', function (value, idx) {\r\n\t                var angle;\r\n\t                // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？\r\n\t                if (roseType !== 'area') {\r\n\t                    angle = sum === 0 ? unitRadian : (value * unitRadian);\r\n\t                }\r\n\t                else {\r\n\t                    angle = PI2 / (data.count() || 1);\r\n\t                }\r\n\r\n\t                if (angle < minAngle) {\r\n\t                    angle = minAngle;\r\n\t                    restAngle -= minAngle;\r\n\t                }\r\n\t                else {\r\n\t                    valueSumLargerThanMinAngle += value;\r\n\t                }\r\n\r\n\t                var endAngle = currentAngle + dir * angle;\r\n\t                data.setItemLayout(idx, {\r\n\t                    angle: angle,\r\n\t                    startAngle: currentAngle,\r\n\t                    endAngle: endAngle,\r\n\t                    clockwise: clockwise,\r\n\t                    cx: cx,\r\n\t                    cy: cy,\r\n\t                    r0: r0,\r\n\t                    r: roseType\r\n\t                        ? numberUtil.linearMap(value, extent, [r0, r])\r\n\t                        : r\r\n\t                });\r\n\r\n\t                currentAngle = endAngle;\r\n\t            }, true);\r\n\r\n\t            // Some sector is constrained by minAngle\r\n\t            // Rest sectors needs recalculate angle\r\n\t            if (restAngle < PI2) {\r\n\t                // Average the angle if rest angle is not enough after all angles is\r\n\t                // Constrained by minAngle\r\n\t                if (restAngle <= 1e-3) {\r\n\t                    var angle = PI2 / data.count();\r\n\t                    data.each(function (idx) {\r\n\t                        var layout = data.getItemLayout(idx);\r\n\t                        layout.startAngle = startAngle + dir * idx * angle;\r\n\t                        layout.endAngle = startAngle + dir * (idx + 1) * angle;\r\n\t                    });\r\n\t                }\r\n\t                else {\r\n\t                    unitRadian = restAngle / valueSumLargerThanMinAngle;\r\n\t                    currentAngle = startAngle;\r\n\t                    data.each('value', function (value, idx) {\r\n\t                        var layout = data.getItemLayout(idx);\r\n\t                        var angle = layout.angle === minAngle\r\n\t                            ? minAngle : value * unitRadian;\r\n\t                        layout.startAngle = currentAngle;\r\n\t                        layout.endAngle = currentAngle + dir * angle;\r\n\t                        currentAngle += angle;\r\n\t                    });\r\n\t                }\r\n\t            }\r\n\r\n\t            labelLayout(seriesModel, r, width, height);\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 146 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t// FIXME emphasis label position is not same with normal label position\r\n\r\n\r\n\t    var textContain = __webpack_require__(8);\r\n\r\n\t    function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {\r\n\t        list.sort(function (a, b) {\r\n\t            return a.y - b.y;\r\n\t        });\r\n\r\n\t        // 压\r\n\t        function shiftDown(start, end, delta, dir) {\r\n\t            for (var j = start; j < end; j++) {\r\n\t                list[j].y += delta;\r\n\t                if (j > start\r\n\t                    && j + 1 < end\r\n\t                    && list[j + 1].y > list[j].y + list[j].height\r\n\t                ) {\r\n\t                    shiftUp(j, delta / 2);\r\n\t                    return;\r\n\t                }\r\n\t            }\r\n\r\n\t            shiftUp(end - 1, delta / 2);\r\n\t        }\r\n\r\n\t        // 弹\r\n\t        function shiftUp(end, delta) {\r\n\t            for (var j = end; j >= 0; j--) {\r\n\t                list[j].y -= delta;\r\n\t                if (j > 0\r\n\t                    && list[j].y > list[j - 1].y + list[j - 1].height\r\n\t                ) {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        function changeX(list, isDownList, cx, cy, r, dir) {\r\n\t            var lastDeltaX = dir > 0\r\n\t                ? isDownList                // 右侧\r\n\t                    ? Number.MAX_VALUE      // 下\r\n\t                    : 0                     // 上\r\n\t                : isDownList                // 左侧\r\n\t                    ? Number.MAX_VALUE      // 下\r\n\t                    : 0;                    // 上\r\n\r\n\t            for (var i = 0, l = list.length; i < l; i++) {\r\n\t                // Not change x for center label\r\n\t                if (list[i].position === 'center') {\r\n\t                    continue;\r\n\t                }\r\n\t                var deltaY = Math.abs(list[i].y - cy);\r\n\t                var length = list[i].len;\r\n\t                var length2 = list[i].len2;\r\n\t                var deltaX = (deltaY < r + length)\r\n\t                    ? Math.sqrt(\r\n\t                          (r + length + length2) * (r + length + length2)\r\n\t                          - deltaY * deltaY\r\n\t                      )\r\n\t                    : Math.abs(list[i].x - cx);\r\n\t                if (isDownList && deltaX >= lastDeltaX) {\r\n\t                    // 右下，左下\r\n\t                    deltaX = lastDeltaX - 10;\r\n\t                }\r\n\t                if (!isDownList && deltaX <= lastDeltaX) {\r\n\t                    // 右上，左上\r\n\t                    deltaX = lastDeltaX + 10;\r\n\t                }\r\n\r\n\t                list[i].x = cx + deltaX * dir;\r\n\t                lastDeltaX = deltaX;\r\n\t            }\r\n\t        }\r\n\r\n\t        var lastY = 0;\r\n\t        var delta;\r\n\t        var len = list.length;\r\n\t        var upList = [];\r\n\t        var downList = [];\r\n\t        for (var i = 0; i < len; i++) {\r\n\t            delta = list[i].y - lastY;\r\n\t            if (delta < 0) {\r\n\t                shiftDown(i, len, -delta, dir);\r\n\t            }\r\n\t            lastY = list[i].y + list[i].height;\r\n\t        }\r\n\t        if (viewHeight - lastY < 0) {\r\n\t            shiftUp(len - 1, lastY - viewHeight);\r\n\t        }\r\n\t        for (var i = 0; i < len; i++) {\r\n\t            if (list[i].y >= cy) {\r\n\t                downList.push(list[i]);\r\n\t            }\r\n\t            else {\r\n\t                upList.push(list[i]);\r\n\t            }\r\n\t        }\r\n\t        changeX(upList, false, cx, cy, r, dir);\r\n\t        changeX(downList, true, cx, cy, r, dir);\r\n\t    }\r\n\r\n\t    function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {\r\n\t        var leftList = [];\r\n\t        var rightList = [];\r\n\t        for (var i = 0; i < labelLayoutList.length; i++) {\r\n\t            if (labelLayoutList[i].x < cx) {\r\n\t                leftList.push(labelLayoutList[i]);\r\n\t            }\r\n\t            else {\r\n\t                rightList.push(labelLayoutList[i]);\r\n\t            }\r\n\t        }\r\n\r\n\t        adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);\r\n\t        adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);\r\n\r\n\t        for (var i = 0; i < labelLayoutList.length; i++) {\r\n\t            var linePoints = labelLayoutList[i].linePoints;\r\n\t            if (linePoints) {\r\n\t                var dist = linePoints[1][0] - linePoints[2][0];\r\n\t                if (labelLayoutList[i].x < cx) {\r\n\t                    linePoints[2][0] = labelLayoutList[i].x + 3;\r\n\t                }\r\n\t                else {\r\n\t                    linePoints[2][0] = labelLayoutList[i].x - 3;\r\n\t                }\r\n\t                linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;\r\n\t                linePoints[1][0] = linePoints[2][0] + dist;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    module.exports = function (seriesModel, r, viewWidth, viewHeight) {\r\n\t        var data = seriesModel.getData();\r\n\t        var labelLayoutList = [];\r\n\t        var cx;\r\n\t        var cy;\r\n\t        var hasLabelRotate = false;\r\n\r\n\t        data.each(function (idx) {\r\n\t            var layout = data.getItemLayout(idx);\r\n\r\n\t            var itemModel = data.getItemModel(idx);\r\n\t            var labelModel = itemModel.getModel('label.normal');\r\n\t            // Use position in normal or emphasis\r\n\t            var labelPosition = labelModel.get('position') || itemModel.get('label.emphasis.position');\r\n\r\n\t            var labelLineModel = itemModel.getModel('labelLine.normal');\r\n\t            var labelLineLen = labelLineModel.get('length');\r\n\t            var labelLineLen2 = labelLineModel.get('length2');\r\n\r\n\t            var midAngle = (layout.startAngle + layout.endAngle) / 2;\r\n\t            var dx = Math.cos(midAngle);\r\n\t            var dy = Math.sin(midAngle);\r\n\r\n\t            var textX;\r\n\t            var textY;\r\n\t            var linePoints;\r\n\t            var textAlign;\r\n\r\n\t            cx = layout.cx;\r\n\t            cy = layout.cy;\r\n\r\n\t            var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';\r\n\t            if (labelPosition === 'center') {\r\n\t                textX = layout.cx;\r\n\t                textY = layout.cy;\r\n\t                textAlign = 'center';\r\n\t            }\r\n\t            else {\r\n\t                var x1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dx : layout.r * dx) + cx;\r\n\t                var y1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dy : layout.r * dy) + cy;\r\n\r\n\t                textX = x1 + dx * 3;\r\n\t                textY = y1 + dy * 3;\r\n\r\n\t                if (!isLabelInside) {\r\n\t                    // For roseType\r\n\t                    var x2 = x1 + dx * (labelLineLen + r - layout.r);\r\n\t                    var y2 = y1 + dy * (labelLineLen + r - layout.r);\r\n\t                    var x3 = x2 + ((dx < 0 ? -1 : 1) * labelLineLen2);\r\n\t                    var y3 = y2;\r\n\r\n\t                    textX = x3 + (dx < 0 ? -5 : 5);\r\n\t                    textY = y3;\r\n\t                    linePoints = [[x1, y1], [x2, y2], [x3, y3]];\r\n\t                }\r\n\r\n\t                textAlign = isLabelInside ? 'center' : (dx > 0 ? 'left' : 'right');\r\n\t            }\r\n\t            var font = labelModel.getModel('textStyle').getFont();\r\n\r\n\t            var labelRotate = labelModel.get('rotate')\r\n\t                ? (dx < 0 ? -midAngle + Math.PI : -midAngle) : 0;\r\n\t            var text = seriesModel.getFormattedLabel(idx, 'normal')\r\n\t                        || data.getName(idx);\r\n\t            var textRect = textContain.getBoundingRect(\r\n\t                text, font, textAlign, 'top'\r\n\t            );\r\n\t            hasLabelRotate = !!labelRotate;\r\n\t            layout.label = {\r\n\t                x: textX,\r\n\t                y: textY,\r\n\t                position: labelPosition,\r\n\t                height: textRect.height,\r\n\t                len: labelLineLen,\r\n\t                len2: labelLineLen2,\r\n\t                linePoints: linePoints,\r\n\t                textAlign: textAlign,\r\n\t                verticalAlign: 'middle',\r\n\t                font: font,\r\n\t                rotation: labelRotate\r\n\t            };\r\n\r\n\t            // Not layout the inside label\r\n\t            if (!isLabelInside) {\r\n\t                labelLayoutList.push(layout.label);\r\n\t            }\r\n\t        });\r\n\t        if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {\r\n\t            avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 147 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\t    module.exports = function (seriesType, ecModel) {\r\n\t        var legendModels = ecModel.findComponents({\r\n\t            mainType: 'legend'\r\n\t        });\r\n\t        if (!legendModels || !legendModels.length) {\r\n\t            return;\r\n\t        }\r\n\t        ecModel.eachSeriesByType(seriesType, function (series) {\r\n\t            var data = series.getData();\r\n\t            data.filterSelf(function (idx) {\r\n\t                var name = data.getName(idx);\r\n\t                // If in any legend component the status is not selected.\r\n\t                for (var i = 0; i < legendModels.length; i++) {\r\n\t                    if (!legendModels[i].isSelected(name)) {\r\n\t                        return false;\r\n\t                    }\r\n\t                }\r\n\t                return true;\r\n\t            }, this);\r\n\t        }, this);\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 148 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    __webpack_require__(149);\r\n\t    __webpack_require__(150);\r\n\r\n\t    echarts.registerVisual(zrUtil.curry(\r\n\t        __webpack_require__(109), 'scatter', 'circle', null\r\n\t    ));\r\n\t    echarts.registerLayout(zrUtil.curry(\r\n\t        __webpack_require__(110), 'scatter'\r\n\t    ));\r\n\r\n\t    // In case developer forget to include grid component\r\n\t    __webpack_require__(112);\r\n\r\n\r\n/***/ },\r\n/* 149 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var createListFromArray = __webpack_require__(101);\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\r\n\t    module.exports = SeriesModel.extend({\r\n\r\n\t        type: 'series.scatter',\r\n\r\n\t        dependencies: ['grid', 'polar'],\r\n\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            var list = createListFromArray(option.data, this, ecModel);\r\n\t            return list;\r\n\t        },\r\n\r\n\t        brushSelector: 'point',\r\n\r\n\t        defaultOption: {\r\n\t            coordinateSystem: 'cartesian2d',\r\n\t            zlevel: 0,\r\n\t            z: 2,\r\n\t            legendHoverLink: true,\r\n\r\n\t            hoverAnimation: true,\r\n\t            // Cartesian coordinate system\r\n\t            // xAxisIndex: 0,\r\n\t            // yAxisIndex: 0,\r\n\r\n\t            // Polar coordinate system\r\n\t            // polarIndex: 0,\r\n\r\n\t            // Geo coordinate system\r\n\t            // geoIndex: 0,\r\n\r\n\t            // symbol: null,        // 图形类型\r\n\t            symbolSize: 10,          // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\r\n\t            // symbolRotate: null,  // 图形旋转控制\r\n\r\n\t            large: false,\r\n\t            // Available when large is true\r\n\t            largeThreshold: 2000,\r\n\r\n\t            // label: {\r\n\t                // normal: {\r\n\t                    // show: false\r\n\t                    // distance: 5,\r\n\t                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调\r\n\t                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\r\n\t                    //           'inside'|'left'|'right'|'top'|'bottom'\r\n\t                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\r\n\t            //     }\r\n\t            // },\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    opacity: 0.8\r\n\t                    // color: 各异\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 150 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var SymbolDraw = __webpack_require__(104);\r\n\t    var LargeSymbolDraw = __webpack_require__(151);\r\n\r\n\t    __webpack_require__(1).extendChartView({\r\n\r\n\t        type: 'scatter',\r\n\r\n\t        init: function () {\r\n\t            this._normalSymbolDraw = new SymbolDraw();\r\n\t            this._largeSymbolDraw = new LargeSymbolDraw();\r\n\t        },\r\n\r\n\t        render: function (seriesModel, ecModel, api) {\r\n\t            var data = seriesModel.getData();\r\n\t            var largeSymbolDraw = this._largeSymbolDraw;\r\n\t            var normalSymbolDraw = this._normalSymbolDraw;\r\n\t            var group = this.group;\r\n\r\n\t            var symbolDraw = seriesModel.get('large') && data.count() > seriesModel.get('largeThreshold')\r\n\t                ? largeSymbolDraw : normalSymbolDraw;\r\n\r\n\t            this._symbolDraw = symbolDraw;\r\n\t            symbolDraw.updateData(data);\r\n\t            group.add(symbolDraw.group);\r\n\r\n\t            group.remove(\r\n\t                symbolDraw === largeSymbolDraw\r\n\t                ? normalSymbolDraw.group : largeSymbolDraw.group\r\n\t            );\r\n\t        },\r\n\r\n\t        updateLayout: function (seriesModel) {\r\n\t            this._symbolDraw.updateLayout(seriesModel);\r\n\t        },\r\n\r\n\t        remove: function (ecModel, api) {\r\n\t            this._symbolDraw && this._symbolDraw.remove(api, true);\r\n\t        },\r\n\r\n\t        dispose: function () {}\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 151 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// TODO Batch by color\r\n\r\n\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var symbolUtil = __webpack_require__(106);\r\n\r\n\t    var LargeSymbolPath = graphic.extendShape({\r\n\r\n\t        shape: {\r\n\t            points: null,\r\n\t            sizes: null\r\n\t        },\r\n\r\n\t        symbolProxy: null,\r\n\r\n\t        buildPath: function (path, shape) {\r\n\t            var points = shape.points;\r\n\t            var sizes = shape.sizes;\r\n\r\n\t            var symbolProxy = this.symbolProxy;\r\n\t            var symbolProxyShape = symbolProxy.shape;\r\n\t            for (var i = 0; i < points.length; i++) {\r\n\t                var pt = points[i];\r\n\t                var size = sizes[i];\r\n\t                if (size[0] < 4) {\r\n\t                    // Optimize for small symbol\r\n\t                    path.rect(\r\n\t                        pt[0] - size[0] / 2, pt[1] - size[1] / 2,\r\n\t                        size[0], size[1]\r\n\t                    );\r\n\t                }\r\n\t                else {\r\n\t                    symbolProxyShape.x = pt[0] - size[0] / 2;\r\n\t                    symbolProxyShape.y = pt[1] - size[1] / 2;\r\n\t                    symbolProxyShape.width = size[0];\r\n\t                    symbolProxyShape.height = size[1];\r\n\r\n\t                    symbolProxy.buildPath(path, symbolProxyShape, true);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        findDataIndex: function (x, y) {\r\n\t            var shape = this.shape;\r\n\t            var points = shape.points;\r\n\t            var sizes = shape.sizes;\r\n\r\n\t            // Not consider transform\r\n\t            // Treat each element as a rect\r\n\t            // top down traverse\r\n\t            for (var i = points.length - 1; i >= 0; i--) {\r\n\t                var pt = points[i];\r\n\t                var size = sizes[i];\r\n\t                var x0 = pt[0] - size[0] / 2;\r\n\t                var y0 = pt[1] - size[1] / 2;\r\n\t                if (x >= x0 && y >= y0 && x <= x0 + size[0] && y <= y0 + size[1]) {\r\n\t                    // i is dataIndex\r\n\t                    return i;\r\n\t                }\r\n\t            }\r\n\r\n\t            return -1;\r\n\t        }\r\n\t    });\r\n\r\n\t    function LargeSymbolDraw() {\r\n\t        this.group = new graphic.Group();\r\n\r\n\t        this._symbolEl = new LargeSymbolPath({\r\n\t            // rectHover: true,\r\n\t            // cursor: 'default'\r\n\t        });\r\n\t    }\r\n\r\n\t    var largeSymbolProto = LargeSymbolDraw.prototype;\r\n\r\n\t    /**\r\n\t     * Update symbols draw by new data\r\n\t     * @param {module:echarts/data/List} data\r\n\t     */\r\n\t    largeSymbolProto.updateData = function (data) {\r\n\t        this.group.removeAll();\r\n\r\n\t        var symbolEl = this._symbolEl;\r\n\r\n\t        var seriesModel = data.hostModel;\r\n\r\n\t        symbolEl.setShape({\r\n\t            points: data.mapArray(data.getItemLayout),\r\n\t            sizes: data.mapArray(\r\n\t                function (idx) {\r\n\t                    var size = data.getItemVisual(idx, 'symbolSize');\r\n\t                    if (!(size instanceof Array)) {\r\n\t                        size = [size, size];\r\n\t                    }\r\n\t                    return size;\r\n\t                }\r\n\t            )\r\n\t        });\r\n\r\n\t        // Create symbolProxy to build path for each data\r\n\t        symbolEl.symbolProxy = symbolUtil.createSymbol(\r\n\t            data.getVisual('symbol'), 0, 0, 0, 0\r\n\t        );\r\n\t        // Use symbolProxy setColor method\r\n\t        symbolEl.setColor = symbolEl.symbolProxy.setColor;\r\n\r\n\t        symbolEl.useStyle(\r\n\t            seriesModel.getModel('itemStyle.normal').getItemStyle(['color'])\r\n\t        );\r\n\r\n\t        var visualColor = data.getVisual('color');\r\n\t        if (visualColor) {\r\n\t            symbolEl.setColor(visualColor);\r\n\t        }\r\n\r\n\t        // Enable tooltip\r\n\t        // PENDING May have performance issue when path is extremely large\r\n\t        symbolEl.seriesIndex = seriesModel.seriesIndex;\r\n\t        symbolEl.on('mousemove', function (e) {\r\n\t            symbolEl.dataIndex = null;\r\n\t            var dataIndex = symbolEl.findDataIndex(e.offsetX, e.offsetY);\r\n\t            if (dataIndex > 0) {\r\n\t                // Provide dataIndex for tooltip\r\n\t                symbolEl.dataIndex = dataIndex;\r\n\t            }\r\n\t        });\r\n\r\n\t        // Add back\r\n\t        this.group.add(symbolEl);\r\n\t    };\r\n\r\n\t    largeSymbolProto.updateLayout = function (seriesModel) {\r\n\t        var data = seriesModel.getData();\r\n\t        this._symbolEl.setShape({\r\n\t            points: data.mapArray(data.getItemLayout)\r\n\t        });\r\n\t    };\r\n\r\n\t    largeSymbolProto.remove = function () {\r\n\t        this.group.removeAll();\r\n\t    };\r\n\r\n\t    module.exports = LargeSymbolDraw;\r\n\r\n\r\n/***/ },\r\n/* 152 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    // Must use radar component\r\n\t    __webpack_require__(153);\r\n\r\n\t    __webpack_require__(158);\r\n\t    __webpack_require__(159);\r\n\r\n\t    echarts.registerVisual(zrUtil.curry(__webpack_require__(144), 'radar'));\r\n\t    echarts.registerVisual(zrUtil.curry(\r\n\t        __webpack_require__(109), 'radar', 'circle', null\r\n\t    ));\r\n\t    echarts.registerLayout(__webpack_require__(160));\r\n\r\n\t    echarts.registerProcessor(\r\n\t        zrUtil.curry(__webpack_require__(147), 'radar')\r\n\t    );\r\n\r\n\t    echarts.registerPreprocessor(__webpack_require__(161));\r\n\r\n\r\n/***/ },\r\n/* 153 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(154);\r\n\t    __webpack_require__(156);\r\n\r\n\t    __webpack_require__(157);\r\n\r\n\r\n/***/ },\r\n/* 154 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// TODO clockwise\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var IndicatorAxis = __webpack_require__(155);\r\n\t    var IntervalScale = __webpack_require__(117);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var axisHelper = __webpack_require__(114);\r\n\r\n\t    function Radar(radarModel, ecModel, api) {\r\n\r\n\t        this._model = radarModel;\r\n\t        /**\r\n\t         * Radar dimensions\r\n\t         * @type {Array.<string>}\r\n\t         */\r\n\t        this.dimensions = [];\r\n\r\n\t        this._indicatorAxes = zrUtil.map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {\r\n\t            var dim = 'indicator_' + idx;\r\n\t            var indicatorAxis = new IndicatorAxis(dim, new IntervalScale());\r\n\t            indicatorAxis.name = indicatorModel.get('name');\r\n\t            // Inject model and axis\r\n\t            indicatorAxis.model = indicatorModel;\r\n\t            indicatorModel.axis = indicatorAxis;\r\n\t            this.dimensions.push(dim);\r\n\t            return indicatorAxis;\r\n\t        }, this);\r\n\r\n\t        this.resize(radarModel, api);\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.cx;\r\n\t        /**\r\n\t         * @type {number}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.cy;\r\n\t        /**\r\n\t         * @type {number}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.r;\r\n\t        /**\r\n\t         * @type {number}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.startAngle;\r\n\t    }\r\n\r\n\t    Radar.prototype.getIndicatorAxes = function () {\r\n\t        return this._indicatorAxes;\r\n\t    };\r\n\r\n\t    Radar.prototype.dataToPoint = function (value, indicatorIndex) {\r\n\t        var indicatorAxis = this._indicatorAxes[indicatorIndex];\r\n\r\n\t        return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);\r\n\t    };\r\n\r\n\t    Radar.prototype.coordToPoint = function (coord, indicatorIndex) {\r\n\t        var indicatorAxis = this._indicatorAxes[indicatorIndex];\r\n\t        var angle = indicatorAxis.angle;\r\n\t        var x = this.cx + coord * Math.cos(angle);\r\n\t        var y = this.cy - coord * Math.sin(angle);\r\n\t        return [x, y];\r\n\t    };\r\n\r\n\t    Radar.prototype.pointToData = function (pt) {\r\n\t        var dx = pt[0] - this.cx;\r\n\t        var dy = pt[1] - this.cy;\r\n\t        var radius = Math.sqrt(dx * dx + dy * dy);\r\n\t        dx /= radius;\r\n\t        dy /= radius;\r\n\r\n\t        var radian = Math.atan2(-dy, dx);\r\n\r\n\t        // Find the closest angle\r\n\t        // FIXME index can calculated directly\r\n\t        var minRadianDiff = Infinity;\r\n\t        var closestAxis;\r\n\t        var closestAxisIdx = -1;\r\n\t        for (var i = 0; i < this._indicatorAxes.length; i++) {\r\n\t            var indicatorAxis = this._indicatorAxes[i];\r\n\t            var diff = Math.abs(radian - indicatorAxis.angle);\r\n\t            if (diff < minRadianDiff) {\r\n\t                closestAxis = indicatorAxis;\r\n\t                closestAxisIdx = i;\r\n\t                minRadianDiff = diff;\r\n\t            }\r\n\t        }\r\n\r\n\t        return [closestAxisIdx, +(closestAxis && closestAxis.coodToData(radius))];\r\n\t    };\r\n\r\n\t    Radar.prototype.resize = function (radarModel, api) {\r\n\t        var center = radarModel.get('center');\r\n\t        var viewWidth = api.getWidth();\r\n\t        var viewHeight = api.getHeight();\r\n\t        var viewSize = Math.min(viewWidth, viewHeight) / 2;\r\n\t        this.cx = numberUtil.parsePercent(center[0], viewWidth);\r\n\t        this.cy = numberUtil.parsePercent(center[1], viewHeight);\r\n\r\n\t        this.startAngle = radarModel.get('startAngle') * Math.PI / 180;\r\n\r\n\t        this.r = numberUtil.parsePercent(radarModel.get('radius'), viewSize);\r\n\r\n\t        zrUtil.each(this._indicatorAxes, function (indicatorAxis, idx) {\r\n\t            indicatorAxis.setExtent(0, this.r);\r\n\t            var angle = (this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length);\r\n\t            // Normalize to [-PI, PI]\r\n\t            angle = Math.atan2(Math.sin(angle), Math.cos(angle));\r\n\t            indicatorAxis.angle = angle;\r\n\t        }, this);\r\n\t    };\r\n\r\n\t    Radar.prototype.update = function (ecModel, api) {\r\n\t        var indicatorAxes = this._indicatorAxes;\r\n\t        var radarModel = this._model;\r\n\t        zrUtil.each(indicatorAxes, function (indicatorAxis) {\r\n\t            indicatorAxis.scale.setExtent(Infinity, -Infinity);\r\n\t        });\r\n\t        ecModel.eachSeriesByType('radar', function (radarSeries, idx) {\r\n\t            if (radarSeries.get('coordinateSystem') !== 'radar'\r\n\t                || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel\r\n\t            ) {\r\n\t                return;\r\n\t            }\r\n\t            var data = radarSeries.getData();\r\n\t            zrUtil.each(indicatorAxes, function (indicatorAxis) {\r\n\t                indicatorAxis.scale.unionExtent(data.getDataExtent(indicatorAxis.dim));\r\n\t            });\r\n\t        }, this);\r\n\r\n\t        var splitNumber = radarModel.get('splitNumber');\r\n\r\n\t        function increaseInterval(interval) {\r\n\t            var exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10));\r\n\t            // Increase interval\r\n\t            var f = interval / exp10;\r\n\t            if (f === 2) {\r\n\t                f = 5;\r\n\t            }\r\n\t            else { // f is 2 or 5\r\n\t                f *= 2;\r\n\t            }\r\n\t            return f * exp10;\r\n\t        }\r\n\t        // Force all the axis fixing the maxSplitNumber.\r\n\t        zrUtil.each(indicatorAxes, function (indicatorAxis, idx) {\r\n\t            var rawExtent = axisHelper.getScaleExtent(indicatorAxis, indicatorAxis.model);\r\n\t            axisHelper.niceScaleExtent(indicatorAxis, indicatorAxis.model);\r\n\r\n\t            var axisModel = indicatorAxis.model;\r\n\t            var scale = indicatorAxis.scale;\r\n\t            var fixedMin = axisModel.get('min');\r\n\t            var fixedMax = axisModel.get('max');\r\n\t            var interval = scale.getInterval();\r\n\r\n\t            if (fixedMin != null && fixedMax != null) {\r\n\t                // User set min, max, divide to get new interval\r\n\t                // FIXME precision\r\n\t                scale.setInterval(\r\n\t                    (fixedMax - fixedMin) / splitNumber\r\n\t                );\r\n\t            }\r\n\t            else if (fixedMin != null) {\r\n\t                var max;\r\n\t                // User set min, expand extent on the other side\r\n\t                do {\r\n\t                    max = fixedMin + interval * splitNumber;\r\n\t                    scale.setExtent(+fixedMin, max);\r\n\t                    // Interval must been set after extent\r\n\t                    // FIXME\r\n\t                    scale.setInterval(interval);\r\n\r\n\t                    interval = increaseInterval(interval);\r\n\t                } while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1]));\r\n\t            }\r\n\t            else if (fixedMax != null) {\r\n\t                var min;\r\n\t                // User set min, expand extent on the other side\r\n\t                do {\r\n\t                    min = fixedMax - interval * splitNumber;\r\n\t                    scale.setExtent(min, +fixedMax);\r\n\t                    scale.setInterval(interval);\r\n\t                    interval = increaseInterval(interval);\r\n\t                } while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0]));\r\n\t            }\r\n\t            else {\r\n\t                var nicedSplitNumber = scale.getTicks().length - 1;\r\n\t                if (nicedSplitNumber > splitNumber) {\r\n\t                    interval = increaseInterval(interval);\r\n\t                }\r\n\t                // PENDING\r\n\t                var center = Math.round((rawExtent[0] + rawExtent[1]) / 2 / interval) * interval;\r\n\t                var halfSplitNumber = Math.round(splitNumber / 2);\r\n\t                scale.setExtent(\r\n\t                    numberUtil.round(center - halfSplitNumber * interval),\r\n\t                    numberUtil.round(center + (splitNumber - halfSplitNumber) * interval)\r\n\t                );\r\n\t                scale.setInterval(interval);\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Radar dimensions is based on the data\r\n\t     * @type {Array}\r\n\t     */\r\n\t    Radar.dimensions = [];\r\n\r\n\t    Radar.create = function (ecModel, api) {\r\n\t        var radarList = [];\r\n\t        ecModel.eachComponent('radar', function (radarModel) {\r\n\t            var radar = new Radar(radarModel, ecModel, api);\r\n\t            radarList.push(radar);\r\n\t            radarModel.coordinateSystem = radar;\r\n\t        });\r\n\t        ecModel.eachSeriesByType('radar', function (radarSeries) {\r\n\t            if (radarSeries.get('coordinateSystem') === 'radar') {\r\n\t                // Inject coordinate system\r\n\t                radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];\r\n\t            }\r\n\t        });\r\n\t        return radarList;\r\n\t    };\r\n\r\n\t    __webpack_require__(26).register('radar', Radar);\r\n\t    module.exports = Radar;\r\n\r\n\r\n/***/ },\r\n/* 155 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Axis = __webpack_require__(123);\r\n\r\n\t    function IndicatorAxis(dim, scale, radiusExtent) {\r\n\t        Axis.call(this, dim, scale, radiusExtent);\r\n\r\n\t        /**\r\n\t         * Axis type\r\n\t         *  - 'category'\r\n\t         *  - 'value'\r\n\t         *  - 'time'\r\n\t         *  - 'log'\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.type = 'value';\r\n\r\n\t        this.angle = 0;\r\n\r\n\t        /**\r\n\t         * Indicator name\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.name = '';\r\n\t        /**\r\n\t         * @type {module:echarts/model/Model}\r\n\t         */\r\n\t        this.model;\r\n\t    }\r\n\r\n\t    zrUtil.inherits(IndicatorAxis, Axis);\r\n\r\n\t    module.exports = IndicatorAxis;\r\n\r\n\r\n/***/ },\r\n/* 156 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\r\n\t    var axisDefault = __webpack_require__(128);\r\n\t    var valueAxisDefault = axisDefault.valueAxis;\r\n\t    var Model = __webpack_require__(12);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var axisModelCommonMixin = __webpack_require__(129);\r\n\r\n\t    function defaultsShow(opt, show) {\r\n\t        return zrUtil.defaults({\r\n\t            show: show\r\n\t        }, opt);\r\n\t    }\r\n\r\n\t    var RadarModel = __webpack_require__(1).extendComponentModel({\r\n\r\n\t        type: 'radar',\r\n\r\n\t        optionUpdated: function () {\r\n\t            var boundaryGap = this.get('boundaryGap');\r\n\t            var splitNumber = this.get('splitNumber');\r\n\t            var scale = this.get('scale');\r\n\t            var axisLine = this.get('axisLine');\r\n\t            var axisTick = this.get('axisTick');\r\n\t            var axisLabel = this.get('axisLabel');\r\n\t            var nameTextStyle = this.get('name.textStyle');\r\n\t            var showName = this.get('name.show');\r\n\t            var nameFormatter = this.get('name.formatter');\r\n\t            var nameGap = this.get('nameGap');\r\n\t            var triggerEvent = this.get('triggerEvent');\r\n\r\n\t            var indicatorModels = zrUtil.map(this.get('indicator') || [], function (indicatorOpt) {\r\n\t                // PENDING\r\n\t                if (indicatorOpt.max != null && indicatorOpt.max > 0 && !indicatorOpt.min) {\r\n\t                    indicatorOpt.min = 0;\r\n\t                }\r\n\t                else if (indicatorOpt.min != null && indicatorOpt.min < 0 && !indicatorOpt.max) {\r\n\t                    indicatorOpt.max = 0;\r\n\t                }\r\n\t                // Use same configuration\r\n\t                indicatorOpt = zrUtil.merge(zrUtil.clone(indicatorOpt), {\r\n\t                    boundaryGap: boundaryGap,\r\n\t                    splitNumber: splitNumber,\r\n\t                    scale: scale,\r\n\t                    axisLine: axisLine,\r\n\t                    axisTick: axisTick,\r\n\t                    axisLabel: axisLabel,\r\n\t                    // Competitable with 2 and use text\r\n\t                    name: indicatorOpt.text,\r\n\t                    nameLocation: 'end',\r\n\t                    nameGap: nameGap,\r\n\t                    // min: 0,\r\n\t                    nameTextStyle: nameTextStyle,\r\n\t                    triggerEvent: triggerEvent\r\n\t                }, false);\r\n\t                if (!showName) {\r\n\t                    indicatorOpt.name = '';\r\n\t                }\r\n\t                if (typeof nameFormatter === 'string') {\r\n\t                    indicatorOpt.name = nameFormatter.replace('{value}', indicatorOpt.name);\r\n\t                }\r\n\t                else if (typeof nameFormatter === 'function') {\r\n\t                    indicatorOpt.name = nameFormatter(\r\n\t                        indicatorOpt.name, indicatorOpt\r\n\t                    );\r\n\t                }\r\n\t                var model = zrUtil.extend(\r\n\t                    new Model(indicatorOpt, null, this.ecModel),\r\n\t                    axisModelCommonMixin\r\n\t                );\r\n\r\n\t                // For triggerEvent.\r\n\t                model.mainType = 'radar';\r\n\t                model.componentIndex = this.componentIndex;\r\n\r\n\t                return model;\r\n\t            }, this);\r\n\r\n\t            this.getIndicatorModels = function () {\r\n\t                return indicatorModels;\r\n\t            };\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\r\n\t            zlevel: 0,\r\n\r\n\t            z: 0,\r\n\r\n\t            center: ['50%', '50%'],\r\n\r\n\t            radius: '75%',\r\n\r\n\t            startAngle: 90,\r\n\r\n\t            name: {\r\n\t                show: true\r\n\t                // formatter: null\r\n\t                // textStyle: {}\r\n\t            },\r\n\r\n\t            boundaryGap: [0, 0],\r\n\r\n\t            splitNumber: 5,\r\n\r\n\t            nameGap: 15,\r\n\r\n\t            scale: false,\r\n\r\n\t            // Polygon or circle\r\n\t            shape: 'polygon',\r\n\r\n\t            axisLine: zrUtil.merge(\r\n\t                {\r\n\t                    lineStyle: {\r\n\t                        color: '#bbb'\r\n\t                    }\r\n\t                },\r\n\t                valueAxisDefault.axisLine\r\n\t            ),\r\n\t            axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),\r\n\t            axisTick: defaultsShow(valueAxisDefault.axisTick, false),\r\n\t            splitLine: defaultsShow(valueAxisDefault.splitLine, true),\r\n\t            splitArea: defaultsShow(valueAxisDefault.splitArea, true),\r\n\r\n\t            // {text, min, max}\r\n\t            indicator: []\r\n\t        }\r\n\t    });\r\n\r\n\t    module.exports = RadarModel;\r\n\r\n\r\n/***/ },\r\n/* 157 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var AxisBuilder = __webpack_require__(133);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\r\n\t    var axisBuilderAttrs = [\r\n\t        'axisLine', 'axisLabel', 'axisTick', 'axisName'\r\n\t    ];\r\n\r\n\t    module.exports = __webpack_require__(1).extendComponentView({\r\n\r\n\t        type: 'radar',\r\n\r\n\t        render: function (radarModel, ecModel, api) {\r\n\t            var group = this.group;\r\n\t            group.removeAll();\r\n\r\n\t            this._buildAxes(radarModel);\r\n\t            this._buildSplitLineAndArea(radarModel);\r\n\t        },\r\n\r\n\t        _buildAxes: function (radarModel) {\r\n\t            var radar = radarModel.coordinateSystem;\r\n\t            var indicatorAxes = radar.getIndicatorAxes();\r\n\t            var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {\r\n\t                var axisBuilder = new AxisBuilder(indicatorAxis.model, {\r\n\t                    position: [radar.cx, radar.cy],\r\n\t                    rotation: indicatorAxis.angle,\r\n\t                    labelDirection: -1,\r\n\t                    tickDirection: -1,\r\n\t                    nameDirection: 1\r\n\t                });\r\n\t                return axisBuilder;\r\n\t            });\r\n\r\n\t            zrUtil.each(axisBuilders, function (axisBuilder) {\r\n\t                zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\r\n\t                this.group.add(axisBuilder.getGroup());\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        _buildSplitLineAndArea: function (radarModel) {\r\n\t            var radar = radarModel.coordinateSystem;\r\n\t            var splitNumber = radarModel.get('splitNumber');\r\n\t            var indicatorAxes = radar.getIndicatorAxes();\r\n\t            if (!indicatorAxes.length) {\r\n\t                return;\r\n\t            }\r\n\t            var shape = radarModel.get('shape');\r\n\t            var splitLineModel = radarModel.getModel('splitLine');\r\n\t            var splitAreaModel = radarModel.getModel('splitArea');\r\n\t            var lineStyleModel = splitLineModel.getModel('lineStyle');\r\n\t            var areaStyleModel = splitAreaModel.getModel('areaStyle');\r\n\r\n\t            var showSplitLine = splitLineModel.get('show');\r\n\t            var showSplitArea = splitAreaModel.get('show');\r\n\t            var splitLineColors = lineStyleModel.get('color');\r\n\t            var splitAreaColors = areaStyleModel.get('color');\r\n\r\n\t            splitLineColors = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];\r\n\t            splitAreaColors = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];\r\n\r\n\t            var splitLines = [];\r\n\t            var splitAreas = [];\r\n\r\n\t            function getColorIndex(areaOrLine, areaOrLineColorList, idx) {\r\n\t                var colorIndex = idx % areaOrLineColorList.length;\r\n\t                areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];\r\n\t                return colorIndex;\r\n\t            }\r\n\r\n\t            if (shape === 'circle') {\r\n\t                var ticksRadius = indicatorAxes[0].getTicksCoords();\r\n\t                var cx = radar.cx;\r\n\t                var cy = radar.cy;\r\n\t                for (var i = 0; i < ticksRadius.length; i++) {\r\n\t                    if (showSplitLine) {\r\n\t                        var colorIndex = getColorIndex(splitLines, splitLineColors, i);\r\n\t                        splitLines[colorIndex].push(new graphic.Circle({\r\n\t                            shape: {\r\n\t                                cx: cx,\r\n\t                                cy: cy,\r\n\t                                r: ticksRadius[i]\r\n\t                            }\r\n\t                        }));\r\n\t                    }\r\n\t                    if (showSplitArea && i < ticksRadius.length - 1) {\r\n\t                        var colorIndex = getColorIndex(splitAreas, splitAreaColors, i);\r\n\t                        splitAreas[colorIndex].push(new graphic.Ring({\r\n\t                            shape: {\r\n\t                                cx: cx,\r\n\t                                cy: cy,\r\n\t                                r0: ticksRadius[i],\r\n\t                                r: ticksRadius[i + 1]\r\n\t                            }\r\n\t                        }));\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            // Polyyon\r\n\t            else {\r\n\t                var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {\r\n\t                    var ticksCoords = indicatorAxis.getTicksCoords();\r\n\t                    return zrUtil.map(ticksCoords, function (tickCoord) {\r\n\t                        return radar.coordToPoint(tickCoord, idx);\r\n\t                    });\r\n\t                });\r\n\r\n\t                var prevPoints = [];\r\n\t                for (var i = 0; i <= splitNumber; i++) {\r\n\t                    var points = [];\r\n\t                    for (var j = 0; j < indicatorAxes.length; j++) {\r\n\t                        points.push(axesTicksPoints[j][i]);\r\n\t                    }\r\n\t                    // Close\r\n\t                    if (points[0]) {\r\n\t                        points.push(points[0].slice());\r\n\t                    }\r\n\t                    else {\r\n\t                        if (true) {\r\n\t                            console.error('Can\\'t draw value axis ' + i);\r\n\t                        }\r\n\t                    }\r\n\t                    if (showSplitLine) {\r\n\t                        var colorIndex = getColorIndex(splitLines, splitLineColors, i);\r\n\t                        splitLines[colorIndex].push(new graphic.Polyline({\r\n\t                            shape: {\r\n\t                                points: points\r\n\t                            }\r\n\t                        }));\r\n\t                    }\r\n\t                    if (showSplitArea && prevPoints) {\r\n\t                        var colorIndex = getColorIndex(splitAreas, splitAreaColors, i - 1);\r\n\t                        splitAreas[colorIndex].push(new graphic.Polygon({\r\n\t                            shape: {\r\n\t                                points: points.concat(prevPoints)\r\n\t                            }\r\n\t                        }));\r\n\t                    }\r\n\t                    prevPoints = points.slice().reverse();\r\n\t                }\r\n\t            }\r\n\r\n\t            var lineStyle = lineStyleModel.getLineStyle();\r\n\t            var areaStyle = areaStyleModel.getAreaStyle();\r\n\t            // Add splitArea before splitLine\r\n\t            zrUtil.each(splitAreas, function (splitAreas, idx) {\r\n\t                this.group.add(graphic.mergePath(\r\n\t                    splitAreas, {\r\n\t                        style: zrUtil.defaults({\r\n\t                            stroke: 'none',\r\n\t                            fill: splitAreaColors[idx % splitAreaColors.length]\r\n\t                        }, areaStyle),\r\n\t                        silent: true\r\n\t                    }\r\n\t                ));\r\n\t            }, this);\r\n\r\n\t            zrUtil.each(splitLines, function (splitLines, idx) {\r\n\t                this.group.add(graphic.mergePath(\r\n\t                    splitLines, {\r\n\t                        style: zrUtil.defaults({\r\n\t                            fill: 'none',\r\n\t                            stroke: splitLineColors[idx % splitLineColors.length]\r\n\t                        }, lineStyle),\r\n\t                        silent: true\r\n\t                    }\r\n\t                ));\r\n\t            }, this);\r\n\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 158 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\t    var List = __webpack_require__(97);\r\n\t    var completeDimensions = __webpack_require__(102);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var RadarSeries = SeriesModel.extend({\r\n\r\n\t        type: 'series.radar',\r\n\r\n\t        dependencies: ['radar'],\r\n\r\n\r\n\t        // Overwrite\r\n\t        init: function (option) {\r\n\t            RadarSeries.superApply(this, 'init', arguments);\r\n\r\n\t            // Enable legend selection for each data item\r\n\t            // Use a function instead of direct access because data reference may changed\r\n\t            this.legendDataProvider = function () {\r\n\t                return this._dataBeforeProcessed;\r\n\t            };\r\n\t        },\r\n\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            var data = option.data || [];\r\n\t            var dimensions = completeDimensions(\r\n\t                [], data, [], 'indicator_'\r\n\t            );\r\n\t            var list = new List(dimensions, this);\r\n\t            list.initData(data);\r\n\t            return list;\r\n\t        },\r\n\r\n\t        formatTooltip: function (dataIndex) {\r\n\t            var value = this.getRawValue(dataIndex);\r\n\t            var coordSys = this.coordinateSystem;\r\n\t            var indicatorAxes = coordSys.getIndicatorAxes();\r\n\t            return (this._data.getName(dataIndex) == '' ? this.name : this._data.getName(dataIndex)) + '<br/>'\r\n\t                + zrUtil.map(indicatorAxes, function (axis, idx) {\r\n\t                    return axis.name + ' : ' + value[idx];\r\n\t                }).join('<br />');\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,\r\n\t            z: 2,\r\n\t            coordinateSystem: 'radar',\r\n\t            legendHoverLink: true,\r\n\t            radarIndex: 0,\r\n\t            lineStyle: {\r\n\t                normal: {\r\n\t                    width: 2,\r\n\t                    type: 'solid'\r\n\t                }\r\n\t            },\r\n\t            label: {\r\n\t                normal: {\r\n\t                    position: 'top'\r\n\t                }\r\n\t            },\r\n\t            // areaStyle: {\r\n\t            // },\r\n\t            // itemStyle: {}\r\n\t            symbol: 'emptyCircle',\r\n\t            symbolSize: 4\r\n\t            // symbolRotate: null\r\n\t        }\r\n\t    });\r\n\r\n\t    module.exports = RadarSeries;\r\n\r\n\r\n/***/ },\r\n/* 159 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var symbolUtil = __webpack_require__(106);\r\n\r\n\t    function normalizeSymbolSize(symbolSize) {\r\n\t        if (!zrUtil.isArray(symbolSize)) {\r\n\t            symbolSize = [+symbolSize, +symbolSize];\r\n\t        }\r\n\t        return symbolSize;\r\n\t    }\r\n\t    module.exports = __webpack_require__(1).extendChartView({\r\n\t        type: 'radar',\r\n\r\n\t        render: function (seriesModel, ecModel, api) {\r\n\t            var polar = seriesModel.coordinateSystem;\r\n\t            var group = this.group;\r\n\r\n\t            var data = seriesModel.getData();\r\n\t            var oldData = this._data;\r\n\r\n\t            function createSymbol(data, idx) {\r\n\t                var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';\r\n\t                var color = data.getItemVisual(idx, 'color');\r\n\t                if (symbolType === 'none') {\r\n\t                    return;\r\n\t                }\r\n\t                var symbolPath = symbolUtil.createSymbol(\r\n\t                    symbolType, -0.5, -0.5, 1, 1, color\r\n\t                );\r\n\t                symbolPath.attr({\r\n\t                    style: {\r\n\t                        strokeNoScale: true\r\n\t                    },\r\n\t                    z2: 100,\r\n\t                    scale: normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'))\r\n\t                });\r\n\t                return symbolPath;\r\n\t            }\r\n\r\n\t            function updateSymbols(oldPoints, newPoints, symbolGroup, data, idx, isInit) {\r\n\t                // Simply rerender all\r\n\t                symbolGroup.removeAll();\r\n\t                for (var i = 0; i < newPoints.length - 1; i++) {\r\n\t                    var symbolPath = createSymbol(data, idx);\r\n\t                    if (symbolPath) {\r\n\t                        symbolPath.__dimIdx = i;\r\n\t                        if (oldPoints[i]) {\r\n\t                            symbolPath.attr('position', oldPoints[i]);\r\n\t                            graphic[isInit ? 'initProps' : 'updateProps'](\r\n\t                                symbolPath, {\r\n\t                                    position: newPoints[i]\r\n\t                                }, seriesModel, idx\r\n\t                            );\r\n\t                        }\r\n\t                        else {\r\n\t                            symbolPath.attr('position', newPoints[i]);\r\n\t                        }\r\n\t                        symbolGroup.add(symbolPath);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            function getInitialPoints(points) {\r\n\t                return zrUtil.map(points, function (pt) {\r\n\t                    return [polar.cx, polar.cy];\r\n\t                });\r\n\t            }\r\n\t            data.diff(oldData)\r\n\t                .add(function (idx) {\r\n\t                    var points = data.getItemLayout(idx);\r\n\t                    if (!points) {\r\n\t                        return;\r\n\t                    }\r\n\t                    var polygon = new graphic.Polygon();\r\n\t                    var polyline = new graphic.Polyline();\r\n\t                    var target = {\r\n\t                        shape: {\r\n\t                            points: points\r\n\t                        }\r\n\t                    };\r\n\t                    polygon.shape.points = getInitialPoints(points);\r\n\t                    polyline.shape.points = getInitialPoints(points);\r\n\t                    graphic.initProps(polygon, target, seriesModel, idx);\r\n\t                    graphic.initProps(polyline, target, seriesModel, idx);\r\n\r\n\t                    var itemGroup = new graphic.Group();\r\n\t                    var symbolGroup = new graphic.Group();\r\n\t                    itemGroup.add(polyline);\r\n\t                    itemGroup.add(polygon);\r\n\t                    itemGroup.add(symbolGroup);\r\n\r\n\t                    updateSymbols(\r\n\t                        polyline.shape.points, points, symbolGroup, data, idx, true\r\n\t                    );\r\n\r\n\t                    data.setItemGraphicEl(idx, itemGroup);\r\n\t                })\r\n\t                .update(function (newIdx, oldIdx) {\r\n\t                    var itemGroup = oldData.getItemGraphicEl(oldIdx);\r\n\t                    var polyline = itemGroup.childAt(0);\r\n\t                    var polygon = itemGroup.childAt(1);\r\n\t                    var symbolGroup = itemGroup.childAt(2);\r\n\t                    var target = {\r\n\t                        shape: {\r\n\t                            points: data.getItemLayout(newIdx)\r\n\t                        }\r\n\t                    };\r\n\t                    if (!target.shape.points) {\r\n\t                        return;\r\n\t                    }\r\n\t                    updateSymbols(\r\n\t                        polyline.shape.points, target.shape.points, symbolGroup, data, newIdx, false\r\n\t                    );\r\n\r\n\t                    graphic.updateProps(polyline, target, seriesModel);\r\n\t                    graphic.updateProps(polygon, target, seriesModel);\r\n\r\n\t                    data.setItemGraphicEl(newIdx, itemGroup);\r\n\t                })\r\n\t                .remove(function (idx) {\r\n\t                    group.remove(oldData.getItemGraphicEl(idx));\r\n\t                })\r\n\t                .execute();\r\n\r\n\t            data.eachItemGraphicEl(function (itemGroup, idx) {\r\n\t                var itemModel = data.getItemModel(idx);\r\n\t                var polyline = itemGroup.childAt(0);\r\n\t                var polygon = itemGroup.childAt(1);\r\n\t                var symbolGroup = itemGroup.childAt(2);\r\n\t                var color = data.getItemVisual(idx, 'color');\r\n\r\n\t                group.add(itemGroup);\r\n\r\n\t                polyline.useStyle(\r\n\t                    zrUtil.defaults(\r\n\t                        itemModel.getModel('lineStyle.normal').getLineStyle(),\r\n\t                        {\r\n\t                            fill: 'none',\r\n\t                            stroke: color\r\n\t                        }\r\n\t                    )\r\n\t                );\r\n\t                polyline.hoverStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();\r\n\r\n\t                var areaStyleModel = itemModel.getModel('areaStyle.normal');\r\n\t                var hoverAreaStyleModel = itemModel.getModel('areaStyle.emphasis');\r\n\t                var polygonIgnore = areaStyleModel.isEmpty() && areaStyleModel.parentModel.isEmpty();\r\n\t                var hoverPolygonIgnore = hoverAreaStyleModel.isEmpty() && hoverAreaStyleModel.parentModel.isEmpty();\r\n\r\n\t                hoverPolygonIgnore = hoverPolygonIgnore && polygonIgnore;\r\n\t                polygon.ignore = polygonIgnore;\r\n\r\n\t                polygon.useStyle(\r\n\t                    zrUtil.defaults(\r\n\t                        areaStyleModel.getAreaStyle(),\r\n\t                        {\r\n\t                            fill: color,\r\n\t                            opacity: 0.7\r\n\t                        }\r\n\t                    )\r\n\t                );\r\n\t                polygon.hoverStyle = hoverAreaStyleModel.getAreaStyle();\r\n\r\n\t                var itemStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);\r\n\t                var itemHoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();\r\n\t                var labelModel = itemModel.getModel('label.normal');\r\n\t                var labelHoverModel = itemModel.getModel('label.emphasis');\r\n\t                symbolGroup.eachChild(function (symbolPath) {\r\n\t                    symbolPath.setStyle(itemStyle);\r\n\t                    symbolPath.hoverStyle = zrUtil.clone(itemHoverStyle);\r\n\r\n\t                    var defaultText = data.get(data.dimensions[symbolPath.__dimIdx], idx);\r\n\t                    graphic.setText(symbolPath.style, labelModel, color);\r\n\t                    symbolPath.setStyle({\r\n\t                        text: labelModel.get('show') ? zrUtil.retrieve(\r\n\t                            seriesModel.getFormattedLabel(\r\n\t                                idx, 'normal', null, symbolPath.__dimIdx\r\n\t                            ),\r\n\t                            defaultText\r\n\t                        ) : ''\r\n\t                    });\r\n\r\n\t                    graphic.setText(symbolPath.hoverStyle, labelHoverModel, color);\r\n\t                    symbolPath.hoverStyle.text = labelHoverModel.get('show') ? zrUtil.retrieve(\r\n\t                        seriesModel.getFormattedLabel(\r\n\t                            idx, 'emphasis', null, symbolPath.__dimIdx\r\n\t                        ),\r\n\t                        defaultText\r\n\t                    ) : '';\r\n\t                });\r\n\r\n\t                function onEmphasis() {\r\n\t                    polygon.attr('ignore', hoverPolygonIgnore);\r\n\t                }\r\n\r\n\t                function onNormal() {\r\n\t                    polygon.attr('ignore', polygonIgnore);\r\n\t                }\r\n\r\n\t                itemGroup.off('mouseover').off('mouseout').off('normal').off('emphasis');\r\n\t                itemGroup.on('emphasis', onEmphasis)\r\n\t                    .on('mouseover', onEmphasis)\r\n\t                    .on('normal', onNormal)\r\n\t                    .on('mouseout', onNormal);\r\n\r\n\t                graphic.setHoverStyle(itemGroup);\r\n\t            });\r\n\r\n\t            this._data = data;\r\n\t        },\r\n\r\n\t        remove: function () {\r\n\t            this.group.removeAll();\r\n\t            this._data = null;\r\n\t        },\r\n\r\n\t        dispose: function () {}\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 160 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    module.exports = function (ecModel) {\r\n\t        ecModel.eachSeriesByType('radar', function (seriesModel) {\r\n\t            var data = seriesModel.getData();\r\n\t            var points = [];\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            if (!coordSys) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            function pointsConverter(val, idx) {\r\n\t                points[idx] = points[idx] || [];\r\n\t                points[idx][i] = coordSys.dataToPoint(val, i);\r\n\t            }\r\n\t            for (var i = 0; i < coordSys.getIndicatorAxes().length; i++) {\r\n\t                var dim = data.dimensions[i];\r\n\t                data.each(dim, pointsConverter);\r\n\t            }\r\n\r\n\t            data.each(function (idx) {\r\n\t                // Close polygon\r\n\t                points[idx][0] && points[idx].push(points[idx][0].slice());\r\n\t                data.setItemLayout(idx, points[idx]);\r\n\t            });\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 161 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// Backward compat for radar chart in 2\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    module.exports = function (option) {\r\n\t        var polarOptArr = option.polar;\r\n\t        if (polarOptArr) {\r\n\t            if (!zrUtil.isArray(polarOptArr)) {\r\n\t                polarOptArr = [polarOptArr];\r\n\t            }\r\n\t            var polarNotRadar = [];\r\n\t            zrUtil.each(polarOptArr, function (polarOpt, idx) {\r\n\t                if (polarOpt.indicator) {\r\n\t                    if (polarOpt.type && !polarOpt.shape) {\r\n\t                        polarOpt.shape = polarOpt.type;\r\n\t                    }\r\n\t                    option.radar = option.radar || [];\r\n\t                    if (!zrUtil.isArray(option.radar)) {\r\n\t                        option.radar = [option.radar];\r\n\t                    }\r\n\t                    option.radar.push(polarOpt);\r\n\t                }\r\n\t                else {\r\n\t                    polarNotRadar.push(polarOpt);\r\n\t                }\r\n\t            });\r\n\t            option.polar = polarNotRadar;\r\n\t        }\r\n\t        zrUtil.each(option.series, function (seriesOpt) {\r\n\t            if (seriesOpt.type === 'radar' && seriesOpt.polarIndex) {\r\n\t                seriesOpt.radarIndex = seriesOpt.polarIndex;\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 162 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var PRIORITY = echarts.PRIORITY;\r\n\r\n\t    __webpack_require__(163);\r\n\r\n\t    __webpack_require__(173);\r\n\r\n\t    __webpack_require__(177);\r\n\r\n\t    __webpack_require__(164);\r\n\r\n\t    echarts.registerLayout(__webpack_require__(179));\r\n\r\n\t    echarts.registerVisual(__webpack_require__(180));\r\n\r\n\t    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, __webpack_require__(181));\r\n\r\n\t    echarts.registerPreprocessor(__webpack_require__(182));\r\n\r\n\t    __webpack_require__(143)('map', [{\r\n\t        type: 'mapToggleSelect',\r\n\t        event: 'mapselectchanged',\r\n\t        method: 'toggleSelected'\r\n\t    }, {\r\n\t        type: 'mapSelect',\r\n\t        event: 'mapselected',\r\n\t        method: 'select'\r\n\t    }, {\r\n\t        type: 'mapUnSelect',\r\n\t        event: 'mapunselected',\r\n\t        method: 'unSelect'\r\n\t    }]);\r\n\r\n\r\n/***/ },\r\n/* 163 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var List = __webpack_require__(97);\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var completeDimensions = __webpack_require__(102);\r\n\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var encodeHTML = formatUtil.encodeHTML;\r\n\t    var addCommas = formatUtil.addCommas;\r\n\r\n\t    var dataSelectableMixin = __webpack_require__(141);\r\n\r\n\t    var geoCreator = __webpack_require__(164);\r\n\r\n\t    var MapSeries = SeriesModel.extend({\r\n\r\n\t        type: 'series.map',\r\n\r\n\t        layoutMode: 'box',\r\n\r\n\t        /**\r\n\t         * Only first map series of same mapType will drawMap\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        needsDrawMap: false,\r\n\r\n\t        /**\r\n\t         * Group of all map series with same mapType\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        seriesGroup: [],\r\n\r\n\t        init: function (option) {\r\n\r\n\t            option = this._fillOption(option, option.map);\r\n\t            this.option = option;\r\n\r\n\t            MapSeries.superApply(this, 'init', arguments);\r\n\r\n\t            this.updateSelectedMap(option.data);\r\n\t        },\r\n\r\n\t        getInitialData: function (option) {\r\n\t            var dimensions = completeDimensions(['value'], option.data || []);\r\n\r\n\t            var list = new List(dimensions, this);\r\n\r\n\t            list.initData(option.data);\r\n\r\n\t            return list;\r\n\t        },\r\n\r\n\t        mergeOption: function (newOption) {\r\n\t            if (newOption.data) {\r\n\t                newOption = this._fillOption(newOption, this.option.map);\r\n\t            }\r\n\r\n\t            MapSeries.superCall(this, 'mergeOption', newOption);\r\n\r\n\t            this.updateSelectedMap(this.option.data);\r\n\t        },\r\n\r\n\t        _fillOption: function (option, mapName) {\r\n\t            // Shallow clone\r\n\t            option = zrUtil.extend({}, option);\r\n\r\n\t            option.data = geoCreator.getFilledRegions(option.data, mapName);\r\n\r\n\t            return option;\r\n\t        },\r\n\r\n\t        getRawValue: function (dataIndex) {\r\n\t            // Use value stored in data instead because it is calculated from multiple series\r\n\t            // FIXME Provide all value of multiple series ?\r\n\t            return this._data.get('value', dataIndex);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get model of region\r\n\t         * @param  {string} name\r\n\t         * @return {module:echarts/model/Model}\r\n\t         */\r\n\t        getRegionModel: function (regionName) {\r\n\t            var data = this.getData();\r\n\t            return data.getItemModel(data.indexOfName(regionName));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Map tooltip formatter\r\n\t         *\r\n\t         * @param {number} dataIndex\r\n\t         */\r\n\t        formatTooltip: function (dataIndex) {\r\n\t            // FIXME orignalData and data is a bit confusing\r\n\t            var data = this.getData();\r\n\t            var formattedValue = addCommas(this.getRawValue(dataIndex));\r\n\t            var name = data.getName(dataIndex);\r\n\r\n\t            var seriesGroup = this.seriesGroup;\r\n\t            var seriesNames = [];\r\n\t            for (var i = 0; i < seriesGroup.length; i++) {\r\n\t                var otherIndex = seriesGroup[i].originalData.indexOfName(name);\r\n\t                if (!isNaN(seriesGroup[i].originalData.get('value', otherIndex))) {\r\n\t                    seriesNames.push(\r\n\t                        encodeHTML(seriesGroup[i].name)\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\r\n\t            return seriesNames.join(', ') + '<br />'\r\n\t                + name + ' : ' + formattedValue;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @implement\r\n\t         */\r\n\t        getTooltipPosition: function (dataIndex) {\r\n\t            if (dataIndex != null) {\r\n\t                var name = this.getData().getName(dataIndex);\r\n\t                var geo = this.coordinateSystem;\r\n\t                var region = geo.getRegion(name);\r\n\r\n\t                return region && geo.dataToPoint(region.center);\r\n\t            }\r\n\t        },\r\n\r\n\t        setZoom: function (zoom) {\r\n\t            this.option.zoom = zoom;\r\n\t        },\r\n\r\n\t        setCenter: function (center) {\r\n\t            this.option.center = center;\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\t            // 一级层叠\r\n\t            zlevel: 0,\r\n\t            // 二级层叠\r\n\t            z: 2,\r\n\t            coordinateSystem: 'geo',\r\n\t            // 各省的 map 暂时都用中文\r\n\t            map: 'china',\r\n\r\n\t            // 'center' | 'left' | 'right' | 'x%' | {number}\r\n\t            left: 'center',\r\n\t            // 'center' | 'top' | 'bottom' | 'x%' | {number}\r\n\t            top: 'center',\r\n\t            // right\r\n\t            // bottom\r\n\t            // width:\r\n\t            // height\r\n\r\n\t            // Aspect is width / height. Inited to be geoJson bbox aspect\r\n\t            // This parameter is used for scale this aspect\r\n\t            aspectScale: 0.75,\r\n\r\n\t            ///// Layout with center and size\r\n\t            // If you wan't to put map in a fixed size box with right aspect ratio\r\n\t            // This two properties may more conveninet\r\n\t            // layoutCenter: [50%, 50%]\r\n\t            // layoutSize: 100\r\n\r\n\r\n\t            // 数值合并方式，默认加和，可选为：\r\n\t            // 'sum' | 'average' | 'max' | 'min'\r\n\t            // mapValueCalculation: 'sum',\r\n\t            // 地图数值计算结果小数精度\r\n\t            // mapValuePrecision: 0,\r\n\r\n\r\n\t            // 显示图例颜色标识（系列标识的小圆点），图例开启时有效\r\n\t            showLegendSymbol: true,\r\n\t            // 选择模式，默认关闭，可选single，multiple\r\n\t            // selectedMode: false,\r\n\t            dataRangeHoverLink: true,\r\n\t            // 是否开启缩放及漫游模式\r\n\t            // roam: false,\r\n\r\n\t            // Default on center of map\r\n\t            center: null,\r\n\r\n\t            zoom: 1,\r\n\r\n\t            scaleLimit: null,\r\n\r\n\t            label: {\r\n\t                normal: {\r\n\t                    show: false,\r\n\t                    textStyle: {\r\n\t                        color: '#000'\r\n\t                    }\r\n\t                },\r\n\t                emphasis: {\r\n\t                    show: true,\r\n\t                    textStyle: {\r\n\t                        color: 'rgb(100,0,0)'\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\t            // scaleLimit: null,\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    // color: 各异,\r\n\t                    borderWidth: 0.5,\r\n\t                    borderColor: '#444',\r\n\t                    areaColor: '#eee'\r\n\t                },\r\n\t                // 也是选中样式\r\n\t                emphasis: {\r\n\t                    areaColor: 'rgba(255,215,0,0.8)'\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    zrUtil.mixin(MapSeries, dataSelectableMixin);\r\n\r\n\t    module.exports = MapSeries;\r\n\r\n\r\n/***/ },\r\n/* 164 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var Geo = __webpack_require__(165);\r\n\r\n\t    var layout = __webpack_require__(21);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\r\n\t    var mapDataStores = {};\r\n\r\n\t    /**\r\n\t     * Resize method bound to the geo\r\n\t     * @param {module:echarts/coord/geo/GeoModel|module:echarts/chart/map/MapModel} geoModel\r\n\t     * @param {module:echarts/ExtensionAPI} api\r\n\t     */\r\n\t    function resizeGeo (geoModel, api) {\r\n\t        var rect = this.getBoundingRect();\r\n\r\n\t        var boxLayoutOption;\r\n\r\n\t        var center = geoModel.get('layoutCenter');\r\n\t        var size = geoModel.get('layoutSize');\r\n\r\n\t        var viewWidth = api.getWidth();\r\n\t        var viewHeight = api.getHeight();\r\n\r\n\t        var aspectScale = geoModel.get('aspectScale') || 0.75;\r\n\t        var aspect = rect.width / rect.height * aspectScale;\r\n\r\n\t        var useCenterAndSize = false;\r\n\t        if (center && size) {\r\n\t            center = [\r\n\t                numberUtil.parsePercent(center[0], viewWidth),\r\n\t                numberUtil.parsePercent(center[1], viewHeight)\r\n\t            ];\r\n\t            size = numberUtil.parsePercent(size, Math.min(viewWidth, viewHeight));\r\n\r\n\t            if (!isNaN(center[0]) && !isNaN(center[1]) && !isNaN(size)) {\r\n\t                useCenterAndSize = true;\r\n\t            }\r\n\t            else {\r\n\t                if (true) {\r\n\t                    console.warn('Given layoutCenter or layoutSize data are invalid. Use left/top/width/height instead.');\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        var viewRect;\r\n\t        if (useCenterAndSize) {\r\n\t            var viewRect = {};\r\n\t            if (aspect > 1) {\r\n\t                // Width is same with size\r\n\t                viewRect.width = size;\r\n\t                viewRect.height = size / aspect;\r\n\t            }\r\n\t            else {\r\n\t                viewRect.height = size;\r\n\t                viewRect.width = size * aspect;\r\n\t            }\r\n\t            viewRect.y = center[1] - viewRect.height / 2;\r\n\t            viewRect.x = center[0] - viewRect.width / 2;\r\n\t        }\r\n\t        else {\r\n\t            // Use left/top/width/height\r\n\t            boxLayoutOption = geoModel.getBoxLayoutParams();\r\n\r\n\t            // 0.75 rate\r\n\t            boxLayoutOption.aspect = aspect;\r\n\r\n\t            viewRect = layout.getLayoutRect(boxLayoutOption, {\r\n\t                width: viewWidth,\r\n\t                height: viewHeight\r\n\t            });\r\n\t        }\r\n\r\n\t        this.setViewRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);\r\n\r\n\t        this.setCenter(geoModel.get('center'));\r\n\t        this.setZoom(geoModel.get('zoom'));\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {module:echarts/coord/Geo} geo\r\n\t     * @param {module:echarts/model/Model} model\r\n\t     * @inner\r\n\t     */\r\n\t    function setGeoCoords(geo, model) {\r\n\t        zrUtil.each(model.get('geoCoord'), function (geoCoord, name) {\r\n\t            geo.addGeoCoord(name, geoCoord);\r\n\t        });\r\n\t    }\r\n\r\n\t    if (true) {\r\n\t        var mapNotExistsError = function (name) {\r\n\t            console.error('Map ' + name + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');\r\n\t        };\r\n\t    }\r\n\r\n\t    var geoCreator = {\r\n\r\n\t        // For deciding which dimensions to use when creating list data\r\n\t        dimensions: Geo.prototype.dimensions,\r\n\r\n\t        create: function (ecModel, api) {\r\n\t            var geoList = [];\r\n\r\n\t            // FIXME Create each time may be slow\r\n\t            ecModel.eachComponent('geo', function (geoModel, idx) {\r\n\t                var name = geoModel.get('map');\r\n\t                var mapData = mapDataStores[name];\r\n\t                if (true) {\r\n\t                    if (!mapData) {\r\n\t                        mapNotExistsError(name);\r\n\t                    }\r\n\t                }\r\n\t                var geo = new Geo(\r\n\t                    name + idx, name,\r\n\t                    mapData && mapData.geoJson, mapData && mapData.specialAreas,\r\n\t                    geoModel.get('nameMap')\r\n\t                );\r\n\t                geo.zoomLimit = geoModel.get('scaleLimit');\r\n\t                geoList.push(geo);\r\n\r\n\t                setGeoCoords(geo, geoModel);\r\n\r\n\t                geoModel.coordinateSystem = geo;\r\n\t                geo.model = geoModel;\r\n\r\n\t                // Inject resize method\r\n\t                geo.resize = resizeGeo;\r\n\r\n\t                geo.resize(geoModel, api);\r\n\t            });\r\n\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\t                var coordSys = seriesModel.get('coordinateSystem');\r\n\t                if (coordSys === 'geo') {\r\n\t                    var geoIndex = seriesModel.get('geoIndex') || 0;\r\n\t                    seriesModel.coordinateSystem = geoList[geoIndex];\r\n\t                }\r\n\t            });\r\n\r\n\t            // If has map series\r\n\t            var mapModelGroupBySeries = {};\r\n\r\n\t            ecModel.eachSeriesByType('map', function (seriesModel) {\r\n\t                var mapType = seriesModel.get('map');\r\n\r\n\t                mapModelGroupBySeries[mapType] = mapModelGroupBySeries[mapType] || [];\r\n\r\n\t                mapModelGroupBySeries[mapType].push(seriesModel);\r\n\t            });\r\n\r\n\t            zrUtil.each(mapModelGroupBySeries, function (mapSeries, mapType) {\r\n\t                var mapData = mapDataStores[mapType];\r\n\t                if (true) {\r\n\t                    if (!mapData) {\r\n\t                        mapNotExistsError(mapSeries[0].get('map'));\r\n\t                    }\r\n\t                }\r\n\r\n\t                var nameMapList = zrUtil.map(mapSeries, function (singleMapSeries) {\r\n\t                    return singleMapSeries.get('nameMap');\r\n\t                });\r\n\t                var geo = new Geo(\r\n\t                    mapType, mapType,\r\n\t                    mapData && mapData.geoJson, mapData && mapData.specialAreas,\r\n\t                    zrUtil.mergeAll(nameMapList)\r\n\t                );\r\n\t                geo.zoomLimit = zrUtil.retrieve.apply(null, zrUtil.map(mapSeries, function (singleMapSeries) {\r\n\t                    return singleMapSeries.get('scaleLimit');\r\n\t                }));\r\n\t                geoList.push(geo);\r\n\r\n\t                // Inject resize method\r\n\t                geo.resize = resizeGeo;\r\n\r\n\t                geo.resize(mapSeries[0], api);\r\n\r\n\t                zrUtil.each(mapSeries, function (singleMapSeries) {\r\n\t                    singleMapSeries.coordinateSystem = geo;\r\n\r\n\t                    setGeoCoords(geo, singleMapSeries);\r\n\t                });\r\n\t            });\r\n\r\n\t            return geoList;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} mapName\r\n\t         * @param {Object|string} geoJson\r\n\t         * @param {Object} [specialAreas]\r\n\t         *\r\n\t         * @example\r\n\t         *     $.get('USA.json', function (geoJson) {\r\n\t         *         echarts.registerMap('USA', geoJson);\r\n\t         *         // Or\r\n\t         *         echarts.registerMap('USA', {\r\n\t         *             geoJson: geoJson,\r\n\t         *             specialAreas: {}\r\n\t         *         })\r\n\t         *     });\r\n\t         */\r\n\t        registerMap: function (mapName, geoJson, specialAreas) {\r\n\t            if (geoJson.geoJson && !geoJson.features) {\r\n\t                specialAreas = geoJson.specialAreas;\r\n\t                geoJson = geoJson.geoJson;\r\n\t            }\r\n\t            if (typeof geoJson === 'string') {\r\n\t                geoJson = (typeof JSON !== 'undefined' && JSON.parse)\r\n\t                    ? JSON.parse(geoJson) : (new Function('return (' + geoJson + ');'))();\r\n\t            }\r\n\t            mapDataStores[mapName] = {\r\n\t                geoJson: geoJson,\r\n\t                specialAreas: specialAreas\r\n\t            };\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} mapName\r\n\t         * @return {Object}\r\n\t         */\r\n\t        getMap: function (mapName) {\r\n\t            return mapDataStores[mapName];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Fill given regions array\r\n\t         * @param  {Array.<Object>} originRegionArr\r\n\t         * @param  {string} mapName\r\n\t         * @return {Array}\r\n\t         */\r\n\t        getFilledRegions: function (originRegionArr, mapName) {\r\n\t            // Not use the original\r\n\t            var regionsArr = (originRegionArr || []).slice();\r\n\r\n\t            var map = geoCreator.getMap(mapName);\r\n\t            var geoJson = map && map.geoJson;\r\n\t            if (!geoJson) {\r\n\t                if (true) {\r\n\t                    mapNotExistsError(mapName);\r\n\t                }\r\n\t                return originRegionArr;\r\n\t            }\r\n\r\n\t            var dataNameMap = {};\r\n\t            var features = geoJson.features;\r\n\t            for (var i = 0; i < regionsArr.length; i++) {\r\n\t                dataNameMap[regionsArr[i].name] = regionsArr[i];\r\n\t            }\r\n\r\n\t            for (var i = 0; i < features.length; i++) {\r\n\t                var name = features[i].properties.name;\r\n\t                if (!dataNameMap[name]) {\r\n\t                    regionsArr.push({\r\n\t                        name: name\r\n\t                    });\r\n\t                }\r\n\t            }\r\n\t            return regionsArr;\r\n\t        }\r\n\t    };\r\n\r\n\t    // Inject methods into echarts\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    echarts.registerMap = geoCreator.registerMap;\r\n\r\n\t    echarts.getMap = geoCreator.getMap;\r\n\r\n\t    // TODO\r\n\t    echarts.loadMap = function () {};\r\n\r\n\t    echarts.registerCoordinateSystem('geo', geoCreator);\r\n\r\n\t    module.exports = geoCreator;\r\n\r\n\r\n/***/ },\r\n/* 165 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var parseGeoJson = __webpack_require__(166);\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\r\n\t    var View = __webpack_require__(169);\r\n\r\n\r\n\t    // Geo fix functions\r\n\t    var geoFixFuncs = [\r\n\t        __webpack_require__(170),\r\n\t        __webpack_require__(171),\r\n\t        __webpack_require__(172)\r\n\t    ];\r\n\r\n\t    /**\r\n\t     * [Geo description]\r\n\t     * @param {string} name Geo name\r\n\t     * @param {string} map Map type\r\n\t     * @param {Object} geoJson\r\n\t     * @param {Object} [specialAreas]\r\n\t     *        Specify the positioned areas by left, top, width, height\r\n\t     * @param {Object.<string, string>} [nameMap]\r\n\t     *        Specify name alias\r\n\t     */\r\n\t    function Geo(name, map, geoJson, specialAreas, nameMap) {\r\n\r\n\t        View.call(this, name);\r\n\r\n\t        /**\r\n\t         * Map type\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.map = map;\r\n\r\n\t        this._nameCoordMap = {};\r\n\r\n\t        this.loadGeoJson(geoJson, specialAreas, nameMap);\r\n\t    }\r\n\r\n\t    Geo.prototype = {\r\n\r\n\t        constructor: Geo,\r\n\r\n\t        type: 'geo',\r\n\r\n\t        /**\r\n\t         * @param {Array.<string>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        dimensions: ['lng', 'lat'],\r\n\r\n\t        /**\r\n\t         * If contain given lng,lat coord\r\n\t         * @param {Array.<number>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        containCoord: function (coord) {\r\n\t            var regions = this.regions;\r\n\t            for (var i = 0; i < regions.length; i++) {\r\n\t                if (regions[i].contain(coord)) {\r\n\t                    return true;\r\n\t                }\r\n\t            }\r\n\t            return false;\r\n\t        },\r\n\t        /**\r\n\t         * @param {Object} geoJson\r\n\t         * @param {Object} [specialAreas]\r\n\t         *        Specify the positioned areas by left, top, width, height\r\n\t         * @param {Object.<string, string>} [nameMap]\r\n\t         *        Specify name alias\r\n\t         */\r\n\t        loadGeoJson: function (geoJson, specialAreas, nameMap) {\r\n\t            // https://jsperf.com/try-catch-performance-overhead\r\n\t            try {\r\n\t                this.regions = geoJson ? parseGeoJson(geoJson) : [];\r\n\t            }\r\n\t            catch (e) {\r\n\t                throw 'Invalid geoJson format\\n' + e;\r\n\t            }\r\n\t            specialAreas = specialAreas || {};\r\n\t            nameMap = nameMap || {};\r\n\t            var regions = this.regions;\r\n\t            var regionsMap = {};\r\n\t            for (var i = 0; i < regions.length; i++) {\r\n\t                var regionName = regions[i].name;\r\n\t                // Try use the alias in nameMap\r\n\t                regionName = nameMap[regionName] || regionName;\r\n\t                regions[i].name = regionName;\r\n\r\n\t                regionsMap[regionName] = regions[i];\r\n\t                // Add geoJson\r\n\t                this.addGeoCoord(regionName, regions[i].center);\r\n\r\n\t                // Some area like Alaska in USA map needs to be tansformed\r\n\t                // to look better\r\n\t                var specialArea = specialAreas[regionName];\r\n\t                if (specialArea) {\r\n\t                    regions[i].transformTo(\r\n\t                        specialArea.left, specialArea.top, specialArea.width, specialArea.height\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\r\n\t            this._regionsMap = regionsMap;\r\n\r\n\t            this._rect = null;\r\n\r\n\t            zrUtil.each(geoFixFuncs, function (fixFunc) {\r\n\t                fixFunc(this);\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        // Overwrite\r\n\t        transformTo: function (x, y, width, height) {\r\n\t            var rect = this.getBoundingRect();\r\n\r\n\t            rect = rect.clone();\r\n\t            // Longitute is inverted\r\n\t            rect.y = -rect.y - rect.height;\r\n\r\n\t            var viewTransform = this._viewTransform;\r\n\r\n\t            viewTransform.transform = rect.calculateTransform(\r\n\t                new BoundingRect(x, y, width, height)\r\n\t            );\r\n\r\n\t            viewTransform.decomposeTransform();\r\n\r\n\t            var scale = viewTransform.scale;\r\n\t            scale[1] = -scale[1];\r\n\r\n\t            viewTransform.updateTransform();\r\n\r\n\t            this._updateTransform();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} name\r\n\t         * @return {module:echarts/coord/geo/Region}\r\n\t         */\r\n\t        getRegion: function (name) {\r\n\t            return this._regionsMap[name];\r\n\t        },\r\n\r\n\t        getRegionByCoord: function (coord) {\r\n\t            var regions = this.regions;\r\n\t            for (var i = 0; i < regions.length; i++) {\r\n\t                if (regions[i].contain(coord)) {\r\n\t                    return regions[i];\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Add geoCoord for indexing by name\r\n\t         * @param {string} name\r\n\t         * @param {Array.<number>} geoCoord\r\n\t         */\r\n\t        addGeoCoord: function (name, geoCoord) {\r\n\t            this._nameCoordMap[name] = geoCoord;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get geoCoord by name\r\n\t         * @param {string} name\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        getGeoCoord: function (name) {\r\n\t            return this._nameCoordMap[name];\r\n\t        },\r\n\r\n\t        // Overwrite\r\n\t        getBoundingRect: function () {\r\n\t            if (this._rect) {\r\n\t                return this._rect;\r\n\t            }\r\n\t            var rect;\r\n\r\n\t            var regions = this.regions;\r\n\t            for (var i = 0; i < regions.length; i++) {\r\n\t                var regionRect = regions[i].getBoundingRect();\r\n\t                rect = rect || regionRect.clone();\r\n\t                rect.union(regionRect);\r\n\t            }\r\n\t            // FIXME Always return new ?\r\n\t            return (this._rect = rect || new BoundingRect(0, 0, 0, 0));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert series data to a list of points\r\n\t         * @param {module:echarts/data/List} data\r\n\t         * @param {boolean} stack\r\n\t         * @return {Array}\r\n\t         *  Return list of points. For example:\r\n\t         *  `[[10, 10], [20, 20], [30, 30]]`\r\n\t         */\r\n\t        dataToPoints: function (data) {\r\n\t            var item = [];\r\n\t            return data.mapArray(['lng', 'lat'], function (lon, lat) {\r\n\t                item[0] = lon;\r\n\t                item[1] = lat;\r\n\t                return this.dataToPoint(item);\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        // Overwrite\r\n\t        /**\r\n\t         * @param {string|Array.<number>} data\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        dataToPoint: function (data) {\r\n\t            if (typeof data === 'string') {\r\n\t                // Map area name to geoCoord\r\n\t                data = this.getGeoCoord(data);\r\n\t            }\r\n\t            if (data) {\r\n\t                return View.prototype.dataToPoint.call(this, data);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         * @implements\r\n\t         * see {module:echarts/CoodinateSystem}\r\n\t         */\r\n\t        convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         * @implements\r\n\t         * see {module:echarts/CoodinateSystem}\r\n\t         */\r\n\t        convertFromPixel: zrUtil.curry(doConvert, 'pointToData')\r\n\r\n\t    };\r\n\r\n\t    zrUtil.mixin(Geo, View);\r\n\r\n\t    function doConvert(methodName, ecModel, finder, value) {\r\n\t        var geoModel = finder.geoModel;\r\n\t        var seriesModel = finder.seriesModel;\r\n\r\n\t        var coordSys = geoModel\r\n\t            ? geoModel.coordinateSystem\r\n\t            : seriesModel\r\n\t            ? (\r\n\t                seriesModel.coordinateSystem // For map.\r\n\t                || (seriesModel.getReferringComponents('geo')[0] || {}).coordinateSystem\r\n\t            )\r\n\t            : null;\r\n\r\n\t        return coordSys === this ? coordSys[methodName](value) : null;\r\n\t    }\r\n\r\n\t    module.exports = Geo;\r\n\r\n\r\n/***/ },\r\n/* 166 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Parse and decode geo json\r\n\t * @module echarts/coord/geo/parseGeoJson\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var Region = __webpack_require__(167);\r\n\r\n\t    function decode(json) {\r\n\t        if (!json.UTF8Encoding) {\r\n\t            return json;\r\n\t        }\r\n\t        var features = json.features;\r\n\r\n\t        for (var f = 0; f < features.length; f++) {\r\n\t            var feature = features[f];\r\n\t            var geometry = feature.geometry;\r\n\t            var coordinates = geometry.coordinates;\r\n\t            var encodeOffsets = geometry.encodeOffsets;\r\n\r\n\t            for (var c = 0; c < coordinates.length; c++) {\r\n\t                var coordinate = coordinates[c];\r\n\r\n\t                if (geometry.type === 'Polygon') {\r\n\t                    coordinates[c] = decodePolygon(\r\n\t                        coordinate,\r\n\t                        encodeOffsets[c]\r\n\t                    );\r\n\t                }\r\n\t                else if (geometry.type === 'MultiPolygon') {\r\n\t                    for (var c2 = 0; c2 < coordinate.length; c2++) {\r\n\t                        var polygon = coordinate[c2];\r\n\t                        coordinate[c2] = decodePolygon(\r\n\t                            polygon,\r\n\t                            encodeOffsets[c][c2]\r\n\t                        );\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        // Has been decoded\r\n\t        json.UTF8Encoding = false;\r\n\t        return json;\r\n\t    }\r\n\r\n\t    function decodePolygon(coordinate, encodeOffsets) {\r\n\t        var result = [];\r\n\t        var prevX = encodeOffsets[0];\r\n\t        var prevY = encodeOffsets[1];\r\n\r\n\t        for (var i = 0; i < coordinate.length; i += 2) {\r\n\t            var x = coordinate.charCodeAt(i) - 64;\r\n\t            var y = coordinate.charCodeAt(i + 1) - 64;\r\n\t            // ZigZag decoding\r\n\t            x = (x >> 1) ^ (-(x & 1));\r\n\t            y = (y >> 1) ^ (-(y & 1));\r\n\t            // Delta deocding\r\n\t            x += prevX;\r\n\t            y += prevY;\r\n\r\n\t            prevX = x;\r\n\t            prevY = y;\r\n\t            // Dequantize\r\n\t            result.push([x / 1024, y / 1024]);\r\n\t        }\r\n\r\n\t        return result;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function flattern2D(array) {\r\n\t        var ret = [];\r\n\t        for (var i = 0; i < array.length; i++) {\r\n\t            for (var k = 0; k < array[i].length; k++) {\r\n\t                ret.push(array[i][k]);\r\n\t            }\r\n\t        }\r\n\t        return ret;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @alias module:echarts/coord/geo/parseGeoJson\r\n\t     * @param {Object} geoJson\r\n\t     * @return {module:zrender/container/Group}\r\n\t     */\r\n\t    module.exports = function (geoJson) {\r\n\r\n\t        decode(geoJson);\r\n\r\n\t        return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\r\n\t            // Output of mapshaper may have geometry null\r\n\t            return featureObj.geometry && featureObj.properties;\r\n\t        }), function (featureObj) {\r\n\t            var properties = featureObj.properties;\r\n\t            var geometry = featureObj.geometry;\r\n\r\n\t            var coordinates = geometry.coordinates;\r\n\r\n\t            if (geometry.type === 'MultiPolygon') {\r\n\t                coordinates = flattern2D(coordinates);\r\n\t            }\r\n\r\n\t            return new Region(\r\n\t                properties.name,\r\n\t                coordinates,\r\n\t                properties.cp\r\n\t            );\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 167 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/coord/geo/Region\r\n\t */\r\n\r\n\r\n\t    var polygonContain = __webpack_require__(168);\r\n\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\r\n\t    var bbox = __webpack_require__(51);\r\n\t    var vec2 = __webpack_require__(10);\r\n\r\n\t    /**\r\n\t     * @param {string} name\r\n\t     * @param {Array} contours\r\n\t     * @param {Array.<number>} cp\r\n\t     */\r\n\t    function Region(name, contours, cp) {\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.name = name;\r\n\r\n\t        /**\r\n\t         * @type {Array.<Array>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.contours = contours;\r\n\r\n\t        if (!cp) {\r\n\t            var rect = this.getBoundingRect();\r\n\t            cp = [\r\n\t                rect.x + rect.width / 2,\r\n\t                rect.y + rect.height / 2\r\n\t            ];\r\n\t        }\r\n\t        else {\r\n\t            cp = [cp[0], cp[1]];\r\n\t        }\r\n\t        /**\r\n\t         * @type {Array.<number>}\r\n\t         */\r\n\t        this.center = cp;\r\n\t    }\r\n\r\n\t    Region.prototype = {\r\n\r\n\t        constructor: Region,\r\n\r\n\t        /**\r\n\t         * @return {module:zrender/core/BoundingRect}\r\n\t         */\r\n\t        getBoundingRect: function () {\r\n\t            var rect = this._rect;\r\n\t            if (rect) {\r\n\t                return rect;\r\n\t            }\r\n\r\n\t            var MAX_NUMBER = Number.MAX_VALUE;\r\n\t            var min = [MAX_NUMBER, MAX_NUMBER];\r\n\t            var max = [-MAX_NUMBER, -MAX_NUMBER];\r\n\t            var min2 = [];\r\n\t            var max2 = [];\r\n\t            var contours = this.contours;\r\n\t            for (var i = 0; i < contours.length; i++) {\r\n\t                bbox.fromPoints(contours[i], min2, max2);\r\n\t                vec2.min(min, min, min2);\r\n\t                vec2.max(max, max, max2);\r\n\t            }\r\n\t            // No data\r\n\t            if (i === 0) {\r\n\t                min[0] = min[1] = max[0] = max[1] = 0;\r\n\t            }\r\n\r\n\t            return (this._rect = new BoundingRect(\r\n\t                min[0], min[1], max[0] - min[0], max[1] - min[1]\r\n\t            ));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {<Array.<number>} coord\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        contain: function (coord) {\r\n\t            var rect = this.getBoundingRect();\r\n\t            var contours = this.contours;\r\n\t            if (rect.contain(coord[0], coord[1])) {\r\n\t                for (var i = 0, len = contours.length; i < len; i++) {\r\n\t                    if (polygonContain.contain(contours[i], coord[0], coord[1])) {\r\n\t                        return true;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            return false;\r\n\t        },\r\n\r\n\t        transformTo: function (x, y, width, height) {\r\n\t            var rect = this.getBoundingRect();\r\n\t            var aspect = rect.width / rect.height;\r\n\t            if (!width) {\r\n\t                width = aspect * height;\r\n\t            }\r\n\t            else if (!height) {\r\n\t                height = width / aspect ;\r\n\t            }\r\n\t            var target = new BoundingRect(x, y, width, height);\r\n\t            var transform = rect.calculateTransform(target);\r\n\t            var contours = this.contours;\r\n\t            for (var i = 0; i < contours.length; i++) {\r\n\t                for (var p = 0; p < contours[i].length; p++) {\r\n\t                    vec2.applyTransform(contours[i][p], contours[i][p], transform);\r\n\t                }\r\n\t            }\r\n\t            rect = this._rect;\r\n\t            rect.copy(target);\r\n\t            // Update center\r\n\t            this.center = [\r\n\t                rect.x + rect.width / 2,\r\n\t                rect.y + rect.height / 2\r\n\t            ];\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = Region;\r\n\r\n\r\n/***/ },\r\n/* 168 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var windingLine = __webpack_require__(58);\r\n\r\n\t    var EPSILON = 1e-8;\r\n\r\n\t    function isAroundEqual(a, b) {\r\n\t        return Math.abs(a - b) < EPSILON;\r\n\t    }\r\n\r\n\t    function contain(points, x, y) {\r\n\t        var w = 0;\r\n\t        var p = points[0];\r\n\r\n\t        if (!p) {\r\n\t            return false;\r\n\t        }\r\n\r\n\t        for (var i = 1; i < points.length; i++) {\r\n\t            var p2 = points[i];\r\n\t            w += windingLine(p[0], p[1], p2[0], p2[1], x, y);\r\n\t            p = p2;\r\n\t        }\r\n\r\n\t        // Close polygon\r\n\t        var p0 = points[0];\r\n\t        if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {\r\n\t            w += windingLine(p[0], p[1], p0[0], p0[1], x, y);\r\n\t        }\r\n\r\n\t        return w !== 0;\r\n\t    }\r\n\r\n\r\n\t    module.exports = {\r\n\t        contain: contain\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 169 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Simple view coordinate system\r\n\t * Mapping given x, y to transformd view x, y\r\n\t */\r\n\r\n\r\n\t    var vector = __webpack_require__(10);\r\n\t    var matrix = __webpack_require__(11);\r\n\r\n\t    var Transformable = __webpack_require__(34);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\r\n\t    var v2ApplyTransform = vector.applyTransform;\r\n\r\n\t    // Dummy transform node\r\n\t    function TransformDummy() {\r\n\t        Transformable.call(this);\r\n\t    }\r\n\t    zrUtil.mixin(TransformDummy, Transformable);\r\n\r\n\t    function View(name) {\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.name = name;\r\n\r\n\t        /**\r\n\t         * @type {Object}\r\n\t         */\r\n\t        this.zoomLimit;\r\n\r\n\t        Transformable.call(this);\r\n\r\n\t        this._roamTransform = new TransformDummy();\r\n\r\n\t        this._viewTransform = new TransformDummy();\r\n\r\n\t        this._center;\r\n\t        this._zoom;\r\n\t    }\r\n\r\n\t    View.prototype = {\r\n\r\n\t        constructor: View,\r\n\r\n\t        type: 'view',\r\n\r\n\t        /**\r\n\t         * @param {Array.<string>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        dimensions: ['x', 'y'],\r\n\r\n\t        /**\r\n\t         * Set bounding rect\r\n\t         * @param {number} x\r\n\t         * @param {number} y\r\n\t         * @param {number} width\r\n\t         * @param {number} height\r\n\t         */\r\n\r\n\t        // PENDING to getRect\r\n\t        setBoundingRect: function (x, y, width, height) {\r\n\t            this._rect = new BoundingRect(x, y, width, height);\r\n\t            return this._rect;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:zrender/core/BoundingRect}\r\n\t         */\r\n\t        // PENDING to getRect\r\n\t        getBoundingRect: function () {\r\n\t            return this._rect;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {number} x\r\n\t         * @param {number} y\r\n\t         * @param {number} width\r\n\t         * @param {number} height\r\n\t         */\r\n\t        setViewRect: function (x, y, width, height) {\r\n\t            this.transformTo(x, y, width, height);\r\n\t            this._viewRect = new BoundingRect(x, y, width, height);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Transformed to particular position and size\r\n\t         * @param {number} x\r\n\t         * @param {number} y\r\n\t         * @param {number} width\r\n\t         * @param {number} height\r\n\t         */\r\n\t        transformTo: function (x, y, width, height) {\r\n\t            var rect = this.getBoundingRect();\r\n\t            var viewTransform = this._viewTransform;\r\n\r\n\t            viewTransform.transform = rect.calculateTransform(\r\n\t                new BoundingRect(x, y, width, height)\r\n\t            );\r\n\r\n\t            viewTransform.decomposeTransform();\r\n\r\n\t            this._updateTransform();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Set center of view\r\n\t         * @param {Array.<number>} [centerCoord]\r\n\t         */\r\n\t        setCenter: function (centerCoord) {\r\n\t            if (!centerCoord) {\r\n\t                return;\r\n\t            }\r\n\t            this._center = centerCoord;\r\n\r\n\t            this._updateCenterAndZoom();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {number} zoom\r\n\t         */\r\n\t        setZoom: function (zoom) {\r\n\t            zoom = zoom || 1;\r\n\r\n\t            var zoomLimit = this.zoomLimit;\r\n\t            if (zoomLimit) {\r\n\t                if (zoomLimit.max != null) {\r\n\t                    zoom = Math.min(zoomLimit.max, zoom);\r\n\t                }\r\n\t                if (zoomLimit.min != null) {\r\n\t                    zoom = Math.max(zoomLimit.min, zoom);\r\n\t                }\r\n\t            }\r\n\t            this._zoom = zoom;\r\n\r\n\t            this._updateCenterAndZoom();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get default center without roam\r\n\t         */\r\n\t        getDefaultCenter: function () {\r\n\t            // Rect before any transform\r\n\t            var rawRect = this.getBoundingRect();\r\n\t            var cx = rawRect.x + rawRect.width / 2;\r\n\t            var cy = rawRect.y + rawRect.height / 2;\r\n\r\n\t            return [cx, cy];\r\n\t        },\r\n\r\n\t        getCenter: function () {\r\n\t            return this._center || this.getDefaultCenter();\r\n\t        },\r\n\r\n\t        getZoom: function () {\r\n\t            return this._zoom || 1;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {Array.<number}\r\n\t         */\r\n\t        getRoamTransform: function () {\r\n\t            return this._roamTransform;\r\n\t        },\r\n\r\n\t        _updateCenterAndZoom: function () {\r\n\t            // Must update after view transform updated\r\n\t            var viewTransformMatrix = this._viewTransform.getLocalTransform();\r\n\t            var roamTransform = this._roamTransform;\r\n\t            var defaultCenter = this.getDefaultCenter();\r\n\t            var center = this.getCenter();\r\n\t            var zoom = this.getZoom();\r\n\r\n\t            center = vector.applyTransform([], center, viewTransformMatrix);\r\n\t            defaultCenter = vector.applyTransform([], defaultCenter, viewTransformMatrix);\r\n\r\n\t            roamTransform.origin = center;\r\n\t            roamTransform.position = [\r\n\t                defaultCenter[0] - center[0],\r\n\t                defaultCenter[1] - center[1]\r\n\t            ];\r\n\t            roamTransform.scale = [zoom, zoom];\r\n\r\n\t            this._updateTransform();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Update transform from roam and mapLocation\r\n\t         * @private\r\n\t         */\r\n\t        _updateTransform: function () {\r\n\t            var roamTransform = this._roamTransform;\r\n\t            var viewTransform = this._viewTransform;\r\n\r\n\t            viewTransform.parent = roamTransform;\r\n\t            roamTransform.updateTransform();\r\n\t            viewTransform.updateTransform();\r\n\r\n\t            viewTransform.transform\r\n\t                && matrix.copy(this.transform || (this.transform = []), viewTransform.transform);\r\n\r\n\t            if (this.transform) {\r\n\t                this.invTransform = this.invTransform || [];\r\n\t                matrix.invert(this.invTransform, this.transform);\r\n\t            }\r\n\t            else {\r\n\t                this.invTransform = null;\r\n\t            }\r\n\t            this.decomposeTransform();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:zrender/core/BoundingRect}\r\n\t         */\r\n\t        getViewRect: function () {\r\n\t            return this._viewRect;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get view rect after roam transform\r\n\t         * @return {module:zrender/core/BoundingRect}\r\n\t         */\r\n\t        getViewRectAfterRoam: function () {\r\n\t            var rect = this.getBoundingRect().clone();\r\n\t            rect.applyTransform(this.transform);\r\n\t            return rect;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert a single (lon, lat) data item to (x, y) point.\r\n\t         * @param {Array.<number>} data\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        dataToPoint: function (data) {\r\n\t            var transform = this.transform;\r\n\t            return transform\r\n\t                ? v2ApplyTransform([], data, transform)\r\n\t                : [data[0], data[1]];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert a (x, y) point to (lon, lat) data\r\n\t         * @param {Array.<number>} point\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        pointToData: function (point) {\r\n\t            var invTransform = this.invTransform;\r\n\t            return invTransform\r\n\t                ? v2ApplyTransform([], point, invTransform)\r\n\t                : [point[0], point[1]];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @implements\r\n\t         * see {module:echarts/CoodinateSystem}\r\n\t         */\r\n\t        convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),\r\n\r\n\t        /**\r\n\t         * @implements\r\n\t         * see {module:echarts/CoodinateSystem}\r\n\t         */\r\n\t        convertFromPixel: zrUtil.curry(doConvert, 'pointToData'),\r\n\r\n\t        /**\r\n\t         * @implements\r\n\t         * see {module:echarts/CoodinateSystem}\r\n\t         */\r\n\t        containPoint: function (point) {\r\n\t            return this.getViewRect().contain(point[0], point[1]);\r\n\t        }\r\n\r\n\t        /**\r\n\t         * @return {number}\r\n\t         */\r\n\t        // getScalarScale: function () {\r\n\t        //     // Use determinant square root of transform to mutiply scalar\r\n\t        //     var m = this.transform;\r\n\t        //     var det = Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]));\r\n\t        //     return det;\r\n\t        // }\r\n\t    };\r\n\r\n\t    zrUtil.mixin(View, Transformable);\r\n\r\n\t    function doConvert(methodName, ecModel, finder, value) {\r\n\t        var seriesModel = finder.seriesModel;\r\n\t        var coordSys = seriesModel ? seriesModel.coordinateSystem : null; // e.g., graph.\r\n\t        return coordSys === this ? coordSys[methodName](value) : null;\r\n\t    }\r\n\r\n\t    module.exports = View;\r\n\r\n\r\n/***/ },\r\n/* 170 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// Fix for 南海诸岛\r\n\r\n\r\n\t    var Region = __webpack_require__(167);\r\n\r\n\t    var geoCoord = [126, 25];\r\n\r\n\t    var points = [\r\n\t        [[0,3.5],[7,11.2],[15,11.9],[30,7],[42,0.7],[52,0.7],\r\n\t         [56,7.7],[59,0.7],[64,0.7],[64,0],[5,0],[0,3.5]],\r\n\t        [[13,16.1],[19,14.7],[16,21.7],[11,23.1],[13,16.1]],\r\n\t        [[12,32.2],[14,38.5],[15,38.5],[13,32.2],[12,32.2]],\r\n\t        [[16,47.6],[12,53.2],[13,53.2],[18,47.6],[16,47.6]],\r\n\t        [[6,64.4],[8,70],[9,70],[8,64.4],[6,64.4]],\r\n\t        [[23,82.6],[29,79.8],[30,79.8],[25,82.6],[23,82.6]],\r\n\t        [[37,70.7],[43,62.3],[44,62.3],[39,70.7],[37,70.7]],\r\n\t        [[48,51.1],[51,45.5],[53,45.5],[50,51.1],[48,51.1]],\r\n\t        [[51,35],[51,28.7],[53,28.7],[53,35],[51,35]],\r\n\t        [[52,22.4],[55,17.5],[56,17.5],[53,22.4],[52,22.4]],\r\n\t        [[58,12.6],[62,7],[63,7],[60,12.6],[58,12.6]],\r\n\t        [[0,3.5],[0,93.1],[64,93.1],[64,0],[63,0],[63,92.4],\r\n\t         [1,92.4],[1,3.5],[0,3.5]]\r\n\t    ];\r\n\t    for (var i = 0; i < points.length; i++) {\r\n\t        for (var k = 0; k < points[i].length; k++) {\r\n\t            points[i][k][0] /= 10.5;\r\n\t            points[i][k][1] /= -10.5 / 0.75;\r\n\r\n\t            points[i][k][0] += geoCoord[0];\r\n\t            points[i][k][1] += geoCoord[1];\r\n\t        }\r\n\t    }\r\n\t    module.exports = function (geo) {\r\n\t        if (geo.map === 'china') {\r\n\t            geo.regions.push(new Region(\r\n\t                '南海诸岛', points, geoCoord\r\n\t            ));\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 171 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var coordsOffsetMap = {\r\n\t        '南海诸岛' : [32, 80],\r\n\t        // 全国\r\n\t        '广东': [0, -10],\r\n\t        '香港': [10, 5],\r\n\t        '澳门': [-10, 10],\r\n\t        //'北京': [-10, 0],\r\n\t        '天津': [5, 5]\r\n\t    };\r\n\r\n\t    module.exports = function (geo) {\r\n\t        zrUtil.each(geo.regions, function (region) {\r\n\t            var coordFix = coordsOffsetMap[region.name];\r\n\t            if (coordFix) {\r\n\t                var cp = region.center;\r\n\t                cp[0] += coordFix[0] / 10.5;\r\n\t                cp[1] += -coordFix[1] / (10.5 / 0.75);\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 172 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var geoCoordMap = {\r\n\t        'Russia': [100, 60],\r\n\t        'United States of America': [-99, 38]\r\n\t    };\r\n\r\n\t    module.exports = function (geo) {\r\n\t        zrUtil.each(geo.regions, function (region) {\r\n\t            var geoCoord = geoCoordMap[region.name];\r\n\t            if (geoCoord) {\r\n\t                var cp = region.center;\r\n\t                cp[0] = geoCoord[0];\r\n\t                cp[1] = geoCoord[1];\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 173 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    // var zrUtil = require('zrender/lib/core/util');\r\n\t    var graphic = __webpack_require__(43);\r\n\r\n\t    var MapDraw = __webpack_require__(174);\r\n\r\n\t    __webpack_require__(1).extendChartView({\r\n\r\n\t        type: 'map',\r\n\r\n\t        render: function (mapModel, ecModel, api, payload) {\r\n\t            // Not render if it is an toggleSelect action from self\r\n\t            if (payload && payload.type === 'mapToggleSelect'\r\n\t                && payload.from === this.uid\r\n\t            ) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var group = this.group;\r\n\t            group.removeAll();\r\n\t            // Not update map if it is an roam action from self\r\n\t            if (!(payload && payload.type === 'geoRoam'\r\n\t                && payload.componentType === 'series'\r\n\t                && payload.seriesId === mapModel.id)) {\r\n\r\n\t                if (mapModel.needsDrawMap) {\r\n\t                    var mapDraw = this._mapDraw || new MapDraw(api, true);\r\n\t                    group.add(mapDraw.group);\r\n\r\n\t                    mapDraw.draw(mapModel, ecModel, api, this, payload);\r\n\r\n\t                    this._mapDraw = mapDraw;\r\n\t                }\r\n\t                else {\r\n\t                    // Remove drawed map\r\n\t                    this._mapDraw && this._mapDraw.remove();\r\n\t                    this._mapDraw = null;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                var mapDraw = this._mapDraw;\r\n\t                mapDraw && group.add(mapDraw.group);\r\n\t            }\r\n\r\n\t            mapModel.get('showLegendSymbol') && ecModel.getComponent('legend')\r\n\t                && this._renderSymbols(mapModel, ecModel, api);\r\n\t        },\r\n\r\n\t        remove: function () {\r\n\t            this._mapDraw && this._mapDraw.remove();\r\n\t            this._mapDraw = null;\r\n\t            this.group.removeAll();\r\n\t        },\r\n\r\n\t        dispose: function () {\r\n\t            this._mapDraw && this._mapDraw.remove();\r\n\t            this._mapDraw = null;\r\n\t        },\r\n\r\n\t        _renderSymbols: function (mapModel, ecModel, api) {\r\n\t            var originalData = mapModel.originalData;\r\n\t            var group = this.group;\r\n\r\n\t            originalData.each('value', function (value, idx) {\r\n\t                if (isNaN(value)) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var layout = originalData.getItemLayout(idx);\r\n\r\n\t                if (!layout || !layout.point) {\r\n\t                    // Not exists in map\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var point = layout.point;\r\n\t                var offset = layout.offset;\r\n\r\n\t                var circle = new graphic.Circle({\r\n\t                    style: {\r\n\t                        // Because the special of map draw.\r\n\t                        // Which needs statistic of multiple series and draw on one map.\r\n\t                        // And each series also need a symbol with legend color\r\n\t                        //\r\n\t                        // Layout and visual are put one the different data\r\n\t                        fill: mapModel.getData().getVisual('color')\r\n\t                    },\r\n\t                    shape: {\r\n\t                        cx: point[0] + offset * 9,\r\n\t                        cy: point[1],\r\n\t                        r: 3\r\n\t                    },\r\n\t                    silent: true,\r\n\t                    z2: 10\r\n\t                });\r\n\r\n\t                // First data on the same region\r\n\t                if (!offset) {\r\n\t                    var fullData = mapModel.mainSeries.getData();\r\n\t                    var name = originalData.getName(idx);\r\n\t                    var labelText = name;\r\n\t                    var fullIndex = fullData.indexOfName(name);\r\n\r\n\t                    var itemModel = originalData.getItemModel(idx);\r\n\t                    var labelModel = itemModel.getModel('label.normal');\r\n\t                    var hoverLabelModel = itemModel.getModel('label.emphasis');\r\n\r\n\t                    var textStyleModel = labelModel.getModel('textStyle');\r\n\t                    var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');\r\n\r\n\t                    var polygonGroups = fullData.getItemGraphicEl(fullIndex);\r\n\t                    circle.setStyle({\r\n\t                        textPosition: 'bottom'\r\n\t                    });\r\n\r\n\t                    var onEmphasis = function () {\r\n\t                        circle.setStyle({\r\n\t                            text: hoverLabelModel.get('show') ? labelText : '',\r\n\t                            textFill: hoverTextStyleModel.getTextColor(),\r\n\t                            textFont: hoverTextStyleModel.getFont()\r\n\t                        });\r\n\t                    };\r\n\r\n\t                    var onNormal = function () {\r\n\t                        circle.setStyle({\r\n\t                            text: labelModel.get('show') ? labelText : '',\r\n\t                            textFill: textStyleModel.getTextColor(),\r\n\t                            textFont: textStyleModel.getFont()\r\n\t                        });\r\n\t                    };\r\n\r\n\t                    polygonGroups.on('mouseover', onEmphasis)\r\n\t                        .on('mouseout', onNormal)\r\n\t                        .on('emphasis', onEmphasis)\r\n\t                        .on('normal', onNormal);\r\n\r\n\t                    onNormal();\r\n\t                }\r\n\r\n\t                group.add(circle);\r\n\t            });\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 174 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/component/helper/MapDraw\r\n\t */\r\n\r\n\r\n\t    var RoamController = __webpack_require__(175);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    function getFixedItemStyle(model, scale) {\r\n\t        var itemStyle = model.getItemStyle();\r\n\t        var areaColor = model.get('areaColor');\r\n\t        if (areaColor) {\r\n\t            itemStyle.fill = areaColor;\r\n\t        }\r\n\r\n\t        return itemStyle;\r\n\t    }\r\n\r\n\t    function updateMapSelectHandler(mapOrGeoModel, group, api, fromView) {\r\n\t        group.off('click');\r\n\t        mapOrGeoModel.get('selectedMode')\r\n\t            && group.on('click', function (e) {\r\n\t                var el = e.target;\r\n\t                while (!el.__region) {\r\n\t                    el = el.parent;\r\n\t                }\r\n\t                if (!el) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var region = el.__region;\r\n\t                var action = {\r\n\t                    type: (mapOrGeoModel.mainType === 'geo' ? 'geo' : 'map') + 'ToggleSelect',\r\n\t                    name: region.name,\r\n\t                    from: fromView.uid\r\n\t                };\r\n\t                action[mapOrGeoModel.mainType + 'Id'] = mapOrGeoModel.id;\r\n\r\n\t                api.dispatchAction(action);\r\n\r\n\t                updateMapSelected(mapOrGeoModel, group);\r\n\t            });\r\n\t    }\r\n\r\n\t    function updateMapSelected(mapOrGeoModel, group) {\r\n\t        // FIXME\r\n\t        group.eachChild(function (otherRegionEl) {\r\n\t            if (otherRegionEl.__region) {\r\n\t                otherRegionEl.trigger(mapOrGeoModel.isSelected(otherRegionEl.__region.name) ? 'emphasis' : 'normal');\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @alias module:echarts/component/helper/MapDraw\r\n\t     * @param {module:echarts/ExtensionAPI} api\r\n\t     * @param {boolean} updateGroup\r\n\t     */\r\n\t    function MapDraw(api, updateGroup) {\r\n\r\n\t        var group = new graphic.Group();\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/component/helper/RoamController}\r\n\t         * @private\r\n\t         */\r\n\t        this._controller = new RoamController(\r\n\t            api.getZr(), updateGroup ? group : null, null\r\n\t        );\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/container/Group}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.group = group;\r\n\r\n\t        /**\r\n\t         * @type {boolean}\r\n\t         * @private\r\n\t         */\r\n\t        this._updateGroup = updateGroup;\r\n\t    }\r\n\r\n\t    MapDraw.prototype = {\r\n\r\n\t        constructor: MapDraw,\r\n\r\n\t        draw: function (mapOrGeoModel, ecModel, api, fromView, payload) {\r\n\r\n\t            // geoModel has no data\r\n\t            var data = mapOrGeoModel.getData && mapOrGeoModel.getData();\r\n\r\n\t            var geo = mapOrGeoModel.coordinateSystem;\r\n\r\n\t            var group = this.group;\r\n\r\n\t            var scale = geo.scale;\r\n\t            var groupNewProp = {\r\n\t                position: geo.position,\r\n\t                scale: scale\r\n\t            };\r\n\r\n\t            // No animation when first draw or in action\r\n\t            if (!group.childAt(0) || payload) {\r\n\t                group.attr(groupNewProp);\r\n\t            }\r\n\t            else {\r\n\t                graphic.updateProps(group, groupNewProp, mapOrGeoModel);\r\n\t            }\r\n\r\n\t            group.removeAll();\r\n\r\n\t            var itemStyleAccessPath = ['itemStyle', 'normal'];\r\n\t            var hoverItemStyleAccessPath = ['itemStyle', 'emphasis'];\r\n\t            var labelAccessPath = ['label', 'normal'];\r\n\t            var hoverLabelAccessPath = ['label', 'emphasis'];\r\n\r\n\t            zrUtil.each(geo.regions, function (region) {\r\n\r\n\t                var regionGroup = new graphic.Group();\r\n\t                var compoundPath = new graphic.CompoundPath({\r\n\t                    shape: {\r\n\t                        paths: []\r\n\t                    }\r\n\t                });\r\n\t                regionGroup.add(compoundPath);\r\n\r\n\t                var regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;\r\n\r\n\t                var itemStyleModel = regionModel.getModel(itemStyleAccessPath);\r\n\t                var hoverItemStyleModel = regionModel.getModel(hoverItemStyleAccessPath);\r\n\t                var itemStyle = getFixedItemStyle(itemStyleModel, scale);\r\n\t                var hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);\r\n\r\n\t                var labelModel = regionModel.getModel(labelAccessPath);\r\n\t                var hoverLabelModel = regionModel.getModel(hoverLabelAccessPath);\r\n\r\n\t                var dataIdx;\r\n\t                // Use the itemStyle in data if has data\r\n\t                if (data) {\r\n\t                    dataIdx = data.indexOfName(region.name);\r\n\t                    // Only visual color of each item will be used. It can be encoded by dataRange\r\n\t                    // But visual color of series is used in symbol drawing\r\n\t                    //\r\n\t                    // Visual color for each series is for the symbol draw\r\n\t                    var visualColor = data.getItemVisual(dataIdx, 'color', true);\r\n\t                    if (visualColor) {\r\n\t                        itemStyle.fill = visualColor;\r\n\t                    }\r\n\t                }\r\n\r\n\t                var textStyleModel = labelModel.getModel('textStyle');\r\n\t                var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');\r\n\r\n\t                zrUtil.each(region.contours, function (contour) {\r\n\r\n\t                    var polygon = new graphic.Polygon({\r\n\t                        shape: {\r\n\t                            points: contour\r\n\t                        }\r\n\t                    });\r\n\r\n\t                    compoundPath.shape.paths.push(polygon);\r\n\t                });\r\n\r\n\t                compoundPath.setStyle(itemStyle);\r\n\t                compoundPath.style.strokeNoScale = true;\r\n\t                compoundPath.culling = true;\r\n\t                // Label\r\n\t                var showLabel = labelModel.get('show');\r\n\t                var hoverShowLabel = hoverLabelModel.get('show');\r\n\r\n\t                var isDataNaN = data && isNaN(data.get('value', dataIdx));\r\n\t                var itemLayout = data && data.getItemLayout(dataIdx);\r\n\t                // In the following cases label will be drawn\r\n\t                // 1. In map series and data value is NaN\r\n\t                // 2. In geo component\r\n\t                // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout\r\n\t                if (\r\n\t                    (!data || isDataNaN && (showLabel || hoverShowLabel))\r\n\t                 || (itemLayout && itemLayout.showLabel)\r\n\t                 ) {\r\n\t                    var query = data ? dataIdx : region.name;\r\n\t                    var formattedStr = mapOrGeoModel.getFormattedLabel(query, 'normal');\r\n\t                    var hoverFormattedStr = mapOrGeoModel.getFormattedLabel(query, 'emphasis');\r\n\t                    var text = new graphic.Text({\r\n\t                        style: {\r\n\t                            text: showLabel ? (formattedStr || region.name) : '',\r\n\t                            fill: textStyleModel.getTextColor(),\r\n\t                            textFont: textStyleModel.getFont(),\r\n\t                            textAlign: 'center',\r\n\t                            textVerticalAlign: 'middle'\r\n\t                        },\r\n\t                        hoverStyle: {\r\n\t                            text: hoverShowLabel ? (hoverFormattedStr || region.name) : '',\r\n\t                            fill: hoverTextStyleModel.getTextColor(),\r\n\t                            textFont: hoverTextStyleModel.getFont()\r\n\t                        },\r\n\t                        position: region.center.slice(),\r\n\t                        scale: [1 / scale[0], 1 / scale[1]],\r\n\t                        z2: 10,\r\n\t                        silent: true\r\n\t                    });\r\n\r\n\t                    regionGroup.add(text);\r\n\t                }\r\n\r\n\t                // setItemGraphicEl, setHoverStyle after all polygons and labels\r\n\t                // are added to the rigionGroup\r\n\t                if (data) {\r\n\t                    data.setItemGraphicEl(dataIdx, regionGroup);\r\n\t                }\r\n\t                else {\r\n\t                    var regionModel = mapOrGeoModel.getRegionModel(region.name);\r\n\t                    // Package custom mouse event for geo component\r\n\t                    compoundPath.eventData = {\r\n\t                        componentType: 'geo',\r\n\t                        geoIndex: mapOrGeoModel.componentIndex,\r\n\t                        name: region.name,\r\n\t                        region: (regionModel && regionModel.option) || {}\r\n\t                    };\r\n\t                }\r\n\r\n\t                regionGroup.__region = region;\r\n\r\n\t                graphic.setHoverStyle(regionGroup, hoverItemStyle);\r\n\r\n\t                group.add(regionGroup);\r\n\t            });\r\n\r\n\t            this._updateController(mapOrGeoModel, ecModel, api);\r\n\r\n\t            updateMapSelectHandler(mapOrGeoModel, group, api, fromView);\r\n\r\n\t            updateMapSelected(mapOrGeoModel, group);\r\n\t        },\r\n\r\n\t        remove: function () {\r\n\t            this.group.removeAll();\r\n\t            this._controller.dispose();\r\n\t        },\r\n\r\n\t        _updateController: function (mapOrGeoModel, ecModel, api) {\r\n\t            var geo = mapOrGeoModel.coordinateSystem;\r\n\t            var controller = this._controller;\r\n\t            controller.zoomLimit = mapOrGeoModel.get('scaleLimit');\r\n\t            // Update zoom from model\r\n\t            controller.zoom = geo.getZoom();\r\n\t            // roamType is will be set default true if it is null\r\n\t            controller.enable(mapOrGeoModel.get('roam') || false);\r\n\t            var mainType = mapOrGeoModel.mainType;\r\n\r\n\t            function makeActionBase() {\r\n\t                var action = {\r\n\t                    type: 'geoRoam',\r\n\t                    componentType: mainType\r\n\t                };\r\n\t                action[mainType + 'Id'] = mapOrGeoModel.id;\r\n\t                return action;\r\n\t            }\r\n\t            controller.off('pan')\r\n\t                .on('pan', function (dx, dy) {\r\n\t                    api.dispatchAction(zrUtil.extend(makeActionBase(), {\r\n\t                        dx: dx,\r\n\t                        dy: dy\r\n\t                    }));\r\n\t                });\r\n\t            controller.off('zoom')\r\n\t                .on('zoom', function (zoom, mouseX, mouseY) {\r\n\t                    api.dispatchAction(zrUtil.extend(makeActionBase(), {\r\n\t                        zoom: zoom,\r\n\t                        originX: mouseX,\r\n\t                        originY: mouseY\r\n\t                    }));\r\n\r\n\t                    if (this._updateGroup) {\r\n\t                        var group = this.group;\r\n\t                        var scale = group.scale;\r\n\t                        group.traverse(function (el) {\r\n\t                            if (el.type === 'text') {\r\n\t                                el.attr('scale', [1 / scale[0], 1 / scale[1]]);\r\n\t                            }\r\n\t                        });\r\n\t                    }\r\n\t                }, this);\r\n\r\n\t            controller.setContainsPoint(function (x, y) {\r\n\t                return geo.getViewRectAfterRoam().contain(x, y);\r\n\t            });\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = MapDraw;\r\n\r\n\r\n/***/ },\r\n/* 175 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/component/helper/RoamController\r\n\t */\r\n\r\n\r\n\r\n\t    var Eventful = __webpack_require__(33);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var eventTool = __webpack_require__(87);\r\n\t    var interactionMutex = __webpack_require__(176);\r\n\r\n\t    function mousedown(e) {\r\n\t        if (e.target && e.target.draggable) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var x = e.offsetX;\r\n\t        var y = e.offsetY;\r\n\r\n\t        if (this.containsPoint && this.containsPoint(x, y)) {\r\n\t            this._x = x;\r\n\t            this._y = y;\r\n\t            this._dragging = true;\r\n\t        }\r\n\t    }\r\n\r\n\t    function mousemove(e) {\r\n\t        if (!this._dragging) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        eventTool.stop(e.event);\r\n\r\n\t        if (e.gestureEvent !== 'pinch') {\r\n\r\n\t            if (interactionMutex.isTaken(this._zr, 'globalPan')) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var x = e.offsetX;\r\n\t            var y = e.offsetY;\r\n\r\n\t            var oldX = this._x;\r\n\t            var oldY = this._y;\r\n\r\n\t            var dx = x - oldX;\r\n\t            var dy = y - oldY;\r\n\r\n\t            this._x = x;\r\n\t            this._y = y;\r\n\r\n\t            var target = this.target;\r\n\r\n\t            if (target) {\r\n\t                var pos = target.position;\r\n\t                pos[0] += dx;\r\n\t                pos[1] += dy;\r\n\t                target.dirty();\r\n\t            }\r\n\r\n\t            eventTool.stop(e.event);\r\n\t            this.trigger('pan', dx, dy, oldX, oldY, x, y);\r\n\t        }\r\n\t    }\r\n\r\n\t    function mouseup(e) {\r\n\t        this._dragging = false;\r\n\t    }\r\n\r\n\t    function mousewheel(e) {\r\n\t        // Convenience:\r\n\t        // Mac and VM Windows on Mac: scroll up: zoom out.\r\n\t        // Windows: scroll up: zoom in.\r\n\t        var zoomDelta = e.wheelDelta > 0 ? 1.1 : 1 / 1.1;\r\n\t        zoom.call(this, e, zoomDelta, e.offsetX, e.offsetY);\r\n\t    }\r\n\r\n\t    function pinch(e) {\r\n\t        if (interactionMutex.isTaken(this._zr, 'globalPan')) {\r\n\t            return;\r\n\t        }\r\n\t        var zoomDelta = e.pinchScale > 1 ? 1.1 : 1 / 1.1;\r\n\t        zoom.call(this, e, zoomDelta, e.pinchX, e.pinchY);\r\n\t    }\r\n\r\n\t    function zoom(e, zoomDelta, zoomX, zoomY) {\r\n\t        if (this.containsPoint && this.containsPoint(zoomX, zoomY)) {\r\n\t            // When mouse is out of roamController rect,\r\n\t            // default befavoius should be be disabled, otherwise\r\n\t            // page sliding is disabled, contrary to expectation.\r\n\t            eventTool.stop(e.event);\r\n\r\n\t            var target = this.target;\r\n\t            var zoomLimit = this.zoomLimit;\r\n\r\n\t            if (target) {\r\n\t                var pos = target.position;\r\n\t                var scale = target.scale;\r\n\r\n\t                var newZoom = this.zoom = this.zoom || 1;\r\n\t                newZoom *= zoomDelta;\r\n\t                if (zoomLimit) {\r\n\t                    var zoomMin = zoomLimit.min || 0;\r\n\t                    var zoomMax = zoomLimit.max || Infinity;\r\n\t                    newZoom = Math.max(\r\n\t                        Math.min(zoomMax, newZoom),\r\n\t                        zoomMin\r\n\t                    );\r\n\t                }\r\n\t                var zoomScale = newZoom / this.zoom;\r\n\t                this.zoom = newZoom;\r\n\t                // Keep the mouse center when scaling\r\n\t                pos[0] -= (zoomX - pos[0]) * (zoomScale - 1);\r\n\t                pos[1] -= (zoomY - pos[1]) * (zoomScale - 1);\r\n\t                scale[0] *= zoomScale;\r\n\t                scale[1] *= zoomScale;\r\n\r\n\t                target.dirty();\r\n\t            }\r\n\r\n\t            this.trigger('zoom', zoomDelta, zoomX, zoomY);\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @alias module:echarts/component/helper/RoamController\r\n\t     * @constructor\r\n\t     * @mixin {module:zrender/mixin/Eventful}\r\n\t     *\r\n\t     * @param {module:zrender/zrender~ZRender} zr\r\n\t     * @param {module:zrender/Element} target\r\n\t     */\r\n\t    function RoamController(zr, target) {\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/Element}\r\n\t         */\r\n\t        this.target = target;\r\n\r\n\t        /**\r\n\t         * @type {Function}\r\n\t         */\r\n\t        this.containsPoint;\r\n\r\n\t        /**\r\n\t         * { min: 1, max: 2 }\r\n\t         * @type {Object}\r\n\t         */\r\n\t        this.zoomLimit;\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        this.zoom;\r\n\t        /**\r\n\t         * @type {module:zrender}\r\n\t         */\r\n\t        this._zr = zr;\r\n\r\n\t        // Avoid two roamController bind the same handler\r\n\t        var bind = zrUtil.bind;\r\n\t        var mousedownHandler = bind(mousedown, this);\r\n\t        var mousemoveHandler = bind(mousemove, this);\r\n\t        var mouseupHandler = bind(mouseup, this);\r\n\t        var mousewheelHandler = bind(mousewheel, this);\r\n\t        var pinchHandler = bind(pinch, this);\r\n\r\n\t        Eventful.call(this);\r\n\r\n\t        /**\r\n\t         * @param {Function} containsPoint\r\n\t         *                   input: x, y\r\n\t         *                   output: boolean\r\n\t         */\r\n\t        this.setContainsPoint = function (containsPoint) {\r\n\t            this.containsPoint = containsPoint;\r\n\t        };\r\n\r\n\t        /**\r\n\t         * Notice: only enable needed types. For example, if 'zoom'\r\n\t         * is not needed, 'zoom' should not be enabled, otherwise\r\n\t         * default mousewheel behaviour (scroll page) will be disabled.\r\n\t         *\r\n\t         * @param  {boolean|string} [controlType=true] Specify the control type,\r\n\t         *                          which can be null/undefined or true/false\r\n\t         *                          or 'pan/move' or 'zoom'/'scale'\r\n\t         */\r\n\t        this.enable = function (controlType) {\r\n\t            // Disable previous first\r\n\t            this.disable();\r\n\r\n\t            if (controlType == null) {\r\n\t                controlType = true;\r\n\t            }\r\n\r\n\t            if (controlType === true || (controlType === 'move' || controlType === 'pan')) {\r\n\t                zr.on('mousedown', mousedownHandler);\r\n\t                zr.on('mousemove', mousemoveHandler);\r\n\t                zr.on('mouseup', mouseupHandler);\r\n\t            }\r\n\t            if (controlType === true || (controlType === 'scale' || controlType === 'zoom')) {\r\n\t                zr.on('mousewheel', mousewheelHandler);\r\n\t                zr.on('pinch', pinchHandler);\r\n\t            }\r\n\t        };\r\n\r\n\t        this.disable = function () {\r\n\t            zr.off('mousedown', mousedownHandler);\r\n\t            zr.off('mousemove', mousemoveHandler);\r\n\t            zr.off('mouseup', mouseupHandler);\r\n\t            zr.off('mousewheel', mousewheelHandler);\r\n\t            zr.off('pinch', pinchHandler);\r\n\t        };\r\n\r\n\t        this.dispose = this.disable;\r\n\r\n\t        this.isDragging = function () {\r\n\t            return this._dragging;\r\n\t        };\r\n\r\n\t        this.isPinching = function () {\r\n\t            return this._pinching;\r\n\t        };\r\n\t    }\r\n\r\n\t    zrUtil.mixin(RoamController, Eventful);\r\n\r\n\t    module.exports = RoamController;\r\n\r\n\r\n/***/ },\r\n/* 176 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var ATTR = '\\0_ec_interaction_mutex';\r\n\r\n\t    var interactionMutex = {\r\n\r\n\t        take: function (zr, resourceKey, userKey) {\r\n\t            var store = getStore(zr);\r\n\t            store[resourceKey] = userKey;\r\n\t        },\r\n\r\n\t        release: function (zr, resourceKey, userKey) {\r\n\t            var store = getStore(zr);\r\n\t            var uKey = store[resourceKey];\r\n\r\n\t            if (uKey === userKey) {\r\n\t                store[resourceKey] = null;\r\n\t            }\r\n\t        },\r\n\r\n\t        isTaken: function (zr, resourceKey) {\r\n\t            return !!getStore(zr)[resourceKey];\r\n\t        }\r\n\t    };\r\n\r\n\t    function getStore(zr) {\r\n\t        return zr[ATTR] || (zr[ATTR] = {});\r\n\t    }\r\n\r\n\t    /**\r\n\t     * payload: {\r\n\t     *     type: 'takeGlobalCursor',\r\n\t     *     key: 'dataZoomSelect', or 'brush', or ...,\r\n\t     *         If no userKey, release global cursor.\r\n\t     * }\r\n\t     */\r\n\t    __webpack_require__(1).registerAction(\r\n\t        {type: 'takeGlobalCursor', event: 'globalCursorTaken', update: 'update'},\r\n\t        function () {}\r\n\t    );\r\n\r\n\t    module.exports = interactionMutex;\r\n\r\n\r\n/***/ },\r\n/* 177 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var roamHelper = __webpack_require__(178);\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    /**\r\n\t     * @payload\r\n\t     * @property {string} [componentType=series]\r\n\t     * @property {number} [dx]\r\n\t     * @property {number} [dy]\r\n\t     * @property {number} [zoom]\r\n\t     * @property {number} [originX]\r\n\t     * @property {number} [originY]\r\n\t     */\r\n\t    echarts.registerAction({\r\n\t        type: 'geoRoam',\r\n\t        event: 'geoRoam',\r\n\t        update: 'updateLayout'\r\n\t    }, function (payload, ecModel) {\r\n\t        var componentType = payload.componentType || 'series';\r\n\r\n\t        ecModel.eachComponent(\r\n\t            { mainType: componentType, query: payload },\r\n\t            function (componentModel) {\r\n\t                var geo = componentModel.coordinateSystem;\r\n\t                if (geo.type !== 'geo') {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var res = roamHelper.updateCenterAndZoom(\r\n\t                    geo, payload, componentModel.get('scaleLimit')\r\n\t                );\r\n\r\n\t                componentModel.setCenter\r\n\t                    && componentModel.setCenter(res.center);\r\n\r\n\t                componentModel.setZoom\r\n\t                    && componentModel.setZoom(res.zoom);\r\n\r\n\t                // All map series with same `map` use the same geo coordinate system\r\n\t                // So the center and zoom must be in sync. Include the series not selected by legend\r\n\t                if (componentType === 'series') {\r\n\t                    zrUtil.each(componentModel.seriesGroup, function (seriesModel) {\r\n\t                        seriesModel.setCenter(res.center);\r\n\t                        seriesModel.setZoom(res.zoom);\r\n\t                    });\r\n\t                }\r\n\t            }\r\n\t        );\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 178 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    var roamHelper = {};\r\n\r\n\t    /**\r\n\t     * @param {module:echarts/coord/View} view\r\n\t     * @param {Object} payload\r\n\t     * @param {Object} [zoomLimit]\r\n\t     */\r\n\t    roamHelper.updateCenterAndZoom = function (\r\n\t        view, payload, zoomLimit\r\n\t    ) {\r\n\t        var previousZoom = view.getZoom();\r\n\t        var center = view.getCenter();\r\n\t        var zoom = payload.zoom;\r\n\r\n\t        var point = view.dataToPoint(center);\r\n\r\n\t        if (payload.dx != null && payload.dy != null) {\r\n\t            point[0] -= payload.dx;\r\n\t            point[1] -= payload.dy;\r\n\r\n\t            var center = view.pointToData(point);\r\n\t            view.setCenter(center);\r\n\t        }\r\n\t        if (zoom != null) {\r\n\t            if (zoomLimit) {\r\n\t                var zoomMin = zoomLimit.min || 0;\r\n\t                var zoomMax = zoomLimit.max || Infinity;\r\n\t                zoom = Math.max(\r\n\t                    Math.min(previousZoom * zoom, zoomMax),\r\n\t                    zoomMin\r\n\t                ) / previousZoom;\r\n\t            }\r\n\r\n\t            // Zoom on given point(originX, originY)\r\n\t            view.scale[0] *= zoom;\r\n\t            view.scale[1] *= zoom;\r\n\t            var position = view.position;\r\n\t            var fixX = (payload.originX - position[0]) * (zoom - 1);\r\n\t            var fixY = (payload.originY - position[1]) * (zoom - 1);\r\n\r\n\t            position[0] -= fixX;\r\n\t            position[1] -= fixY;\r\n\r\n\t            view.updateTransform();\r\n\t            // Get the new center\r\n\t            var center = view.pointToData(point);\r\n\t            view.setCenter(center);\r\n\t            view.setZoom(zoom * previousZoom);\r\n\t        }\r\n\r\n\t        return {\r\n\t            center: view.getCenter(),\r\n\t            zoom: view.getZoom()\r\n\t        };\r\n\t    };\r\n\r\n\t    module.exports = roamHelper;\r\n\r\n\r\n/***/ },\r\n/* 179 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    module.exports = function (ecModel) {\r\n\r\n\t        var processedMapType = {};\r\n\r\n\t        ecModel.eachSeriesByType('map', function (mapSeries) {\r\n\t            var mapType = mapSeries.get('map');\r\n\t            if (processedMapType[mapType]) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var mapSymbolOffsets = {};\r\n\r\n\t            zrUtil.each(mapSeries.seriesGroup, function (subMapSeries) {\r\n\t                var geo = subMapSeries.coordinateSystem;\r\n\t                var data = subMapSeries.originalData;\r\n\t                if (subMapSeries.get('showLegendSymbol') && ecModel.getComponent('legend')) {\r\n\t                    data.each('value', function (value, idx) {\r\n\t                        var name = data.getName(idx);\r\n\t                        var region = geo.getRegion(name);\r\n\r\n\t                        // If input series.data is [11, 22, '-'/null/undefined, 44],\r\n\t                        // it will be filled with NaN: [11, 22, NaN, 44] and NaN will\r\n\t                        // not be drawn. So here must validate if value is NaN.\r\n\t                        if (!region || isNaN(value)) {\r\n\t                            return;\r\n\t                        }\r\n\r\n\t                        var offset = mapSymbolOffsets[name] || 0;\r\n\r\n\t                        var point = geo.dataToPoint(region.center);\r\n\r\n\t                        mapSymbolOffsets[name] = offset + 1;\r\n\r\n\t                        data.setItemLayout(idx, {\r\n\t                            point: point,\r\n\t                            offset: offset\r\n\t                        });\r\n\t                    });\r\n\t                }\r\n\t            });\r\n\r\n\t            // Show label of those region not has legendSymbol(which is offset 0)\r\n\t            var data = mapSeries.getData();\r\n\t            data.each(function (idx) {\r\n\t                var name = data.getName(idx);\r\n\t                var layout = data.getItemLayout(idx) || {};\r\n\t                layout.showLabel = !mapSymbolOffsets[name];\r\n\t                data.setItemLayout(idx, layout);\r\n\t            });\r\n\r\n\t            processedMapType[mapType] = true;\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 180 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\t    module.exports = function (ecModel) {\r\n\t        ecModel.eachSeriesByType('map', function (seriesModel) {\r\n\t            var colorList = seriesModel.get('color');\r\n\t            var itemStyleModel = seriesModel.getModel('itemStyle.normal');\r\n\r\n\t            var areaColor = itemStyleModel.get('areaColor');\r\n\t            var color = itemStyleModel.get('color')\r\n\t                || colorList[seriesModel.seriesIndex % colorList.length];\r\n\r\n\t            seriesModel.getData().setVisual({\r\n\t                'areaColor': areaColor,\r\n\t                'color': color\r\n\t            });\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 181 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    // FIXME 公用？\r\n\t    /**\r\n\t     * @param {Array.<module:echarts/data/List>} datas\r\n\t     * @param {string} statisticType 'average' 'sum'\r\n\t     * @inner\r\n\t     */\r\n\t    function dataStatistics(datas, statisticType) {\r\n\t        var dataNameMap = {};\r\n\t        var dims = ['value'];\r\n\r\n\t        for (var i = 0; i < datas.length; i++) {\r\n\t            datas[i].each(dims, function (value, idx) {\r\n\t                var name = datas[i].getName(idx);\r\n\t                dataNameMap[name] = dataNameMap[name] || [];\r\n\t                if (!isNaN(value)) {\r\n\t                    dataNameMap[name].push(value);\r\n\t                }\r\n\t            });\r\n\t        }\r\n\r\n\t        return datas[0].map(dims, function (value, idx) {\r\n\t            var name = datas[0].getName(idx);\r\n\t            var sum = 0;\r\n\t            var min = Infinity;\r\n\t            var max = -Infinity;\r\n\t            var len = dataNameMap[name].length;\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                min = Math.min(min, dataNameMap[name][i]);\r\n\t                max = Math.max(max, dataNameMap[name][i]);\r\n\t                sum += dataNameMap[name][i];\r\n\t            }\r\n\t            var result;\r\n\t            if (statisticType === 'min') {\r\n\t                result = min;\r\n\t            }\r\n\t            else if (statisticType === 'max') {\r\n\t                result = max;\r\n\t            }\r\n\t            else if (statisticType === 'average') {\r\n\t                result = sum / len;\r\n\t            }\r\n\t            else {\r\n\t                result = sum;\r\n\t            }\r\n\t            return len === 0 ? NaN : result;\r\n\t        });\r\n\t    }\r\n\r\n\t    module.exports = function (ecModel) {\r\n\t        var seriesGroupByMapType = {};\r\n\t        ecModel.eachSeriesByType('map', function (seriesModel) {\r\n\t            var mapType = seriesModel.get('map');\r\n\t            seriesGroupByMapType[mapType] = seriesGroupByMapType[mapType] || [];\r\n\t            seriesGroupByMapType[mapType].push(seriesModel);\r\n\t        });\r\n\r\n\t        zrUtil.each(seriesGroupByMapType, function (seriesList, mapType) {\r\n\t            var data = dataStatistics(\r\n\t                zrUtil.map(seriesList, function (seriesModel) {\r\n\t                    return seriesModel.getData();\r\n\t                }),\r\n\t                seriesList[0].get('mapValueCalculation')\r\n\t            );\r\n\r\n\t            for (var i = 0; i < seriesList.length; i++) {\r\n\t                seriesList[i].originalData = seriesList[i].getData();\r\n\t            }\r\n\r\n\t            // FIXME Put where?\r\n\t            for (var i = 0; i < seriesList.length; i++) {\r\n\t                seriesList[i].seriesGroup = seriesList;\r\n\t                seriesList[i].needsDrawMap = i === 0;\r\n\r\n\t                seriesList[i].setData(data.cloneShallow());\r\n\t                seriesList[i].mainSeries = seriesList[0];\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 182 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    module.exports = function (option) {\r\n\t        // Save geoCoord\r\n\t        var mapSeries = [];\r\n\t        zrUtil.each(option.series, function (seriesOpt) {\r\n\t            if (seriesOpt.type === 'map') {\r\n\t                mapSeries.push(seriesOpt);\r\n\t            }\r\n\t        });\r\n\r\n\t        zrUtil.each(mapSeries, function (seriesOpt) {\r\n\t            seriesOpt.map = seriesOpt.map || seriesOpt.mapType;\r\n\t            // Put x, y, width, height, x2, y2 in the top level\r\n\t            zrUtil.defaults(seriesOpt, seriesOpt.mapLocation);\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 183 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    __webpack_require__(184);\r\n\t    __webpack_require__(188);\r\n\t    __webpack_require__(191);\r\n\r\n\t    echarts.registerVisual(__webpack_require__(192));\r\n\r\n\t    echarts.registerLayout(__webpack_require__(194));\r\n\r\n\r\n/***/ },\r\n/* 184 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\t    var Tree = __webpack_require__(185);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Model = __webpack_require__(12);\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var helper = __webpack_require__(187);\r\n\t    var encodeHTML = formatUtil.encodeHTML;\r\n\t    var addCommas = formatUtil.addCommas;\r\n\r\n\r\n\t    module.exports = SeriesModel.extend({\r\n\r\n\t        type: 'series.treemap',\r\n\r\n\t        dependencies: ['grid', 'polar'],\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/data/Tree~Node}\r\n\t         */\r\n\t        _viewRoot: null,\r\n\r\n\t        defaultOption: {\r\n\t            // Disable progressive rendering\r\n\t            progressive: 0,\r\n\t            hoverLayerThreshold: Infinity,\r\n\t            // center: ['50%', '50%'],          // not supported in ec3.\r\n\t            // size: ['80%', '80%'],            // deprecated, compatible with ec2.\r\n\t            left: 'center',\r\n\t            top: 'middle',\r\n\t            right: null,\r\n\t            bottom: null,\r\n\t            width: '80%',\r\n\t            height: '80%',\r\n\t            sort: true,                         // Can be null or false or true\r\n\t                                                // (order by desc default, asc not supported yet (strange effect))\r\n\t            clipWindow: 'origin',               // Size of clipped window when zooming. 'origin' or 'fullscreen'\r\n\t            squareRatio: 0.5 * (1 + Math.sqrt(5)), // golden ratio\r\n\t            leafDepth: null,                    // Nodes on depth from root are regarded as leaves.\r\n\t                                                // Count from zero (zero represents only view root).\r\n\t            drillDownIcon: '▶',                 // Use html character temporarily because it is complicated\r\n\t                                                // to align specialized icon. ▷▶❒❐▼✚\r\n\t            visualDimension: 0,                 // Can be 0, 1, 2, 3.\r\n\t            zoomToNodeRatio: 0.32 * 0.32,       // Be effective when using zoomToNode. Specify the proportion of the\r\n\t                                                // target node area in the view area.\r\n\t            roam: true,                         // true, false, 'scale' or 'zoom', 'move'.\r\n\t            nodeClick: 'zoomToNode',            // Leaf node click behaviour: 'zoomToNode', 'link', false.\r\n\t                                                // If leafDepth is set and clicking a node which has children but\r\n\t                                                // be on left depth, the behaviour would be changing root. Otherwise\r\n\t                                                // use behavious defined above.\r\n\t            animation: true,\r\n\t            animationDurationUpdate: 900,\r\n\t            animationEasing: 'quinticInOut',\r\n\t            breadcrumb: {\r\n\t                show: true,\r\n\t                height: 22,\r\n\t                left: 'center',\r\n\t                top: 'bottom',\r\n\t                // right\r\n\t                // bottom\r\n\t                emptyItemWidth: 25,             // Width of empty node.\r\n\t                itemStyle: {\r\n\t                    normal: {\r\n\t                        color: 'rgba(0,0,0,0.7)', //'#5793f3',\r\n\t                        borderColor: 'rgba(255,255,255,0.7)',\r\n\t                        borderWidth: 1,\r\n\t                        shadowColor: 'rgba(150,150,150,1)',\r\n\t                        shadowBlur: 3,\r\n\t                        shadowOffsetX: 0,\r\n\t                        shadowOffsetY: 0,\r\n\t                        textStyle: {\r\n\t                            color: '#fff'\r\n\t                        }\r\n\t                    },\r\n\t                    emphasis: {\r\n\t                        textStyle: {}\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\t            label: {\r\n\t                normal: {\r\n\t                    show: true,\r\n\t                    position: 'inside', // Can be [5, '5%'] or position stirng like 'insideTopLeft', ...\r\n\t                    textStyle: {\r\n\t                        color: '#fff',\r\n\t                        ellipsis: true\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    color: null,            // Can be 'none' if not necessary.\r\n\t                    colorAlpha: null,       // Can be 'none' if not necessary.\r\n\t                    colorSaturation: null,  // Can be 'none' if not necessary.\r\n\t                    borderWidth: 0,\r\n\t                    gapWidth: 0,\r\n\t                    borderColor: '#fff',\r\n\t                    borderColorSaturation: null // If specified, borderColor will be ineffective, and the\r\n\t                                                // border color is evaluated by color of current node and\r\n\t                                                // borderColorSaturation.\r\n\t                },\r\n\t                emphasis: {\r\n\r\n\t                }\r\n\t            },\r\n\t            color: [],                  // + treemapSeries.color should not be modified. Please only modified\r\n\t                                        // level[n].color (if necessary).\r\n\t                                        // + Specify color list of each level. level[0].color would be global\r\n\t                                        // color list if not specified. (see method `setDefault`).\r\n\t                                        // + But set as a empty array to forbid fetch color from global palette\r\n\t                                        // when using nodeModel.get('color'), otherwise nodes on deep level\r\n\t                                        // will always has color palette set and are not able to inherit color\r\n\t                                        // from parent node.\r\n\t                                        // + TreemapSeries.color can not be set as 'none', otherwise effect\r\n\t                                        // legend color fetching (see seriesColor.js).\r\n\t            colorAlpha: null,           // Array. Specify color alpha range of each level, like [0.2, 0.8]\r\n\t            colorSaturation: null,      // Array. Specify color saturation of each level, like [0.2, 0.5]\r\n\t            colorMappingBy: 'index',    // 'value' or 'index' or 'id'.\r\n\t            visibleMin: 10,             // If area less than this threshold (unit: pixel^2), node will not\r\n\t                                        // be rendered. Only works when sort is 'asc' or 'desc'.\r\n\t            childrenVisibleMin: null,   // If area of a node less than this threshold (unit: pixel^2),\r\n\t                                        // grandchildren will not show.\r\n\t                                        // Why grandchildren? If not grandchildren but children,\r\n\t                                        // some siblings show children and some not,\r\n\t                                        // the appearance may be mess and not consistent,\r\n\t            levels: []                  // Each item: {\r\n\t                                        //     visibleMin, itemStyle, visualDimension, label\r\n\t                                        // }\r\n\t            // data: {\r\n\t            //      value: [],\r\n\t            //      children: [],\r\n\t            //      link: 'http://xxx.xxx.xxx',\r\n\t            //      target: 'blank' or 'self'\r\n\t            // }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            var data = option.data || [];\r\n\t            var rootName = option.name;\r\n\t            rootName == null && (rootName = option.name);\r\n\r\n\t            // Create a virtual root.\r\n\t            var root = {name: rootName, children: option.data};\r\n\t            var value0 = (data[0] || {}).value;\r\n\r\n\t            completeTreeValue(root, zrUtil.isArray(value0) ? value0.length : -1);\r\n\r\n\t            // FIXME\r\n\t            // sereis.mergeOption 的 getInitData是否放在merge后，从而能直接获取merege后的结果而非手动判断。\r\n\t            var levels = option.levels || [];\r\n\r\n\t            levels = option.levels = setDefault(levels, ecModel);\r\n\r\n\t            // Make sure always a new tree is created when setOption,\r\n\t            // in TreemapView, we check whether oldTree === newTree\r\n\t            // to choose mappings approach among old shapes and new shapes.\r\n\t            return Tree.createTree(root, this, levels).data;\r\n\t        },\r\n\r\n\t        optionUpdated: function () {\r\n\t            this.resetViewRoot();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         * @param {number} dataIndex\r\n\t         * @param {boolean} [mutipleSeries=false]\r\n\t         */\r\n\t        formatTooltip: function (dataIndex) {\r\n\t            var data = this.getData();\r\n\t            var value = this.getRawValue(dataIndex);\r\n\t            var formattedValue = zrUtil.isArray(value)\r\n\t                ? addCommas(value[0]) : addCommas(value);\r\n\t            var name = data.getName(dataIndex);\r\n\r\n\t            return encodeHTML(name) + ': ' + formattedValue;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Add tree path to tooltip param\r\n\t         *\r\n\t         * @override\r\n\t         * @param {number} dataIndex\r\n\t         * @return {Object}\r\n\t         */\r\n\t        getDataParams: function (dataIndex) {\r\n\t            var params = SeriesModel.prototype.getDataParams.apply(this, arguments);\r\n\r\n\t            var node = this.getData().tree.getNodeByDataIndex(dataIndex);\r\n\t            params.treePathInfo = helper.wrapTreePathInfo(node, this);\r\n\r\n\t            return params;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {Object} layoutInfo {\r\n\t         *                                x: containerGroup x\r\n\t         *                                y: containerGroup y\r\n\t         *                                width: containerGroup width\r\n\t         *                                height: containerGroup height\r\n\t         *                            }\r\n\t         */\r\n\t        setLayoutInfo: function (layoutInfo) {\r\n\t            /**\r\n\t             * @readOnly\r\n\t             * @type {Object}\r\n\t             */\r\n\t            this.layoutInfo = this.layoutInfo || {};\r\n\t            zrUtil.extend(this.layoutInfo, layoutInfo);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {string} id\r\n\t         * @return {number} index\r\n\t         */\r\n\t        mapIdToIndex: function (id) {\r\n\t            // A feature is implemented:\r\n\t            // index is monotone increasing with the sequence of\r\n\t            // input id at the first time.\r\n\t            // This feature can make sure that each data item and its\r\n\t            // mapped color have the same index between data list and\r\n\t            // color list at the beginning, which is useful for user\r\n\t            // to adjust data-color mapping.\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {Object}\r\n\t             */\r\n\t            var idIndexMap = this._idIndexMap;\r\n\r\n\t            if (!idIndexMap) {\r\n\t                idIndexMap = this._idIndexMap = {};\r\n\t                /**\r\n\t                 * @private\r\n\t                 * @type {number}\r\n\t                 */\r\n\t                this._idIndexMapCount = 0;\r\n\t            }\r\n\r\n\t            var index = idIndexMap[id];\r\n\t            if (index == null) {\r\n\t                idIndexMap[id] = index = this._idIndexMapCount++;\r\n\t            }\r\n\r\n\t            return index;\r\n\t        },\r\n\r\n\t        getViewRoot: function () {\r\n\t            return this._viewRoot;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/data/Tree~Node} [viewRoot]\r\n\t         */\r\n\t        resetViewRoot: function (viewRoot) {\r\n\t            viewRoot\r\n\t                ? (this._viewRoot = viewRoot)\r\n\t                : (viewRoot = this._viewRoot);\r\n\r\n\t            var root = this.getData().tree.root;\r\n\r\n\t            if (!viewRoot\r\n\t                || (viewRoot !== root && !root.contains(viewRoot))\r\n\t            ) {\r\n\t                this._viewRoot = root;\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * @param {Object} dataNode\r\n\t     */\r\n\t    function completeTreeValue(dataNode, arrValueLength) {\r\n\t        // Postorder travel tree.\r\n\t        // If value of none-leaf node is not set,\r\n\t        // calculate it by suming up the value of all children.\r\n\t        var sum = 0;\r\n\r\n\t        zrUtil.each(dataNode.children, function (child) {\r\n\r\n\t            completeTreeValue(child, arrValueLength);\r\n\r\n\t            var childValue = child.value;\r\n\t            zrUtil.isArray(childValue) && (childValue = childValue[0]);\r\n\r\n\t            sum += childValue;\r\n\t        });\r\n\r\n\t        var thisValue = dataNode.value;\r\n\r\n\t        if (arrValueLength >= 0) {\r\n\t            if (!zrUtil.isArray(thisValue)) {\r\n\t                dataNode.value = new Array(arrValueLength);\r\n\t            }\r\n\t            else {\r\n\t                thisValue = thisValue[0];\r\n\t            }\r\n\t        }\r\n\r\n\t        if (thisValue == null || isNaN(thisValue)) {\r\n\t            thisValue = sum;\r\n\t        }\r\n\t        // Value should not less than 0.\r\n\t        if (thisValue < 0) {\r\n\t            thisValue = 0;\r\n\t        }\r\n\r\n\t        arrValueLength >= 0\r\n\t            ? (dataNode.value[0] = thisValue)\r\n\t            : (dataNode.value = thisValue);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * set default to level configuration\r\n\t     */\r\n\t    function setDefault(levels, ecModel) {\r\n\t        var globalColorList = ecModel.get('color');\r\n\r\n\t        if (!globalColorList) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        levels = levels || [];\r\n\t        var hasColorDefine;\r\n\t        zrUtil.each(levels, function (levelDefine) {\r\n\t            var model = new Model(levelDefine);\r\n\t            var modelColor = model.get('color');\r\n\r\n\t            if (model.get('itemStyle.normal.color')\r\n\t                || (modelColor && modelColor !== 'none')\r\n\t            ) {\r\n\t                hasColorDefine = true;\r\n\t            }\r\n\t        });\r\n\r\n\t        if (!hasColorDefine) {\r\n\t            var level0 = levels[0] || (levels[0] = {});\r\n\t            level0.color = globalColorList.slice();\r\n\t        }\r\n\r\n\t        return levels;\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 185 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Tree data structure\r\n\t *\r\n\t * @module echarts/data/Tree\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Model = __webpack_require__(12);\r\n\t    var List = __webpack_require__(97);\r\n\t    var linkList = __webpack_require__(186);\r\n\t    var completeDimensions = __webpack_require__(102);\r\n\r\n\t    /**\r\n\t     * @constructor module:echarts/data/Tree~TreeNode\r\n\t     * @param {string} name\r\n\t     * @param {module:echarts/data/Tree} hostTree\r\n\t     */\r\n\t    var TreeNode = function (name, hostTree) {\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.name = name || '';\r\n\r\n\t        /**\r\n\t         * Depth of node\r\n\t         *\r\n\t         * @type {number}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.depth = 0;\r\n\r\n\t        /**\r\n\t         * Height of the subtree rooted at this node.\r\n\t         * @type {number}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.height = 0;\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/data/Tree~TreeNode}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.parentNode = null;\r\n\r\n\t        /**\r\n\t         * Reference to list item.\r\n\t         * Do not persistent dataIndex outside,\r\n\t         * besause it may be changed by list.\r\n\t         * If dataIndex -1,\r\n\t         * this node is logical deleted (filtered) in list.\r\n\t         *\r\n\t         * @type {Object}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.dataIndex = -1;\r\n\r\n\t        /**\r\n\t         * @type {Array.<module:echarts/data/Tree~TreeNode>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.children = [];\r\n\r\n\t        /**\r\n\t         * @type {Array.<module:echarts/data/Tree~TreeNode>}\r\n\t         * @pubilc\r\n\t         */\r\n\t        this.viewChildren = [];\r\n\r\n\t        /**\r\n\t         * @type {moduel:echarts/data/Tree}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.hostTree = hostTree;\r\n\t    };\r\n\r\n\t    TreeNode.prototype = {\r\n\r\n\t        constructor: TreeNode,\r\n\r\n\t        /**\r\n\t         * The node is removed.\r\n\t         * @return {boolean} is removed.\r\n\t         */\r\n\t        isRemoved: function () {\r\n\t            return this.dataIndex < 0;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Travel this subtree (include this node).\r\n\t         * Usage:\r\n\t         *    node.eachNode(function () { ... }); // preorder\r\n\t         *    node.eachNode('preorder', function () { ... }); // preorder\r\n\t         *    node.eachNode('postorder', function () { ... }); // postorder\r\n\t         *    node.eachNode(\r\n\t         *        {order: 'postorder', attr: 'viewChildren'},\r\n\t         *        function () { ... }\r\n\t         *    ); // postorder\r\n\t         *\r\n\t         * @param {(Object|string)} options If string, means order.\r\n\t         * @param {string=} options.order 'preorder' or 'postorder'\r\n\t         * @param {string=} options.attr 'children' or 'viewChildren'\r\n\t         * @param {Function} cb If in preorder and return false,\r\n\t         *                      its subtree will not be visited.\r\n\t         * @param {Object} [context]\r\n\t         */\r\n\t        eachNode: function (options, cb, context) {\r\n\t            if (typeof options === 'function') {\r\n\t                context = cb;\r\n\t                cb = options;\r\n\t                options = null;\r\n\t            }\r\n\r\n\t            options = options || {};\r\n\t            if (zrUtil.isString(options)) {\r\n\t                options = {order: options};\r\n\t            }\r\n\r\n\t            var order = options.order || 'preorder';\r\n\t            var children = this[options.attr || 'children'];\r\n\r\n\t            var suppressVisitSub;\r\n\t            order === 'preorder' && (suppressVisitSub = cb.call(context, this));\r\n\r\n\t            for (var i = 0; !suppressVisitSub && i < children.length; i++) {\r\n\t                children[i].eachNode(options, cb, context);\r\n\t            }\r\n\r\n\t            order === 'postorder' && cb.call(context, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Update depth and height of this subtree.\r\n\t         *\r\n\t         * @param  {number} depth\r\n\t         */\r\n\t        updateDepthAndHeight: function (depth) {\r\n\t            var height = 0;\r\n\t            this.depth = depth;\r\n\t            for (var i = 0; i < this.children.length; i++) {\r\n\t                var child = this.children[i];\r\n\t                child.updateDepthAndHeight(depth + 1);\r\n\t                if (child.height > height) {\r\n\t                    height = child.height;\r\n\t                }\r\n\t            }\r\n\t            this.height = height + 1;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {string} id\r\n\t         * @return {module:echarts/data/Tree~TreeNode}\r\n\t         */\r\n\t        getNodeById: function (id) {\r\n\t            if (this.getId() === id) {\r\n\t                return this;\r\n\t            }\r\n\t            for (var i = 0, children = this.children, len = children.length; i < len; i++) {\r\n\t                var res = children[i].getNodeById(id);\r\n\t                if (res) {\r\n\t                    return res;\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/data/Tree~TreeNode} node\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        contains: function (node) {\r\n\t            if (node === this) {\r\n\t                return true;\r\n\t            }\r\n\t            for (var i = 0, children = this.children, len = children.length; i < len; i++) {\r\n\t                var res = children[i].contains(node);\r\n\t                if (res) {\r\n\t                    return res;\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {boolean} includeSelf Default false.\r\n\t         * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]\r\n\t         */\r\n\t        getAncestors: function (includeSelf) {\r\n\t            var ancestors = [];\r\n\t            var node = includeSelf ? this : this.parentNode;\r\n\t            while (node) {\r\n\t                ancestors.push(node);\r\n\t                node = node.parentNode;\r\n\t            }\r\n\t            ancestors.reverse();\r\n\t            return ancestors;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3\r\n\t         * @return {number} Value.\r\n\t         */\r\n\t        getValue: function (dimension) {\r\n\t            var data = this.hostTree.data;\r\n\t            return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Object} layout\r\n\t         * @param {boolean=} [merge=false]\r\n\t         */\r\n\t        setLayout: function (layout, merge) {\r\n\t            this.dataIndex >= 0\r\n\t                && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {Object} layout\r\n\t         */\r\n\t        getLayout: function () {\r\n\t            return this.hostTree.data.getItemLayout(this.dataIndex);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} path\r\n\t         * @return {module:echarts/model/Model}\r\n\t         */\r\n\t        getModel: function (path) {\r\n\t            if (this.dataIndex < 0) {\r\n\t                return;\r\n\t            }\r\n\t            var hostTree = this.hostTree;\r\n\t            var itemModel = hostTree.data.getItemModel(this.dataIndex);\r\n\t            var levelModel = this.getLevelModel();\r\n\r\n\t            return itemModel.getModel(path, (levelModel || hostTree.hostModel).getModel(path));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:echarts/model/Model}\r\n\t         */\r\n\t        getLevelModel: function () {\r\n\t            return (this.hostTree.levelModels || [])[this.depth];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @example\r\n\t         *  setItemVisual('color', color);\r\n\t         *  setItemVisual({\r\n\t         *      'color': color\r\n\t         *  });\r\n\t         */\r\n\t        setVisual: function (key, value) {\r\n\t            this.dataIndex >= 0\r\n\t                && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get item visual\r\n\t         */\r\n\t        getVisual: function (key, ignoreParent) {\r\n\t            return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @return {number}\r\n\t         */\r\n\t        getRawIndex: function () {\r\n\t            return this.hostTree.data.getRawIndex(this.dataIndex);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @return {string}\r\n\t         */\r\n\t        getId: function () {\r\n\t            return this.hostTree.data.getId(this.dataIndex);\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @alias module:echarts/data/Tree\r\n\t     * @param {module:echarts/model/Model} hostModel\r\n\t     * @param {Array.<Object>} levelOptions\r\n\t     */\r\n\t    function Tree(hostModel, levelOptions) {\r\n\t        /**\r\n\t         * @type {module:echarts/data/Tree~TreeNode}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.root;\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/data/List}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.data;\r\n\r\n\t        /**\r\n\t         * Index of each item is the same as the raw index of coresponding list item.\r\n\t         * @private\r\n\t         * @type {Array.<module:echarts/data/Tree~TreeNode}\r\n\t         */\r\n\t        this._nodes = [];\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @readOnly\r\n\t         * @type {module:echarts/model/Model}\r\n\t         */\r\n\t        this.hostModel = hostModel;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @readOnly\r\n\t         * @type {Array.<module:echarts/model/Model}\r\n\t         */\r\n\t        this.levelModels = zrUtil.map(levelOptions || [], function (levelDefine) {\r\n\t            return new Model(levelDefine, hostModel, hostModel.ecModel);\r\n\t        });\r\n\t    }\r\n\r\n\t    Tree.prototype = {\r\n\r\n\t        constructor: Tree,\r\n\r\n\t        type: 'tree',\r\n\r\n\t        /**\r\n\t         * Travel this subtree (include this node).\r\n\t         * Usage:\r\n\t         *    node.eachNode(function () { ... }); // preorder\r\n\t         *    node.eachNode('preorder', function () { ... }); // preorder\r\n\t         *    node.eachNode('postorder', function () { ... }); // postorder\r\n\t         *    node.eachNode(\r\n\t         *        {order: 'postorder', attr: 'viewChildren'},\r\n\t         *        function () { ... }\r\n\t         *    ); // postorder\r\n\t         *\r\n\t         * @param {(Object|string)} options If string, means order.\r\n\t         * @param {string=} options.order 'preorder' or 'postorder'\r\n\t         * @param {string=} options.attr 'children' or 'viewChildren'\r\n\t         * @param {Function} cb\r\n\t         * @param {Object}   [context]\r\n\t         */\r\n\t        eachNode: function(options, cb, context) {\r\n\t            this.root.eachNode(options, cb, context);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {number} dataIndex\r\n\t         * @return {module:echarts/data/Tree~TreeNode}\r\n\t         */\r\n\t        getNodeByDataIndex: function (dataIndex) {\r\n\t            var rawIndex = this.data.getRawIndex(dataIndex);\r\n\t            return this._nodes[rawIndex];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} name\r\n\t         * @return {module:echarts/data/Tree~TreeNode}\r\n\t         */\r\n\t        getNodeByName: function (name) {\r\n\t            return this.root.getNodeByName(name);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Update item available by list,\r\n\t         * when list has been performed options like 'filterSelf' or 'map'.\r\n\t         */\r\n\t        update: function () {\r\n\t            var data = this.data;\r\n\t            var nodes = this._nodes;\r\n\r\n\t            for (var i = 0, len = nodes.length; i < len; i++) {\r\n\t                nodes[i].dataIndex = -1;\r\n\t            }\r\n\r\n\t            for (var i = 0, len = data.count(); i < len; i++) {\r\n\t                nodes[data.getRawIndex(i)].dataIndex = i;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Clear all layouts\r\n\t         */\r\n\t        clearLayouts: function () {\r\n\t            this.data.clearItemLayouts();\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * data node format:\r\n\t     * {\r\n\t     *     name: ...\r\n\t     *     value: ...\r\n\t     *     children: [\r\n\t     *         {\r\n\t     *             name: ...\r\n\t     *             value: ...\r\n\t     *             children: ...\r\n\t     *         },\r\n\t     *         ...\r\n\t     *     ]\r\n\t     * }\r\n\t     *\r\n\t     * @static\r\n\t     * @param {Objec} dataRoot Root node.\r\n\t     * @param {module:echarts/model/Model} hostModel\r\n\t     * @param {Array.<Object>} levelOptions\r\n\t     * @return module:echarts/data/Tree\r\n\t     */\r\n\t    Tree.createTree = function (dataRoot, hostModel, levelOptions) {\r\n\r\n\t        var tree = new Tree(hostModel, levelOptions);\r\n\t        var listData = [];\r\n\r\n\t        buildHierarchy(dataRoot);\r\n\r\n\t        function buildHierarchy(dataNode, parentNode) {\r\n\t            listData.push(dataNode);\r\n\r\n\t            var node = new TreeNode(dataNode.name, tree);\r\n\t            parentNode\r\n\t                ? addChild(node, parentNode)\r\n\t                : (tree.root = node);\r\n\r\n\t            tree._nodes.push(node);\r\n\r\n\t            var children = dataNode.children;\r\n\t            if (children) {\r\n\t                for (var i = 0; i < children.length; i++) {\r\n\t                    buildHierarchy(children[i], node);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        tree.root.updateDepthAndHeight(0);\r\n\r\n\t        var dimensions = completeDimensions([{name: 'value'}], listData);\r\n\t        var list = new List(dimensions, hostModel);\r\n\t        list.initData(listData);\r\n\r\n\t        linkList({\r\n\t            mainData: list,\r\n\t            struct: tree,\r\n\t            structAttr: 'tree'\r\n\t        });\r\n\r\n\t        tree.update();\r\n\r\n\t        return tree;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\r\n\t     * so this function is not ready and not necessary to be public.\r\n\t     *\r\n\t     * @param {(module:echarts/data/Tree~TreeNode|Object)} child\r\n\t     */\r\n\t    function addChild(child, node) {\r\n\t        var children = node.children;\r\n\t        if (child.parentNode === node) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        children.push(child);\r\n\t        child.parentNode = node;\r\n\t    }\r\n\r\n\t    module.exports = Tree;\r\n\r\n\r\n/***/ },\r\n/* 186 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Link lists and struct (graph or tree)\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var each = zrUtil.each;\r\n\r\n\t    var DATAS = '\\0__link_datas';\r\n\t    var MAIN_DATA = '\\0__link_mainData';\r\n\r\n\t    // Caution:\r\n\t    // In most case, either list or its shallow clones (see list.cloneShallow)\r\n\t    // is active in echarts process. So considering heap memory consumption,\r\n\t    // we do not clone tree or graph, but share them among list and its shallow clones.\r\n\t    // But in some rare case, we have to keep old list (like do animation in chart). So\r\n\t    // please take care that both the old list and the new list share the same tree/graph.\r\n\r\n\t    /**\r\n\t     * @param {Object} opt\r\n\t     * @param {module:echarts/data/List} opt.mainData\r\n\t     * @param {Object} [opt.struct] For example, instance of Graph or Tree.\r\n\t     * @param {string} [opt.structAttr] designation: list[structAttr] = struct;\r\n\t     * @param {Object} [opt.datas] {dataType: data},\r\n\t     *                 like: {node: nodeList, edge: edgeList}.\r\n\t     *                 Should contain mainData.\r\n\t     * @param {Object} [opt.datasAttr] {dataType: attr},\r\n\t     *                 designation: struct[datasAttr[dataType]] = list;\r\n\t     */\r\n\t    function linkList(opt) {\r\n\t        var mainData = opt.mainData;\r\n\t        var datas = opt.datas;\r\n\r\n\t        if (!datas) {\r\n\t            datas = {main: mainData};\r\n\t            opt.datasAttr = {main: 'data'};\r\n\t        }\r\n\t        opt.datas = opt.mainData = null;\r\n\r\n\t        linkAll(mainData, datas, opt);\r\n\r\n\t        // Porxy data original methods.\r\n\t        each(datas, function (data) {\r\n\t            each(mainData.TRANSFERABLE_METHODS, function (methodName) {\r\n\t                data.wrapMethod(methodName, zrUtil.curry(transferInjection, opt));\r\n\t            });\r\n\r\n\t        });\r\n\r\n\t        // Beyond transfer, additional features should be added to `cloneShallow`.\r\n\t        mainData.wrapMethod('cloneShallow', zrUtil.curry(cloneShallowInjection, opt));\r\n\r\n\t        // Only mainData trigger change, because struct.update may trigger\r\n\t        // another changable methods, which may bring about dead lock.\r\n\t        each(mainData.CHANGABLE_METHODS, function (methodName) {\r\n\t            mainData.wrapMethod(methodName, zrUtil.curry(changeInjection, opt));\r\n\t        });\r\n\r\n\t        // Make sure datas contains mainData.\r\n\t        zrUtil.assert(datas[mainData.dataType] === mainData);\r\n\t    }\r\n\r\n\t    function transferInjection(opt, res) {\r\n\t        if (isMainData(this)) {\r\n\t            // Transfer datas to new main data.\r\n\t            var datas = zrUtil.extend({}, this[DATAS]);\r\n\t            datas[this.dataType] = res;\r\n\t            linkAll(res, datas, opt);\r\n\t        }\r\n\t        else {\r\n\t            // Modify the reference in main data to point newData.\r\n\t            linkSingle(res, this.dataType, this[MAIN_DATA], opt);\r\n\t        }\r\n\t        return res;\r\n\t    }\r\n\r\n\t    function changeInjection(opt, res) {\r\n\t        opt.struct && opt.struct.update(this);\r\n\t        return res;\r\n\t    }\r\n\r\n\t    function cloneShallowInjection(opt, res) {\r\n\t        // cloneShallow, which brings about some fragilities, may be inappropriate\r\n\t        // to be exposed as an API. So for implementation simplicity we can make\r\n\t        // the restriction that cloneShallow of not-mainData should not be invoked\r\n\t        // outside, but only be invoked here.\r\n\t        each(res[DATAS], function (data, dataType) {\r\n\t            data !== res && linkSingle(data.cloneShallow(), dataType, res, opt);\r\n\t        });\r\n\t        return res;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Supplement method to List.\r\n\t     *\r\n\t     * @public\r\n\t     * @param {string} [dataType] If not specified, return mainData.\r\n\t     * @return {module:echarts/data/List}\r\n\t     */\r\n\t    function getLinkedData(dataType) {\r\n\t        var mainData = this[MAIN_DATA];\r\n\t        return (dataType == null || mainData == null)\r\n\t            ? mainData\r\n\t            : mainData[DATAS][dataType];\r\n\t    }\r\n\r\n\t    function isMainData(data) {\r\n\t        return data[MAIN_DATA] === data;\r\n\t    }\r\n\r\n\t    function linkAll(mainData, datas, opt) {\r\n\t        mainData[DATAS] = {};\r\n\t        each(datas, function (data, dataType) {\r\n\t            linkSingle(data, dataType, mainData, opt);\r\n\t        });\r\n\t    }\r\n\r\n\t    function linkSingle(data, dataType, mainData, opt) {\r\n\t        mainData[DATAS][dataType] = data;\r\n\t        data[MAIN_DATA] = mainData;\r\n\t        data.dataType = dataType;\r\n\r\n\t        if (opt.struct) {\r\n\t            data[opt.structAttr] = opt.struct;\r\n\t            opt.struct[opt.datasAttr[dataType]] = data;\r\n\t        }\r\n\r\n\t        // Supplement method.\r\n\t        data.getLinkedData = getLinkedData;\r\n\t    }\r\n\r\n\t    module.exports = linkList;\r\n\r\n\r\n/***/ },\r\n/* 187 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var helper = {\r\n\r\n\t        retrieveTargetInfo: function (payload, seriesModel) {\r\n\t            if (payload\r\n\t                && (\r\n\t                    payload.type === 'treemapZoomToNode'\r\n\t                    || payload.type === 'treemapRootToNode'\r\n\t                )\r\n\t            ) {\r\n\t                var root = seriesModel.getData().tree.root;\r\n\t                var targetNode = payload.targetNode;\r\n\t                if (targetNode && root.contains(targetNode)) {\r\n\t                    return {node: targetNode};\r\n\t                }\r\n\r\n\t                var targetNodeId = payload.targetNodeId;\r\n\t                if (targetNodeId != null && (targetNode = root.getNodeById(targetNodeId))) {\r\n\t                    return {node: targetNode};\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        // Not includes the given node at the last item.\r\n\t        getPathToRoot: function (node) {\r\n\t            var path = [];\r\n\t            while (node) {\r\n\t                node = node.parentNode;\r\n\t                node && path.push(node);\r\n\t            }\r\n\t            return path.reverse();\r\n\t        },\r\n\r\n\t        aboveViewRoot: function (viewRoot, node) {\r\n\t            var viewPath = helper.getPathToRoot(viewRoot);\r\n\t            return zrUtil.indexOf(viewPath, node) >= 0;\r\n\t        },\r\n\r\n\t        // From root to the input node (the input node will be included).\r\n\t        wrapTreePathInfo: function (node, seriesModel) {\r\n\t            var treePathInfo = [];\r\n\r\n\t            while (node) {\r\n\t                var nodeDataIndex = node.dataIndex;\r\n\t                treePathInfo.push({\r\n\t                    name: node.name,\r\n\t                    dataIndex: nodeDataIndex,\r\n\t                    value: seriesModel.getRawValue(nodeDataIndex)\r\n\t                });\r\n\t                node = node.parentNode;\r\n\t            }\r\n\r\n\t            treePathInfo.reverse();\r\n\r\n\t            return treePathInfo;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = helper;\r\n\r\n\r\n/***/ },\r\n/* 188 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t \r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var DataDiffer = __webpack_require__(98);\r\n\t    var helper = __webpack_require__(187);\r\n\t    var Breadcrumb = __webpack_require__(189);\r\n\t    var RoamController = __webpack_require__(175);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\t    var matrix = __webpack_require__(11);\r\n\t    var animationUtil = __webpack_require__(190);\r\n\t    var bind = zrUtil.bind;\r\n\t    var Group = graphic.Group;\r\n\t    var Rect = graphic.Rect;\r\n\t    var each = zrUtil.each;\r\n\r\n\t    var DRAG_THRESHOLD = 3;\r\n\t    var PATH_LABEL_NORMAL = ['label', 'normal'];\r\n\t    var PATH_LABEL_EMPHASIS = ['label', 'emphasis'];\r\n\t    var Z_BASE = 10; // Should bigger than every z.\r\n\t    var Z_BG = 1;\r\n\t    var Z_CONTENT = 2;\r\n\r\n\t    module.exports = __webpack_require__(1).extendChartView({\r\n\r\n\t        type: 'treemap',\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        init: function (o, api) {\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {module:zrender/container/Group}\r\n\t             */\r\n\t            this._containerGroup;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {Object.<string, Array.<module:zrender/container/Group>>}\r\n\t             */\r\n\t            this._storage = createStorage();\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {module:echarts/data/Tree}\r\n\t             */\r\n\t            this._oldTree;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {module:echarts/chart/treemap/Breadcrumb}\r\n\t             */\r\n\t            this._breadcrumb;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {module:echarts/component/helper/RoamController}\r\n\t             */\r\n\t            this._controller;\r\n\r\n\t            /**\r\n\t             * 'ready', 'animating'\r\n\t             * @private\r\n\t             */\r\n\t            this._state = 'ready';\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {boolean}\r\n\t             */\r\n\t            this._mayClick;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        render: function (seriesModel, ecModel, api, payload) {\r\n\r\n\t            var models = ecModel.findComponents({\r\n\t                mainType: 'series', subType: 'treemap', query: payload\r\n\t            });\r\n\t            if (zrUtil.indexOf(models, seriesModel) < 0) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            this.seriesModel = seriesModel;\r\n\t            this.api = api;\r\n\t            this.ecModel = ecModel;\r\n\r\n\t            var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);\r\n\t            var payloadType = payload && payload.type;\r\n\t            var layoutInfo = seriesModel.layoutInfo;\r\n\t            var isInit = !this._oldTree;\r\n\t            var thisStorage = this._storage;\r\n\r\n\t            // Mark new root when action is treemapRootToNode.\r\n\t            var reRoot = (payloadType === 'treemapRootToNode' && targetInfo && thisStorage)\r\n\t                ? {\r\n\t                    rootNodeGroup: thisStorage.nodeGroup[targetInfo.node.getRawIndex()],\r\n\t                    direction: payload.direction\r\n\t                }\r\n\t                : null;\r\n\r\n\t            var containerGroup = this._giveContainerGroup(layoutInfo);\r\n\r\n\t            var renderResult = this._doRender(containerGroup, seriesModel, reRoot);\r\n\t            (\r\n\t                !isInit && (\r\n\t                    !payloadType\r\n\t                    || payloadType === 'treemapZoomToNode'\r\n\t                    || payloadType === 'treemapRootToNode'\r\n\t                )\r\n\t            )\r\n\t                ? this._doAnimation(containerGroup, renderResult, seriesModel, reRoot)\r\n\t                : renderResult.renderFinally();\r\n\r\n\t            this._resetController(api);\r\n\r\n\t            this._renderBreadcrumb(seriesModel, api, targetInfo);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _giveContainerGroup: function (layoutInfo) {\r\n\t            var containerGroup = this._containerGroup;\r\n\t            if (!containerGroup) {\r\n\t                // FIXME\r\n\t                // 加一层containerGroup是为了clip，但是现在clip功能并没有实现。\r\n\t                containerGroup = this._containerGroup = new Group();\r\n\t                this._initEvents(containerGroup);\r\n\t                this.group.add(containerGroup);\r\n\t            }\r\n\t            containerGroup.attr('position', [layoutInfo.x, layoutInfo.y]);\r\n\r\n\t            return containerGroup;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _doRender: function (containerGroup, seriesModel, reRoot) {\r\n\t            var thisTree = seriesModel.getData().tree;\r\n\t            var oldTree = this._oldTree;\r\n\r\n\t            // Clear last shape records.\r\n\t            var lastsForAnimation = createStorage();\r\n\t            var thisStorage = createStorage();\r\n\t            var oldStorage = this._storage;\r\n\t            var willInvisibleEls = [];\r\n\t            var doRenderNode = zrUtil.curry(\r\n\t                renderNode, seriesModel,\r\n\t                thisStorage, oldStorage, reRoot,\r\n\t                lastsForAnimation, willInvisibleEls\r\n\t            );\r\n\r\n\t            // Notice: when thisTree and oldTree are the same tree (see list.cloneShadow),\r\n\t            // the oldTree is actually losted, so we can not find all of the old graphic\r\n\t            // elements from tree. So we use this stragegy: make element storage, move\r\n\t            // from old storage to new storage, clear old storage.\r\n\r\n\t            dualTravel(\r\n\t                thisTree.root ? [thisTree.root] : [],\r\n\t                (oldTree && oldTree.root) ? [oldTree.root] : [],\r\n\t                containerGroup,\r\n\t                thisTree === oldTree || !oldTree,\r\n\t                0\r\n\t            );\r\n\r\n\t            // Process all removing.\r\n\t            var willDeleteEls = clearStorage(oldStorage);\r\n\r\n\t            this._oldTree = thisTree;\r\n\t            this._storage = thisStorage;\r\n\r\n\t            return {\r\n\t                lastsForAnimation: lastsForAnimation,\r\n\t                willDeleteEls: willDeleteEls,\r\n\t                renderFinally: renderFinally\r\n\t            };\r\n\r\n\t            function dualTravel(thisViewChildren, oldViewChildren, parentGroup, sameTree, depth) {\r\n\t                // When 'render' is triggered by action,\r\n\t                // 'this' and 'old' may be the same tree,\r\n\t                // we use rawIndex in that case.\r\n\t                if (sameTree) {\r\n\t                    oldViewChildren = thisViewChildren;\r\n\t                    each(thisViewChildren, function (child, index) {\r\n\t                        !child.isRemoved() && processNode(index, index);\r\n\t                    });\r\n\t                }\r\n\t                // Diff hierarchically (diff only in each subtree, but not whole).\r\n\t                // because, consistency of view is important.\r\n\t                else {\r\n\t                    (new DataDiffer(oldViewChildren, thisViewChildren, getKey, getKey))\r\n\t                        .add(processNode)\r\n\t                        .update(processNode)\r\n\t                        .remove(zrUtil.curry(processNode, null))\r\n\t                        .execute();\r\n\t                }\r\n\r\n\t                function getKey(node) {\r\n\t                    // Identify by name or raw index.\r\n\t                    return node.getId();\r\n\t                }\r\n\r\n\t                function processNode(newIndex, oldIndex) {\r\n\t                    var thisNode = newIndex != null ? thisViewChildren[newIndex] : null;\r\n\t                    var oldNode = oldIndex != null ? oldViewChildren[oldIndex] : null;\r\n\r\n\t                    var group = doRenderNode(thisNode, oldNode, parentGroup, depth);\r\n\r\n\t                    group && dualTravel(\r\n\t                        thisNode && thisNode.viewChildren || [],\r\n\t                        oldNode && oldNode.viewChildren || [],\r\n\t                        group,\r\n\t                        sameTree,\r\n\t                        depth + 1\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\r\n\t            function clearStorage(storage) {\r\n\t                var willDeleteEls = createStorage();\r\n\t                storage && each(storage, function (store, storageName) {\r\n\t                    var delEls = willDeleteEls[storageName];\r\n\t                    each(store, function (el) {\r\n\t                        el && (delEls.push(el), el.__tmWillDelete = 1);\r\n\t                    });\r\n\t                });\r\n\t                return willDeleteEls;\r\n\t            }\r\n\r\n\t            function renderFinally() {\r\n\t                each(willDeleteEls, function (els) {\r\n\t                    each(els, function (el) {\r\n\t                        el.parent && el.parent.remove(el);\r\n\t                    });\r\n\t                });\r\n\t                each(willInvisibleEls, function (el) {\r\n\t                    el.invisible = true;\r\n\t                    // Setting invisible is for optimizing, so no need to set dirty,\r\n\t                    // just mark as invisible.\r\n\t                    el.dirty();\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _doAnimation: function (containerGroup, renderResult, seriesModel, reRoot) {\r\n\t            if (!seriesModel.get('animation')) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var duration = seriesModel.get('animationDurationUpdate');\r\n\t            var easing = seriesModel.get('animationEasing');\r\n\t            var animationWrap = animationUtil.createWrap();\r\n\r\n\t            // Make delete animations.\r\n\t            each(renderResult.willDeleteEls, function (store, storageName) {\r\n\t                each(store, function (el, rawIndex) {\r\n\t                    if (el.invisible) {\r\n\t                        return;\r\n\t                    }\r\n\r\n\t                    var parent = el.parent; // Always has parent, and parent is nodeGroup.\r\n\t                    var target;\r\n\r\n\t                    if (reRoot && reRoot.direction === 'drillDown') {\r\n\t                        target = parent === reRoot.rootNodeGroup\r\n\t                            // This is the content element of view root.\r\n\t                            // Only `content` will enter this branch, because\r\n\t                            // `background` and `nodeGroup` will not be deleted.\r\n\t                            ? {\r\n\t                                shape: {\r\n\t                                    x: 0,\r\n\t                                    y: 0,\r\n\t                                    width: parent.__tmNodeWidth,\r\n\t                                    height: parent.__tmNodeHeight\r\n\t                                },\r\n\t                                style: {\r\n\t                                    opacity: 0\r\n\t                                }\r\n\t                            }\r\n\t                            // Others.\r\n\t                            : {style: {opacity: 0}};\r\n\t                    }\r\n\t                    else {\r\n\t                        var targetX = 0;\r\n\t                        var targetY = 0;\r\n\r\n\t                        if (!parent.__tmWillDelete) {\r\n\t                            // Let node animate to right-bottom corner, cooperating with fadeout,\r\n\t                            // which is appropriate for user understanding.\r\n\t                            // Divided by 2 for reRoot rolling up effect.\r\n\t                            targetX = parent.__tmNodeWidth / 2;\r\n\t                            targetY = parent.__tmNodeHeight / 2;\r\n\t                        }\r\n\r\n\t                        target = storageName === 'nodeGroup'\r\n\t                            ? {position: [targetX, targetY], style: {opacity: 0}}\r\n\t                            : {\r\n\t                                shape: {x: targetX, y: targetY, width: 0, height: 0},\r\n\t                                style: {opacity: 0}\r\n\t                            };\r\n\t                    }\r\n\r\n\t                    target && animationWrap.add(el, target, duration, easing);\r\n\t                });\r\n\t            });\r\n\r\n\t            // Make other animations\r\n\t            each(this._storage, function (store, storageName) {\r\n\t                each(store, function (el, rawIndex) {\r\n\t                    var last = renderResult.lastsForAnimation[storageName][rawIndex];\r\n\t                    var target = {};\r\n\r\n\t                    if (!last) {\r\n\t                        return;\r\n\t                    }\r\n\r\n\t                    if (storageName === 'nodeGroup') {\r\n\t                        if (last.old) {\r\n\t                            target.position = el.position.slice();\r\n\t                            el.attr('position', last.old);\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        if (last.old) {\r\n\t                            target.shape = zrUtil.extend({}, el.shape);\r\n\t                            el.setShape(last.old);\r\n\t                        }\r\n\r\n\t                        if (last.fadein) {\r\n\t                            el.setStyle('opacity', 0);\r\n\t                            target.style = {opacity: 1};\r\n\t                        }\r\n\t                        // When animation is stopped for succedent animation starting,\r\n\t                        // el.style.opacity might not be 1\r\n\t                        else if (el.style.opacity !== 1) {\r\n\t                            target.style = {opacity: 1};\r\n\t                        }\r\n\t                    }\r\n\r\n\t                    animationWrap.add(el, target, duration, easing);\r\n\t                });\r\n\t            }, this);\r\n\r\n\t            this._state = 'animating';\r\n\r\n\t            animationWrap\r\n\t                .done(bind(function () {\r\n\t                    this._state = 'ready';\r\n\t                    renderResult.renderFinally();\r\n\t                }, this))\r\n\t                .start();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _resetController: function (api) {\r\n\t            var controller = this._controller;\r\n\r\n\t            // Init controller.\r\n\t            if (!controller) {\r\n\t                controller = this._controller = new RoamController(api.getZr());\r\n\t                controller.enable(this.seriesModel.get('roam'));\r\n\t                controller.on('pan', bind(this._onPan, this));\r\n\t                controller.on('zoom', bind(this._onZoom, this));\r\n\t            }\r\n\r\n\t            var rect = new BoundingRect(0, 0, api.getWidth(), api.getHeight());\r\n\t            controller.setContainsPoint(function (x, y) {\r\n\t                return rect.contain(x, y);\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _clearController: function () {\r\n\t            var controller = this._controller;\r\n\t            if (controller) {\r\n\t                controller.dispose();\r\n\t                controller = null;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _onPan: function (dx, dy) {\r\n\t            this._mayClick = false;\r\n\r\n\t            if (this._state !== 'animating'\r\n\t                && (Math.abs(dx) > DRAG_THRESHOLD || Math.abs(dy) > DRAG_THRESHOLD)\r\n\t            ) {\r\n\t                // These param must not be cached.\r\n\t                var root = this.seriesModel.getData().tree.root;\r\n\r\n\t                if (!root) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var rootLayout = root.getLayout();\r\n\r\n\t                if (!rootLayout) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                this.api.dispatchAction({\r\n\t                    type: 'treemapMove',\r\n\t                    from: this.uid,\r\n\t                    seriesId: this.seriesModel.id,\r\n\t                    rootRect: {\r\n\t                        x: rootLayout.x + dx, y: rootLayout.y + dy,\r\n\t                        width: rootLayout.width, height: rootLayout.height\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _onZoom: function (scale, mouseX, mouseY) {\r\n\t            this._mayClick = false;\r\n\r\n\t            if (this._state !== 'animating') {\r\n\t                // These param must not be cached.\r\n\t                var root = this.seriesModel.getData().tree.root;\r\n\r\n\t                if (!root) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var rootLayout = root.getLayout();\r\n\r\n\t                if (!rootLayout) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var rect = new BoundingRect(\r\n\t                    rootLayout.x, rootLayout.y, rootLayout.width, rootLayout.height\r\n\t                );\r\n\t                var layoutInfo = this.seriesModel.layoutInfo;\r\n\r\n\t                // Transform mouse coord from global to containerGroup.\r\n\t                mouseX -= layoutInfo.x;\r\n\t                mouseY -= layoutInfo.y;\r\n\r\n\t                // Scale root bounding rect.\r\n\t                var m = matrix.create();\r\n\t                matrix.translate(m, m, [-mouseX, -mouseY]);\r\n\t                matrix.scale(m, m, [scale, scale]);\r\n\t                matrix.translate(m, m, [mouseX, mouseY]);\r\n\r\n\t                rect.applyTransform(m);\r\n\r\n\t                this.api.dispatchAction({\r\n\t                    type: 'treemapRender',\r\n\t                    from: this.uid,\r\n\t                    seriesId: this.seriesModel.id,\r\n\t                    rootRect: {\r\n\t                        x: rect.x, y: rect.y,\r\n\t                        width: rect.width, height: rect.height\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _initEvents: function (containerGroup) {\r\n\t            // FIXME\r\n\t            // 不用click以及silent的原因是，animate时视图设置silent true来避免click生效，\r\n\t            // 但是animate中，按下鼠标，animate结束后（silent设回为false）松开鼠标，\r\n\t            // 还是会触发click，期望是不触发。\r\n\r\n\t            // Mousedown occurs when drag start, and mouseup occurs when drag end,\r\n\t            // click event should not be triggered in that case.\r\n\r\n\t            containerGroup.on('mousedown', function (e) {\r\n\t                this._state === 'ready' && (this._mayClick = true);\r\n\t            }, this);\r\n\t            containerGroup.on('mouseup', function (e) {\r\n\t                if (this._mayClick) {\r\n\t                    this._mayClick = false;\r\n\t                    this._state === 'ready' && onClick.call(this, e);\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            function onClick(e) {\r\n\t                var nodeClick = this.seriesModel.get('nodeClick', true);\r\n\r\n\t                if (!nodeClick) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var targetInfo = this.findTarget(e.offsetX, e.offsetY);\r\n\r\n\t                if (!targetInfo) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var node = targetInfo.node;\r\n\t                if (node.getLayout().isLeafRoot) {\r\n\t                    this._rootToNode(targetInfo);\r\n\t                }\r\n\t                else {\r\n\t                    if (nodeClick === 'zoomToNode') {\r\n\t                        this._zoomToNode(targetInfo);\r\n\t                    }\r\n\t                    else if (nodeClick === 'link') {\r\n\t                        var itemModel = node.hostTree.data.getItemModel(node.dataIndex);\r\n\t                        var link = itemModel.get('link', true);\r\n\t                        var linkTarget = itemModel.get('target', true) || 'blank';\r\n\t                        link && window.open(link, linkTarget);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _renderBreadcrumb: function (seriesModel, api, targetInfo) {\r\n\t            if (!targetInfo) {\r\n\t                targetInfo = seriesModel.get('leafDepth', true) != null\r\n\t                    ? {node: seriesModel.getViewRoot()}\r\n\t                    // FIXME\r\n\t                    // better way?\r\n\t                    // Find breadcrumb tail on center of containerGroup.\r\n\t                    : this.findTarget(api.getWidth() / 2, api.getHeight() / 2);\r\n\r\n\t                if (!targetInfo) {\r\n\t                    targetInfo = {node: seriesModel.getData().tree.root};\r\n\t                }\r\n\t            }\r\n\r\n\t            (this._breadcrumb || (this._breadcrumb = new Breadcrumb(this.group)))\r\n\t                .render(seriesModel, api, targetInfo.node, bind(onSelect, this));\r\n\r\n\t            function onSelect(node) {\r\n\t                if (this._state !== 'animating') {\r\n\t                    helper.aboveViewRoot(seriesModel.getViewRoot(), node)\r\n\t                        ? this._rootToNode({node: node})\r\n\t                        : this._zoomToNode({node: node});\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        remove: function () {\r\n\t            this._clearController();\r\n\t            this._containerGroup && this._containerGroup.removeAll();\r\n\t            this._storage = createStorage();\r\n\t            this._state = 'ready';\r\n\t            this._breadcrumb && this._breadcrumb.remove();\r\n\t        },\r\n\r\n\t        dispose: function () {\r\n\t            this._clearController();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _zoomToNode: function (targetInfo) {\r\n\t            this.api.dispatchAction({\r\n\t                type: 'treemapZoomToNode',\r\n\t                from: this.uid,\r\n\t                seriesId: this.seriesModel.id,\r\n\t                targetNode: targetInfo.node\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _rootToNode: function (targetInfo) {\r\n\t            this.api.dispatchAction({\r\n\t                type: 'treemapRootToNode',\r\n\t                from: this.uid,\r\n\t                seriesId: this.seriesModel.id,\r\n\t                targetNode: targetInfo.node\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {number} x Global coord x.\r\n\t         * @param {number} y Global coord y.\r\n\t         * @return {Object} info If not found, return undefined;\r\n\t         * @return {number} info.node Target node.\r\n\t         * @return {number} info.offsetX x refer to target node.\r\n\t         * @return {number} info.offsetY y refer to target node.\r\n\t         */\r\n\t        findTarget: function (x, y) {\r\n\t            var targetInfo;\r\n\t            var viewRoot = this.seriesModel.getViewRoot();\r\n\r\n\t            viewRoot.eachNode({attr: 'viewChildren', order: 'preorder'}, function (node) {\r\n\t                var bgEl = this._storage.background[node.getRawIndex()];\r\n\t                // If invisible, there might be no element.\r\n\t                if (bgEl) {\r\n\t                    var point = bgEl.transformCoordToLocal(x, y);\r\n\t                    var shape = bgEl.shape;\r\n\r\n\t                    // For performance consideration, dont use 'getBoundingRect'.\r\n\t                    if (shape.x <= point[0]\r\n\t                        && point[0] <= shape.x + shape.width\r\n\t                        && shape.y <= point[1]\r\n\t                        && point[1] <= shape.y + shape.height\r\n\t                    ) {\r\n\t                        targetInfo = {node: node, offsetX: point[0], offsetY: point[1]};\r\n\t                    }\r\n\t                    else {\r\n\t                        return false; // Suppress visit subtree.\r\n\t                    }\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            return targetInfo;\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function createStorage() {\r\n\t        return {nodeGroup: [], background: [], content: []};\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     * @return Return undefined means do not travel further.\r\n\t     */\r\n\t    function renderNode(\r\n\t        seriesModel, thisStorage, oldStorage, reRoot,\r\n\t        lastsForAnimation, willInvisibleEls,\r\n\t        thisNode, oldNode, parentGroup, depth\r\n\t    ) {\r\n\t        // Whether under viewRoot.\r\n\t        if (!thisNode) {\r\n\t            // Deleting nodes will be performed finally. This method just find\r\n\t            // element from old storage, or create new element, set them to new\r\n\t            // storage, and set styles.\r\n\t            return;\r\n\t        }\r\n\r\n\t        var thisLayout = thisNode.getLayout();\r\n\r\n\t        if (!thisLayout || !thisLayout.isInView) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var thisWidth = thisLayout.width;\r\n\t        var thisHeight = thisLayout.height;\r\n\t        var thisInvisible = thisLayout.invisible;\r\n\r\n\t        var thisRawIndex = thisNode.getRawIndex();\r\n\t        var oldRawIndex = oldNode && oldNode.getRawIndex();\r\n\r\n\t        // Node group\r\n\t        var group = giveGraphic('nodeGroup', Group);\r\n\r\n\t        if (!group) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        parentGroup.add(group);\r\n\t        // x,y are not set when el is above view root.\r\n\t        group.attr('position', [thisLayout.x || 0, thisLayout.y || 0]);\r\n\t        group.__tmNodeWidth = thisWidth;\r\n\t        group.__tmNodeHeight = thisHeight;\r\n\r\n\t        if (thisLayout.isAboveViewRoot) {\r\n\t            return group;\r\n\t        }\r\n\r\n\t        // Background\r\n\t        var bg = giveGraphic('background', Rect, depth, Z_BG);\r\n\t        if (bg) {\r\n\t            bg.setShape({x: 0, y: 0, width: thisWidth, height: thisHeight});\r\n\t            updateStyle(bg, function () {\r\n\t                bg.setStyle('fill', thisNode.getVisual('borderColor', true));\r\n\t            });\r\n\t            group.add(bg);\r\n\t        }\r\n\r\n\t        var thisViewChildren = thisNode.viewChildren;\r\n\r\n\t        // No children, render content.\r\n\t        if (!thisViewChildren || !thisViewChildren.length) {\r\n\t            var content = giveGraphic('content', Rect, depth, Z_CONTENT);\r\n\t            content && renderContent(group);\r\n\t        }\r\n\r\n\t        return group;\r\n\r\n\t        // ----------------------------\r\n\t        // | Procedures in renderNode |\r\n\t        // ----------------------------\r\n\r\n\t        function renderContent(group) {\r\n\t            // For tooltip.\r\n\t            content.dataIndex = thisNode.dataIndex;\r\n\t            content.seriesIndex = seriesModel.seriesIndex;\r\n\r\n\t            var borderWidth = thisLayout.borderWidth;\r\n\t            var contentWidth = Math.max(thisWidth - 2 * borderWidth, 0);\r\n\t            var contentHeight = Math.max(thisHeight - 2 * borderWidth, 0);\r\n\r\n\t            content.culling = true;\r\n\t            content.setShape({\r\n\t                x: borderWidth,\r\n\t                y: borderWidth,\r\n\t                width: contentWidth,\r\n\t                height: contentHeight\r\n\t            });\r\n\r\n\t            var visualColor = thisNode.getVisual('color', true);\r\n\t            updateStyle(content, function () {\r\n\t                var normalStyle = {fill: visualColor};\r\n\t                var emphasisStyle = thisNode.getModel('itemStyle.emphasis').getItemStyle();\r\n\r\n\t                prepareText(normalStyle, emphasisStyle, visualColor, contentWidth, contentHeight);\r\n\r\n\t                content.setStyle(normalStyle);\r\n\t                graphic.setHoverStyle(content, emphasisStyle);\r\n\t            });\r\n\r\n\t            group.add(content);\r\n\t        }\r\n\r\n\t        function updateStyle(element, cb) {\r\n\t            if (!thisInvisible) {\r\n\t                // If invisible, do not set visual, otherwise the element will\r\n\t                // change immediately before animation. We think it is OK to\r\n\t                // remain its origin color when moving out of the view window.\r\n\t                cb();\r\n\r\n\t                if (!element.__tmWillVisible) {\r\n\t                    element.invisible = false;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                // Delay invisible setting utill animation finished,\r\n\t                // avoid element vanish suddenly before animation.\r\n\t                !element.invisible && willInvisibleEls.push(element);\r\n\t            }\r\n\t        }\r\n\r\n\t        function prepareText(normalStyle, emphasisStyle, visualColor, contentWidth, contentHeight) {\r\n\t            var nodeModel = thisNode.getModel();\r\n\t            var text = nodeModel.get('name');\r\n\t            if (thisLayout.isLeafRoot) {\r\n\t                var iconChar = seriesModel.get('drillDownIcon', true);\r\n\t                text = iconChar ? iconChar + ' ' + text : text;\r\n\t            }\r\n\r\n\t            setText(\r\n\t                text, normalStyle, nodeModel, PATH_LABEL_NORMAL,\r\n\t                visualColor, contentWidth, contentHeight\r\n\t            );\r\n\t            setText(\r\n\t                text, emphasisStyle, nodeModel, PATH_LABEL_EMPHASIS,\r\n\t                visualColor, contentWidth, contentHeight\r\n\t            );\r\n\t        }\r\n\r\n\t        function setText(text, style, nodeModel, labelPath, visualColor, contentWidth, contentHeight) {\r\n\t            var labelModel = nodeModel.getModel(labelPath);\r\n\t            var labelTextStyleModel = labelModel.getModel('textStyle');\r\n\r\n\t            graphic.setText(style, labelModel, visualColor);\r\n\r\n\t            // text.align and text.baseline is not included by graphic.setText,\r\n\t            // because in most cases the two attributes are not exposed to user,\r\n\t            // except in treemap.\r\n\t            style.textAlign = labelTextStyleModel.get('align');\r\n\t            style.textVerticalAlign = labelTextStyleModel.get('baseline');\r\n\r\n\t            var textRect = labelTextStyleModel.getTextRect(text);\r\n\t            if (!labelModel.getShallow('show') || textRect.height > contentHeight) {\r\n\t                style.text = '';\r\n\t            }\r\n\t            else if (textRect.width > contentWidth) {\r\n\t                style.text = labelTextStyleModel.get('ellipsis')\r\n\t                    ? labelTextStyleModel.truncateText(\r\n\t                        text, contentWidth, null, {minChar: 2}\r\n\t                    )\r\n\t                    : '';\r\n\t            }\r\n\t            else {\r\n\t                style.text = text;\r\n\t            }\r\n\t        }\r\n\r\n\t        function giveGraphic(storageName, Ctor, depth, z) {\r\n\t            var element = oldRawIndex != null && oldStorage[storageName][oldRawIndex];\r\n\t            var lasts = lastsForAnimation[storageName];\r\n\r\n\t            if (element) {\r\n\t                // Remove from oldStorage\r\n\t                oldStorage[storageName][oldRawIndex] = null;\r\n\t                prepareAnimationWhenHasOld(lasts, element, storageName);\r\n\t            }\r\n\t            // If invisible and no old element, do not create new element (for optimizing).\r\n\t            else if (!thisInvisible) {\r\n\t                element = new Ctor({z: calculateZ(depth, z)});\r\n\t                element.__tmDepth = depth;\r\n\t                element.__tmStorageName = storageName;\r\n\t                prepareAnimationWhenNoOld(lasts, element, storageName);\r\n\t            }\r\n\r\n\t            // Set to thisStorage\r\n\t            return (thisStorage[storageName][thisRawIndex] = element);\r\n\t        }\r\n\r\n\t        function prepareAnimationWhenHasOld(lasts, element, storageName) {\r\n\t            var lastCfg = lasts[thisRawIndex] = {};\r\n\t            lastCfg.old = storageName === 'nodeGroup'\r\n\t                ? element.position.slice()\r\n\t                : zrUtil.extend({}, element.shape);\r\n\t        }\r\n\r\n\t        // If a element is new, we need to find the animation start point carefully,\r\n\t        // otherwise it will looks strange when 'zoomToNode'.\r\n\t        function prepareAnimationWhenNoOld(lasts, element, storageName) {\r\n\t            var lastCfg = lasts[thisRawIndex] = {};\r\n\t            var parentNode = thisNode.parentNode;\r\n\r\n\t            if (parentNode && (!reRoot || reRoot.direction === 'drillDown')) {\r\n\t                var parentOldX = 0;\r\n\t                var parentOldY = 0;\r\n\r\n\t                // New nodes appear from right-bottom corner in 'zoomToNode' animation.\r\n\t                // For convenience, get old bounding rect from background.\r\n\t                var parentOldBg = lastsForAnimation.background[parentNode.getRawIndex()];\r\n\t                if (!reRoot && parentOldBg && parentOldBg.old) {\r\n\t                    parentOldX = parentOldBg.old.width;\r\n\t                    parentOldY = parentOldBg.old.height;\r\n\t                }\r\n\r\n\t                // When no parent old shape found, its parent is new too,\r\n\t                // so we can just use {x:0, y:0}.\r\n\t                lastCfg.old = storageName === 'nodeGroup'\r\n\t                    ? [0, parentOldY]\r\n\t                    : {x: parentOldX, y: parentOldY, width: 0, height: 0};\r\n\t            }\r\n\r\n\t            // Fade in, user can be aware that these nodes are new.\r\n\t            lastCfg.fadein = storageName !== 'nodeGroup';\r\n\t        }\r\n\t    }\r\n\r\n\t    // We can not set all backgroud with the same z, Because the behaviour of\r\n\t    // drill down and roll up differ background creation sequence from tree\r\n\t    // hierarchy sequence, which cause that lowser background element overlap\r\n\t    // upper ones. So we calculate z based on depth.\r\n\t    // Moreover, we try to shrink down z interval to [0, 1] to avoid that\r\n\t    // treemap with large z overlaps other components.\r\n\t    function calculateZ(depth, zInLevel) {\r\n\t        var zb = depth * Z_BASE + zInLevel;\r\n\t        return (zb - 1) / zb;\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 189 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t \r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var layout = __webpack_require__(21);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var helper = __webpack_require__(187);\r\n\r\n\t    var TEXT_PADDING = 8;\r\n\t    var ITEM_GAP = 8;\r\n\t    var ARRAY_LENGTH = 5;\r\n\r\n\t    function Breadcrumb(containerGroup) {\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {module:zrender/container/Group}\r\n\t         */\r\n\t        this.group = new graphic.Group();\r\n\r\n\t        containerGroup.add(this.group);\r\n\t    }\r\n\r\n\t    Breadcrumb.prototype = {\r\n\r\n\t        constructor: Breadcrumb,\r\n\r\n\t        render: function (seriesModel, api, targetNode, onSelect) {\r\n\t            var model = seriesModel.getModel('breadcrumb');\r\n\t            var thisGroup = this.group;\r\n\r\n\t            thisGroup.removeAll();\r\n\r\n\t            if (!model.get('show') || !targetNode) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var normalStyleModel = model.getModel('itemStyle.normal');\r\n\t            // var emphasisStyleModel = model.getModel('itemStyle.emphasis');\r\n\t            var textStyleModel = normalStyleModel.getModel('textStyle');\r\n\r\n\t            var layoutParam = {\r\n\t                pos: {\r\n\t                    left: model.get('left'),\r\n\t                    right: model.get('right'),\r\n\t                    top: model.get('top'),\r\n\t                    bottom: model.get('bottom')\r\n\t                },\r\n\t                box: {\r\n\t                    width: api.getWidth(),\r\n\t                    height: api.getHeight()\r\n\t                },\r\n\t                emptyItemWidth: model.get('emptyItemWidth'),\r\n\t                totalWidth: 0,\r\n\t                renderList: []\r\n\t            };\r\n\r\n\t            this._prepare(targetNode, layoutParam, textStyleModel);\r\n\t            this._renderContent(seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect);\r\n\r\n\t            layout.positionGroup(thisGroup, layoutParam.pos, layoutParam.box);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Prepare render list and total width\r\n\t         * @private\r\n\t         */\r\n\t        _prepare: function (targetNode, layoutParam, textStyleModel) {\r\n\t            for (var node = targetNode; node; node = node.parentNode) {\r\n\t                var text = node.getModel().get('name');\r\n\t                var textRect = textStyleModel.getTextRect(text);\r\n\t                var itemWidth = Math.max(\r\n\t                    textRect.width + TEXT_PADDING * 2,\r\n\t                    layoutParam.emptyItemWidth\r\n\t                );\r\n\t                layoutParam.totalWidth += itemWidth + ITEM_GAP;\r\n\t                layoutParam.renderList.push({node: node, text: text, width: itemWidth});\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _renderContent: function (\r\n\t            seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect\r\n\t        ) {\r\n\t            // Start rendering.\r\n\t            var lastX = 0;\r\n\t            var emptyItemWidth = layoutParam.emptyItemWidth;\r\n\t            var height = seriesModel.get('breadcrumb.height');\r\n\t            var availableSize = layout.getAvailableSize(layoutParam.pos, layoutParam.box);\r\n\t            var totalWidth = layoutParam.totalWidth;\r\n\t            var renderList = layoutParam.renderList;\r\n\r\n\t            for (var i = renderList.length - 1; i >= 0; i--) {\r\n\t                var item = renderList[i];\r\n\t                var itemNode = item.node;\r\n\t                var itemWidth = item.width;\r\n\t                var text = item.text;\r\n\r\n\t                // Hdie text and shorten width if necessary.\r\n\t                if (totalWidth > availableSize.width) {\r\n\t                    totalWidth -= itemWidth - emptyItemWidth;\r\n\t                    itemWidth = emptyItemWidth;\r\n\t                    text = '';\r\n\t                }\r\n\r\n\t                var el = new graphic.Polygon({\r\n\t                    shape: {\r\n\t                        points: makeItemPoints(\r\n\t                            lastX, 0, itemWidth, height,\r\n\t                            i === renderList.length - 1, i === 0\r\n\t                        )\r\n\t                    },\r\n\t                    style: zrUtil.defaults(\r\n\t                        normalStyleModel.getItemStyle(),\r\n\t                        {\r\n\t                            lineJoin: 'bevel',\r\n\t                            text: text,\r\n\t                            textFill: textStyleModel.getTextColor(),\r\n\t                            textFont: textStyleModel.getFont()\r\n\t                        }\r\n\t                    ),\r\n\t                    z: 10,\r\n\t                    onclick: zrUtil.curry(onSelect, itemNode)\r\n\t                });\r\n\t                this.group.add(el);\r\n\r\n\t                packEventData(el, seriesModel, itemNode);\r\n\r\n\t                lastX += itemWidth + ITEM_GAP;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        remove: function () {\r\n\t            this.group.removeAll();\r\n\t        }\r\n\t    };\r\n\r\n\t    function makeItemPoints(x, y, itemWidth, itemHeight, head, tail) {\r\n\t        var points = [\r\n\t            [head ? x : x - ARRAY_LENGTH, y],\r\n\t            [x + itemWidth, y],\r\n\t            [x + itemWidth, y + itemHeight],\r\n\t            [head ? x : x - ARRAY_LENGTH, y + itemHeight]\r\n\t        ];\r\n\t        !tail && points.splice(2, 0, [x + itemWidth + ARRAY_LENGTH, y + itemHeight / 2]);\r\n\t        !head && points.push([x, y + itemHeight / 2]);\r\n\t        return points;\r\n\t    }\r\n\r\n\t    // Package custom mouse event.\r\n\t    function packEventData(el, seriesModel, itemNode) {\r\n\t        el.eventData = {\r\n\t            componentType: 'series',\r\n\t            componentSubType: 'treemap',\r\n\t            seriesIndex: seriesModel.componentIndex,\r\n\t            seriesName: seriesModel.name,\r\n\t            seriesType: 'treemap',\r\n\t            selfType: 'breadcrumb', // Distinguish with click event on treemap node.\r\n\t            nodeData: {\r\n\t                dataIndex: itemNode && itemNode.dataIndex,\r\n\t                name: itemNode && itemNode.name\r\n\t            },\r\n\t            treePathInfo: itemNode && helper.wrapTreePathInfo(itemNode, seriesModel)\r\n\t        };\r\n\t    }\r\n\r\n\t    module.exports = Breadcrumb;\r\n\r\n\r\n/***/ },\r\n/* 190 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t \r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    /**\r\n\t     * @param {number} [time=500] Time in ms\r\n\t     * @param {string} [easing='linear']\r\n\t     * @param {number} [delay=0]\r\n\t     * @param {Function} [callback]\r\n\t     *\r\n\t     * @example\r\n\t     *  // Animate position\r\n\t     *  animation\r\n\t     *      .createWrap()\r\n\t     *      .add(el1, {position: [10, 10]})\r\n\t     *      .add(el2, {shape: {width: 500}, style: {fill: 'red'}}, 400)\r\n\t     *      .done(function () { // done })\r\n\t     *      .start('cubicOut');\r\n\t     */\r\n\t    function createWrap() {\r\n\r\n\t        var storage = [];\r\n\t        var elExistsMap = {};\r\n\t        var doneCallback;\r\n\r\n\t        return {\r\n\r\n\t            /**\r\n\t             * Caution: a el can only be added once, otherwise 'done'\r\n\t             * might not be called. This method checks this (by el.id),\r\n\t             * suppresses adding and returns false when existing el found.\r\n\t             *\r\n\t             * @param {modele:zrender/Element} el\r\n\t             * @param {Object} target\r\n\t             * @param {number} [time=500]\r\n\t             * @param {number} [delay=0]\r\n\t             * @param {string} [easing='linear']\r\n\t             * @return {boolean} Whether adding succeeded.\r\n\t             *\r\n\t             * @example\r\n\t             *     add(el, target, time, delay, easing);\r\n\t             *     add(el, target, time, easing);\r\n\t             *     add(el, target, time);\r\n\t             *     add(el, target);\r\n\t             */\r\n\t            add: function (el, target, time, delay, easing) {\r\n\t                if (zrUtil.isString(delay)) {\r\n\t                    easing = delay;\r\n\t                    delay = 0;\r\n\t                }\r\n\r\n\t                if (elExistsMap[el.id]) {\r\n\t                    return false;\r\n\t                }\r\n\t                elExistsMap[el.id] = 1;\r\n\r\n\t                storage.push(\r\n\t                    {el: el, target: target, time: time, delay: delay, easing: easing}\r\n\t                );\r\n\r\n\t                return true;\r\n\t            },\r\n\r\n\t            /**\r\n\t             * Only execute when animation finished. Will not execute when any\r\n\t             * of 'stop' or 'stopAnimation' called.\r\n\t             *\r\n\t             * @param {Function} callback\r\n\t             */\r\n\t            done: function (callback) {\r\n\t                doneCallback = callback;\r\n\t                return this;\r\n\t            },\r\n\r\n\t            /**\r\n\t             * Will stop exist animation firstly.\r\n\t             */\r\n\t            start: function () {\r\n\t                var count = storage.length;\r\n\r\n\t                for (var i = 0, len = storage.length; i < len; i++) {\r\n\t                    var item = storage[i];\r\n\t                    item.el.animateTo(item.target, item.time, item.delay, item.easing, done);\r\n\t                }\r\n\r\n\t                return this;\r\n\r\n\t                function done() {\r\n\t                    count--;\r\n\t                    if (!count) {\r\n\t                        storage.length = 0;\r\n\t                        elExistsMap = {};\r\n\t                        doneCallback && doneCallback();\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        };\r\n\t    }\r\n\r\n\t    module.exports = {createWrap: createWrap};\r\n\r\n\r\n/***/ },\r\n/* 191 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Treemap action\r\n\t */\r\n\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var helper = __webpack_require__(187);\r\n\r\n\t    var noop = function () {};\r\n\r\n\t    var actionTypes = [\r\n\t        'treemapZoomToNode',\r\n\t        'treemapRender',\r\n\t        'treemapMove'\r\n\t    ];\r\n\r\n\t    for (var i = 0; i < actionTypes.length; i++) {\r\n\t        echarts.registerAction({type: actionTypes[i], update: 'updateView'}, noop);\r\n\t    }\r\n\r\n\t    echarts.registerAction(\r\n\t        {type: 'treemapRootToNode', update: 'updateView'},\r\n\t        function (payload, ecModel) {\r\n\r\n\t            ecModel.eachComponent(\r\n\t                {mainType: 'series', subType: 'treemap', query: payload},\r\n\t                handleRootToNode\r\n\t            );\r\n\r\n\t            function handleRootToNode(model, index) {\r\n\t                var targetInfo = helper.retrieveTargetInfo(payload, model);\r\n\r\n\t                if (targetInfo) {\r\n\t                    var originViewRoot = model.getViewRoot();\r\n\t                    if (originViewRoot) {\r\n\t                        payload.direction = helper.aboveViewRoot(originViewRoot, targetInfo.node)\r\n\t                            ? 'rollUp' : 'drillDown';\r\n\t                    }\r\n\t                    model.resetViewRoot(targetInfo.node);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    );\r\n\r\n\r\n\r\n/***/ },\r\n/* 192 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var VisualMapping = __webpack_require__(193);\r\n\t    var zrColor = __webpack_require__(39);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var isArray = zrUtil.isArray;\r\n\r\n\t    var ITEM_STYLE_NORMAL = 'itemStyle.normal';\r\n\r\n\t    module.exports = function (ecModel, api, payload) {\r\n\r\n\t        var condition = {mainType: 'series', subType: 'treemap', query: payload};\r\n\t        ecModel.eachComponent(condition, function (seriesModel) {\r\n\r\n\t            var tree = seriesModel.getData().tree;\r\n\t            var root = tree.root;\r\n\t            var seriesItemStyleModel = seriesModel.getModel(ITEM_STYLE_NORMAL);\r\n\r\n\t            if (root.isRemoved()) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var levelItemStyles = zrUtil.map(tree.levelModels, function (levelModel) {\r\n\t                return levelModel ? levelModel.get(ITEM_STYLE_NORMAL) : null;\r\n\t            });\r\n\r\n\t            travelTree(\r\n\t                root, // Visual should calculate from tree root but not view root.\r\n\t                {},\r\n\t                levelItemStyles,\r\n\t                seriesItemStyleModel,\r\n\t                seriesModel.getViewRoot().getAncestors(),\r\n\t                seriesModel\r\n\t            );\r\n\t        });\r\n\t    };\r\n\r\n\t    function travelTree(\r\n\t        node, designatedVisual, levelItemStyles, seriesItemStyleModel,\r\n\t        viewRootAncestors, seriesModel\r\n\t    ) {\r\n\t        var nodeModel = node.getModel();\r\n\t        var nodeLayout = node.getLayout();\r\n\r\n\t        // Optimize\r\n\t        if (!nodeLayout || nodeLayout.invisible || !nodeLayout.isInView) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var nodeItemStyleModel = node.getModel(ITEM_STYLE_NORMAL);\r\n\t        var levelItemStyle = levelItemStyles[node.depth];\r\n\t        var visuals = buildVisuals(\r\n\t            nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel\r\n\t        );\r\n\r\n\t        // calculate border color\r\n\t        var borderColor = nodeItemStyleModel.get('borderColor');\r\n\t        var borderColorSaturation = nodeItemStyleModel.get('borderColorSaturation');\r\n\t        var thisNodeColor;\r\n\t        if (borderColorSaturation != null) {\r\n\t            // For performance, do not always execute 'calculateColor'.\r\n\t            thisNodeColor = calculateColor(visuals, node);\r\n\t            borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);\r\n\t        }\r\n\t        node.setVisual('borderColor', borderColor);\r\n\r\n\t        var viewChildren = node.viewChildren;\r\n\t        if (!viewChildren || !viewChildren.length) {\r\n\t            thisNodeColor = calculateColor(visuals, node);\r\n\t            // Apply visual to this node.\r\n\t            node.setVisual('color', thisNodeColor);\r\n\t        }\r\n\t        else {\r\n\t            var mapping = buildVisualMapping(\r\n\t                node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren\r\n\t            );\r\n\t            // Designate visual to children.\r\n\t            zrUtil.each(viewChildren, function (child, index) {\r\n\t                // If higher than viewRoot, only ancestors of viewRoot is needed to visit.\r\n\t                if (child.depth >= viewRootAncestors.length\r\n\t                    || child === viewRootAncestors[child.depth]\r\n\t                ) {\r\n\t                    var childVisual = mapVisual(\r\n\t                        nodeModel, visuals, child, index, mapping, seriesModel\r\n\t                    );\r\n\t                    travelTree(\r\n\t                        child, childVisual, levelItemStyles, seriesItemStyleModel,\r\n\t                        viewRootAncestors, seriesModel\r\n\t                    );\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t    }\r\n\r\n\t    function buildVisuals(\r\n\t        nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel\r\n\t    ) {\r\n\t        var visuals = zrUtil.extend({}, designatedVisual);\r\n\r\n\t        zrUtil.each(['color', 'colorAlpha', 'colorSaturation'], function (visualName) {\r\n\t            // Priority: thisNode > thisLevel > parentNodeDesignated > seriesModel\r\n\t            var val = nodeItemStyleModel.get(visualName, true); // Ignore parent\r\n\t            val == null && levelItemStyle && (val = levelItemStyle[visualName]);\r\n\t            val == null && (val = designatedVisual[visualName]);\r\n\t            val == null && (val = seriesItemStyleModel.get(visualName));\r\n\r\n\t            val != null && (visuals[visualName] = val);\r\n\t        });\r\n\r\n\t        return visuals;\r\n\t    }\r\n\r\n\t    function calculateColor(visuals) {\r\n\t        var color = getValueVisualDefine(visuals, 'color');\r\n\r\n\t        if (color) {\r\n\t            var colorAlpha = getValueVisualDefine(visuals, 'colorAlpha');\r\n\t            var colorSaturation = getValueVisualDefine(visuals, 'colorSaturation');\r\n\t            if (colorSaturation) {\r\n\t                color = zrColor.modifyHSL(color, null, null, colorSaturation);\r\n\t            }\r\n\t            if (colorAlpha) {\r\n\t                color = zrColor.modifyAlpha(color, colorAlpha);\r\n\t            }\r\n\r\n\t            return color;\r\n\t        }\r\n\t    }\r\n\r\n\t    function calculateBorderColor(borderColorSaturation, thisNodeColor) {\r\n\t        return thisNodeColor != null\r\n\t             ? zrColor.modifyHSL(thisNodeColor, null, null, borderColorSaturation)\r\n\t             : null;\r\n\t    }\r\n\r\n\t    function getValueVisualDefine(visuals, name) {\r\n\t        var value = visuals[name];\r\n\t        if (value != null && value !== 'none') {\r\n\t            return value;\r\n\t        }\r\n\t    }\r\n\r\n\t    function buildVisualMapping(\r\n\t        node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren\r\n\t    ) {\r\n\t        if (!viewChildren || !viewChildren.length) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var rangeVisual = getRangeVisual(nodeModel, 'color')\r\n\t            || (\r\n\t                visuals.color != null\r\n\t                && visuals.color !== 'none'\r\n\t                && (\r\n\t                    getRangeVisual(nodeModel, 'colorAlpha')\r\n\t                    || getRangeVisual(nodeModel, 'colorSaturation')\r\n\t                )\r\n\t            );\r\n\r\n\t        if (!rangeVisual) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var colorMappingBy = nodeModel.get('colorMappingBy');\r\n\t        var opt = {\r\n\t            type: rangeVisual.name,\r\n\t            dataExtent: nodeLayout.dataExtent,\r\n\t            visual: rangeVisual.range\r\n\t        };\r\n\t        if (opt.type === 'color'\r\n\t            && (colorMappingBy === 'index' || colorMappingBy === 'id')\r\n\t        ) {\r\n\t            opt.mappingMethod = 'category';\r\n\t            opt.loop = true;\r\n\t            // categories is ordinal, so do not set opt.categories.\r\n\t        }\r\n\t        else {\r\n\t            opt.mappingMethod = 'linear';\r\n\t        }\r\n\r\n\t        var mapping = new VisualMapping(opt);\r\n\t        mapping.__drColorMappingBy = colorMappingBy;\r\n\r\n\t        return mapping;\r\n\t    }\r\n\r\n\t    // Notice: If we dont have the attribute 'colorRange', but only use\r\n\t    // attribute 'color' to represent both concepts of 'colorRange' and 'color',\r\n\t    // (It means 'colorRange' when 'color' is Array, means 'color' when not array),\r\n\t    // this problem will be encountered:\r\n\t    // If a level-1 node dont have children, and its siblings has children,\r\n\t    // and colorRange is set on level-1, then the node can not be colored.\r\n\t    // So we separate 'colorRange' and 'color' to different attributes.\r\n\t    function getRangeVisual(nodeModel, name) {\r\n\t        // 'colorRange', 'colorARange', 'colorSRange'.\r\n\t        // If not exsits on this node, fetch from levels and series.\r\n\t        var range = nodeModel.get(name);\r\n\t        return (isArray(range) && range.length) ? {name: name, range: range} : null;\r\n\t    }\r\n\r\n\t    function mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {\r\n\t        var childVisuals = zrUtil.extend({}, visuals);\r\n\r\n\t        if (mapping) {\r\n\t            var mappingType = mapping.type;\r\n\t            var colorMappingBy = mappingType === 'color' && mapping.__drColorMappingBy;\r\n\t            var value =\r\n\t                colorMappingBy === 'index'\r\n\t                ? index\r\n\t                : colorMappingBy === 'id'\r\n\t                ? seriesModel.mapIdToIndex(child.getId())\r\n\t                : child.getValue(nodeModel.get('visualDimension'));\r\n\r\n\t            childVisuals[mappingType] = mapping.mapValueToVisual(value);\r\n\t        }\r\n\r\n\t        return childVisuals;\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 193 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Visual mapping.\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var zrColor = __webpack_require__(39);\r\n\t    var linearMap = __webpack_require__(7).linearMap;\r\n\t    var each = zrUtil.each;\r\n\t    var isObject = zrUtil.isObject;\r\n\r\n\t    var CATEGORY_DEFAULT_VISUAL_INDEX = -1;\r\n\r\n\t    /**\r\n\t     * @param {Object} option\r\n\t     * @param {string} [option.type] See visualHandlers.\r\n\t     * @param {string} [option.mappingMethod] 'linear' or 'piecewise' or 'category' or 'fixed'\r\n\t     * @param {Array.<number>=} [option.dataExtent] [minExtent, maxExtent],\r\n\t     *                                              required when mappingMethod is 'linear'\r\n\t     * @param {Array.<Object>=} [option.pieceList] [\r\n\t     *                                             {value: someValue},\r\n\t     *                                             {interval: [min1, max1], visual: {...}},\r\n\t     *                                             {interval: [min2, max2]}\r\n\t     *                                             ],\r\n\t     *                                            required when mappingMethod is 'piecewise'.\r\n\t     *                                            Visual for only each piece can be specified.\r\n\t     * @param {Array.<string|Object>=} [option.categories] ['cate1', 'cate2']\r\n\t     *                                            required when mappingMethod is 'category'.\r\n\t     *                                            If no option.categories, categories is set\r\n\t     *                                            as [0, 1, 2, ...].\r\n\t     * @param {boolean} [option.loop=false] Whether loop mapping when mappingMethod is 'category'.\r\n\t     * @param {(Array|Object|*)} [option.visual]  Visual data.\r\n\t     *                                            when mappingMethod is 'category',\r\n\t     *                                            visual data can be array or object\r\n\t     *                                            (like: {cate1: '#222', none: '#fff'})\r\n\t     *                                            or primary types (which represents\r\n\t     *                                            defualt category visual), otherwise visual\r\n\t     *                                            can be array or primary (which will be\r\n\t     *                                            normalized to array).\r\n\t     *\r\n\t     */\r\n\t    var VisualMapping = function (option) {\r\n\t        var mappingMethod = option.mappingMethod;\r\n\t        var visualType = option.type;\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {Object}\r\n\t         */\r\n\t        var thisOption = this.option = zrUtil.clone(option);\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.type = visualType;\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.mappingMethod = mappingMethod;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Function}\r\n\t         */\r\n\t        this._normalizeData = normalizers[mappingMethod];\r\n\r\n\t        var visualHandler = visualHandlers[visualType];\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @type {Function}\r\n\t         */\r\n\t        this.applyVisual = visualHandler.applyVisual;\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @type {Function}\r\n\t         */\r\n\t        this.getColorMapper = visualHandler.getColorMapper;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Function}\r\n\t         */\r\n\t        this._doMap = visualHandler._doMap[mappingMethod];\r\n\r\n\t        if (mappingMethod === 'piecewise') {\r\n\t            normalizeVisualRange(thisOption);\r\n\t            preprocessForPiecewise(thisOption);\r\n\t        }\r\n\t        else if (mappingMethod === 'category') {\r\n\t            thisOption.categories\r\n\t                ? preprocessForSpecifiedCategory(thisOption)\r\n\t                // categories is ordinal when thisOption.categories not specified,\r\n\t                // which need no more preprocess except normalize visual.\r\n\t                : normalizeVisualRange(thisOption, true);\r\n\t        }\r\n\t        else { // mappingMethod === 'linear' or 'fixed'\r\n\t            zrUtil.assert(mappingMethod !== 'linear' || thisOption.dataExtent);\r\n\t            normalizeVisualRange(thisOption);\r\n\t        }\r\n\t    };\r\n\r\n\t    VisualMapping.prototype = {\r\n\r\n\t        constructor: VisualMapping,\r\n\r\n\t        mapValueToVisual: function (value) {\r\n\t            var normalized = this._normalizeData(value);\r\n\t            return this._doMap(normalized, value);\r\n\t        },\r\n\r\n\t        getNormalizer: function () {\r\n\t            return zrUtil.bind(this._normalizeData, this);\r\n\t        }\r\n\t    };\r\n\r\n\t    var visualHandlers = VisualMapping.visualHandlers = {\r\n\r\n\t        color: {\r\n\r\n\t            applyVisual: makeApplyVisual('color'),\r\n\r\n\t            /**\r\n\t             * Create a mapper function\r\n\t             * @return {Function}\r\n\t             */\r\n\t            getColorMapper: function () {\r\n\t                var thisOption = this.option;\r\n\t                var parsedVisual = zrUtil.map(thisOption.visual, zrColor.parse);\r\n\r\n\t                return zrUtil.bind(\r\n\t                    thisOption.mappingMethod === 'category'\r\n\t                        ? function (value, isNormalized) {\r\n\t                            !isNormalized && (value = this._normalizeData(value));\r\n\t                            return doMapCategory(this, value);\r\n\t                        }\r\n\t                        : function (value, isNormalized, out) {\r\n\t                            // If output rgb array\r\n\t                            // which will be much faster and useful in pixel manipulation\r\n\t                            var returnRGBArray = !!out;\r\n\t                            !isNormalized && (value = this._normalizeData(value));\r\n\t                            out = zrColor.fastMapToColor(value, parsedVisual, out);\r\n\t                            return returnRGBArray ? out : zrUtil.stringify(out, 'rgba');\r\n\t                        },\r\n\t                    this\r\n\t                );\r\n\t            },\r\n\r\n\t            _doMap: {\r\n\t                linear: function (normalized) {\r\n\t                    return zrColor.mapToColor(normalized, this.option.visual);\r\n\t                },\r\n\t                category: doMapCategory,\r\n\t                piecewise: function (normalized, value) {\r\n\t                    var result = getSpecifiedVisual.call(this, value);\r\n\t                    if (result == null) {\r\n\t                        result = zrColor.mapToColor(normalized, this.option.visual);\r\n\t                    }\r\n\t                    return result;\r\n\t                },\r\n\t                fixed: doMapFixed\r\n\t            }\r\n\t        },\r\n\r\n\t        colorHue: makePartialColorVisualHandler(function (color, value) {\r\n\t            return zrColor.modifyHSL(color, value);\r\n\t        }),\r\n\r\n\t        colorSaturation: makePartialColorVisualHandler(function (color, value) {\r\n\t            return zrColor.modifyHSL(color, null, value);\r\n\t        }),\r\n\r\n\t        colorLightness: makePartialColorVisualHandler(function (color, value) {\r\n\t            return zrColor.modifyHSL(color, null, null, value);\r\n\t        }),\r\n\r\n\t        colorAlpha: makePartialColorVisualHandler(function (color, value) {\r\n\t            return zrColor.modifyAlpha(color, value);\r\n\t        }),\r\n\r\n\t        opacity: {\r\n\t            applyVisual: makeApplyVisual('opacity'),\r\n\t            _doMap: makeDoMap([0, 1])\r\n\t        },\r\n\r\n\t        symbol: {\r\n\t            applyVisual: function (value, getter, setter) {\r\n\t                var symbolCfg = this.mapValueToVisual(value);\r\n\t                if (zrUtil.isString(symbolCfg)) {\r\n\t                    setter('symbol', symbolCfg);\r\n\t                }\r\n\t                else if (isObject(symbolCfg)) {\r\n\t                    for (var name in symbolCfg) {\r\n\t                        if (symbolCfg.hasOwnProperty(name)) {\r\n\t                            setter(name, symbolCfg[name]);\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\t            _doMap: {\r\n\t                linear: doMapToArray,\r\n\t                category: doMapCategory,\r\n\t                piecewise: function (normalized, value) {\r\n\t                    var result = getSpecifiedVisual.call(this, value);\r\n\t                    if (result == null) {\r\n\t                        result = doMapToArray.call(this, normalized);\r\n\t                    }\r\n\t                    return result;\r\n\t                },\r\n\t                fixed: doMapFixed\r\n\t            }\r\n\t        },\r\n\r\n\t        symbolSize: {\r\n\t            applyVisual: makeApplyVisual('symbolSize'),\r\n\t            _doMap: makeDoMap([0, 1])\r\n\t        }\r\n\t    };\r\n\r\n\r\n\t    function preprocessForPiecewise(thisOption) {\r\n\t        var pieceList = thisOption.pieceList;\r\n\t        thisOption.hasSpecialVisual = false;\r\n\r\n\t        zrUtil.each(pieceList, function (piece, index) {\r\n\t            piece.originIndex = index;\r\n\t            // piece.visual is \"result visual value\" but not\r\n\t            // a visual range, so it does not need to be normalized.\r\n\t            if (piece.visual != null) {\r\n\t                thisOption.hasSpecialVisual = true;\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    function preprocessForSpecifiedCategory(thisOption) {\r\n\t        // Hash categories.\r\n\t        var categories = thisOption.categories;\r\n\t        var visual = thisOption.visual;\r\n\r\n\t        var categoryMap = thisOption.categoryMap = {};\r\n\t        each(categories, function (cate, index) {\r\n\t            categoryMap[cate] = index;\r\n\t        });\r\n\r\n\t        // Process visual map input.\r\n\t        if (!zrUtil.isArray(visual)) {\r\n\t            var visualArr = [];\r\n\r\n\t            if (zrUtil.isObject(visual)) {\r\n\t                each(visual, function (v, cate) {\r\n\t                    var index = categoryMap[cate];\r\n\t                    visualArr[index != null ? index : CATEGORY_DEFAULT_VISUAL_INDEX] = v;\r\n\t                });\r\n\t            }\r\n\t            else { // Is primary type, represents default visual.\r\n\t                visualArr[CATEGORY_DEFAULT_VISUAL_INDEX] = visual;\r\n\t            }\r\n\r\n\t            visual = thisOption.visual = visualArr;\r\n\t        }\r\n\r\n\t        // Remove categories that has no visual,\r\n\t        // then we can mapping them to CATEGORY_DEFAULT_VISUAL_INDEX.\r\n\t        for (var i = categories.length - 1; i >= 0; i--) {\r\n\t            if (visual[i] == null) {\r\n\t                delete categoryMap[categories[i]];\r\n\t                categories.pop();\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    function normalizeVisualRange(thisOption, isCategory) {\r\n\t        var visual = thisOption.visual;\r\n\t        var visualArr = [];\r\n\r\n\t        if (zrUtil.isObject(visual)) {\r\n\t            each(visual, function (v) {\r\n\t                visualArr.push(v);\r\n\t            });\r\n\t        }\r\n\t        else if (visual != null) {\r\n\t            visualArr.push(visual);\r\n\t        }\r\n\r\n\t        var doNotNeedPair = {color: 1, symbol: 1};\r\n\r\n\t        if (!isCategory\r\n\t            && visualArr.length === 1\r\n\t            && !doNotNeedPair.hasOwnProperty(thisOption.type)\r\n\t        ) {\r\n\t            // Do not care visualArr.length === 0, which is illegal.\r\n\t            visualArr[1] = visualArr[0];\r\n\t        }\r\n\r\n\t        thisOption.visual = visualArr;\r\n\t    }\r\n\r\n\t    function makePartialColorVisualHandler(applyValue) {\r\n\t        return {\r\n\t            applyVisual: function (value, getter, setter) {\r\n\t                value = this.mapValueToVisual(value);\r\n\t                // Must not be array value\r\n\t                setter('color', applyValue(getter('color'), value));\r\n\t            },\r\n\t            _doMap: makeDoMap([0, 1])\r\n\t        };\r\n\t    }\r\n\r\n\t    function doMapToArray(arr, normalized) {\r\n\t        var visual = this.option.visual;\r\n\t        return visual[\r\n\t            Math.round(linearMap(normalized, [0, 1], [0, visual.length - 1], true))\r\n\t        ] || {};\r\n\t    }\r\n\r\n\t    function makeApplyVisual(visualType) {\r\n\t        return function (value, getter, setter) {\r\n\t            setter(visualType, this.mapValueToVisual(value));\r\n\t        };\r\n\t    }\r\n\r\n\t    function doMapCategory(normalized) {\r\n\t        var visual = this.option.visual;\r\n\t        return visual[\r\n\t            (this.option.loop && normalized !== CATEGORY_DEFAULT_VISUAL_INDEX)\r\n\t                ? normalized % visual.length\r\n\t                : normalized\r\n\t        ];\r\n\t    }\r\n\r\n\t    function doMapFixed() {\r\n\t        return this.option.visual[0];\r\n\t    }\r\n\r\n\t    function makeDoMap(sourceExtent) {\r\n\t        return {\r\n\t            linear: function (normalized) {\r\n\t                return linearMap(normalized, sourceExtent, this.option.visual, true);\r\n\t            },\r\n\t            category: doMapCategory,\r\n\t            piecewise: function (normalized, value) {\r\n\t                var result = getSpecifiedVisual.call(this, value);\r\n\t                if (result == null) {\r\n\t                    result = linearMap(normalized, sourceExtent, this.option.visual, true);\r\n\t                }\r\n\t                return result;\r\n\t            },\r\n\t            fixed: doMapFixed\r\n\t        };\r\n\t    }\r\n\r\n\t    function getSpecifiedVisual(value) {\r\n\t        var thisOption = this.option;\r\n\t        var pieceList = thisOption.pieceList;\r\n\t        if (thisOption.hasSpecialVisual) {\r\n\t            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);\r\n\t            var piece = pieceList[pieceIndex];\r\n\t            if (piece && piece.visual) {\r\n\t                return piece.visual[this.type];\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\r\n\t    /**\r\n\t     * Normalizers by mapping methods.\r\n\t     */\r\n\t    var normalizers = {\r\n\r\n\t        linear: function (value) {\r\n\t            return linearMap(value, this.option.dataExtent, [0, 1], true);\r\n\t        },\r\n\r\n\t        piecewise: function (value) {\r\n\t            var pieceList = this.option.pieceList;\r\n\t            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList, true);\r\n\t            if (pieceIndex != null) {\r\n\t                return linearMap(pieceIndex, [0, pieceList.length - 1], [0, 1], true);\r\n\t            }\r\n\t        },\r\n\r\n\t        category: function (value) {\r\n\t            var index = this.option.categories\r\n\t                ? this.option.categoryMap[value]\r\n\t                : value; // ordinal\r\n\t            return index == null ? CATEGORY_DEFAULT_VISUAL_INDEX : index;\r\n\t        },\r\n\r\n\t        fixed: zrUtil.noop\r\n\t    };\r\n\r\n\r\n\r\n\t    /**\r\n\t     * @public\r\n\t     */\r\n\t    VisualMapping.addVisualHandler = function (name, handler) {\r\n\t        visualHandlers[name] = handler;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @public\r\n\t     */\r\n\t    VisualMapping.isValidType = function (visualType) {\r\n\t        return visualHandlers.hasOwnProperty(visualType);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Convinent method.\r\n\t     * Visual can be Object or Array or primary type.\r\n\t     *\r\n\t     * @public\r\n\t     */\r\n\t    VisualMapping.eachVisual = function (visual, callback, context) {\r\n\t        if (zrUtil.isObject(visual)) {\r\n\t            zrUtil.each(visual, callback, context);\r\n\t        }\r\n\t        else {\r\n\t            callback.call(context, visual);\r\n\t        }\r\n\t    };\r\n\r\n\t    VisualMapping.mapVisual = function (visual, callback, context) {\r\n\t        var isPrimary;\r\n\t        var newVisual = zrUtil.isArray(visual)\r\n\t            ? []\r\n\t            : zrUtil.isObject(visual)\r\n\t            ? {}\r\n\t            : (isPrimary = true, null);\r\n\r\n\t        VisualMapping.eachVisual(visual, function (v, key) {\r\n\t            var newVal = callback.call(context, v, key);\r\n\t            isPrimary ? (newVisual = newVal) : (newVisual[key] = newVal);\r\n\t        });\r\n\t        return newVisual;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @public\r\n\t     * @param {Object} obj\r\n\t     * @return {Oject} new object containers visual values.\r\n\t     *                 If no visuals, return null.\r\n\t     */\r\n\t    VisualMapping.retrieveVisuals = function (obj) {\r\n\t        var ret = {};\r\n\t        var hasVisual;\r\n\r\n\t        obj && each(visualHandlers, function (h, visualType) {\r\n\t            if (obj.hasOwnProperty(visualType)) {\r\n\t                ret[visualType] = obj[visualType];\r\n\t                hasVisual = true;\r\n\t            }\r\n\t        });\r\n\r\n\t        return hasVisual ? ret : null;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Give order to visual types, considering colorSaturation, colorAlpha depends on color.\r\n\t     *\r\n\t     * @public\r\n\t     * @param {(Object|Array)} visualTypes If Object, like: {color: ..., colorSaturation: ...}\r\n\t     *                                     IF Array, like: ['color', 'symbol', 'colorSaturation']\r\n\t     * @return {Array.<string>} Sorted visual types.\r\n\t     */\r\n\t    VisualMapping.prepareVisualTypes = function (visualTypes) {\r\n\t        if (isObject(visualTypes)) {\r\n\t            var types = [];\r\n\t            each(visualTypes, function (item, type) {\r\n\t                types.push(type);\r\n\t            });\r\n\t            visualTypes = types;\r\n\t        }\r\n\t        else if (zrUtil.isArray(visualTypes)) {\r\n\t            visualTypes = visualTypes.slice();\r\n\t        }\r\n\t        else {\r\n\t            return [];\r\n\t        }\r\n\r\n\t        visualTypes.sort(function (type1, type2) {\r\n\t            // color should be front of colorSaturation, colorAlpha, ...\r\n\t            // symbol and symbolSize do not matter.\r\n\t            return (type2 === 'color' && type1 !== 'color' && type1.indexOf('color') === 0)\r\n\t                ? 1 : -1;\r\n\t        });\r\n\r\n\t        return visualTypes;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * 'color', 'colorSaturation', 'colorAlpha', ... are depends on 'color'.\r\n\t     * Other visuals are only depends on themself.\r\n\t     *\r\n\t     * @public\r\n\t     * @param {string} visualType1\r\n\t     * @param {string} visualType2\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    VisualMapping.dependsOn = function (visualType1, visualType2) {\r\n\t        return visualType2 === 'color'\r\n\t            ? !!(visualType1 && visualType1.indexOf(visualType2) === 0)\r\n\t            : visualType1 === visualType2;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {number} value\r\n\t     * @param {Array.<Object>} pieceList [{value: ..., interval: [min, max]}, ...]\r\n\t     *                         Always from small to big.\r\n\t     * @param {boolean} [findClosestWhenOutside=false]\r\n\t     * @return {number} index\r\n\t     */\r\n\t    VisualMapping.findPieceIndex = function (value, pieceList, findClosestWhenOutside) {\r\n\t        var possibleI;\r\n\t        var abs = Infinity;\r\n\r\n\t        // value has the higher priority.\r\n\t        for (var i = 0, len = pieceList.length; i < len; i++) {\r\n\t            var pieceValue = pieceList[i].value;\r\n\t            if (pieceValue != null) {\r\n\t                if (pieceValue === value) {\r\n\t                    return i;\r\n\t                }\r\n\t                findClosestWhenOutside && updatePossible(pieceValue, i);\r\n\t            }\r\n\t        }\r\n\r\n\t        for (var i = 0, len = pieceList.length; i < len; i++) {\r\n\t            var piece = pieceList[i];\r\n\t            var interval = piece.interval;\r\n\t            var close = piece.close;\r\n\r\n\t            if (interval) {\r\n\t                if (interval[0] === -Infinity) {\r\n\t                    if (littleThan(close[1], value, interval[1])) {\r\n\t                        return i;\r\n\t                    }\r\n\t                }\r\n\t                else if (interval[1] === Infinity) {\r\n\t                    if (littleThan(close[0], interval[0], value)) {\r\n\t                        return i;\r\n\t                    }\r\n\t                }\r\n\t                else if (\r\n\t                    littleThan(close[0], interval[0], value)\r\n\t                    && littleThan(close[1], value, interval[1])\r\n\t                ) {\r\n\t                    return i;\r\n\t                }\r\n\t                findClosestWhenOutside && updatePossible(interval[0], i);\r\n\t                findClosestWhenOutside && updatePossible(interval[1], i);\r\n\t            }\r\n\t        }\r\n\r\n\t        if (findClosestWhenOutside) {\r\n\t            return value === Infinity\r\n\t                ? pieceList.length - 1\r\n\t                : value === -Infinity\r\n\t                ? 0\r\n\t                : possibleI;\r\n\t        }\r\n\r\n\t        function updatePossible(val, index) {\r\n\t            var newAbs = Math.abs(val - value);\r\n\t            if (newAbs < abs) {\r\n\t                abs = newAbs;\r\n\t                possibleI = index;\r\n\t            }\r\n\t        }\r\n\r\n\t    };\r\n\r\n\t    function littleThan(close, a, b) {\r\n\t        return close ? a <= b : a < b;\r\n\t    }\r\n\r\n\t    module.exports = VisualMapping;\r\n\r\n\r\n\r\n/***/ },\r\n/* 194 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var layout = __webpack_require__(21);\r\n\t    var helper = __webpack_require__(187);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\t    var helper = __webpack_require__(187);\r\n\r\n\t    var mathMax = Math.max;\r\n\t    var mathMin = Math.min;\r\n\t    var parsePercent = numberUtil.parsePercent;\r\n\t    var retrieveValue = zrUtil.retrieve;\r\n\t    var each = zrUtil.each;\r\n\r\n\t    /**\r\n\t     * @public\r\n\t     */\r\n\t    function update(ecModel, api, payload) {\r\n\t        // Layout result in each node:\r\n\t        // {x, y, width, height, area, borderWidth}\r\n\t        var condition = {mainType: 'series', subType: 'treemap', query: payload};\r\n\t        ecModel.eachComponent(condition, function (seriesModel) {\r\n\r\n\t            var ecWidth = api.getWidth();\r\n\t            var ecHeight = api.getHeight();\r\n\t            var seriesOption = seriesModel.option;\r\n\r\n\t            var size = seriesOption.size || []; // Compatible with ec2.\r\n\t            var containerWidth = parsePercent(\r\n\t                retrieveValue(seriesOption.width, size[0]),\r\n\t                ecWidth\r\n\t            );\r\n\t            var containerHeight = parsePercent(\r\n\t                retrieveValue(seriesOption.height, size[1]),\r\n\t                ecHeight\r\n\t            );\r\n\r\n\t            var layoutInfo = layout.getLayoutRect(\r\n\t                seriesModel.getBoxLayoutParams(),\r\n\t                {\r\n\t                    width: api.getWidth(),\r\n\t                    height: api.getHeight()\r\n\t                }\r\n\t            );\r\n\r\n\t            // Fetch payload info.\r\n\t            var payloadType = payload && payload.type;\r\n\t            var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);\r\n\t            var rootRect = (payloadType === 'treemapRender' || payloadType === 'treemapMove')\r\n\t                ? payload.rootRect : null;\r\n\t            var viewRoot = seriesModel.getViewRoot();\r\n\t            var viewAbovePath = helper.getPathToRoot(viewRoot);\r\n\r\n\t            if (payloadType !== 'treemapMove') {\r\n\t                var rootSize = payloadType === 'treemapZoomToNode'\r\n\t                    ? estimateRootSize(\r\n\t                        seriesModel, targetInfo, viewRoot, containerWidth, containerHeight\r\n\t                    )\r\n\t                    : rootRect\r\n\t                    ? [rootRect.width, rootRect.height]\r\n\t                    : [containerWidth, containerHeight];\r\n\r\n\t                var sort = seriesOption.sort;\r\n\t                if (sort && sort !== 'asc' && sort !== 'desc') {\r\n\t                    sort = 'desc';\r\n\t                }\r\n\t                var options = {\r\n\t                    squareRatio: seriesOption.squareRatio,\r\n\t                    sort: sort,\r\n\t                    leafDepth: seriesOption.leafDepth\r\n\t                };\r\n\r\n\t                // layout should be cleared because using updateView but not update.\r\n\t                viewRoot.hostTree.clearLayouts();\r\n\r\n\t                // TODO\r\n\t                // optimize: if out of view clip, do not layout.\r\n\t                // But take care that if do not render node out of view clip,\r\n\t                // how to calculate start po\r\n\r\n\t                var viewRootLayout = {\r\n\t                    x: 0, y: 0,\r\n\t                    width: rootSize[0], height: rootSize[1],\r\n\t                    area: rootSize[0] * rootSize[1]\r\n\t                };\r\n\t                viewRoot.setLayout(viewRootLayout);\r\n\r\n\t                squarify(viewRoot, options, false, 0);\r\n\t                // Supplement layout.\r\n\t                var viewRootLayout = viewRoot.getLayout();\r\n\t                each(viewAbovePath, function (node, index) {\r\n\t                    var childValue = (viewAbovePath[index + 1] || viewRoot).getValue();\r\n\t                    node.setLayout(zrUtil.extend(\r\n\t                        {dataExtent: [childValue, childValue], borderWidth: 0},\r\n\t                        viewRootLayout\r\n\t                    ));\r\n\t                });\r\n\t            }\r\n\r\n\t            var treeRoot = seriesModel.getData().tree.root;\r\n\r\n\t            treeRoot.setLayout(\r\n\t                calculateRootPosition(layoutInfo, rootRect, targetInfo),\r\n\t                true\r\n\t            );\r\n\r\n\t            seriesModel.setLayoutInfo(layoutInfo);\r\n\r\n\t            // FIXME\r\n\t            // 现在没有clip功能，暂时取ec高宽。\r\n\t            prunning(\r\n\t                treeRoot,\r\n\t                // Transform to base element coordinate system.\r\n\t                new BoundingRect(-layoutInfo.x, -layoutInfo.y, ecWidth, ecHeight),\r\n\t                viewAbovePath,\r\n\t                viewRoot,\r\n\t                0\r\n\t            );\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Layout treemap with squarify algorithm.\r\n\t     * @see https://graphics.ethz.ch/teaching/scivis_common/Literature/squarifiedTreeMaps.pdf\r\n\t     * @see https://github.com/mbostock/d3/blob/master/src/layout/treemap.js\r\n\t     *\r\n\t     * @protected\r\n\t     * @param {module:echarts/data/Tree~TreeNode} node\r\n\t     * @param {Object} options\r\n\t     * @param {string} options.sort 'asc' or 'desc'\r\n\t     * @param {number} options.squareRatio\r\n\t     * @param {boolean} hideChildren\r\n\t     * @param {number} depth\r\n\t     */\r\n\t    function squarify(node, options, hideChildren, depth) {\r\n\t        var width;\r\n\t        var height;\r\n\r\n\t        if (node.isRemoved()) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var thisLayout = node.getLayout();\r\n\t        width = thisLayout.width;\r\n\t        height = thisLayout.height;\r\n\r\n\t        // Considering border and gap\r\n\t        var itemStyleModel = node.getModel('itemStyle.normal');\r\n\t        var borderWidth = itemStyleModel.get('borderWidth');\r\n\t        var halfGapWidth = itemStyleModel.get('gapWidth') / 2;\r\n\t        var layoutOffset = borderWidth - halfGapWidth;\r\n\t        var nodeModel = node.getModel();\r\n\r\n\t        node.setLayout({borderWidth: borderWidth}, true);\r\n\r\n\t        width = mathMax(width - 2 * layoutOffset, 0);\r\n\t        height = mathMax(height - 2 * layoutOffset, 0);\r\n\r\n\t        var totalArea = width * height;\r\n\t        var viewChildren = initChildren(\r\n\t            node, nodeModel, totalArea, options, hideChildren, depth\r\n\t        );\r\n\r\n\t        if (!viewChildren.length) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var rect = {x: layoutOffset, y: layoutOffset, width: width, height: height};\r\n\t        var rowFixedLength = mathMin(width, height);\r\n\t        var best = Infinity; // the best row score so far\r\n\t        var row = [];\r\n\t        row.area = 0;\r\n\r\n\t        for (var i = 0, len = viewChildren.length; i < len;) {\r\n\t            var child = viewChildren[i];\r\n\r\n\t            row.push(child);\r\n\t            row.area += child.getLayout().area;\r\n\t            var score = worst(row, rowFixedLength, options.squareRatio);\r\n\r\n\t            // continue with this orientation\r\n\t            if (score <= best) {\r\n\t                i++;\r\n\t                best = score;\r\n\t            }\r\n\t            // abort, and try a different orientation\r\n\t            else {\r\n\t                row.area -= row.pop().getLayout().area;\r\n\t                position(row, rowFixedLength, rect, halfGapWidth, false);\r\n\t                rowFixedLength = mathMin(rect.width, rect.height);\r\n\t                row.length = row.area = 0;\r\n\t                best = Infinity;\r\n\t            }\r\n\t        }\r\n\r\n\t        if (row.length) {\r\n\t            position(row, rowFixedLength, rect, halfGapWidth, true);\r\n\t        }\r\n\r\n\t        if (!hideChildren) {\r\n\t            var childrenVisibleMin = nodeModel.get('childrenVisibleMin');\r\n\t            if (childrenVisibleMin != null && totalArea < childrenVisibleMin) {\r\n\t                hideChildren = true;\r\n\t            }\r\n\t        }\r\n\r\n\t        for (var i = 0, len = viewChildren.length; i < len; i++) {\r\n\t            squarify(viewChildren[i], options, hideChildren, depth + 1);\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Set area to each child, and calculate data extent for visual coding.\r\n\t     */\r\n\t    function initChildren(node, nodeModel, totalArea, options, hideChildren, depth) {\r\n\t        var viewChildren = node.children || [];\r\n\t        var orderBy = options.sort;\r\n\t        orderBy !== 'asc' && orderBy !== 'desc' && (orderBy = null);\r\n\r\n\t        var overLeafDepth = options.leafDepth != null && options.leafDepth <= depth;\r\n\r\n\t        // leafDepth has higher priority.\r\n\t        if (hideChildren && !overLeafDepth) {\r\n\t            return (node.viewChildren = []);\r\n\t        }\r\n\r\n\t        // Sort children, order by desc.\r\n\t        viewChildren = zrUtil.filter(viewChildren, function (child) {\r\n\t            return !child.isRemoved();\r\n\t        });\r\n\r\n\t        sort(viewChildren, orderBy);\r\n\r\n\t        var info = statistic(nodeModel, viewChildren, orderBy);\r\n\r\n\t        if (info.sum === 0) {\r\n\t            return (node.viewChildren = []);\r\n\t        }\r\n\r\n\t        info.sum = filterByThreshold(nodeModel, totalArea, info.sum, orderBy, viewChildren);\r\n\r\n\t        if (info.sum === 0) {\r\n\t            return (node.viewChildren = []);\r\n\t        }\r\n\r\n\t        // Set area to each child.\r\n\t        for (var i = 0, len = viewChildren.length; i < len; i++) {\r\n\t            var area = viewChildren[i].getValue() / info.sum * totalArea;\r\n\t            // Do not use setLayout({...}, true), because it is needed to clear last layout.\r\n\t            viewChildren[i].setLayout({area: area});\r\n\t        }\r\n\r\n\t        if (overLeafDepth) {\r\n\t            viewChildren.length && node.setLayout({isLeafRoot: true}, true);\r\n\t            viewChildren.length = 0;\r\n\t        }\r\n\r\n\t        node.viewChildren = viewChildren;\r\n\t        node.setLayout({dataExtent: info.dataExtent}, true);\r\n\r\n\t        return viewChildren;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Consider 'visibleMin'. Modify viewChildren and get new sum.\r\n\t     */\r\n\t    function filterByThreshold(nodeModel, totalArea, sum, orderBy, orderedChildren) {\r\n\r\n\t        // visibleMin is not supported yet when no option.sort.\r\n\t        if (!orderBy) {\r\n\t            return sum;\r\n\t        }\r\n\r\n\t        var visibleMin = nodeModel.get('visibleMin');\r\n\t        var len = orderedChildren.length;\r\n\t        var deletePoint = len;\r\n\r\n\t        // Always travel from little value to big value.\r\n\t        for (var i = len - 1; i >= 0; i--) {\r\n\t            var value = orderedChildren[\r\n\t                orderBy === 'asc' ? len - i - 1 : i\r\n\t            ].getValue();\r\n\r\n\t            if (value / sum * totalArea < visibleMin) {\r\n\t                deletePoint = i;\r\n\t                sum -= value;\r\n\t            }\r\n\t        }\r\n\r\n\t        orderBy === 'asc'\r\n\t            ? orderedChildren.splice(0, len - deletePoint)\r\n\t            : orderedChildren.splice(deletePoint, len - deletePoint);\r\n\r\n\t        return sum;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Sort\r\n\t     */\r\n\t    function sort(viewChildren, orderBy) {\r\n\t        if (orderBy) {\r\n\t            viewChildren.sort(function (a, b) {\r\n\t                return orderBy === 'asc'\r\n\t                    ?  a.getValue() - b.getValue() : b.getValue() - a.getValue();\r\n\t            });\r\n\t        }\r\n\t        return viewChildren;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Statistic\r\n\t     */\r\n\t    function statistic(nodeModel, children, orderBy) {\r\n\t        // Calculate sum.\r\n\t        var sum = 0;\r\n\t        for (var i = 0, len = children.length; i < len; i++) {\r\n\t            sum += children[i].getValue();\r\n\t        }\r\n\r\n\t        // Statistic data extent for latter visual coding.\r\n\t        // Notice: data extent should be calculate based on raw children\r\n\t        // but not filtered view children, otherwise visual mapping will not\r\n\t        // be stable when zoom (where children is filtered by visibleMin).\r\n\r\n\t        var dimension = nodeModel.get('visualDimension');\r\n\t        var dataExtent;\r\n\r\n\t        // The same as area dimension.\r\n\t        if (!children || !children.length) {\r\n\t            dataExtent = [NaN, NaN];\r\n\t        }\r\n\t        else if (dimension === 'value' && orderBy) {\r\n\t            dataExtent = [\r\n\t                children[children.length - 1].getValue(),\r\n\t                children[0].getValue()\r\n\t            ];\r\n\t            orderBy === 'asc' && dataExtent.reverse();\r\n\t        }\r\n\t        // Other dimension.\r\n\t        else {\r\n\t            var dataExtent = [Infinity, -Infinity];\r\n\t            each(children, function (child) {\r\n\t                var value = child.getValue(dimension);\r\n\t                value < dataExtent[0] && (dataExtent[0] = value);\r\n\t                value > dataExtent[1] && (dataExtent[1] = value);\r\n\t            });\r\n\t        }\r\n\r\n\t        return {sum: sum, dataExtent: dataExtent};\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Computes the score for the specified row,\r\n\t     * as the worst aspect ratio.\r\n\t     */\r\n\t    function worst(row, rowFixedLength, ratio) {\r\n\t        var areaMax = 0;\r\n\t        var areaMin = Infinity;\r\n\r\n\t        for (var i = 0, area, len = row.length; i < len; i++) {\r\n\t            area = row[i].getLayout().area;\r\n\t            if (area) {\r\n\t                area < areaMin && (areaMin = area);\r\n\t                area > areaMax && (areaMax = area);\r\n\t            }\r\n\t        }\r\n\r\n\t        var squareArea = row.area * row.area;\r\n\t        var f = rowFixedLength * rowFixedLength * ratio;\r\n\r\n\t        return squareArea\r\n\t            ? mathMax(\r\n\t                (f * areaMax) / squareArea,\r\n\t                squareArea / (f * areaMin)\r\n\t            )\r\n\t            : Infinity;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Positions the specified row of nodes. Modifies `rect`.\r\n\t     */\r\n\t    function position(row, rowFixedLength, rect, halfGapWidth, flush) {\r\n\t        // When rowFixedLength === rect.width,\r\n\t        // it is horizontal subdivision,\r\n\t        // rowFixedLength is the width of the subdivision,\r\n\t        // rowOtherLength is the height of the subdivision,\r\n\t        // and nodes will be positioned from left to right.\r\n\r\n\t        // wh[idx0WhenH] means: when horizontal,\r\n\t        //      wh[idx0WhenH] => wh[0] => 'width'.\r\n\t        //      xy[idx1WhenH] => xy[1] => 'y'.\r\n\t        var idx0WhenH = rowFixedLength === rect.width ? 0 : 1;\r\n\t        var idx1WhenH = 1 - idx0WhenH;\r\n\t        var xy = ['x', 'y'];\r\n\t        var wh = ['width', 'height'];\r\n\r\n\t        var last = rect[xy[idx0WhenH]];\r\n\t        var rowOtherLength = rowFixedLength\r\n\t            ? row.area / rowFixedLength : 0;\r\n\r\n\t        if (flush || rowOtherLength > rect[wh[idx1WhenH]]) {\r\n\t            rowOtherLength = rect[wh[idx1WhenH]]; // over+underflow\r\n\t        }\r\n\t        for (var i = 0, rowLen = row.length; i < rowLen; i++) {\r\n\t            var node = row[i];\r\n\t            var nodeLayout = {};\r\n\t            var step = rowOtherLength\r\n\t                ? node.getLayout().area / rowOtherLength : 0;\r\n\r\n\t            var wh1 = nodeLayout[wh[idx1WhenH]] = mathMax(rowOtherLength - 2 * halfGapWidth, 0);\r\n\r\n\t            // We use Math.max/min to avoid negative width/height when considering gap width.\r\n\t            var remain = rect[xy[idx0WhenH]] + rect[wh[idx0WhenH]] - last;\r\n\t            var modWH = (i === rowLen - 1 || remain < step) ? remain : step;\r\n\t            var wh0 = nodeLayout[wh[idx0WhenH]] = mathMax(modWH - 2 * halfGapWidth, 0);\r\n\r\n\t            nodeLayout[xy[idx1WhenH]] = rect[xy[idx1WhenH]] + mathMin(halfGapWidth, wh1 / 2);\r\n\t            nodeLayout[xy[idx0WhenH]] = last + mathMin(halfGapWidth, wh0 / 2);\r\n\r\n\t            last += modWH;\r\n\t            node.setLayout(nodeLayout, true);\r\n\t        }\r\n\r\n\t        rect[xy[idx1WhenH]] += rowOtherLength;\r\n\t        rect[wh[idx1WhenH]] -= rowOtherLength;\r\n\t    }\r\n\r\n\t    // Return [containerWidth, containerHeight] as defualt.\r\n\t    function estimateRootSize(seriesModel, targetInfo, viewRoot, containerWidth, containerHeight) {\r\n\t        // If targetInfo.node exists, we zoom to the node,\r\n\t        // so estimate whold width and heigth by target node.\r\n\t        var currNode = (targetInfo || {}).node;\r\n\t        var defaultSize = [containerWidth, containerHeight];\r\n\r\n\t        if (!currNode || currNode === viewRoot) {\r\n\t            return defaultSize;\r\n\t        }\r\n\r\n\t        var parent;\r\n\t        var viewArea = containerWidth * containerHeight;\r\n\t        var area = viewArea * seriesModel.option.zoomToNodeRatio;\r\n\r\n\t        while (parent = currNode.parentNode) { // jshint ignore:line\r\n\t            var sum = 0;\r\n\t            var siblings = parent.children;\r\n\r\n\t            for (var i = 0, len = siblings.length; i < len; i++) {\r\n\t                sum += siblings[i].getValue();\r\n\t            }\r\n\t            var currNodeValue = currNode.getValue();\r\n\t            if (currNodeValue === 0) {\r\n\t                return defaultSize;\r\n\t            }\r\n\t            area *= sum / currNodeValue;\r\n\r\n\t            var borderWidth = parent.getModel('itemStyle.normal').get('borderWidth');\r\n\r\n\t            if (isFinite(borderWidth)) {\r\n\t                // Considering border, suppose aspect ratio is 1.\r\n\t                area += 4 * borderWidth * borderWidth + 4 * borderWidth * Math.pow(area, 0.5);\r\n\t            }\r\n\r\n\t            area > numberUtil.MAX_SAFE_INTEGER && (area = numberUtil.MAX_SAFE_INTEGER);\r\n\r\n\t            currNode = parent;\r\n\t        }\r\n\r\n\t        area < viewArea && (area = viewArea);\r\n\t        var scale = Math.pow(area / viewArea, 0.5);\r\n\r\n\t        return [containerWidth * scale, containerHeight * scale];\r\n\t    }\r\n\r\n\t    // Root postion base on coord of containerGroup\r\n\t    function calculateRootPosition(layoutInfo, rootRect, targetInfo) {\r\n\t        if (rootRect) {\r\n\t            return {x: rootRect.x, y: rootRect.y};\r\n\t        }\r\n\r\n\t        var defaultPosition = {x: 0, y: 0};\r\n\t        if (!targetInfo) {\r\n\t            return defaultPosition;\r\n\t        }\r\n\r\n\t        // If targetInfo is fetched by 'retrieveTargetInfo',\r\n\t        // old tree and new tree are the same tree,\r\n\t        // so the node still exists and we can visit it.\r\n\r\n\t        var targetNode = targetInfo.node;\r\n\t        var layout = targetNode.getLayout();\r\n\r\n\t        if (!layout) {\r\n\t            return defaultPosition;\r\n\t        }\r\n\r\n\t        // Transform coord from local to container.\r\n\t        var targetCenter = [layout.width / 2, layout.height / 2];\r\n\t        var node = targetNode;\r\n\t        while (node) {\r\n\t            var nodeLayout = node.getLayout();\r\n\t            targetCenter[0] += nodeLayout.x;\r\n\t            targetCenter[1] += nodeLayout.y;\r\n\t            node = node.parentNode;\r\n\t        }\r\n\r\n\t        return {\r\n\t            x: layoutInfo.width / 2 - targetCenter[0],\r\n\t            y: layoutInfo.height / 2 - targetCenter[1]\r\n\t        };\r\n\t    }\r\n\r\n\t    // Mark nodes visible for prunning when visual coding and rendering.\r\n\t    // Prunning depends on layout and root position, so we have to do it after layout.\r\n\t    function prunning(node, clipRect, viewAbovePath, viewRoot, depth) {\r\n\t        var nodeLayout = node.getLayout();\r\n\t        var nodeInViewAbovePath = viewAbovePath[depth];\r\n\t        var isAboveViewRoot = nodeInViewAbovePath && nodeInViewAbovePath === node;\r\n\r\n\t        if (\r\n\t            (nodeInViewAbovePath && !isAboveViewRoot)\r\n\t            || (depth === viewAbovePath.length && node !== viewRoot)\r\n\t        ) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        node.setLayout({\r\n\t            // isInView means: viewRoot sub tree + viewAbovePath\r\n\t            isInView: true,\r\n\t            // invisible only means: outside view clip so that the node can not\r\n\t            // see but still layout for animation preparation but not render.\r\n\t            invisible: !isAboveViewRoot && !clipRect.intersect(nodeLayout),\r\n\t            isAboveViewRoot: isAboveViewRoot\r\n\t        }, true);\r\n\r\n\t        // Transform to child coordinate.\r\n\t        var childClipRect = new BoundingRect(\r\n\t            clipRect.x - nodeLayout.x,\r\n\t            clipRect.y - nodeLayout.y,\r\n\t            clipRect.width,\r\n\t            clipRect.height\r\n\t        );\r\n\r\n\t        each(node.viewChildren || [], function (child) {\r\n\t            prunning(child, childClipRect, viewAbovePath, viewRoot, depth + 1);\r\n\t        });\r\n\t    }\r\n\r\n\t    module.exports = update;\r\n\r\n\r\n/***/ },\r\n/* 195 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    __webpack_require__(196);\r\n\t    __webpack_require__(199);\r\n\r\n\t    __webpack_require__(204);\r\n\r\n\t    echarts.registerProcessor(__webpack_require__(205));\r\n\r\n\t    echarts.registerVisual(zrUtil.curry(\r\n\t        __webpack_require__(109), 'graph', 'circle', null\r\n\t    ));\r\n\t    echarts.registerVisual(__webpack_require__(206));\r\n\t    echarts.registerVisual(__webpack_require__(207));\r\n\r\n\t    echarts.registerLayout(__webpack_require__(208));\r\n\t    echarts.registerLayout(__webpack_require__(211));\r\n\t    echarts.registerLayout(__webpack_require__(213));\r\n\r\n\t    // Graph view coordinate system\r\n\t    echarts.registerCoordinateSystem('graphView', {\r\n\t        create: __webpack_require__(215)\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 196 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var List = __webpack_require__(97);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var Model = __webpack_require__(12);\r\n\r\n\t    var createGraphFromNodeEdge = __webpack_require__(197);\r\n\r\n\t    var GraphSeries = __webpack_require__(1).extendSeriesModel({\r\n\r\n\t        type: 'series.graph',\r\n\r\n\t        init: function (option) {\r\n\t            GraphSeries.superApply(this, 'init', arguments);\r\n\r\n\t            // Provide data for legend select\r\n\t            this.legendDataProvider = function () {\r\n\t                return this._categoriesData;\r\n\t            };\r\n\r\n\t            this.fillDataTextStyle(option.edges || option.links);\r\n\r\n\t            this._updateCategoriesData();\r\n\t        },\r\n\r\n\t        mergeOption: function (option) {\r\n\t            GraphSeries.superApply(this, 'mergeOption', arguments);\r\n\r\n\t            this.fillDataTextStyle(option.edges || option.links);\r\n\r\n\t            this._updateCategoriesData();\r\n\t        },\r\n\r\n\t        mergeDefaultAndTheme: function (option) {\r\n\t            GraphSeries.superApply(this, 'mergeDefaultAndTheme', arguments);\r\n\t            modelUtil.defaultEmphasis(option.edgeLabel, modelUtil.LABEL_OPTIONS);\r\n\t        },\r\n\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            var edges = option.edges || option.links || [];\r\n\t            var nodes = option.data || option.nodes || [];\r\n\t            var self = this;\r\n\r\n\t            if (nodes && edges) {\r\n\t                return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;\r\n\t            }\r\n\r\n\t            function beforeLink(nodeData, edgeData) {\r\n\t                // Overwrite nodeData.getItemModel to\r\n\t                nodeData.wrapMethod('getItemModel', function (model) {\r\n\t                    var categoriesModels = self._categoriesModels;\r\n\t                    var categoryIdx = model.getShallow('category');\r\n\t                    var categoryModel = categoriesModels[categoryIdx];\r\n\t                    if (categoryModel) {\r\n\t                        categoryModel.parentModel = model.parentModel;\r\n\t                        model.parentModel = categoryModel;\r\n\t                    }\r\n\t                    return model;\r\n\t                });\r\n\r\n\t                var edgeLabelModel = self.getModel('edgeLabel');\r\n\t                var wrappedGetEdgeModel = function (path, parentModel) {\r\n\t                    var pathArr = (path || '').split('.');\r\n\t                    if (pathArr[0] === 'label') {\r\n\t                        parentModel = parentModel\r\n\t                            || edgeLabelModel.getModel(pathArr.slice(1));\r\n\t                    }\r\n\t                    var model = Model.prototype.getModel.call(this, pathArr, parentModel);\r\n\t                    model.getModel = wrappedGetEdgeModel;\r\n\t                    return model;\r\n\t                };\r\n\t                edgeData.wrapMethod('getItemModel', function (model) {\r\n\t                    // FIXME Wrap get method ?\r\n\t                    model.getModel = wrappedGetEdgeModel;\r\n\t                    return model;\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:echarts/data/Graph}\r\n\t         */\r\n\t        getGraph: function () {\r\n\t            return this.getData().graph;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:echarts/data/List}\r\n\t         */\r\n\t        getEdgeData: function () {\r\n\t            return this.getGraph().edgeData;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:echarts/data/List}\r\n\t         */\r\n\t        getCategoriesData: function () {\r\n\t            return this._categoriesData;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        formatTooltip: function (dataIndex, multipleSeries, dataType) {\r\n\t            if (dataType === 'edge') {\r\n\t                var nodeData = this.getData();\r\n\t                var params = this.getDataParams(dataIndex, dataType);\r\n\t                var edge = nodeData.graph.getEdgeByIndex(dataIndex);\r\n\t                var sourceName = nodeData.getName(edge.node1.dataIndex);\r\n\t                var targetName = nodeData.getName(edge.node2.dataIndex);\r\n\t                var html = sourceName + ' > ' + targetName;\r\n\t                if (params.value) {\r\n\t                    html += ' : ' + params.value;\r\n\t                }\r\n\t                return html;\r\n\t            }\r\n\t            else { // dataType === 'node' or empty\r\n\t                return GraphSeries.superApply(this, 'formatTooltip', arguments);\r\n\t            }\r\n\t        },\r\n\r\n\t        _updateCategoriesData: function () {\r\n\t            var categories = zrUtil.map(this.option.categories || [], function (category) {\r\n\t                // Data must has value\r\n\t                return category.value != null ? category : zrUtil.extend({\r\n\t                    value: 0\r\n\t                }, category);\r\n\t            });\r\n\t            var categoriesData = new List(['value'], this);\r\n\t            categoriesData.initData(categories);\r\n\r\n\t            this._categoriesData = categoriesData;\r\n\r\n\t            this._categoriesModels = categoriesData.mapArray(function (idx) {\r\n\t                return categoriesData.getItemModel(idx, true);\r\n\t            });\r\n\t        },\r\n\r\n\t        setZoom: function (zoom) {\r\n\t            this.option.zoom = zoom;\r\n\t        },\r\n\r\n\t        setCenter: function (center) {\r\n\t            this.option.center = center;\r\n\t        },\r\n\r\n\t        ifEnableAnimation: function () {\r\n\t            return GraphSeries.superCall(this, 'ifEnableAnimation')\r\n\t                // Not enable animation when do force layout\r\n\t                && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,\r\n\t            z: 2,\r\n\r\n\t            coordinateSystem: 'view',\r\n\r\n\t            // Default option for all coordinate systems\r\n\t            // xAxisIndex: 0,\r\n\t            // yAxisIndex: 0,\r\n\t            // polarIndex: 0,\r\n\t            // geoIndex: 0,\r\n\r\n\t            legendHoverLink: true,\r\n\r\n\t            hoverAnimation: true,\r\n\r\n\t            layout: null,\r\n\r\n\t            focusNodeAdjacency: false,\r\n\r\n\t            // Configuration of circular layout\r\n\t            circular: {\r\n\t                rotateLabel: false\r\n\t            },\r\n\t            // Configuration of force directed layout\r\n\t            force: {\r\n\t                initLayout: null,\r\n\t                // Node repulsion. Can be an array to represent range.\r\n\t                repulsion: [0, 50],\r\n\t                gravity: 0.1,\r\n\r\n\t                // Edge length. Can be an array to represent range.\r\n\t                edgeLength: 30,\r\n\r\n\t                layoutAnimation: true\r\n\t            },\r\n\r\n\t            left: 'center',\r\n\t            top: 'center',\r\n\t            // right: null,\r\n\t            // bottom: null,\r\n\t            // width: '80%',\r\n\t            // height: '80%',\r\n\r\n\t            symbol: 'circle',\r\n\t            symbolSize: 10,\r\n\r\n\t            edgeSymbol: ['none', 'none'],\r\n\t            edgeSymbolSize: 10,\r\n\t            edgeLabel: {\r\n\t                normal: {\r\n\t                    position: 'middle'\r\n\t                },\r\n\t                emphasis: {}\r\n\t            },\r\n\r\n\t            draggable: false,\r\n\r\n\t            roam: false,\r\n\r\n\t            // Default on center of graph\r\n\t            center: null,\r\n\r\n\t            zoom: 1,\r\n\t            // Symbol size scale ratio in roam\r\n\t            nodeScaleRatio: 0.6,\r\n\r\n\t            // categories: [],\r\n\r\n\t            // data: []\r\n\t            // Or\r\n\t            // nodes: []\r\n\t            //\r\n\t            // links: []\r\n\t            // Or\r\n\t            // edges: []\r\n\r\n\t            label: {\r\n\t                normal: {\r\n\t                    show: false,\r\n\t                    formatter: '{b}'\r\n\t                },\r\n\t                emphasis: {\r\n\t                    show: true\r\n\t                }\r\n\t            },\r\n\r\n\t            itemStyle: {\r\n\t                normal: {},\r\n\t                emphasis: {}\r\n\t            },\r\n\r\n\t            lineStyle: {\r\n\t                normal: {\r\n\t                    color: '#aaa',\r\n\t                    width: 1,\r\n\t                    curveness: 0,\r\n\t                    opacity: 0.5\r\n\t                },\r\n\t                emphasis: {}\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    module.exports = GraphSeries;\r\n\r\n\r\n/***/ },\r\n/* 197 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var List = __webpack_require__(97);\r\n\t    var Graph = __webpack_require__(198);\r\n\t    var linkList = __webpack_require__(186);\r\n\t    var completeDimensions = __webpack_require__(102);\r\n\t    var CoordinateSystem = __webpack_require__(26);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var createListFromArray = __webpack_require__(101);\r\n\r\n\t    module.exports = function (nodes, edges, hostModel, directed, beforeLink) {\r\n\t        var graph = new Graph(directed);\r\n\t        for (var i = 0; i < nodes.length; i++) {\r\n\t            graph.addNode(zrUtil.retrieve(\r\n\t                // Id, name, dataIndex\r\n\t                nodes[i].id, nodes[i].name, i\r\n\t            ), i);\r\n\t        }\r\n\r\n\t        var linkNameList = [];\r\n\t        var validEdges = [];\r\n\t        var linkCount = 0;\r\n\t        for (var i = 0; i < edges.length; i++) {\r\n\t            var link = edges[i];\r\n\t            var source = link.source;\r\n\t            var target = link.target;\r\n\t            // addEdge may fail when source or target not exists\r\n\t            if (graph.addEdge(source, target, linkCount)) {\r\n\t                validEdges.push(link);\r\n\t                linkNameList.push(zrUtil.retrieve(link.id, source + ' > ' + target));\r\n\t                linkCount++;\r\n\t            }\r\n\t        }\r\n\r\n\t        var coordSys = hostModel.get('coordinateSystem');\r\n\t        var nodeData;\r\n\t        if (coordSys === 'cartesian2d' || coordSys === 'polar') {\r\n\t            nodeData = createListFromArray(nodes, hostModel, hostModel.ecModel);\r\n\t        }\r\n\t        else {\r\n\t            // FIXME\r\n\t            var coordSysCtor = CoordinateSystem.get(coordSys);\r\n\t            // FIXME\r\n\t            var dimensionNames = completeDimensions(\r\n\t                ((coordSysCtor && coordSysCtor.type !== 'view') ? (coordSysCtor.dimensions || []) : []).concat(['value']),\r\n\t                nodes\r\n\t            );\r\n\t            nodeData = new List(dimensionNames, hostModel);\r\n\t            nodeData.initData(nodes);\r\n\t        }\r\n\r\n\t        var edgeData = new List(['value'], hostModel);\r\n\t        edgeData.initData(validEdges, linkNameList);\r\n\r\n\t        beforeLink && beforeLink(nodeData, edgeData);\r\n\r\n\t        linkList({\r\n\t            mainData: nodeData,\r\n\t            struct: graph,\r\n\t            structAttr: 'graph',\r\n\t            datas: {node: nodeData, edge: edgeData},\r\n\t            datasAttr: {node: 'data', edge: 'edgeData'}\r\n\t        });\r\n\r\n\t        // Update dataIndex of nodes and edges because invalid edge may be removed\r\n\t        graph.update();\r\n\r\n\t        return graph;\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 198 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * Graph data structure\r\n\t *\r\n\t * @module echarts/data/Graph\r\n\t * @author Yi Shen(https://www.github.com/pissang)\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    /**\r\n\t     * @alias module:echarts/data/Graph\r\n\t     * @constructor\r\n\t     * @param {boolean} directed\r\n\t     */\r\n\t    var Graph = function(directed) {\r\n\t        /**\r\n\t         * 是否是有向图\r\n\t         * @type {boolean}\r\n\t         * @private\r\n\t         */\r\n\t        this._directed = directed || false;\r\n\r\n\t        /**\r\n\t         * @type {Array.<module:echarts/data/Graph.Node>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.nodes = [];\r\n\r\n\t        /**\r\n\t         * @type {Array.<module:echarts/data/Graph.Edge>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.edges = [];\r\n\r\n\t        /**\r\n\t         * @type {Object.<string, module:echarts/data/Graph.Node>}\r\n\t         * @private\r\n\t         */\r\n\t        this._nodesMap = {};\r\n\t        /**\r\n\t         * @type {Object.<string, module:echarts/data/Graph.Edge>}\r\n\t         * @private\r\n\t         */\r\n\t        this._edgesMap = {};\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/data/List}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.data;\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/data/List}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.edgeData;\r\n\t    };\r\n\r\n\t    var graphProto = Graph.prototype;\r\n\t    /**\r\n\t     * @type {string}\r\n\t     */\r\n\t    graphProto.type = 'graph';\r\n\r\n\t    /**\r\n\t     * If is directed graph\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    graphProto.isDirected = function () {\r\n\t        return this._directed;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Add a new node\r\n\t     * @param {string} id\r\n\t     * @param {number} [dataIndex]\r\n\t     */\r\n\t    graphProto.addNode = function (id, dataIndex) {\r\n\t        id = id || ('' + dataIndex);\r\n\r\n\t        var nodesMap = this._nodesMap;\r\n\r\n\t        if (nodesMap[id]) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var node = new Node(id, dataIndex);\r\n\t        node.hostGraph = this;\r\n\r\n\t        this.nodes.push(node);\r\n\r\n\t        nodesMap[id] = node;\r\n\t        return node;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get node by data index\r\n\t     * @param  {number} dataIndex\r\n\t     * @return {module:echarts/data/Graph~Node}\r\n\t     */\r\n\t    graphProto.getNodeByIndex = function (dataIndex) {\r\n\t        var rawIdx = this.data.getRawIndex(dataIndex);\r\n\t        return this.nodes[rawIdx];\r\n\t    };\r\n\t    /**\r\n\t     * Get node by id\r\n\t     * @param  {string} id\r\n\t     * @return {module:echarts/data/Graph.Node}\r\n\t     */\r\n\t    graphProto.getNodeById = function (id) {\r\n\t        return this._nodesMap[id];\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Add a new edge\r\n\t     * @param {number|string|module:echarts/data/Graph.Node} n1\r\n\t     * @param {number|string|module:echarts/data/Graph.Node} n2\r\n\t     * @param {number} [dataIndex=-1]\r\n\t     * @return {module:echarts/data/Graph.Edge}\r\n\t     */\r\n\t    graphProto.addEdge = function (n1, n2, dataIndex) {\r\n\t        var nodesMap = this._nodesMap;\r\n\t        var edgesMap = this._edgesMap;\r\n\r\n\t        // PNEDING\r\n\t        if (typeof n1 === 'number') {\r\n\t            n1 = this.nodes[n1];\r\n\t        }\r\n\t        if (typeof n2 === 'number') {\r\n\t            n2 = this.nodes[n2];\r\n\t        }\r\n\r\n\t        if (!(n1 instanceof Node)) {\r\n\t            n1 = nodesMap[n1];\r\n\t        }\r\n\t        if (!(n2 instanceof Node)) {\r\n\t            n2 = nodesMap[n2];\r\n\t        }\r\n\t        if (!n1 || !n2) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var key = n1.id + '-' + n2.id;\r\n\t        // PENDING\r\n\t        if (edgesMap[key]) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var edge = new Edge(n1, n2, dataIndex);\r\n\t        edge.hostGraph = this;\r\n\r\n\t        if (this._directed) {\r\n\t            n1.outEdges.push(edge);\r\n\t            n2.inEdges.push(edge);\r\n\t        }\r\n\t        n1.edges.push(edge);\r\n\t        if (n1 !== n2) {\r\n\t            n2.edges.push(edge);\r\n\t        }\r\n\r\n\t        this.edges.push(edge);\r\n\t        edgesMap[key] = edge;\r\n\r\n\t        return edge;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get edge by data index\r\n\t     * @param  {number} dataIndex\r\n\t     * @return {module:echarts/data/Graph~Node}\r\n\t     */\r\n\t    graphProto.getEdgeByIndex = function (dataIndex) {\r\n\t        var rawIdx = this.edgeData.getRawIndex(dataIndex);\r\n\t        return this.edges[rawIdx];\r\n\t    };\r\n\t    /**\r\n\t     * Get edge by two linked nodes\r\n\t     * @param  {module:echarts/data/Graph.Node|string} n1\r\n\t     * @param  {module:echarts/data/Graph.Node|string} n2\r\n\t     * @return {module:echarts/data/Graph.Edge}\r\n\t     */\r\n\t    graphProto.getEdge = function (n1, n2) {\r\n\t        if (n1 instanceof Node) {\r\n\t            n1 = n1.id;\r\n\t        }\r\n\t        if (n2 instanceof Node) {\r\n\t            n2 = n2.id;\r\n\t        }\r\n\r\n\t        var edgesMap = this._edgesMap;\r\n\r\n\t        if (this._directed) {\r\n\t            return edgesMap[n1 + '-' + n2];\r\n\t        } else {\r\n\t            return edgesMap[n1 + '-' + n2]\r\n\t                || edgesMap[n2 + '-' + n1];\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Iterate all nodes\r\n\t     * @param  {Function} cb\r\n\t     * @param  {*} [context]\r\n\t     */\r\n\t    graphProto.eachNode = function (cb, context) {\r\n\t        var nodes = this.nodes;\r\n\t        var len = nodes.length;\r\n\t        for (var i = 0; i < len; i++) {\r\n\t            if (nodes[i].dataIndex >= 0) {\r\n\t                cb.call(context, nodes[i], i);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Iterate all edges\r\n\t     * @param  {Function} cb\r\n\t     * @param  {*} [context]\r\n\t     */\r\n\t    graphProto.eachEdge = function (cb, context) {\r\n\t        var edges = this.edges;\r\n\t        var len = edges.length;\r\n\t        for (var i = 0; i < len; i++) {\r\n\t            if (edges[i].dataIndex >= 0\r\n\t                && edges[i].node1.dataIndex >= 0\r\n\t                && edges[i].node2.dataIndex >= 0\r\n\t            ) {\r\n\t                cb.call(context, edges[i], i);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Breadth first traverse\r\n\t     * @param {Function} cb\r\n\t     * @param {module:echarts/data/Graph.Node} startNode\r\n\t     * @param {string} [direction='none'] 'none'|'in'|'out'\r\n\t     * @param {*} [context]\r\n\t     */\r\n\t    graphProto.breadthFirstTraverse = function (\r\n\t        cb, startNode, direction, context\r\n\t    ) {\r\n\t        if (!(startNode instanceof Node)) {\r\n\t            startNode = this._nodesMap[startNode];\r\n\t        }\r\n\t        if (!startNode) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var edgeType = direction === 'out'\r\n\t            ? 'outEdges' : (direction === 'in' ? 'inEdges' : 'edges');\r\n\r\n\t        for (var i = 0; i < this.nodes.length; i++) {\r\n\t            this.nodes[i].__visited = false;\r\n\t        }\r\n\r\n\t        if (cb.call(context, startNode, null)) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var queue = [startNode];\r\n\t        while (queue.length) {\r\n\t            var currentNode = queue.shift();\r\n\t            var edges = currentNode[edgeType];\r\n\r\n\t            for (var i = 0; i < edges.length; i++) {\r\n\t                var e = edges[i];\r\n\t                var otherNode = e.node1 === currentNode\r\n\t                    ? e.node2 : e.node1;\r\n\t                if (!otherNode.__visited) {\r\n\t                    if (cb.call(otherNode, otherNode, currentNode)) {\r\n\t                        // Stop traversing\r\n\t                        return;\r\n\t                    }\r\n\t                    queue.push(otherNode);\r\n\t                    otherNode.__visited = true;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    // TODO\r\n\t    // graphProto.depthFirstTraverse = function (\r\n\t    //     cb, startNode, direction, context\r\n\t    // ) {\r\n\r\n\t    // };\r\n\r\n\t    // Filter update\r\n\t    graphProto.update = function () {\r\n\t        var data = this.data;\r\n\t        var edgeData = this.edgeData;\r\n\t        var nodes = this.nodes;\r\n\t        var edges = this.edges;\r\n\r\n\t        for (var i = 0, len = nodes.length; i < len; i++) {\r\n\t            nodes[i].dataIndex = -1;\r\n\t        }\r\n\t        for (var i = 0, len = data.count(); i < len; i++) {\r\n\t            nodes[data.getRawIndex(i)].dataIndex = i;\r\n\t        }\r\n\r\n\t        edgeData.filterSelf(function (idx) {\r\n\t            var edge = edges[edgeData.getRawIndex(idx)];\r\n\t            return edge.node1.dataIndex >= 0 && edge.node2.dataIndex >= 0;\r\n\t        });\r\n\r\n\t        // Update edge\r\n\t        for (var i = 0, len = edges.length; i < len; i++) {\r\n\t            edges[i].dataIndex = -1;\r\n\t        }\r\n\t        for (var i = 0, len = edgeData.count(); i < len; i++) {\r\n\t            edges[edgeData.getRawIndex(i)].dataIndex = i;\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @return {module:echarts/data/Graph}\r\n\t     */\r\n\t    graphProto.clone = function () {\r\n\t        var graph = new Graph(this._directed);\r\n\t        var nodes = this.nodes;\r\n\t        var edges = this.edges;\r\n\t        for (var i = 0; i < nodes.length; i++) {\r\n\t            graph.addNode(nodes[i].id, nodes[i].dataIndex);\r\n\t        }\r\n\t        for (var i = 0; i < edges.length; i++) {\r\n\t            var e = edges[i];\r\n\t            graph.addEdge(e.node1.id, e.node2.id, e.dataIndex);\r\n\t        }\r\n\t        return graph;\r\n\t    };\r\n\r\n\r\n\t    /**\r\n\t     * @alias module:echarts/data/Graph.Node\r\n\t     */\r\n\t    function Node(id, dataIndex) {\r\n\t        /**\r\n\t        * @type {string}\r\n\t        */\r\n\t        this.id = id == null ? '' : id;\r\n\r\n\t        /**\r\n\t        * @type {Array.<module:echarts/data/Graph.Edge>}\r\n\t        */\r\n\t        this.inEdges = [];\r\n\t        /**\r\n\t        * @type {Array.<module:echarts/data/Graph.Edge>}\r\n\t        */\r\n\t        this.outEdges = [];\r\n\t        /**\r\n\t        * @type {Array.<module:echarts/data/Graph.Edge>}\r\n\t        */\r\n\t        this.edges = [];\r\n\t        /**\r\n\t         * @type {module:echarts/data/Graph}\r\n\t         */\r\n\t        this.hostGraph;\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        this.dataIndex = dataIndex == null ? -1 : dataIndex;\r\n\t    }\r\n\r\n\t    Node.prototype = {\r\n\r\n\t        constructor: Node,\r\n\r\n\t        /**\r\n\t         * @return {number}\r\n\t         */\r\n\t        degree: function () {\r\n\t            return this.edges.length;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {number}\r\n\t         */\r\n\t        inDegree: function () {\r\n\t            return this.inEdges.length;\r\n\t        },\r\n\r\n\t        /**\r\n\t        * @return {number}\r\n\t        */\r\n\t        outDegree: function () {\r\n\t            return this.outEdges.length;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} [path]\r\n\t         * @return {module:echarts/model/Model}\r\n\t         */\r\n\t        getModel: function (path) {\r\n\t            if (this.dataIndex < 0) {\r\n\t                return;\r\n\t            }\r\n\t            var graph = this.hostGraph;\r\n\t            var itemModel = graph.data.getItemModel(this.dataIndex);\r\n\r\n\t            return itemModel.getModel(path);\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * 图边\r\n\t     * @alias module:echarts/data/Graph.Edge\r\n\t     * @param {module:echarts/data/Graph.Node} n1\r\n\t     * @param {module:echarts/data/Graph.Node} n2\r\n\t     * @param {number} [dataIndex=-1]\r\n\t     */\r\n\t    function Edge(n1, n2, dataIndex) {\r\n\r\n\t        /**\r\n\t         * 节点1，如果是有向图则为源节点\r\n\t         * @type {module:echarts/data/Graph.Node}\r\n\t         */\r\n\t        this.node1 = n1;\r\n\r\n\t        /**\r\n\t         * 节点2，如果是有向图则为目标节点\r\n\t         * @type {module:echarts/data/Graph.Node}\r\n\t         */\r\n\t        this.node2 = n2;\r\n\r\n\t        this.dataIndex = dataIndex == null ? -1 : dataIndex;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {string} [path]\r\n\t     * @return {module:echarts/model/Model}\r\n\t     */\r\n\t     Edge.prototype.getModel = function (path) {\r\n\t        if (this.dataIndex < 0) {\r\n\t            return;\r\n\t        }\r\n\t        var graph = this.hostGraph;\r\n\t        var itemModel = graph.edgeData.getItemModel(this.dataIndex);\r\n\r\n\t        return itemModel.getModel(path);\r\n\t    };\r\n\r\n\t    var createGraphDataProxyMixin = function (hostName, dataName) {\r\n\t        return {\r\n\t            /**\r\n\t             * @param {string=} [dimension='value'] Default 'value'. can be 'a', 'b', 'c', 'd', 'e'.\r\n\t             * @return {number}\r\n\t             */\r\n\t            getValue: function (dimension) {\r\n\t                var data = this[hostName][dataName];\r\n\t                return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\r\n\t            },\r\n\r\n\t            /**\r\n\t             * @param {Object|string} key\r\n\t             * @param {*} [value]\r\n\t             */\r\n\t            setVisual: function (key, value) {\r\n\t                this.dataIndex >= 0\r\n\t                    && this[hostName][dataName].setItemVisual(this.dataIndex, key, value);\r\n\t            },\r\n\r\n\t            /**\r\n\t             * @param {string} key\r\n\t             * @return {boolean}\r\n\t             */\r\n\t            getVisual: function (key, ignoreParent) {\r\n\t                return this[hostName][dataName].getItemVisual(this.dataIndex, key, ignoreParent);\r\n\t            },\r\n\r\n\t            /**\r\n\t             * @param {Object} layout\r\n\t             * @return {boolean} [merge=false]\r\n\t             */\r\n\t            setLayout: function (layout, merge) {\r\n\t                this.dataIndex >= 0\r\n\t                    && this[hostName][dataName].setItemLayout(this.dataIndex, layout, merge);\r\n\t            },\r\n\r\n\t            /**\r\n\t             * @return {Object}\r\n\t             */\r\n\t            getLayout: function () {\r\n\t                return this[hostName][dataName].getItemLayout(this.dataIndex);\r\n\t            },\r\n\r\n\t            /**\r\n\t             * @return {module:zrender/Element}\r\n\t             */\r\n\t            getGraphicEl: function () {\r\n\t                return this[hostName][dataName].getItemGraphicEl(this.dataIndex);\r\n\t            },\r\n\r\n\t            /**\r\n\t             * @return {number}\r\n\t             */\r\n\t            getRawIndex: function () {\r\n\t                return this[hostName][dataName].getRawIndex(this.dataIndex);\r\n\t            }\r\n\t        };\r\n\t    };\r\n\r\n\t    zrUtil.mixin(Node, createGraphDataProxyMixin('hostGraph', 'data'));\r\n\t    zrUtil.mixin(Edge, createGraphDataProxyMixin('hostGraph', 'edgeData'));\r\n\r\n\t    Graph.Node = Node;\r\n\t    Graph.Edge = Edge;\r\n\r\n\t    module.exports = Graph;\r\n\r\n\r\n/***/ },\r\n/* 199 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\r\n\t    var SymbolDraw = __webpack_require__(104);\r\n\t    var LineDraw = __webpack_require__(200);\r\n\t    var RoamController = __webpack_require__(175);\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var adjustEdge = __webpack_require__(203);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var nodeOpacityPath = ['itemStyle', 'normal', 'opacity'];\r\n\t    var lineOpacityPath = ['lineStyle', 'normal', 'opacity'];\r\n\r\n\t    function getItemOpacity(item, opacityPath) {\r\n\t        return item.getVisual('opacity') || item.getModel().get(opacityPath);\r\n\t    }\r\n\r\n\t    __webpack_require__(1).extendChartView({\r\n\r\n\t        type: 'graph',\r\n\r\n\t        init: function (ecModel, api) {\r\n\t            var symbolDraw = new SymbolDraw();\r\n\t            var lineDraw = new LineDraw();\r\n\t            var group = this.group;\r\n\r\n\t            var controller = new RoamController(api.getZr(), group);\r\n\r\n\t            group.add(symbolDraw.group);\r\n\t            group.add(lineDraw.group);\r\n\r\n\t            this._symbolDraw = symbolDraw;\r\n\t            this._lineDraw = lineDraw;\r\n\t            this._controller = controller;\r\n\r\n\t            this._firstRender = true;\r\n\t        },\r\n\r\n\t        render: function (seriesModel, ecModel, api) {\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\r\n\t            this._model = seriesModel;\r\n\t            this._nodeScaleRatio = seriesModel.get('nodeScaleRatio');\r\n\r\n\t            var symbolDraw = this._symbolDraw;\r\n\t            var lineDraw = this._lineDraw;\r\n\r\n\t            var group = this.group;\r\n\r\n\t            if (coordSys.type === 'view') {\r\n\t                var groupNewProp = {\r\n\t                    position: coordSys.position,\r\n\t                    scale: coordSys.scale\r\n\t                };\r\n\t                if (this._firstRender) {\r\n\t                    group.attr(groupNewProp);\r\n\t                }\r\n\t                else {\r\n\t                    graphic.updateProps(group, groupNewProp, seriesModel);\r\n\t                }\r\n\t            }\r\n\t            // Fix edge contact point with node\r\n\t            adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));\r\n\r\n\t            var data = seriesModel.getData();\r\n\t            symbolDraw.updateData(data);\r\n\r\n\t            var edgeData = seriesModel.getEdgeData();\r\n\t            lineDraw.updateData(edgeData);\r\n\r\n\t            this._updateNodeAndLinkScale();\r\n\r\n\t            this._updateController(seriesModel, api);\r\n\r\n\t            clearTimeout(this._layoutTimeout);\r\n\t            var forceLayout = seriesModel.forceLayout;\r\n\t            var layoutAnimation = seriesModel.get('force.layoutAnimation');\r\n\t            if (forceLayout) {\r\n\t                this._startForceLayoutIteration(forceLayout, layoutAnimation);\r\n\t            }\r\n\t            data.eachItemGraphicEl(function (el, idx) {\r\n\t                var itemModel = data.getItemModel(idx);\r\n\t                // Update draggable\r\n\t                el.off('drag').off('dragend');\r\n\t                var draggable = data.getItemModel(idx).get('draggable');\r\n\t                if (draggable) {\r\n\t                    el.on('drag', function () {\r\n\t                        if (forceLayout) {\r\n\t                            forceLayout.warmUp();\r\n\t                            !this._layouting\r\n\t                                && this._startForceLayoutIteration(forceLayout, layoutAnimation);\r\n\t                            forceLayout.setFixed(idx);\r\n\t                            // Write position back to layout\r\n\t                            data.setItemLayout(idx, el.position);\r\n\t                        }\r\n\t                    }, this).on('dragend', function () {\r\n\t                        if (forceLayout) {\r\n\t                            forceLayout.setUnfixed(idx);\r\n\t                        }\r\n\t                    }, this);\r\n\t                }\r\n\t                el.setDraggable(draggable && forceLayout);\r\n\r\n\t                el.off('mouseover', this._focusNodeAdjacency);\r\n\t                el.off('mouseout', this._unfocusAll);\r\n\t                if (itemModel.get('focusNodeAdjacency')) {\r\n\t                    el.on('mouseover', this._focusNodeAdjacency, this);\r\n\t                    el.on('mouseout', this._unfocusAll, this);\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            var circularRotateLabel = seriesModel.get('layout') === 'circular' && seriesModel.get('circular.rotateLabel');\r\n\t            var cx = data.getLayout('cx');\r\n\t            var cy = data.getLayout('cy');\r\n\t            data.eachItemGraphicEl(function (el, idx) {\r\n\t                var symbolPath = el.getSymbolPath();\r\n\t                if (circularRotateLabel) {\r\n\t                    var pos = data.getItemLayout(idx);\r\n\t                    var rad = Math.atan2(pos[1] - cy, pos[0] - cx);\r\n\t                    if (rad < 0) {\r\n\t                        rad = Math.PI * 2 + rad;\r\n\t                    }\r\n\t                    var isLeft = pos[0] < cx;\r\n\t                    if (isLeft) {\r\n\t                        rad = rad - Math.PI;\r\n\t                    }\r\n\t                    var textPosition = isLeft ? 'left' : 'right';\r\n\t                    symbolPath.setStyle({\r\n\t                        textRotation: rad,\r\n\t                        textPosition: textPosition\r\n\t                    });\r\n\t                    symbolPath.hoverStyle && (symbolPath.hoverStyle.textPosition = textPosition);\r\n\t                }\r\n\t                else {\r\n\t                    symbolPath.setStyle({\r\n\t                        textRotation: 0\r\n\t                    });\r\n\t                }\r\n\t            });\r\n\r\n\t            this._firstRender = false;\r\n\t        },\r\n\r\n\t        dispose: function () {\r\n\t            this._controller && this._controller.dispose();\r\n\t        },\r\n\r\n\t        _focusNodeAdjacency: function (e) {\r\n\t            var data = this._model.getData();\r\n\t            var graph = data.graph;\r\n\t            var el = e.target;\r\n\t            var dataIndex = el.dataIndex;\r\n\t            var dataType = el.dataType;\r\n\r\n\t            function fadeOutItem(item, opacityPath) {\r\n\t                var opacity = getItemOpacity(item, opacityPath);\r\n\t                var el = item.getGraphicEl();\r\n\t                if (opacity == null) {\r\n\t                    opacity = 1;\r\n\t                }\r\n\r\n\t                el.traverse(function (child) {\r\n\t                    child.trigger('normal');\r\n\t                    if (child.type !== 'group') {\r\n\t                        child.setStyle('opacity', opacity * 0.1);\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\r\n\t            function fadeInItem(item, opacityPath) {\r\n\t                var opacity = getItemOpacity(item, opacityPath);\r\n\t                var el = item.getGraphicEl();\r\n\r\n\t                el.traverse(function (child) {\r\n\t                    child.trigger('emphasis');\r\n\t                    if (child.type !== 'group') {\r\n\t                        child.setStyle('opacity', opacity);\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t            if (dataIndex !== null && dataType !== 'edge') {\r\n\t                graph.eachNode(function (node) {\r\n\t                    fadeOutItem(node, nodeOpacityPath);\r\n\t                });\r\n\t                graph.eachEdge(function (edge) {\r\n\t                    fadeOutItem(edge, lineOpacityPath);\r\n\t                });\r\n\r\n\t                var node = graph.getNodeByIndex(dataIndex);\r\n\t                fadeInItem(node, nodeOpacityPath);\r\n\t                zrUtil.each(node.edges, function (edge) {\r\n\t                    if (edge.dataIndex < 0) {\r\n\t                        return;\r\n\t                    }\r\n\t                    fadeInItem(edge, lineOpacityPath);\r\n\t                    fadeInItem(edge.node1, nodeOpacityPath);\r\n\t                    fadeInItem(edge.node2, nodeOpacityPath);\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        _unfocusAll: function () {\r\n\t            var data = this._model.getData();\r\n\t            var graph = data.graph;\r\n\t            graph.eachNode(function (node) {\r\n\t                var opacity = getItemOpacity(node, nodeOpacityPath);\r\n\t                node.getGraphicEl().traverse(function (child) {\r\n\t                    child.trigger('normal');\r\n\t                    if (child.type !== 'group') {\r\n\t                        child.setStyle('opacity', opacity);\r\n\t                    }\r\n\t                });\r\n\t            });\r\n\t            graph.eachEdge(function (edge) {\r\n\t                var opacity = getItemOpacity(edge, lineOpacityPath);\r\n\t                edge.getGraphicEl().traverse(function (child) {\r\n\t                    child.trigger('normal');\r\n\t                    if (child.type !== 'group') {\r\n\t                        child.setStyle('opacity', opacity);\r\n\t                    }\r\n\t                });\r\n\t            });\r\n\t        },\r\n\r\n\t        _startForceLayoutIteration: function (forceLayout, layoutAnimation) {\r\n\t            var self = this;\r\n\t            (function step() {\r\n\t                forceLayout.step(function (stopped) {\r\n\t                    self.updateLayout(self._model);\r\n\t                    (self._layouting = !stopped) && (\r\n\t                        layoutAnimation\r\n\t                            ? (self._layoutTimeout = setTimeout(step, 16))\r\n\t                            : step()\r\n\t                    );\r\n\t                });\r\n\t            })();\r\n\t        },\r\n\r\n\t        _updateController: function (seriesModel, api) {\r\n\t            var controller = this._controller;\r\n\t            var group = this.group;\r\n\r\n\t            controller.setContainsPoint(function (x, y) {\r\n\t                var rect = group.getBoundingRect();\r\n\t                rect.applyTransform(group.transform);\r\n\t                return rect.contain(x, y);\r\n\t            });\r\n\r\n\t            if (seriesModel.coordinateSystem.type !== 'view') {\r\n\t                controller.disable();\r\n\t                return;\r\n\t            }\r\n\t            controller.enable(seriesModel.get('roam'));\r\n\t            controller.zoomLimit = seriesModel.get('scaleLimit');\r\n\t            // Update zoom from model\r\n\t            controller.zoom = seriesModel.coordinateSystem.getZoom();\r\n\r\n\t            controller\r\n\t                .off('pan')\r\n\t                .off('zoom')\r\n\t                .on('pan', function (dx, dy) {\r\n\t                    api.dispatchAction({\r\n\t                        seriesId: seriesModel.id,\r\n\t                        type: 'graphRoam',\r\n\t                        dx: dx,\r\n\t                        dy: dy\r\n\t                    });\r\n\t                })\r\n\t                .on('zoom', function (zoom, mouseX, mouseY) {\r\n\t                    api.dispatchAction({\r\n\t                        seriesId: seriesModel.id,\r\n\t                        type: 'graphRoam',\r\n\t                        zoom:  zoom,\r\n\t                        originX: mouseX,\r\n\t                        originY: mouseY\r\n\t                    });\r\n\t                    this._updateNodeAndLinkScale();\r\n\t                    adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));\r\n\t                    this._lineDraw.updateLayout();\r\n\t                }, this);\r\n\t        },\r\n\r\n\t        _updateNodeAndLinkScale: function () {\r\n\t            var seriesModel = this._model;\r\n\t            var data = seriesModel.getData();\r\n\r\n\t            var nodeScale = this._getNodeGlobalScale(seriesModel);\r\n\t            var invScale = [nodeScale, nodeScale];\r\n\r\n\t            data.eachItemGraphicEl(function (el, idx) {\r\n\t                el.attr('scale', invScale);\r\n\t            });\r\n\t        },\r\n\r\n\t        _getNodeGlobalScale: function (seriesModel) {\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            if (coordSys.type !== 'view') {\r\n\t                return 1;\r\n\t            }\r\n\r\n\t            var nodeScaleRatio = this._nodeScaleRatio;\r\n\r\n\t            var groupScale = coordSys.scale;\r\n\t            var groupZoom = (groupScale && groupScale[0]) || 1;\r\n\t            // Scale node when zoom changes\r\n\t            var roamZoom = coordSys.getZoom();\r\n\t            var nodeScale = (roamZoom - 1) * nodeScaleRatio + 1;\r\n\r\n\t            return nodeScale / groupZoom;\r\n\t        },\r\n\r\n\t        updateLayout: function (seriesModel) {\r\n\t            adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));\r\n\r\n\t            this._symbolDraw.updateLayout();\r\n\t            this._lineDraw.updateLayout();\r\n\t        },\r\n\r\n\t        remove: function (ecModel, api) {\r\n\t            this._symbolDraw && this._symbolDraw.remove();\r\n\t            this._lineDraw && this._lineDraw.remove();\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 200 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/chart/helper/LineDraw\r\n\t */\r\n\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var LineGroup = __webpack_require__(201);\r\n\r\n\r\n\t    function isPointNaN(pt) {\r\n\t        return isNaN(pt[0]) || isNaN(pt[1]);\r\n\t    }\r\n\t    function lineNeedsDraw(pts) {\r\n\t        return !isPointNaN(pts[0]) && !isPointNaN(pts[1]);\r\n\t    }\r\n\t    /**\r\n\t     * @alias module:echarts/component/marker/LineDraw\r\n\t     * @constructor\r\n\t     */\r\n\t    function LineDraw(ctor) {\r\n\t        this._ctor = ctor || LineGroup;\r\n\t        this.group = new graphic.Group();\r\n\t    }\r\n\r\n\t    var lineDrawProto = LineDraw.prototype;\r\n\r\n\t    /**\r\n\t     * @param {module:echarts/data/List} lineData\r\n\t     */\r\n\t    lineDrawProto.updateData = function (lineData) {\r\n\r\n\t        var oldLineData = this._lineData;\r\n\t        var group = this.group;\r\n\t        var LineCtor = this._ctor;\r\n\r\n\t        var hostModel = lineData.hostModel;\r\n\r\n\t        var seriesScope = {\r\n\t            lineStyle: hostModel.getModel('lineStyle.normal').getLineStyle(),\r\n\t            hoverLineStyle: hostModel.getModel('lineStyle.emphasis').getLineStyle(),\r\n\t            labelModel: hostModel.getModel('label.normal'),\r\n\t            hoverLabelModel: hostModel.getModel('label.emphasis')\r\n\t        };\r\n\r\n\t        lineData.diff(oldLineData)\r\n\t            .add(function (idx) {\r\n\t                if (!lineNeedsDraw(lineData.getItemLayout(idx))) {\r\n\t                    return;\r\n\t                }\r\n\t                var lineGroup = new LineCtor(lineData, idx, seriesScope);\r\n\r\n\t                lineData.setItemGraphicEl(idx, lineGroup);\r\n\r\n\t                group.add(lineGroup);\r\n\t            })\r\n\t            .update(function (newIdx, oldIdx) {\r\n\t                var lineGroup = oldLineData.getItemGraphicEl(oldIdx);\r\n\t                if (!lineNeedsDraw(lineData.getItemLayout(newIdx))) {\r\n\t                    group.remove(lineGroup);\r\n\t                    return;\r\n\t                }\r\n\r\n\t                if (!lineGroup) {\r\n\t                    lineGroup = new LineCtor(lineData, newIdx, seriesScope);\r\n\t                }\r\n\t                else {\r\n\t                    lineGroup.updateData(lineData, newIdx, seriesScope);\r\n\t                }\r\n\r\n\t                lineData.setItemGraphicEl(newIdx, lineGroup);\r\n\r\n\t                group.add(lineGroup);\r\n\t            })\r\n\t            .remove(function (idx) {\r\n\t                group.remove(oldLineData.getItemGraphicEl(idx));\r\n\t            })\r\n\t            .execute();\r\n\r\n\t        this._lineData = lineData;\r\n\t    };\r\n\r\n\t    lineDrawProto.updateLayout = function () {\r\n\t        var lineData = this._lineData;\r\n\t        lineData.eachItemGraphicEl(function (el, idx) {\r\n\t            el.updateLayout(lineData, idx);\r\n\t        }, this);\r\n\t    };\r\n\r\n\t    lineDrawProto.remove = function () {\r\n\t        this.group.removeAll();\r\n\t    };\r\n\r\n\t    module.exports = LineDraw;\r\n\r\n\r\n/***/ },\r\n/* 201 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/chart/helper/Line\r\n\t */\r\n\r\n\r\n\t    var symbolUtil = __webpack_require__(106);\r\n\t    var vector = __webpack_require__(10);\r\n\t    // var matrix = require('zrender/lib/core/matrix');\r\n\t    var LinePath = __webpack_require__(202);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\r\n\t    var SYMBOL_CATEGORIES = ['fromSymbol', 'toSymbol'];\r\n\t    function makeSymbolTypeKey(symbolCategory) {\r\n\t        return '_' + symbolCategory + 'Type';\r\n\t    }\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function createSymbol(name, lineData, idx) {\r\n\t        var color = lineData.getItemVisual(idx, 'color');\r\n\t        var symbolType = lineData.getItemVisual(idx, name);\r\n\t        var symbolSize = lineData.getItemVisual(idx, name + 'Size');\r\n\r\n\t        if (!symbolType || symbolType === 'none') {\r\n\t            return;\r\n\t        }\r\n\r\n\t        if (!zrUtil.isArray(symbolSize)) {\r\n\t            symbolSize = [symbolSize, symbolSize];\r\n\t        }\r\n\t        var symbolPath = symbolUtil.createSymbol(\r\n\t            symbolType, -symbolSize[0] / 2, -symbolSize[1] / 2,\r\n\t            symbolSize[0], symbolSize[1], color\r\n\t        );\r\n\r\n\t        symbolPath.name = name;\r\n\r\n\t        return symbolPath;\r\n\t    }\r\n\r\n\t    function createLine(points) {\r\n\t        var line = new LinePath({\r\n\t            name: 'line'\r\n\t        });\r\n\t        setLinePoints(line.shape, points);\r\n\t        return line;\r\n\t    }\r\n\r\n\t    function setLinePoints(targetShape, points) {\r\n\t        var p1 = points[0];\r\n\t        var p2 = points[1];\r\n\t        var cp1 = points[2];\r\n\t        targetShape.x1 = p1[0];\r\n\t        targetShape.y1 = p1[1];\r\n\t        targetShape.x2 = p2[0];\r\n\t        targetShape.y2 = p2[1];\r\n\t        targetShape.percent = 1;\r\n\r\n\t        if (cp1) {\r\n\t            targetShape.cpx1 = cp1[0];\r\n\t            targetShape.cpy1 = cp1[1];\r\n\t        }\r\n\t        else {\r\n\t            targetShape.cpx1 = NaN;\r\n\t            targetShape.cpy1 = NaN;\r\n\t        }\r\n\t    }\r\n\r\n\t    function updateSymbolAndLabelBeforeLineUpdate () {\r\n\t        var lineGroup = this;\r\n\t        var symbolFrom = lineGroup.childOfName('fromSymbol');\r\n\t        var symbolTo = lineGroup.childOfName('toSymbol');\r\n\t        var label = lineGroup.childOfName('label');\r\n\t        // Quick reject\r\n\t        if (!symbolFrom && !symbolTo && label.ignore) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var invScale = 1;\r\n\t        var parentNode = this.parent;\r\n\t        while (parentNode) {\r\n\t            if (parentNode.scale) {\r\n\t                invScale /= parentNode.scale[0];\r\n\t            }\r\n\t            parentNode = parentNode.parent;\r\n\t        }\r\n\r\n\t        var line = lineGroup.childOfName('line');\r\n\t        // If line not changed\r\n\t        // FIXME Parent scale changed\r\n\t        if (!this.__dirty && !line.__dirty) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var percent = line.shape.percent;\r\n\t        var fromPos = line.pointAt(0);\r\n\t        var toPos = line.pointAt(percent);\r\n\r\n\t        var d = vector.sub([], toPos, fromPos);\r\n\t        vector.normalize(d, d);\r\n\r\n\t        if (symbolFrom) {\r\n\t            symbolFrom.attr('position', fromPos);\r\n\t            var tangent = line.tangentAt(0);\r\n\t            symbolFrom.attr('rotation', Math.PI / 2 - Math.atan2(\r\n\t                tangent[1], tangent[0]\r\n\t            ));\r\n\t            symbolFrom.attr('scale', [invScale * percent, invScale * percent]);\r\n\t        }\r\n\t        if (symbolTo) {\r\n\t            symbolTo.attr('position', toPos);\r\n\t            var tangent = line.tangentAt(1);\r\n\t            symbolTo.attr('rotation', -Math.PI / 2 - Math.atan2(\r\n\t                tangent[1], tangent[0]\r\n\t            ));\r\n\t            symbolTo.attr('scale', [invScale * percent, invScale * percent]);\r\n\t        }\r\n\r\n\t        if (!label.ignore) {\r\n\t            label.attr('position', toPos);\r\n\r\n\t            var textPosition;\r\n\t            var textAlign;\r\n\t            var textVerticalAlign;\r\n\r\n\t            var distance = 5 * invScale;\r\n\t            // End\r\n\t            if (label.__position === 'end') {\r\n\t                textPosition = [d[0] * distance + toPos[0], d[1] * distance + toPos[1]];\r\n\t                textAlign = d[0] > 0.8 ? 'left' : (d[0] < -0.8 ? 'right' : 'center');\r\n\t                textVerticalAlign = d[1] > 0.8 ? 'top' : (d[1] < -0.8 ? 'bottom' : 'middle');\r\n\t            }\r\n\t            // Middle\r\n\t            else if (label.__position === 'middle') {\r\n\t                var halfPercent = percent / 2;\r\n\t                var tangent = line.tangentAt(halfPercent);\r\n\t                var n = [tangent[1], -tangent[0]];\r\n\t                var cp = line.pointAt(halfPercent);\r\n\t                if (n[1] > 0) {\r\n\t                    n[0] = -n[0];\r\n\t                    n[1] = -n[1];\r\n\t                }\r\n\t                textPosition = [cp[0] + n[0] * distance, cp[1] + n[1] * distance];\r\n\t                textAlign = 'center';\r\n\t                textVerticalAlign = 'bottom';\r\n\t                var rotation = -Math.atan2(tangent[1], tangent[0]);\r\n\t                if (toPos[0] < fromPos[0]) {\r\n\t                    rotation = Math.PI + rotation;\r\n\t                }\r\n\t                label.attr('rotation', rotation);\r\n\t            }\r\n\t            // Start\r\n\t            else {\r\n\t                textPosition = [-d[0] * distance + fromPos[0], -d[1] * distance + fromPos[1]];\r\n\t                textAlign = d[0] > 0.8 ? 'right' : (d[0] < -0.8 ? 'left' : 'center');\r\n\t                textVerticalAlign = d[1] > 0.8 ? 'bottom' : (d[1] < -0.8 ? 'top' : 'middle');\r\n\t            }\r\n\t            label.attr({\r\n\t                style: {\r\n\t                    // Use the user specified text align and baseline first\r\n\t                    textVerticalAlign: label.__verticalAlign || textVerticalAlign,\r\n\t                    textAlign: label.__textAlign || textAlign\r\n\t                },\r\n\t                position: textPosition,\r\n\t                scale: [invScale, invScale]\r\n\t            });\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @extends {module:zrender/graphic/Group}\r\n\t     * @alias {module:echarts/chart/helper/Line}\r\n\t     */\r\n\t    function Line(lineData, idx, seriesScope) {\r\n\t        graphic.Group.call(this);\r\n\r\n\t        this._createLine(lineData, idx, seriesScope);\r\n\t    }\r\n\r\n\t    var lineProto = Line.prototype;\r\n\r\n\t    // Update symbol position and rotation\r\n\t    lineProto.beforeUpdate = updateSymbolAndLabelBeforeLineUpdate;\r\n\r\n\t    lineProto._createLine = function (lineData, idx, seriesScope) {\r\n\t        var seriesModel = lineData.hostModel;\r\n\t        var linePoints = lineData.getItemLayout(idx);\r\n\r\n\t        var line = createLine(linePoints);\r\n\t        line.shape.percent = 0;\r\n\t        graphic.initProps(line, {\r\n\t            shape: {\r\n\t                percent: 1\r\n\t            }\r\n\t        }, seriesModel, idx);\r\n\r\n\t        this.add(line);\r\n\r\n\t        var label = new graphic.Text({\r\n\t            name: 'label'\r\n\t        });\r\n\t        this.add(label);\r\n\r\n\t        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {\r\n\t            var symbol = createSymbol(symbolCategory, lineData, idx);\r\n\t            // symbols must added after line to make sure\r\n\t            // it will be updated after line#update.\r\n\t            // Or symbol position and rotation update in line#beforeUpdate will be one frame slow\r\n\t            this.add(symbol);\r\n\t            this[makeSymbolTypeKey(symbolCategory)] = lineData.getItemVisual(idx, symbolCategory);\r\n\t        }, this);\r\n\r\n\t        this._updateCommonStl(lineData, idx, seriesScope);\r\n\t    };\r\n\r\n\t    lineProto.updateData = function (lineData, idx, seriesScope) {\r\n\t        var seriesModel = lineData.hostModel;\r\n\r\n\t        var line = this.childOfName('line');\r\n\t        var linePoints = lineData.getItemLayout(idx);\r\n\t        var target = {\r\n\t            shape: {}\r\n\t        };\r\n\t        setLinePoints(target.shape, linePoints);\r\n\t        graphic.updateProps(line, target, seriesModel, idx);\r\n\r\n\t        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {\r\n\t            var symbolType = lineData.getItemVisual(idx, symbolCategory);\r\n\t            var key = makeSymbolTypeKey(symbolCategory);\r\n\t            // Symbol changed\r\n\t            if (this[key] !== symbolType) {\r\n\t                this.remove(this.childOfName(symbolCategory));\r\n\t                var symbol = createSymbol(symbolCategory, lineData, idx);\r\n\t                this.add(symbol);\r\n\t            }\r\n\t            this[key] = symbolType;\r\n\t        }, this);\r\n\r\n\t        this._updateCommonStl(lineData, idx, seriesScope);\r\n\t    };\r\n\r\n\t    lineProto._updateCommonStl = function (lineData, idx, seriesScope) {\r\n\t        var seriesModel = lineData.hostModel;\r\n\r\n\t        var line = this.childOfName('line');\r\n\r\n\t        var lineStyle = seriesScope && seriesScope.lineStyle;\r\n\t        var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;\r\n\t        var labelModel = seriesScope && seriesScope.labelModel;\r\n\t        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;\r\n\r\n\t        // Optimization for large dataset\r\n\t        if (!seriesScope || lineData.hasItemOption) {\r\n\t            var itemModel = lineData.getItemModel(idx);\r\n\r\n\t            lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();\r\n\t            hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();\r\n\r\n\t            labelModel = itemModel.getModel('label.normal');\r\n\t            hoverLabelModel = itemModel.getModel('label.emphasis');\r\n\t        }\r\n\r\n\t        var visualColor = lineData.getItemVisual(idx, 'color');\r\n\t        var visualOpacity = zrUtil.retrieve(\r\n\t            lineData.getItemVisual(idx, 'opacity'),\r\n\t            lineStyle.opacity,\r\n\t            1\r\n\t        );\r\n\r\n\t        line.useStyle(zrUtil.defaults(\r\n\t            {\r\n\t                strokeNoScale: true,\r\n\t                fill: 'none',\r\n\t                stroke: visualColor,\r\n\t                opacity: visualOpacity\r\n\t            },\r\n\t            lineStyle\r\n\t        ));\r\n\t        line.hoverStyle = hoverLineStyle;\r\n\r\n\t        // Update symbol\r\n\t        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {\r\n\t            var symbol = this.childOfName(symbolCategory);\r\n\t            if (symbol) {\r\n\t                symbol.setColor(visualColor);\r\n\t                symbol.setStyle({\r\n\t                    opacity: visualOpacity\r\n\t                });\r\n\t            }\r\n\t        }, this);\r\n\r\n\t        var showLabel = labelModel.getShallow('show');\r\n\t        var hoverShowLabel = hoverLabelModel.getShallow('show');\r\n\r\n\t        var label = this.childOfName('label');\r\n\t        var defaultLabelColor;\r\n\t        var defaultText;\r\n\r\n\t        if (showLabel || hoverShowLabel) {\r\n\t            var rawVal = seriesModel.getRawValue(idx);\r\n\t            defaultText = rawVal == null\r\n\t                ? defaultText = lineData.getName(idx)\r\n\t                : isFinite(rawVal)\r\n\t                ? numberUtil.round(rawVal)\r\n\t                : rawVal;\r\n\t            defaultLabelColor = visualColor || '#000';\r\n\t        }\r\n\r\n\t        // label.afterUpdate = lineAfterUpdate;\r\n\t        if (showLabel) {\r\n\t            var textStyleModel = labelModel.getModel('textStyle');\r\n\t            label.setStyle({\r\n\t                text: zrUtil.retrieve(\r\n\t                    seriesModel.getFormattedLabel(idx, 'normal', lineData.dataType),\r\n\t                    defaultText\r\n\t                ),\r\n\t                textFont: textStyleModel.getFont(),\r\n\t                fill: textStyleModel.getTextColor() || defaultLabelColor\r\n\t            });\r\n\r\n\t            label.__textAlign = textStyleModel.get('align');\r\n\t            label.__verticalAlign = textStyleModel.get('baseline');\r\n\t            label.__position = labelModel.get('position');\r\n\t        }\r\n\t        else {\r\n\t            label.setStyle('text', '');\r\n\t        }\r\n\t        if (hoverShowLabel) {\r\n\t            var textStyleHoverModel = hoverLabelModel.getModel('textStyle');\r\n\r\n\t            label.hoverStyle = {\r\n\t                text: zrUtil.retrieve(\r\n\t                    seriesModel.getFormattedLabel(idx, 'emphasis', lineData.dataType),\r\n\t                    defaultText\r\n\t                ),\r\n\t                textFont: textStyleHoverModel.getFont(),\r\n\t                fill: textStyleHoverModel.getTextColor() || defaultLabelColor\r\n\t            };\r\n\t        }\r\n\t        else {\r\n\t            label.hoverStyle = {\r\n\t                text: ''\r\n\t            };\r\n\t        }\r\n\r\n\t        label.ignore = !showLabel && !hoverShowLabel;\r\n\r\n\t        graphic.setHoverStyle(this);\r\n\t    };\r\n\r\n\t    lineProto.updateLayout = function (lineData, idx) {\r\n\t        this.setLinePoints(lineData.getItemLayout(idx));\r\n\t    };\r\n\r\n\t    lineProto.setLinePoints = function (points) {\r\n\t        var linePath = this.childOfName('line');\r\n\t        setLinePoints(linePath.shape, points);\r\n\t        linePath.dirty();\r\n\t    };\r\n\r\n\t    zrUtil.inherits(Line, graphic.Group);\r\n\r\n\t    module.exports = Line;\r\n\r\n\r\n/***/ },\r\n/* 202 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Line path for bezier and straight line draw\r\n\t */\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var vec2 = __webpack_require__(10);\r\n\r\n\t    var straightLineProto = graphic.Line.prototype;\r\n\t    var bezierCurveProto = graphic.BezierCurve.prototype;\r\n\r\n\t    function isLine(shape) {\r\n\t        return isNaN(+shape.cpx1) || isNaN(+shape.cpy1);\r\n\t    }\r\n\r\n\t    module.exports = graphic.extendShape({\r\n\r\n\t        type: 'ec-line',\r\n\r\n\t        style: {\r\n\t            stroke: '#000',\r\n\t            fill: null\r\n\t        },\r\n\r\n\t        shape: {\r\n\t            x1: 0,\r\n\t            y1: 0,\r\n\t            x2: 0,\r\n\t            y2: 0,\r\n\t            percent: 1,\r\n\t            cpx1: null,\r\n\t            cpy1: null\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\t            (isLine(shape) ? straightLineProto : bezierCurveProto).buildPath(ctx, shape);\r\n\t        },\r\n\r\n\t        pointAt: function (t) {\r\n\t            return isLine(this.shape)\r\n\t                ? straightLineProto.pointAt.call(this, t)\r\n\t                : bezierCurveProto.pointAt.call(this, t);\r\n\t        },\r\n\r\n\t        tangentAt: function (t) {\r\n\t            var shape = this.shape;\r\n\t            var p = isLine(shape)\r\n\t                ? [shape.x2 - shape.x1, shape.y2 - shape.y1]\r\n\t                : bezierCurveProto.tangentAt.call(this, t);\r\n\t            return vec2.normalize(p, p);\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 203 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var curveTool = __webpack_require__(50);\r\n\t    var vec2 = __webpack_require__(10);\r\n\r\n\t    var v1 = [];\r\n\t    var v2 = [];\r\n\t    var v3 = [];\r\n\t    var quadraticAt = curveTool.quadraticAt;\r\n\t    var v2DistSquare = vec2.distSquare;\r\n\t    var mathAbs = Math.abs;\r\n\t    function intersectCurveCircle(curvePoints, center, radius) {\r\n\t        var p0 = curvePoints[0];\r\n\t        var p1 = curvePoints[1];\r\n\t        var p2 = curvePoints[2];\r\n\r\n\t        var d = Infinity;\r\n\t        var t;\r\n\t        var radiusSquare = radius * radius;\r\n\t        var interval = 0.1;\r\n\r\n\t        for (var _t = 0.1; _t <= 0.9; _t += 0.1) {\r\n\t            v1[0] = quadraticAt(p0[0], p1[0], p2[0], _t);\r\n\t            v1[1] = quadraticAt(p0[1], p1[1], p2[1], _t);\r\n\t            var diff = mathAbs(v2DistSquare(v1, center) - radiusSquare);\r\n\t            if (diff < d) {\r\n\t                d = diff;\r\n\t                t = _t;\r\n\t            }\r\n\t        }\r\n\r\n\t        // Assume the segment is monotone，Find root through Bisection method\r\n\t        // At most 32 iteration\r\n\t        for (var i = 0; i < 32; i++) {\r\n\t            // var prev = t - interval;\r\n\t            var next = t + interval;\r\n\t            // v1[0] = quadraticAt(p0[0], p1[0], p2[0], prev);\r\n\t            // v1[1] = quadraticAt(p0[1], p1[1], p2[1], prev);\r\n\t            v2[0] = quadraticAt(p0[0], p1[0], p2[0], t);\r\n\t            v2[1] = quadraticAt(p0[1], p1[1], p2[1], t);\r\n\t            v3[0] = quadraticAt(p0[0], p1[0], p2[0], next);\r\n\t            v3[1] = quadraticAt(p0[1], p1[1], p2[1], next);\r\n\r\n\t            var diff = v2DistSquare(v2, center) - radiusSquare;\r\n\t            if (mathAbs(diff) < 1e-2) {\r\n\t                break;\r\n\t            }\r\n\r\n\t            // var prevDiff = v2DistSquare(v1, center) - radiusSquare;\r\n\t            var nextDiff = v2DistSquare(v3, center) - radiusSquare;\r\n\r\n\t            interval /= 2;\r\n\t            if (diff < 0) {\r\n\t                if (nextDiff >= 0) {\r\n\t                    t = t + interval;\r\n\t                }\r\n\t                else {\r\n\t                    t = t - interval;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                if (nextDiff >= 0) {\r\n\t                    t = t - interval;\r\n\t                }\r\n\t                else {\r\n\t                    t = t + interval;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        return t;\r\n\t    }\r\n\t    // Adjust edge to avoid\r\n\t    module.exports = function (graph, scale) {\r\n\t        var tmp0 = [];\r\n\t        var quadraticSubdivide = curveTool.quadraticSubdivide;\r\n\t        var pts = [[], [], []];\r\n\t        var pts2 = [[], []];\r\n\t        var v = [];\r\n\t        scale /= 2;\r\n\r\n\t        function getSymbolSize(node) {\r\n\t            var symbolSize = node.getVisual('symbolSize');\r\n\t            if (symbolSize instanceof Array) {\r\n\t                symbolSize = (symbolSize[0] + symbolSize[1]) / 2;\r\n\t            }\r\n\t            return symbolSize;\r\n\t        }\r\n\t        graph.eachEdge(function (edge, idx) {\r\n\t            var linePoints = edge.getLayout();\r\n\t            var fromSymbol = edge.getVisual('fromSymbol');\r\n\t            var toSymbol = edge.getVisual('toSymbol');\r\n\r\n\t            if (!linePoints.__original) {\r\n\t                linePoints.__original = [\r\n\t                    vec2.clone(linePoints[0]),\r\n\t                    vec2.clone(linePoints[1])\r\n\t                ];\r\n\t                if (linePoints[2]) {\r\n\t                    linePoints.__original.push(vec2.clone(linePoints[2]));\r\n\t                }\r\n\t            }\r\n\t            var originalPoints = linePoints.__original;\r\n\t            // Quadratic curve\r\n\t            if (linePoints[2] != null) {\r\n\t                vec2.copy(pts[0], originalPoints[0]);\r\n\t                vec2.copy(pts[1], originalPoints[2]);\r\n\t                vec2.copy(pts[2], originalPoints[1]);\r\n\t                if (fromSymbol && fromSymbol != 'none') {\r\n\t                    var symbolSize = getSymbolSize(edge.node1);\r\n\r\n\t                    var t = intersectCurveCircle(pts, originalPoints[0], symbolSize * scale);\r\n\t                    // Subdivide and get the second\r\n\t                    quadraticSubdivide(pts[0][0], pts[1][0], pts[2][0], t, tmp0);\r\n\t                    pts[0][0] = tmp0[3];\r\n\t                    pts[1][0] = tmp0[4];\r\n\t                    quadraticSubdivide(pts[0][1], pts[1][1], pts[2][1], t, tmp0);\r\n\t                    pts[0][1] = tmp0[3];\r\n\t                    pts[1][1] = tmp0[4];\r\n\t                }\r\n\t                if (toSymbol && toSymbol != 'none') {\r\n\t                    var symbolSize = getSymbolSize(edge.node2);\r\n\r\n\t                    var t = intersectCurveCircle(pts, originalPoints[1], symbolSize * scale);\r\n\t                    // Subdivide and get the first\r\n\t                    quadraticSubdivide(pts[0][0], pts[1][0], pts[2][0], t, tmp0);\r\n\t                    pts[1][0] = tmp0[1];\r\n\t                    pts[2][0] = tmp0[2];\r\n\t                    quadraticSubdivide(pts[0][1], pts[1][1], pts[2][1], t, tmp0);\r\n\t                    pts[1][1] = tmp0[1];\r\n\t                    pts[2][1] = tmp0[2];\r\n\t                }\r\n\t                // Copy back to layout\r\n\t                vec2.copy(linePoints[0], pts[0]);\r\n\t                vec2.copy(linePoints[1], pts[2]);\r\n\t                vec2.copy(linePoints[2], pts[1]);\r\n\t            }\r\n\t            // Line\r\n\t            else {\r\n\t                vec2.copy(pts2[0], originalPoints[0]);\r\n\t                vec2.copy(pts2[1], originalPoints[1]);\r\n\r\n\t                vec2.sub(v, pts2[1], pts2[0]);\r\n\t                vec2.normalize(v, v);\r\n\t                if (fromSymbol && fromSymbol != 'none') {\r\n\r\n\t                    var symbolSize = getSymbolSize(edge.node1);\r\n\r\n\t                    vec2.scaleAndAdd(pts2[0], pts2[0], v, symbolSize * scale);\r\n\t                }\r\n\t                if (toSymbol && toSymbol != 'none') {\r\n\t                    var symbolSize = getSymbolSize(edge.node2);\r\n\r\n\t                    vec2.scaleAndAdd(pts2[1], pts2[1], v, -symbolSize * scale);\r\n\t                }\r\n\t                vec2.copy(linePoints[0], pts2[0]);\r\n\t                vec2.copy(linePoints[1], pts2[1]);\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 204 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var roamHelper = __webpack_require__(178);\r\n\r\n\t    var actionInfo = {\r\n\t        type: 'graphRoam',\r\n\t        event: 'graphRoam',\r\n\t        update: 'none'\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @payload\r\n\t     * @property {string} name Series name\r\n\t     * @property {number} [dx]\r\n\t     * @property {number} [dy]\r\n\t     * @property {number} [zoom]\r\n\t     * @property {number} [originX]\r\n\t     * @property {number} [originY]\r\n\t     */\r\n\r\n\t    echarts.registerAction(actionInfo, function (payload, ecModel) {\r\n\t        ecModel.eachComponent({mainType: 'series', query: payload}, function (seriesModel) {\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\r\n\t            var res = roamHelper.updateCenterAndZoom(coordSys, payload);\r\n\r\n\t            seriesModel.setCenter\r\n\t                && seriesModel.setCenter(res.center);\r\n\r\n\t            seriesModel.setZoom\r\n\t                && seriesModel.setZoom(res.zoom);\r\n\t        });\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 205 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    module.exports = function (ecModel) {\r\n\t        var legendModels = ecModel.findComponents({\r\n\t            mainType: 'legend'\r\n\t        });\r\n\t        if (!legendModels || !legendModels.length) {\r\n\t            return;\r\n\t        }\r\n\t        ecModel.eachSeriesByType('graph', function (graphSeries) {\r\n\t            var categoriesData = graphSeries.getCategoriesData();\r\n\t            var graph = graphSeries.getGraph();\r\n\t            var data = graph.data;\r\n\r\n\t            var categoryNames = categoriesData.mapArray(categoriesData.getName);\r\n\r\n\t            data.filterSelf(function (idx) {\r\n\t                var model = data.getItemModel(idx);\r\n\t                var category = model.getShallow('category');\r\n\t                if (category != null) {\r\n\t                    if (typeof category === 'number') {\r\n\t                        category = categoryNames[category];\r\n\t                    }\r\n\t                    // If in any legend component the status is not selected.\r\n\t                    for (var i = 0; i < legendModels.length; i++) {\r\n\t                        if (!legendModels[i].isSelected(category)) {\r\n\t                            return false;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                return true;\r\n\t            });\r\n\t        }, this);\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 206 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    module.exports = function (ecModel) {\r\n\r\n\t        var paletteScope = {};\r\n\t        ecModel.eachSeriesByType('graph', function (seriesModel) {\r\n\t            var categoriesData = seriesModel.getCategoriesData();\r\n\t            var data = seriesModel.getData();\r\n\r\n\t            var categoryNameIdxMap = {};\r\n\r\n\t            categoriesData.each(function (idx) {\r\n\t                var name = categoriesData.getName(idx);\r\n\t                categoryNameIdxMap[name] = idx;\r\n\r\n\t                var itemModel = categoriesData.getItemModel(idx);\r\n\t                var color = itemModel.get('itemStyle.normal.color')\r\n\t                    || seriesModel.getColorFromPalette(name, paletteScope);\r\n\t                categoriesData.setItemVisual(idx, 'color', color);\r\n\t            });\r\n\r\n\t            // Assign category color to visual\r\n\t            if (categoriesData.count()) {\r\n\t                data.each(function (idx) {\r\n\t                    var model = data.getItemModel(idx);\r\n\t                    var category = model.getShallow('category');\r\n\t                    if (category != null) {\r\n\t                        if (typeof category === 'string') {\r\n\t                            category = categoryNameIdxMap[category];\r\n\t                        }\r\n\t                        if (!data.getItemVisual(idx, 'color', true)) {\r\n\t                            data.setItemVisual(\r\n\t                                idx, 'color',\r\n\t                                categoriesData.getItemVisual(category, 'color')\r\n\t                            );\r\n\t                        }\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 207 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    function normalize(a) {\r\n\t        if (!(a instanceof Array)) {\r\n\t            a = [a, a];\r\n\t        }\r\n\t        return a;\r\n\t    }\r\n\t    module.exports = function (ecModel) {\r\n\t        ecModel.eachSeriesByType('graph', function (seriesModel) {\r\n\t            var graph = seriesModel.getGraph();\r\n\t            var edgeData = seriesModel.getEdgeData();\r\n\t            var symbolType = normalize(seriesModel.get('edgeSymbol'));\r\n\t            var symbolSize = normalize(seriesModel.get('edgeSymbolSize'));\r\n\r\n\t            var colorQuery = 'lineStyle.normal.color'.split('.');\r\n\t            var opacityQuery = 'lineStyle.normal.opacity'.split('.');\r\n\r\n\t            edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);\r\n\t            edgeData.setVisual('toSymbol', symbolType && symbolType[1]);\r\n\t            edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);\r\n\t            edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);\r\n\t            edgeData.setVisual('color', seriesModel.get(colorQuery));\r\n\t            edgeData.setVisual('opacity', seriesModel.get(opacityQuery));\r\n\r\n\t            edgeData.each(function (idx) {\r\n\t                var itemModel = edgeData.getItemModel(idx);\r\n\t                var edge = graph.getEdgeByIndex(idx);\r\n\t                var symbolType = normalize(itemModel.getShallow('symbol', true));\r\n\t                var symbolSize = normalize(itemModel.getShallow('symbolSize', true));\r\n\t                // Edge visual must after node visual\r\n\t                var color = itemModel.get(colorQuery);\r\n\t                var opacity = itemModel.get(opacityQuery);\r\n\t                switch (color) {\r\n\t                    case 'source':\r\n\t                        color = edge.node1.getVisual('color');\r\n\t                        break;\r\n\t                    case 'target':\r\n\t                        color = edge.node2.getVisual('color');\r\n\t                        break;\r\n\t                }\r\n\r\n\t                symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);\r\n\t                symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);\r\n\t                symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);\r\n\t                symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);\r\n\r\n\t                edge.setVisual('color', color);\r\n\t                edge.setVisual('opacity', opacity);\r\n\t            });\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 208 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var simpleLayoutHelper = __webpack_require__(209);\r\n\t    var simpleLayoutEdge = __webpack_require__(210);\r\n\t    module.exports = function (ecModel, api) {\r\n\t        ecModel.eachSeriesByType('graph', function (seriesModel) {\r\n\t            var layout = seriesModel.get('layout');\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            if (coordSys && coordSys.type !== 'view') {\r\n\t                var data = seriesModel.getData();\r\n\t                data.each(coordSys.dimensions, function (x, y, idx) {\r\n\t                    if (!isNaN(x) && !isNaN(y)) {\r\n\t                        data.setItemLayout(idx, coordSys.dataToPoint([x, y]));\r\n\t                    }\r\n\t                    else {\r\n\t                        // Also {Array.<number>}, not undefined to avoid if...else... statement\r\n\t                        data.setItemLayout(idx, [NaN, NaN]);\r\n\t                    }\r\n\t                });\r\n\r\n\t                simpleLayoutEdge(data.graph);\r\n\t            }\r\n\t            else if (!layout || layout === 'none') {\r\n\t                simpleLayoutHelper(seriesModel);\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 209 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var simpleLayoutEdge = __webpack_require__(210);\r\n\r\n\t    module.exports = function (seriesModel) {\r\n\t        var coordSys = seriesModel.coordinateSystem;\r\n\t        if (coordSys && coordSys.type !== 'view') {\r\n\t            return;\r\n\t        }\r\n\t        var graph = seriesModel.getGraph();\r\n\r\n\t        graph.eachNode(function (node) {\r\n\t            var model = node.getModel();\r\n\t            node.setLayout([+model.get('x'), +model.get('y')]);\r\n\t        });\r\n\r\n\t        simpleLayoutEdge(graph);\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 210 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    module.exports = function (graph) {\r\n\t        graph.eachEdge(function (edge) {\r\n\t            var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;\r\n\t            var p1 = vec2.clone(edge.node1.getLayout());\r\n\t            var p2 = vec2.clone(edge.node2.getLayout());\r\n\t            var points = [p1, p2];\r\n\t            if (+curveness) {\r\n\t                points.push([\r\n\t                    (p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * curveness,\r\n\t                    (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * curveness\r\n\t                ]);\r\n\t            }\r\n\t            edge.setLayout(points);\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 211 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    var circularLayoutHelper = __webpack_require__(212);\r\n\t    module.exports = function (ecModel) {\r\n\t        ecModel.eachSeriesByType('graph', function (seriesModel) {\r\n\t            if (seriesModel.get('layout') === 'circular') {\r\n\t                circularLayoutHelper(seriesModel);\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 212 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    module.exports = function (seriesModel) {\r\n\t        var coordSys = seriesModel.coordinateSystem;\r\n\t        if (coordSys && coordSys.type !== 'view') {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var rect = coordSys.getBoundingRect();\r\n\r\n\t        var nodeData = seriesModel.getData();\r\n\t        var graph = nodeData.graph;\r\n\r\n\t        var angle = 0;\r\n\t        var sum = nodeData.getSum('value');\r\n\t        var unitAngle = Math.PI * 2 / (sum || nodeData.count());\r\n\r\n\t        var cx = rect.width / 2 + rect.x;\r\n\t        var cy = rect.height / 2 + rect.y;\r\n\r\n\t        var r = Math.min(rect.width, rect.height) / 2;\r\n\r\n\t        graph.eachNode(function (node) {\r\n\t            var value = node.getValue('value');\r\n\r\n\t            angle += unitAngle * (sum ? value : 1) / 2;\r\n\r\n\t            node.setLayout([\r\n\t                r * Math.cos(angle) + cx,\r\n\t                r * Math.sin(angle) + cy\r\n\t            ]);\r\n\r\n\t            angle += unitAngle * (sum ? value : 1) / 2;\r\n\t        });\r\n\r\n\t        nodeData.setLayout({\r\n\t            cx: cx,\r\n\t            cy: cy\r\n\t        });\r\n\r\n\t        graph.eachEdge(function (edge) {\r\n\t            var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;\r\n\t            var p1 = vec2.clone(edge.node1.getLayout());\r\n\t            var p2 = vec2.clone(edge.node2.getLayout());\r\n\t            var cp1;\r\n\t            var x12 = (p1[0] + p2[0]) / 2;\r\n\t            var y12 = (p1[1] + p2[1]) / 2;\r\n\t            if (+curveness) {\r\n\t                curveness *= 3;\r\n\t                cp1 = [\r\n\t                    cx * curveness + x12 * (1 - curveness),\r\n\t                    cy * curveness + y12 * (1 - curveness)\r\n\t                ];\r\n\t            }\r\n\t            edge.setLayout([p1, p2, cp1]);\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 213 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var forceHelper = __webpack_require__(214);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var simpleLayoutHelper = __webpack_require__(209);\r\n\t    var circularLayoutHelper = __webpack_require__(212);\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    module.exports = function (ecModel) {\r\n\t        ecModel.eachSeriesByType('graph', function (graphSeries) {\r\n\t            var coordSys = graphSeries.coordinateSystem;\r\n\t            if (coordSys && coordSys.type !== 'view') {\r\n\t                return;\r\n\t            }\r\n\t            if (graphSeries.get('layout') === 'force') {\r\n\t                var preservedPoints = graphSeries.preservedPoints || {};\r\n\t                var graph = graphSeries.getGraph();\r\n\t                var nodeData = graph.data;\r\n\t                var edgeData = graph.edgeData;\r\n\t                var forceModel = graphSeries.getModel('force');\r\n\t                var initLayout = forceModel.get('initLayout');\r\n\t                if (graphSeries.preservedPoints) {\r\n\t                    nodeData.each(function (idx) {\r\n\t                        var id = nodeData.getId(idx);\r\n\t                        nodeData.setItemLayout(idx, preservedPoints[id] || [NaN, NaN]);\r\n\t                    });\r\n\t                }\r\n\t                else if (!initLayout || initLayout === 'none') {\r\n\t                    simpleLayoutHelper(graphSeries);\r\n\t                }\r\n\t                else if (initLayout === 'circular') {\r\n\t                    circularLayoutHelper(graphSeries);\r\n\t                }\r\n\r\n\t                var nodeDataExtent = nodeData.getDataExtent('value');\r\n\t                var edgeDataExtent = edgeData.getDataExtent('value');\r\n\t                // var edgeDataExtent = edgeData.getDataExtent('value');\r\n\t                var repulsion = forceModel.get('repulsion');\r\n\t                var edgeLength = forceModel.get('edgeLength');\r\n\t                if (!zrUtil.isArray(repulsion)) {\r\n\t                    repulsion = [repulsion, repulsion];\r\n\t                }\r\n\t                if (!zrUtil.isArray(edgeLength)) {\r\n\t                    edgeLength = [edgeLength, edgeLength];\r\n\t                }\r\n\t                // Larger value has smaller length\r\n\t                edgeLength = [edgeLength[1], edgeLength[0]];\r\n\r\n\t                var nodes = nodeData.mapArray('value', function (value, idx) {\r\n\t                    var point = nodeData.getItemLayout(idx);\r\n\t                    // var w = numberUtil.linearMap(value, nodeDataExtent, [0, 50]);\r\n\t                    var rep = numberUtil.linearMap(value, nodeDataExtent, repulsion);\r\n\t                    if (isNaN(rep)) {\r\n\t                        rep = (repulsion[0] + repulsion[1]) / 2;\r\n\t                    }\r\n\t                    return {\r\n\t                        w: rep,\r\n\t                        rep: rep,\r\n\t                        p: (!point || isNaN(point[0]) || isNaN(point[1])) ? null : point\r\n\t                    };\r\n\t                });\r\n\t                var edges = edgeData.mapArray('value', function (value, idx) {\r\n\t                    var edge = graph.getEdgeByIndex(idx);\r\n\t                    var d = numberUtil.linearMap(value, edgeDataExtent, edgeLength);\r\n\t                    if (isNaN(d)) {\r\n\t                        d = (edgeLength[0] + edgeLength[1]) / 2;\r\n\t                    }\r\n\t                    return {\r\n\t                        n1: nodes[edge.node1.dataIndex],\r\n\t                        n2: nodes[edge.node2.dataIndex],\r\n\t                        d: d,\r\n\t                        curveness: edge.getModel().get('lineStyle.normal.curveness') || 0\r\n\t                    };\r\n\t                });\r\n\r\n\t                var coordSys = graphSeries.coordinateSystem;\r\n\t                var rect = coordSys.getBoundingRect();\r\n\t                var forceInstance = forceHelper(nodes, edges, {\r\n\t                    rect: rect,\r\n\t                    gravity: forceModel.get('gravity')\r\n\t                });\r\n\t                var oldStep = forceInstance.step;\r\n\t                forceInstance.step = function (cb) {\r\n\t                    for (var i = 0, l = nodes.length; i < l; i++) {\r\n\t                        if (nodes[i].fixed) {\r\n\t                            // Write back to layout instance\r\n\t                            vec2.copy(nodes[i].p, graph.getNodeByIndex(i).getLayout());\r\n\t                        }\r\n\t                    }\r\n\t                    oldStep(function (nodes, edges, stopped) {\r\n\t                        for (var i = 0, l = nodes.length; i < l; i++) {\r\n\t                            if (!nodes[i].fixed) {\r\n\t                                graph.getNodeByIndex(i).setLayout(nodes[i].p);\r\n\t                            }\r\n\t                            preservedPoints[nodeData.getId(i)] = nodes[i].p;\r\n\t                        }\r\n\t                        for (var i = 0, l = edges.length; i < l; i++) {\r\n\t                            var e = edges[i];\r\n\t                            var edge = graph.getEdgeByIndex(i);\r\n\t                            var p1 = e.n1.p;\r\n\t                            var p2 = e.n2.p;\r\n\t                            var points = edge.getLayout();\r\n\t                            points = points ? points.slice() : [];\r\n\t                            points[0] = points[0] || [];\r\n\t                            points[1] = points[1] || [];\r\n\t                            vec2.copy(points[0], p1);\r\n\t                            vec2.copy(points[1], p2);\r\n\t                            if (+e.curveness) {\r\n\t                                points[2] = [\r\n\t                                    (p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness,\r\n\t                                    (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness\r\n\t                                ];\r\n\t                            }\r\n\t                            edge.setLayout(points);\r\n\t                        }\r\n\t                        // Update layout\r\n\r\n\t                        cb && cb(stopped);\r\n\t                    });\r\n\t                };\r\n\t                graphSeries.forceLayout = forceInstance;\r\n\t                graphSeries.preservedPoints = preservedPoints;\r\n\r\n\t                // Step to get the layout\r\n\t                forceInstance.step();\r\n\t            }\r\n\t            else {\r\n\t                // Remove prev injected forceLayout instance\r\n\t                graphSeries.forceLayout = null;\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 214 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    var scaleAndAdd = vec2.scaleAndAdd;\r\n\r\n\t    // function adjacentNode(n, e) {\r\n\t    //     return e.n1 === n ? e.n2 : e.n1;\r\n\t    // }\r\n\r\n\t    module.exports = function (nodes, edges, opts) {\r\n\t        var rect = opts.rect;\r\n\t        var width = rect.width;\r\n\t        var height = rect.height;\r\n\t        var center = [rect.x + width / 2, rect.y + height / 2];\r\n\t        // var scale = opts.scale || 1;\r\n\t        var gravity = opts.gravity == null ? 0.1 : opts.gravity;\r\n\r\n\t        // for (var i = 0; i < edges.length; i++) {\r\n\t        //     var e = edges[i];\r\n\t        //     var n1 = e.n1;\r\n\t        //     var n2 = e.n2;\r\n\t        //     n1.edges = n1.edges || [];\r\n\t        //     n2.edges = n2.edges || [];\r\n\t        //     n1.edges.push(e);\r\n\t        //     n2.edges.push(e);\r\n\t        // }\r\n\t        // Init position\r\n\t        for (var i = 0; i < nodes.length; i++) {\r\n\t            var n = nodes[i];\r\n\t            if (!n.p) {\r\n\t                // Use the position from first adjecent node with defined position\r\n\t                // Or use a random position\r\n\t                // From d3\r\n\t                // if (n.edges) {\r\n\t                //     var j = -1;\r\n\t                //     while (++j < n.edges.length) {\r\n\t                //         var e = n.edges[j];\r\n\t                //         var other = adjacentNode(n, e);\r\n\t                //         if (other.p) {\r\n\t                //             n.p = vec2.clone(other.p);\r\n\t                //             break;\r\n\t                //         }\r\n\t                //     }\r\n\t                // }\r\n\t                // if (!n.p) {\r\n\t                    n.p = vec2.create(\r\n\t                        width * (Math.random() - 0.5) + center[0],\r\n\t                        height * (Math.random() - 0.5) + center[1]\r\n\t                    );\r\n\t                // }\r\n\t            }\r\n\t            n.pp = vec2.clone(n.p);\r\n\t            n.edges = null;\r\n\t        }\r\n\r\n\t        // Formula in 'Graph Drawing by Force-directed Placement'\r\n\t        // var k = scale * Math.sqrt(width * height / nodes.length);\r\n\t        // var k2 = k * k;\r\n\r\n\t        var friction = 0.6;\r\n\r\n\t        return {\r\n\t            warmUp: function () {\r\n\t                friction = 0.5;\r\n\t            },\r\n\r\n\t            setFixed: function (idx) {\r\n\t                nodes[idx].fixed = true;\r\n\t            },\r\n\r\n\t            setUnfixed: function (idx) {\r\n\t                nodes[idx].fixed = false;\r\n\t            },\r\n\r\n\t            step: function (cb) {\r\n\t                var v12 = [];\r\n\t                var nLen = nodes.length;\r\n\t                for (var i = 0; i < edges.length; i++) {\r\n\t                    var e = edges[i];\r\n\t                    var n1 = e.n1;\r\n\t                    var n2 = e.n2;\r\n\r\n\t                    vec2.sub(v12, n2.p, n1.p);\r\n\t                    var d = vec2.len(v12) - e.d;\r\n\t                    var w = n2.w / (n1.w + n2.w);\r\n\t                    vec2.normalize(v12, v12);\r\n\r\n\t                    !n1.fixed && scaleAndAdd(n1.p, n1.p, v12, w * d * friction);\r\n\t                    !n2.fixed && scaleAndAdd(n2.p, n2.p, v12, -(1 - w) * d * friction);\r\n\t                }\r\n\t                // Gravity\r\n\t                for (var i = 0; i < nLen; i++) {\r\n\t                    var n = nodes[i];\r\n\t                    if (!n.fixed) {\r\n\t                        vec2.sub(v12, center, n.p);\r\n\t                        // var d = vec2.len(v12);\r\n\t                        // vec2.scale(v12, v12, 1 / d);\r\n\t                        // var gravityFactor = gravity;\r\n\t                        vec2.scaleAndAdd(n.p, n.p, v12, gravity * friction);\r\n\t                    }\r\n\t                }\r\n\r\n\t                // Repulsive\r\n\t                // PENDING\r\n\t                for (var i = 0; i < nLen; i++) {\r\n\t                    var n1 = nodes[i];\r\n\t                    for (var j = i + 1; j < nLen; j++) {\r\n\t                        var n2 = nodes[j];\r\n\t                        vec2.sub(v12, n2.p, n1.p);\r\n\t                        var d = vec2.len(v12);\r\n\t                        if (d === 0) {\r\n\t                            // Random repulse\r\n\t                            vec2.set(v12, Math.random() - 0.5, Math.random() - 0.5);\r\n\t                            d = 1;\r\n\t                        }\r\n\t                        var repFact = (n1.rep + n2.rep) / d / d;\r\n\t                        !n1.fixed && scaleAndAdd(n1.pp, n1.pp, v12, repFact);\r\n\t                        !n2.fixed && scaleAndAdd(n2.pp, n2.pp, v12, -repFact);\r\n\t                    }\r\n\t                }\r\n\t                var v = [];\r\n\t                for (var i = 0; i < nLen; i++) {\r\n\t                    var n = nodes[i];\r\n\t                    if (!n.fixed) {\r\n\t                        vec2.sub(v, n.p, n.pp);\r\n\t                        vec2.scaleAndAdd(n.p, n.p, v, friction);\r\n\t                        vec2.copy(n.pp, n.p);\r\n\t                    }\r\n\t                }\r\n\r\n\t                friction = friction * 0.992;\r\n\r\n\t                cb && cb(nodes, edges, friction < 0.01);\r\n\t            }\r\n\t        };\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 215 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    // FIXME Where to create the simple view coordinate system\r\n\t    var View = __webpack_require__(169);\r\n\t    var layout = __webpack_require__(21);\r\n\t    var bbox = __webpack_require__(51);\r\n\r\n\t    function getViewRect(seriesModel, api, aspect) {\r\n\t        var option = seriesModel.getBoxLayoutParams();\r\n\t        option.aspect = aspect;\r\n\t        return layout.getLayoutRect(option, {\r\n\t            width: api.getWidth(),\r\n\t            height: api.getHeight()\r\n\t        });\r\n\t    }\r\n\r\n\t    module.exports = function (ecModel, api) {\r\n\t        var viewList = [];\r\n\t        ecModel.eachSeriesByType('graph', function (seriesModel) {\r\n\t            var coordSysType = seriesModel.get('coordinateSystem');\r\n\t            if (!coordSysType || coordSysType === 'view') {\r\n\r\n\t                var data = seriesModel.getData();\r\n\t                var positions = data.mapArray(function (idx) {\r\n\t                    var itemModel = data.getItemModel(idx);\r\n\t                    return [+itemModel.get('x'), +itemModel.get('y')];\r\n\t                });\r\n\r\n\t                var min = [];\r\n\t                var max = [];\r\n\r\n\t                bbox.fromPoints(positions, min, max);\r\n\r\n\t                // If width or height is 0\r\n\t                if (max[0] - min[0] === 0) {\r\n\t                    max[0] += 1;\r\n\t                    min[0] -= 1;\r\n\t                }\r\n\t                if (max[1] - min[1] === 0) {\r\n\t                    max[1] += 1;\r\n\t                    min[1] -= 1;\r\n\t                }\r\n\t                var aspect = (max[0] - min[0]) / (max[1] - min[1]);\r\n\t                // FIXME If get view rect after data processed?\r\n\t                var viewRect = getViewRect(seriesModel, api, aspect);\r\n\t                // Position may be NaN, use view rect instead\r\n\t                if (isNaN(aspect)) {\r\n\t                    min = [viewRect.x, viewRect.y];\r\n\t                    max = [viewRect.x + viewRect.width, viewRect.y + viewRect.height];\r\n\t                }\r\n\r\n\t                var bbWidth = max[0] - min[0];\r\n\t                var bbHeight = max[1] - min[1];\r\n\r\n\t                var viewWidth = viewRect.width;\r\n\t                var viewHeight = viewRect.height;\r\n\r\n\t                var viewCoordSys = seriesModel.coordinateSystem = new View();\r\n\t                viewCoordSys.zoomLimit = seriesModel.get('scaleLimit');\r\n\r\n\t                viewCoordSys.setBoundingRect(\r\n\t                    min[0], min[1], bbWidth, bbHeight\r\n\t                );\r\n\t                viewCoordSys.setViewRect(\r\n\t                    viewRect.x, viewRect.y, viewWidth, viewHeight\r\n\t                );\r\n\r\n\t                // Update roam info\r\n\t                viewCoordSys.setCenter(seriesModel.get('center'));\r\n\t                viewCoordSys.setZoom(seriesModel.get('zoom'));\r\n\r\n\t                viewList.push(viewCoordSys);\r\n\t            }\r\n\t        });\r\n\t        return viewList;\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 216 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    __webpack_require__(217);\r\n\t    __webpack_require__(218);\r\n\r\n\r\n/***/ },\r\n/* 217 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var List = __webpack_require__(97);\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var GaugeSeries = SeriesModel.extend({\r\n\r\n\t        type: 'series.gauge',\r\n\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            var list = new List(['value'], this);\r\n\t            var dataOpt = option.data || [];\r\n\t            if (!zrUtil.isArray(dataOpt)) {\r\n\t                dataOpt = [dataOpt];\r\n\t            }\r\n\t            // Only use the first data item\r\n\t            list.initData(dataOpt);\r\n\t            return list;\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,\r\n\t            z: 2,\r\n\t            // 默认全局居中\r\n\t            center: ['50%', '50%'],\r\n\t            legendHoverLink: true,\r\n\t            radius: '75%',\r\n\t            startAngle: 225,\r\n\t            endAngle: -45,\r\n\t            clockwise: true,\r\n\t            // 最小值\r\n\t            min: 0,\r\n\t            // 最大值\r\n\t            max: 100,\r\n\t            // 分割段数，默认为10\r\n\t            splitNumber: 10,\r\n\t            // 坐标轴线\r\n\t            axisLine: {\r\n\t                // 默认显示，属性show控制显示与否\r\n\t                show: true,\r\n\t                lineStyle: {       // 属性lineStyle控制线条样式\r\n\t                    color: [[0.2, '#91c7ae'], [0.8, '#63869e'], [1, '#c23531']],\r\n\t                    width: 30\r\n\t                }\r\n\t            },\r\n\t            // 分隔线\r\n\t            splitLine: {\r\n\t                // 默认显示，属性show控制显示与否\r\n\t                show: true,\r\n\t                // 属性length控制线长\r\n\t                length: 30,\r\n\t                // 属性lineStyle（详见lineStyle）控制线条样式\r\n\t                lineStyle: {\r\n\t                    color: '#eee',\r\n\t                    width: 2,\r\n\t                    type: 'solid'\r\n\t                }\r\n\t            },\r\n\t            // 坐标轴小标记\r\n\t            axisTick: {\r\n\t                // 属性show控制显示与否，默认不显示\r\n\t                show: true,\r\n\t                // 每份split细分多少段\r\n\t                splitNumber: 5,\r\n\t                // 属性length控制线长\r\n\t                length: 8,\r\n\t                // 属性lineStyle控制线条样式\r\n\t                lineStyle: {\r\n\t                    color: '#eee',\r\n\t                    width: 1,\r\n\t                    type: 'solid'\r\n\t                }\r\n\t            },\r\n\t            axisLabel: {\r\n\t                show: true,\r\n\t                distance: 5,\r\n\t                // formatter: null,\r\n\t                textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\r\n\t                    color: 'auto'\r\n\t                }\r\n\t            },\r\n\t            pointer: {\r\n\t                show: true,\r\n\t                length: '80%',\r\n\t                width: 8\r\n\t            },\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    color: 'auto'\r\n\t                }\r\n\t            },\r\n\t            title: {\r\n\t                show: true,\r\n\t                // x, y，单位px\r\n\t                offsetCenter: [0, '-40%'],\r\n\t                // 其余属性默认使用全局文本样式，详见TEXTSTYLE\r\n\t                textStyle: {\r\n\t                    color: '#333',\r\n\t                    fontSize: 15\r\n\t                }\r\n\t            },\r\n\t            detail: {\r\n\t                show: true,\r\n\t                backgroundColor: 'rgba(0,0,0,0)',\r\n\t                borderWidth: 0,\r\n\t                borderColor: '#ccc',\r\n\t                width: 100,\r\n\t                height: 40,\r\n\t                // x, y，单位px\r\n\t                offsetCenter: [0, '40%'],\r\n\t                // formatter: null,\r\n\t                // 其余属性默认使用全局文本样式，详见TEXTSTYLE\r\n\t                textStyle: {\r\n\t                    color: 'auto',\r\n\t                    fontSize: 30\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    module.exports = GaugeSeries;\r\n\r\n\r\n/***/ },\r\n/* 218 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var PointerPath = __webpack_require__(219);\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var parsePercent = numberUtil.parsePercent;\r\n\r\n\t    function parsePosition(seriesModel, api) {\r\n\t        var center = seriesModel.get('center');\r\n\t        var width = api.getWidth();\r\n\t        var height = api.getHeight();\r\n\t        var size = Math.min(width, height);\r\n\t        var cx = parsePercent(center[0], api.getWidth());\r\n\t        var cy = parsePercent(center[1], api.getHeight());\r\n\t        var r = parsePercent(seriesModel.get('radius'), size / 2);\r\n\r\n\t        return {\r\n\t            cx: cx,\r\n\t            cy: cy,\r\n\t            r: r\r\n\t        };\r\n\t    }\r\n\r\n\t    function formatLabel(label, labelFormatter) {\r\n\t        if (labelFormatter) {\r\n\t            if (typeof labelFormatter === 'string') {\r\n\t                label = labelFormatter.replace('{value}', label);\r\n\t            }\r\n\t            else if (typeof labelFormatter === 'function') {\r\n\t                label = labelFormatter(label);\r\n\t            }\r\n\t        }\r\n\r\n\t        return label;\r\n\t    }\r\n\r\n\t    var PI2 = Math.PI * 2;\r\n\r\n\t    var GaugeView = __webpack_require__(42).extend({\r\n\r\n\t        type: 'gauge',\r\n\r\n\t        render: function (seriesModel, ecModel, api) {\r\n\r\n\t            this.group.removeAll();\r\n\r\n\t            var colorList = seriesModel.get('axisLine.lineStyle.color');\r\n\t            var posInfo = parsePosition(seriesModel, api);\r\n\r\n\t            this._renderMain(\r\n\t                seriesModel, ecModel, api, colorList, posInfo\r\n\t            );\r\n\t        },\r\n\r\n\t        dispose: function () {},\r\n\r\n\t        _renderMain: function (seriesModel, ecModel, api, colorList, posInfo) {\r\n\t            var group = this.group;\r\n\r\n\t            var axisLineModel = seriesModel.getModel('axisLine');\r\n\t            var lineStyleModel = axisLineModel.getModel('lineStyle');\r\n\r\n\t            var clockwise = seriesModel.get('clockwise');\r\n\t            var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;\r\n\t            var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;\r\n\r\n\t            var angleRangeSpan = (endAngle - startAngle) % PI2;\r\n\r\n\t            var prevEndAngle = startAngle;\r\n\t            var axisLineWidth = lineStyleModel.get('width');\r\n\r\n\t            for (var i = 0; i < colorList.length; i++) {\r\n\t                // Clamp\r\n\t                var percent = Math.min(Math.max(colorList[i][0], 0), 1);\r\n\t                var endAngle = startAngle + angleRangeSpan * percent;\r\n\t                var sector = new graphic.Sector({\r\n\t                    shape: {\r\n\t                        startAngle: prevEndAngle,\r\n\t                        endAngle: endAngle,\r\n\t                        cx: posInfo.cx,\r\n\t                        cy: posInfo.cy,\r\n\t                        clockwise: clockwise,\r\n\t                        r0: posInfo.r - axisLineWidth,\r\n\t                        r: posInfo.r\r\n\t                    },\r\n\t                    silent: true\r\n\t                });\r\n\r\n\t                sector.setStyle({\r\n\t                    fill: colorList[i][1]\r\n\t                });\r\n\r\n\t                sector.setStyle(lineStyleModel.getLineStyle(\r\n\t                    // Because we use sector to simulate arc\r\n\t                    // so the properties for stroking are useless\r\n\t                    ['color', 'borderWidth', 'borderColor']\r\n\t                ));\r\n\r\n\t                group.add(sector);\r\n\r\n\t                prevEndAngle = endAngle;\r\n\t            }\r\n\r\n\t            var getColor = function (percent) {\r\n\t                // Less than 0\r\n\t                if (percent <= 0) {\r\n\t                    return colorList[0][1];\r\n\t                }\r\n\t                for (var i = 0; i < colorList.length; i++) {\r\n\t                    if (colorList[i][0] >= percent\r\n\t                        && (i === 0 ? 0 : colorList[i - 1][0]) < percent\r\n\t                    ) {\r\n\t                        return colorList[i][1];\r\n\t                    }\r\n\t                }\r\n\t                // More than 1\r\n\t                return colorList[i - 1][1];\r\n\t            };\r\n\r\n\t            if (!clockwise) {\r\n\t                var tmp = startAngle;\r\n\t                startAngle = endAngle;\r\n\t                endAngle = tmp;\r\n\t            }\r\n\r\n\t            this._renderTicks(\r\n\t                seriesModel, ecModel, api, getColor, posInfo,\r\n\t                startAngle, endAngle, clockwise\r\n\t            );\r\n\r\n\t            this._renderPointer(\r\n\t                seriesModel, ecModel, api, getColor, posInfo,\r\n\t                startAngle, endAngle, clockwise\r\n\t            );\r\n\r\n\t            this._renderTitle(\r\n\t                seriesModel, ecModel, api, getColor, posInfo\r\n\t            );\r\n\t            this._renderDetail(\r\n\t                seriesModel, ecModel, api, getColor, posInfo\r\n\t            );\r\n\t        },\r\n\r\n\t        _renderTicks: function (\r\n\t            seriesModel, ecModel, api, getColor, posInfo,\r\n\t            startAngle, endAngle, clockwise\r\n\t        ) {\r\n\t            var group = this.group;\r\n\t            var cx = posInfo.cx;\r\n\t            var cy = posInfo.cy;\r\n\t            var r = posInfo.r;\r\n\r\n\t            var minVal = seriesModel.get('min');\r\n\t            var maxVal = seriesModel.get('max');\r\n\r\n\t            var splitLineModel = seriesModel.getModel('splitLine');\r\n\t            var tickModel = seriesModel.getModel('axisTick');\r\n\t            var labelModel = seriesModel.getModel('axisLabel');\r\n\r\n\t            var splitNumber = seriesModel.get('splitNumber');\r\n\t            var subSplitNumber = tickModel.get('splitNumber');\r\n\r\n\t            var splitLineLen = parsePercent(\r\n\t                splitLineModel.get('length'), r\r\n\t            );\r\n\t            var tickLen = parsePercent(\r\n\t                tickModel.get('length'), r\r\n\t            );\r\n\r\n\t            var angle = startAngle;\r\n\t            var step = (endAngle - startAngle) / splitNumber;\r\n\t            var subStep = step / subSplitNumber;\r\n\r\n\t            var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();\r\n\t            var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();\r\n\t            var textStyleModel = labelModel.getModel('textStyle');\r\n\r\n\t            for (var i = 0; i <= splitNumber; i++) {\r\n\t                var unitX = Math.cos(angle);\r\n\t                var unitY = Math.sin(angle);\r\n\t                // Split line\r\n\t                if (splitLineModel.get('show')) {\r\n\t                    var splitLine = new graphic.Line({\r\n\t                        shape: {\r\n\t                            x1: unitX * r + cx,\r\n\t                            y1: unitY * r + cy,\r\n\t                            x2: unitX * (r - splitLineLen) + cx,\r\n\t                            y2: unitY * (r - splitLineLen) + cy\r\n\t                        },\r\n\t                        style: splitLineStyle,\r\n\t                        silent: true\r\n\t                    });\r\n\t                    if (splitLineStyle.stroke === 'auto') {\r\n\t                        splitLine.setStyle({\r\n\t                            stroke: getColor(i / splitNumber)\r\n\t                        });\r\n\t                    }\r\n\r\n\t                    group.add(splitLine);\r\n\t                }\r\n\r\n\t                // Label\r\n\t                if (labelModel.get('show')) {\r\n\t                    var label = formatLabel(\r\n\t                        numberUtil.round(i / splitNumber * (maxVal - minVal) + minVal),\r\n\t                        labelModel.get('formatter')\r\n\t                    );\r\n\t                    var distance = labelModel.get('distance');\r\n\r\n\t                    var text = new graphic.Text({\r\n\t                        style: {\r\n\t                            text: label,\r\n\t                            x: unitX * (r - splitLineLen - distance) + cx,\r\n\t                            y: unitY * (r - splitLineLen - distance) + cy,\r\n\t                            fill: textStyleModel.getTextColor(),\r\n\t                            textFont: textStyleModel.getFont(),\r\n\t                            textVerticalAlign: unitY < -0.4 ? 'top' : (unitY > 0.4 ? 'bottom' : 'middle'),\r\n\t                            textAlign: unitX < -0.4 ? 'left' : (unitX > 0.4 ? 'right' : 'center')\r\n\t                        },\r\n\t                        silent: true\r\n\t                    });\r\n\t                    if (text.style.fill === 'auto') {\r\n\t                        text.setStyle({\r\n\t                            fill: getColor(i / splitNumber)\r\n\t                        });\r\n\t                    }\r\n\r\n\t                    group.add(text);\r\n\t                }\r\n\r\n\t                // Axis tick\r\n\t                if (tickModel.get('show') && i !== splitNumber) {\r\n\t                    for (var j = 0; j <= subSplitNumber; j++) {\r\n\t                        var unitX = Math.cos(angle);\r\n\t                        var unitY = Math.sin(angle);\r\n\t                        var tickLine = new graphic.Line({\r\n\t                            shape: {\r\n\t                                x1: unitX * r + cx,\r\n\t                                y1: unitY * r + cy,\r\n\t                                x2: unitX * (r - tickLen) + cx,\r\n\t                                y2: unitY * (r - tickLen) + cy\r\n\t                            },\r\n\t                            silent: true,\r\n\t                            style: tickLineStyle\r\n\t                        });\r\n\r\n\t                        if (tickLineStyle.stroke === 'auto') {\r\n\t                            tickLine.setStyle({\r\n\t                                stroke: getColor((i + j / subSplitNumber) / splitNumber)\r\n\t                            });\r\n\t                        }\r\n\r\n\t                        group.add(tickLine);\r\n\t                        angle += subStep;\r\n\t                    }\r\n\t                    angle -= subStep;\r\n\t                }\r\n\t                else {\r\n\t                    angle += step;\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        _renderPointer: function (\r\n\t            seriesModel, ecModel, api, getColor, posInfo,\r\n\t            startAngle, endAngle, clockwise\r\n\t        ) {\r\n\t            var valueExtent = [+seriesModel.get('min'), +seriesModel.get('max')];\r\n\t            var angleExtent = [startAngle, endAngle];\r\n\r\n\t            var data = seriesModel.getData();\r\n\t            var oldData = this._data;\r\n\r\n\t            var group = this.group;\r\n\r\n\t            data.diff(oldData)\r\n\t                .add(function (idx) {\r\n\t                    var pointer = new PointerPath({\r\n\t                        shape: {\r\n\t                            angle: startAngle\r\n\t                        }\r\n\t                    });\r\n\r\n\t                    graphic.updateProps(pointer, {\r\n\t                        shape: {\r\n\t                            angle: numberUtil.linearMap(data.get('value', idx), valueExtent, angleExtent, true)\r\n\t                        }\r\n\t                    }, seriesModel);\r\n\r\n\t                    group.add(pointer);\r\n\t                    data.setItemGraphicEl(idx, pointer);\r\n\t                })\r\n\t                .update(function (newIdx, oldIdx) {\r\n\t                    var pointer = oldData.getItemGraphicEl(oldIdx);\r\n\r\n\t                    graphic.updateProps(pointer, {\r\n\t                        shape: {\r\n\t                            angle: numberUtil.linearMap(data.get('value', newIdx), valueExtent, angleExtent, true)\r\n\t                        }\r\n\t                    }, seriesModel);\r\n\r\n\t                    group.add(pointer);\r\n\t                    data.setItemGraphicEl(newIdx, pointer);\r\n\t                })\r\n\t                .remove(function (idx) {\r\n\t                    var pointer = oldData.getItemGraphicEl(idx);\r\n\t                    group.remove(pointer);\r\n\t                })\r\n\t                .execute();\r\n\r\n\t            data.eachItemGraphicEl(function (pointer, idx) {\r\n\t                var itemModel = data.getItemModel(idx);\r\n\t                var pointerModel = itemModel.getModel('pointer');\r\n\r\n\t                pointer.setShape({\r\n\t                    x: posInfo.cx,\r\n\t                    y: posInfo.cy,\r\n\t                    width: parsePercent(\r\n\t                        pointerModel.get('width'), posInfo.r\r\n\t                    ),\r\n\t                    r: parsePercent(pointerModel.get('length'), posInfo.r)\r\n\t                });\r\n\r\n\t                pointer.useStyle(itemModel.getModel('itemStyle.normal').getItemStyle());\r\n\r\n\t                if (pointer.style.fill === 'auto') {\r\n\t                    pointer.setStyle('fill', getColor(\r\n\t                        (data.get('value', idx) - valueExtent[0]) / (valueExtent[1] - valueExtent[0])\r\n\t                    ));\r\n\t                }\r\n\r\n\t                graphic.setHoverStyle(\r\n\t                    pointer, itemModel.getModel('itemStyle.emphasis').getItemStyle()\r\n\t                );\r\n\t            });\r\n\r\n\t            this._data = data;\r\n\t        },\r\n\r\n\t        _renderTitle: function (\r\n\t            seriesModel, ecModel, api, getColor, posInfo\r\n\t        ) {\r\n\t            var titleModel = seriesModel.getModel('title');\r\n\t            if (titleModel.get('show')) {\r\n\t                var textStyleModel = titleModel.getModel('textStyle');\r\n\t                var offsetCenter = titleModel.get('offsetCenter');\r\n\t                var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);\r\n\t                var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);\r\n\t                var text = new graphic.Text({\r\n\t                    style: {\r\n\t                        x: x,\r\n\t                        y: y,\r\n\t                        // FIXME First data name ?\r\n\t                        text: seriesModel.getData().getName(0),\r\n\t                        fill: textStyleModel.getTextColor(),\r\n\t                        textFont: textStyleModel.getFont(),\r\n\t                        textAlign: 'center',\r\n\t                        textVerticalAlign: 'middle'\r\n\t                    }\r\n\t                });\r\n\t                this.group.add(text);\r\n\t            }\r\n\t        },\r\n\r\n\t        _renderDetail: function (\r\n\t            seriesModel, ecModel, api, getColor, posInfo\r\n\t        ) {\r\n\t            var detailModel = seriesModel.getModel('detail');\r\n\t            var minVal = seriesModel.get('min');\r\n\t            var maxVal = seriesModel.get('max');\r\n\t            if (detailModel.get('show')) {\r\n\t                var textStyleModel = detailModel.getModel('textStyle');\r\n\t                var offsetCenter = detailModel.get('offsetCenter');\r\n\t                var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);\r\n\t                var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);\r\n\t                var width = parsePercent(detailModel.get('width'), posInfo.r);\r\n\t                var height = parsePercent(detailModel.get('height'), posInfo.r);\r\n\t                var value = seriesModel.getData().get('value', 0);\r\n\t                var rect = new graphic.Rect({\r\n\t                    shape: {\r\n\t                        x: x - width / 2,\r\n\t                        y: y - height / 2,\r\n\t                        width: width,\r\n\t                        height: height\r\n\t                    },\r\n\t                    style: {\r\n\t                        text: formatLabel(\r\n\t                            // FIXME First data name ?\r\n\t                            value, detailModel.get('formatter')\r\n\t                        ),\r\n\t                        fill: detailModel.get('backgroundColor'),\r\n\t                        textFill: textStyleModel.getTextColor(),\r\n\t                        textFont: textStyleModel.getFont()\r\n\t                    }\r\n\t                });\r\n\t                if (rect.style.textFill === 'auto') {\r\n\t                    rect.setStyle('textFill', getColor(\r\n\t                        numberUtil.linearMap(value, [minVal, maxVal], [0, 1], true)\r\n\t                    ));\r\n\t                }\r\n\t                rect.setStyle(detailModel.getItemStyle(['color']));\r\n\t                this.group.add(rect);\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    module.exports = GaugeView;\r\n\r\n\r\n/***/ },\r\n/* 219 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    module.exports = __webpack_require__(45).extend({\r\n\r\n\t        type: 'echartsGaugePointer',\r\n\r\n\t        shape: {\r\n\t            angle: 0,\r\n\r\n\t            width: 10,\r\n\r\n\t            r: 10,\r\n\r\n\t            x: 0,\r\n\r\n\t            y: 0\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\t            var mathCos = Math.cos;\r\n\t            var mathSin = Math.sin;\r\n\r\n\t            var r = shape.r;\r\n\t            var width = shape.width;\r\n\t            var angle = shape.angle;\r\n\t            var x = shape.x - mathCos(angle) * width * (width >= r / 3 ? 1 : 2);\r\n\t            var y = shape.y - mathSin(angle) * width * (width >= r / 3 ? 1 : 2);\r\n\r\n\t            angle = shape.angle - Math.PI / 2;\r\n\t            ctx.moveTo(x, y);\r\n\t            ctx.lineTo(\r\n\t                shape.x + mathCos(angle) * width,\r\n\t                shape.y + mathSin(angle) * width\r\n\t            );\r\n\t            ctx.lineTo(\r\n\t                shape.x + mathCos(shape.angle) * r,\r\n\t                shape.y + mathSin(shape.angle) * r\r\n\t            );\r\n\t            ctx.lineTo(\r\n\t                shape.x - mathCos(angle) * width,\r\n\t                shape.y - mathSin(angle) * width\r\n\t            );\r\n\t            ctx.lineTo(x, y);\r\n\t            return;\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 220 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    __webpack_require__(221);\r\n\t    __webpack_require__(222);\r\n\r\n\t    echarts.registerVisual(zrUtil.curry(__webpack_require__(144), 'funnel'));\r\n\t    echarts.registerLayout(__webpack_require__(223));\r\n\r\n\t    echarts.registerProcessor(zrUtil.curry(__webpack_require__(147), 'funnel'));\r\n\r\n\r\n/***/ },\r\n/* 221 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var List = __webpack_require__(97);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var completeDimensions = __webpack_require__(102);\r\n\r\n\t    var FunnelSeries = __webpack_require__(1).extendSeriesModel({\r\n\r\n\t        type: 'series.funnel',\r\n\r\n\t        init: function (option) {\r\n\t            FunnelSeries.superApply(this, 'init', arguments);\r\n\r\n\t            // Enable legend selection for each data item\r\n\t            // Use a function instead of direct access because data reference may changed\r\n\t            this.legendDataProvider = function () {\r\n\t                return this._dataBeforeProcessed;\r\n\t            };\r\n\t            // Extend labelLine emphasis\r\n\t            this._defaultLabelLine(option);\r\n\t        },\r\n\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            var dimensions = completeDimensions(['value'], option.data);\r\n\t            var list = new List(dimensions, this);\r\n\t            list.initData(option.data);\r\n\t            return list;\r\n\t        },\r\n\r\n\t        _defaultLabelLine: function (option) {\r\n\t            // Extend labelLine emphasis\r\n\t            modelUtil.defaultEmphasis(option.labelLine, ['show']);\r\n\r\n\t            var labelLineNormalOpt = option.labelLine.normal;\r\n\t            var labelLineEmphasisOpt = option.labelLine.emphasis;\r\n\t            // Not show label line if `label.normal.show = false`\r\n\t            labelLineNormalOpt.show = labelLineNormalOpt.show\r\n\t                && option.label.normal.show;\r\n\t            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show\r\n\t                && option.label.emphasis.show;\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,                  // 一级层叠\r\n\t            z: 2,                       // 二级层叠\r\n\t            legendHoverLink: true,\r\n\t            left: 80,\r\n\t            top: 60,\r\n\t            right: 80,\r\n\t            bottom: 60,\r\n\t            // width: {totalWidth} - left - right,\r\n\t            // height: {totalHeight} - top - bottom,\r\n\r\n\t            // 默认取数据最小最大值\r\n\t            // min: 0,\r\n\t            // max: 100,\r\n\t            minSize: '0%',\r\n\t            maxSize: '100%',\r\n\t            sort: 'descending', // 'ascending', 'descending'\r\n\t            gap: 0,\r\n\t            funnelAlign: 'center',\r\n\t            label: {\r\n\t                normal: {\r\n\t                    show: true,\r\n\t                    position: 'outer'\r\n\t                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调\r\n\t                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\r\n\t                },\r\n\t                emphasis: {\r\n\t                    show: true\r\n\t                }\r\n\t            },\r\n\t            labelLine: {\r\n\t                normal: {\r\n\t                    show: true,\r\n\t                    length: 20,\r\n\t                    lineStyle: {\r\n\t                        // color: 各异,\r\n\t                        width: 1,\r\n\t                        type: 'solid'\r\n\t                    }\r\n\t                },\r\n\t                emphasis: {}\r\n\t            },\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    // color: 各异,\r\n\t                    borderColor: '#fff',\r\n\t                    borderWidth: 1\r\n\t                },\r\n\t                emphasis: {\r\n\t                    // color: 各异,\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    module.exports = FunnelSeries;\r\n\r\n\r\n/***/ },\r\n/* 222 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    /**\r\n\t     * Piece of pie including Sector, Label, LabelLine\r\n\t     * @constructor\r\n\t     * @extends {module:zrender/graphic/Group}\r\n\t     */\r\n\t    function FunnelPiece(data, idx) {\r\n\r\n\t        graphic.Group.call(this);\r\n\r\n\t        var polygon = new graphic.Polygon();\r\n\t        var labelLine = new graphic.Polyline();\r\n\t        var text = new graphic.Text();\r\n\t        this.add(polygon);\r\n\t        this.add(labelLine);\r\n\t        this.add(text);\r\n\r\n\t        this.updateData(data, idx, true);\r\n\r\n\t        // Hover to change label and labelLine\r\n\t        function onEmphasis() {\r\n\t            labelLine.ignore = labelLine.hoverIgnore;\r\n\t            text.ignore = text.hoverIgnore;\r\n\t        }\r\n\t        function onNormal() {\r\n\t            labelLine.ignore = labelLine.normalIgnore;\r\n\t            text.ignore = text.normalIgnore;\r\n\t        }\r\n\t        this.on('emphasis', onEmphasis)\r\n\t            .on('normal', onNormal)\r\n\t            .on('mouseover', onEmphasis)\r\n\t            .on('mouseout', onNormal);\r\n\t    }\r\n\r\n\t    var funnelPieceProto = FunnelPiece.prototype;\r\n\r\n\t    function getLabelStyle(data, idx, state, labelModel) {\r\n\t        var textStyleModel = labelModel.getModel('textStyle');\r\n\t        var position = labelModel.get('position');\r\n\t        var isLabelInside = position === 'inside' || position === 'inner' || position === 'center';\r\n\t        return {\r\n\t            fill: textStyleModel.getTextColor()\r\n\t                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),\r\n\t            textFont: textStyleModel.getFont(),\r\n\t            text: zrUtil.retrieve(\r\n\t                data.hostModel.getFormattedLabel(idx, state),\r\n\t                data.getName(idx)\r\n\t            )\r\n\t        };\r\n\t    }\r\n\r\n\t    var opacityAccessPath = ['itemStyle', 'normal', 'opacity'];\r\n\t    funnelPieceProto.updateData = function (data, idx, firstCreate) {\r\n\r\n\t        var polygon = this.childAt(0);\r\n\r\n\t        var seriesModel = data.hostModel;\r\n\t        var itemModel = data.getItemModel(idx);\r\n\t        var layout = data.getItemLayout(idx);\r\n\t        var opacity = data.getItemModel(idx).get(opacityAccessPath);\r\n\t        opacity = opacity == null ? 1 : opacity;\r\n\r\n\t        // Reset style\r\n\t        polygon.useStyle({});\r\n\r\n\t        if (firstCreate) {\r\n\t            polygon.setShape({\r\n\t                points: layout.points\r\n\t            });\r\n\t            polygon.setStyle({ opacity : 0 });\r\n\t            graphic.initProps(polygon, {\r\n\t                style: {\r\n\t                    opacity: opacity\r\n\t                }\r\n\t            }, seriesModel, idx);\r\n\t        }\r\n\t        else {\r\n\t            graphic.updateProps(polygon, {\r\n\t                style: {\r\n\t                    opacity: opacity\r\n\t                },\r\n\t                shape: {\r\n\t                    points: layout.points\r\n\t                }\r\n\t            }, seriesModel, idx);\r\n\t        }\r\n\r\n\t        // Update common style\r\n\t        var itemStyleModel = itemModel.getModel('itemStyle');\r\n\t        var visualColor = data.getItemVisual(idx, 'color');\r\n\r\n\t        polygon.setStyle(\r\n\t            zrUtil.defaults(\r\n\t                {\r\n\t                    lineJoin: 'round',\r\n\t                    fill: visualColor\r\n\t                },\r\n\t                itemStyleModel.getModel('normal').getItemStyle(['opacity'])\r\n\t            )\r\n\t        );\r\n\t        polygon.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();\r\n\r\n\t        this._updateLabel(data, idx);\r\n\r\n\t        graphic.setHoverStyle(this);\r\n\t    };\r\n\r\n\t    funnelPieceProto._updateLabel = function (data, idx) {\r\n\r\n\t        var labelLine = this.childAt(1);\r\n\t        var labelText = this.childAt(2);\r\n\r\n\t        var seriesModel = data.hostModel;\r\n\t        var itemModel = data.getItemModel(idx);\r\n\t        var layout = data.getItemLayout(idx);\r\n\t        var labelLayout = layout.label;\r\n\t        var visualColor = data.getItemVisual(idx, 'color');\r\n\r\n\t        graphic.updateProps(labelLine, {\r\n\t            shape: {\r\n\t                points: labelLayout.linePoints || labelLayout.linePoints\r\n\t            }\r\n\t        }, seriesModel, idx);\r\n\r\n\t        graphic.updateProps(labelText, {\r\n\t            style: {\r\n\t                x: labelLayout.x,\r\n\t                y: labelLayout.y\r\n\t            }\r\n\t        }, seriesModel, idx);\r\n\t        labelText.attr({\r\n\t            style: {\r\n\t                textAlign: labelLayout.textAlign,\r\n\t                textVerticalAlign: labelLayout.verticalAlign,\r\n\t                textFont: labelLayout.font\r\n\t            },\r\n\t            rotation: labelLayout.rotation,\r\n\t            origin: [labelLayout.x, labelLayout.y],\r\n\t            z2: 10\r\n\t        });\r\n\r\n\t        var labelModel = itemModel.getModel('label.normal');\r\n\t        var labelHoverModel = itemModel.getModel('label.emphasis');\r\n\t        var labelLineModel = itemModel.getModel('labelLine.normal');\r\n\t        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');\r\n\r\n\t        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel));\r\n\r\n\t        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');\r\n\t        labelText.hoverIgnore = !labelHoverModel.get('show');\r\n\r\n\t        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');\r\n\t        labelLine.hoverIgnore = !labelLineHoverModel.get('show');\r\n\r\n\t        // Default use item visual color\r\n\t        labelLine.setStyle({\r\n\t            stroke: visualColor\r\n\t        });\r\n\t        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());\r\n\r\n\t        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel);\r\n\t        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();\r\n\t    };\r\n\r\n\t    zrUtil.inherits(FunnelPiece, graphic.Group);\r\n\r\n\r\n\t    var Funnel = __webpack_require__(42).extend({\r\n\r\n\t        type: 'funnel',\r\n\r\n\t        render: function (seriesModel, ecModel, api) {\r\n\t            var data = seriesModel.getData();\r\n\t            var oldData = this._data;\r\n\r\n\t            var group = this.group;\r\n\r\n\t            data.diff(oldData)\r\n\t                .add(function (idx) {\r\n\t                    var funnelPiece = new FunnelPiece(data, idx);\r\n\r\n\t                    data.setItemGraphicEl(idx, funnelPiece);\r\n\r\n\t                    group.add(funnelPiece);\r\n\t                })\r\n\t                .update(function (newIdx, oldIdx) {\r\n\t                    var piePiece = oldData.getItemGraphicEl(oldIdx);\r\n\r\n\t                    piePiece.updateData(data, newIdx);\r\n\r\n\t                    group.add(piePiece);\r\n\t                    data.setItemGraphicEl(newIdx, piePiece);\r\n\t                })\r\n\t                .remove(function (idx) {\r\n\t                    var piePiece = oldData.getItemGraphicEl(idx);\r\n\t                    group.remove(piePiece);\r\n\t                })\r\n\t                .execute();\r\n\r\n\t            this._data = data;\r\n\t        },\r\n\r\n\t        remove: function () {\r\n\t            this.group.removeAll();\r\n\t            this._data = null;\r\n\t        },\r\n\r\n\t        dispose: function () {}\r\n\t    });\r\n\r\n\t    module.exports = Funnel;\r\n\r\n\r\n/***/ },\r\n/* 223 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var layout = __webpack_require__(21);\r\n\t    var number = __webpack_require__(7);\r\n\r\n\t    var parsePercent = number.parsePercent;\r\n\r\n\t    function getViewRect(seriesModel, api) {\r\n\t        return layout.getLayoutRect(\r\n\t            seriesModel.getBoxLayoutParams(), {\r\n\t                width: api.getWidth(),\r\n\t                height: api.getHeight()\r\n\t            }\r\n\t        );\r\n\t    }\r\n\r\n\t    function getSortedIndices(data, sort) {\r\n\t        var valueArr = data.mapArray('value', function (val) {\r\n\t            return val;\r\n\t        });\r\n\t        var indices = [];\r\n\t        var isAscending = sort === 'ascending';\r\n\t        for (var i = 0, len = data.count(); i < len; i++) {\r\n\t            indices[i] = i;\r\n\t        }\r\n\t        indices.sort(function (a, b) {\r\n\t            return isAscending ? valueArr[a] - valueArr[b] : valueArr[b] - valueArr[a];\r\n\t        });\r\n\t        return indices;\r\n\t    }\r\n\r\n\t    function labelLayout (data) {\r\n\t        data.each(function (idx) {\r\n\t            var itemModel = data.getItemModel(idx);\r\n\t            var labelModel = itemModel.getModel('label.normal');\r\n\t            var labelPosition = labelModel.get('position');\r\n\r\n\t            var labelLineModel = itemModel.getModel('labelLine.normal');\r\n\r\n\t            var layout = data.getItemLayout(idx);\r\n\t            var points = layout.points;\r\n\r\n\t            var isLabelInside = labelPosition === 'inner'\r\n\t                || labelPosition === 'inside' || labelPosition === 'center';\r\n\r\n\t            var textAlign;\r\n\t            var textX;\r\n\t            var textY;\r\n\t            var linePoints;\r\n\r\n\t            if (isLabelInside) {\r\n\t                textX = (points[0][0] + points[1][0] + points[2][0] + points[3][0]) / 4;\r\n\t                textY = (points[0][1] + points[1][1] + points[2][1] + points[3][1]) / 4;\r\n\t                textAlign = 'center';\r\n\t                linePoints = [\r\n\t                    [textX, textY], [textX, textY]\r\n\t                ];\r\n\t            }\r\n\t            else {\r\n\t                var x1;\r\n\t                var y1;\r\n\t                var x2;\r\n\t                var labelLineLen = labelLineModel.get('length');\r\n\t                if (labelPosition === 'left') {\r\n\t                    // Left side\r\n\t                    x1 = (points[3][0] + points[0][0]) / 2;\r\n\t                    y1 = (points[3][1] + points[0][1]) / 2;\r\n\t                    x2 = x1 - labelLineLen;\r\n\t                    textX = x2 - 5;\r\n\t                    textAlign = 'right';\r\n\t                }\r\n\t                else {\r\n\t                    // Right side\r\n\t                    x1 = (points[1][0] + points[2][0]) / 2;\r\n\t                    y1 = (points[1][1] + points[2][1]) / 2;\r\n\t                    x2 = x1 + labelLineLen;\r\n\t                    textX = x2 + 5;\r\n\t                    textAlign = 'left';\r\n\t                }\r\n\t                var y2 = y1;\r\n\r\n\t                linePoints = [[x1, y1], [x2, y2]];\r\n\t                textY = y2;\r\n\t            }\r\n\r\n\t            layout.label = {\r\n\t                linePoints: linePoints,\r\n\t                x: textX,\r\n\t                y: textY,\r\n\t                verticalAlign: 'middle',\r\n\t                textAlign: textAlign,\r\n\t                inside: isLabelInside\r\n\t            };\r\n\t        });\r\n\t    }\r\n\r\n\t    module.exports = function (ecModel, api, payload) {\r\n\t        ecModel.eachSeriesByType('funnel', function (seriesModel) {\r\n\t            var data = seriesModel.getData();\r\n\t            var sort = seriesModel.get('sort');\r\n\t            var viewRect = getViewRect(seriesModel, api);\r\n\t            var indices = getSortedIndices(data, sort);\r\n\r\n\t            var sizeExtent = [\r\n\t                parsePercent(seriesModel.get('minSize'), viewRect.width),\r\n\t                parsePercent(seriesModel.get('maxSize'), viewRect.width)\r\n\t            ];\r\n\t            var dataExtent = data.getDataExtent('value');\r\n\t            var min = seriesModel.get('min');\r\n\t            var max = seriesModel.get('max');\r\n\t            if (min == null) {\r\n\t                min = Math.min(dataExtent[0], 0);\r\n\t            }\r\n\t            if (max == null) {\r\n\t                max = dataExtent[1];\r\n\t            }\r\n\r\n\t            var funnelAlign = seriesModel.get('funnelAlign');\r\n\t            var gap = seriesModel.get('gap');\r\n\t            var itemHeight = (viewRect.height - gap * (data.count() - 1)) / data.count();\r\n\r\n\t            var y = viewRect.y;\r\n\r\n\t            var getLinePoints = function (idx, offY) {\r\n\t                // End point index is data.count() and we assign it 0\r\n\t                var val = data.get('value', idx) || 0;\r\n\t                var itemWidth = number.linearMap(val, [min, max], sizeExtent, true);\r\n\t                var x0;\r\n\t                switch (funnelAlign) {\r\n\t                    case 'left':\r\n\t                        x0 = viewRect.x;\r\n\t                        break;\r\n\t                    case 'center':\r\n\t                        x0 = viewRect.x + (viewRect.width - itemWidth) / 2;\r\n\t                        break;\r\n\t                    case 'right':\r\n\t                        x0 = viewRect.x + viewRect.width - itemWidth;\r\n\t                        break;\r\n\t                }\r\n\t                return [\r\n\t                    [x0, offY],\r\n\t                    [x0 + itemWidth, offY]\r\n\t                ];\r\n\t            };\r\n\r\n\t            if (sort === 'ascending') {\r\n\t                // From bottom to top\r\n\t                itemHeight = -itemHeight;\r\n\t                gap = -gap;\r\n\t                y += viewRect.height;\r\n\t                indices = indices.reverse();\r\n\t            }\r\n\r\n\t            for (var i = 0; i < indices.length; i++) {\r\n\t                var idx = indices[i];\r\n\t                var nextIdx = indices[i + 1];\r\n\t                var start = getLinePoints(idx, y);\r\n\t                var end = getLinePoints(nextIdx, y + itemHeight);\r\n\r\n\t                y += itemHeight + gap;\r\n\r\n\t                data.setItemLayout(idx, {\r\n\t                    points: start.concat(end.slice().reverse())\r\n\t                });\r\n\t            }\r\n\r\n\t            labelLayout(data);\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 224 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    __webpack_require__(225);\r\n\r\n\t    __webpack_require__(236);\r\n\t    __webpack_require__(237);\r\n\r\n\t    echarts.registerVisual(__webpack_require__(238));\r\n\r\n\r\n\r\n/***/ },\r\n/* 225 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(226);\r\n\t    __webpack_require__(229);\r\n\t    __webpack_require__(231);\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var CLICK_THRESHOLD = 5; // > 4\r\n\r\n\t    // Parallel view\r\n\t    echarts.extendComponentView({\r\n\t        type: 'parallel',\r\n\r\n\t        render: function (parallelModel, ecModel, api) {\r\n\t            var zr = api.getZr();\r\n\r\n\t            if (!this.__onMouseDown) {\r\n\t                // FIXME\r\n\t                // click: mousemove check. otherwise confilct with drag brush.\r\n\t                var mousedownPoint;\r\n\t                zr.on('mousedown', this.__onMouseDown = function (e) {\r\n\t                    mousedownPoint = [e.offsetX, e.offsetY];\r\n\t                });\r\n\t                zr.on('mouseup', this.__onMouseUp = function (e) {\r\n\t                    var point = [e.offsetX, e.offsetY];\r\n\t                    var dist = Math.pow(mousedownPoint[0] - point[0], 2)\r\n\t                        + Math.pow(mousedownPoint[1] - point[1], 2);\r\n\r\n\t                    if (!parallelModel.get('axisExpandable') || dist > CLICK_THRESHOLD) {\r\n\t                        return;\r\n\t                    }\r\n\r\n\t                    var coordSys = parallelModel.coordinateSystem;\r\n\t                    var closestDim = coordSys.findClosestAxisDim(point);\r\n\t                    if (closestDim) {\r\n\t                        var axisIndex = zrUtil.indexOf(coordSys.dimensions, closestDim);\r\n\t                        api.dispatchAction({\r\n\t                            type: 'parallelAxisExpand',\r\n\t                            axisExpandCenter: axisIndex\r\n\t                        });\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        dispose: function (ecModel, api) {\r\n\t            api.getZr().off(this.__onMouseDown);\r\n\t            api.getZr().off(this.__onMouseUp);\r\n\t        }\r\n\t    });\r\n\r\n\t    echarts.registerPreprocessor(\r\n\t        __webpack_require__(235)\r\n\t    );\r\n\r\n\r\n\r\n/***/ },\r\n/* 226 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Parallel coordinate system creater.\r\n\t */\r\n\r\n\r\n\t    var Parallel = __webpack_require__(227);\r\n\r\n\t    function create(ecModel, api) {\r\n\t        var coordSysList = [];\r\n\r\n\t        ecModel.eachComponent('parallel', function (parallelModel, idx) {\r\n\t            var coordSys = new Parallel(parallelModel, ecModel, api);\r\n\r\n\t            coordSys.name = 'parallel_' + idx;\r\n\t            coordSys.resize(parallelModel, api);\r\n\r\n\t            parallelModel.coordinateSystem = coordSys;\r\n\t            coordSys.model = parallelModel;\r\n\r\n\t            coordSysList.push(coordSys);\r\n\t        });\r\n\r\n\t        // Inject the coordinateSystems into seriesModel\r\n\t        ecModel.eachSeries(function (seriesModel) {\r\n\t            if (seriesModel.get('coordinateSystem') === 'parallel') {\r\n\t                var parallelModel = ecModel.queryComponents({\r\n\t                    mainType: 'parallel',\r\n\t                    index: seriesModel.get('parallelIndex'),\r\n\t                    id: seriesModel.get('parallelId')\r\n\t                })[0];\r\n\t                seriesModel.coordinateSystem = parallelModel.coordinateSystem;\r\n\t            }\r\n\t        });\r\n\r\n\t        return coordSysList;\r\n\t    }\r\n\r\n\t    __webpack_require__(26).register('parallel', {create: create});\r\n\r\n\r\n\r\n/***/ },\r\n/* 227 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Parallel Coordinates\r\n\t * <https://en.wikipedia.org/wiki/Parallel_coordinates>\r\n\t */\r\n\r\n\r\n\t    var layout = __webpack_require__(21);\r\n\t    var axisHelper = __webpack_require__(114);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var ParallelAxis = __webpack_require__(228);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var matrix = __webpack_require__(11);\r\n\r\n\t    var each = zrUtil.each;\r\n\r\n\t    var PI = Math.PI;\r\n\r\n\t    function Parallel(parallelModel, ecModel, api) {\r\n\r\n\t        /**\r\n\t         * key: dimension\r\n\t         * @type {Object.<string, module:echarts/coord/parallel/Axis>}\r\n\t         * @private\r\n\t         */\r\n\t        this._axesMap = {};\r\n\r\n\t        /**\r\n\t         * key: dimension\r\n\t         * value: {position: [], rotation, }\r\n\t         * @type {Object.<string, Object>}\r\n\t         * @private\r\n\t         */\r\n\t        this._axesLayout = {};\r\n\r\n\t        /**\r\n\t         * Always follow axis order.\r\n\t         * @type {Array.<string>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.dimensions = parallelModel.dimensions;\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/core/BoundingRect}\r\n\t         */\r\n\t        this._rect;\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/parallel/ParallelModel}\r\n\t         */\r\n\t        this._model = parallelModel;\r\n\r\n\t        this._init(parallelModel, ecModel, api);\r\n\t    }\r\n\r\n\t    Parallel.prototype = {\r\n\r\n\t        type: 'parallel',\r\n\r\n\t        constructor: Parallel,\r\n\r\n\t        /**\r\n\t         * Initialize cartesian coordinate systems\r\n\t         * @private\r\n\t         */\r\n\t        _init: function (parallelModel, ecModel, api) {\r\n\r\n\t            var dimensions = parallelModel.dimensions;\r\n\t            var parallelAxisIndex = parallelModel.parallelAxisIndex;\r\n\r\n\t            each(dimensions, function (dim, idx) {\r\n\r\n\t                var axisIndex = parallelAxisIndex[idx];\r\n\t                var axisModel = ecModel.getComponent('parallelAxis', axisIndex);\r\n\r\n\t                var axis = this._axesMap[dim] = new ParallelAxis(\r\n\t                    dim,\r\n\t                    axisHelper.createScaleByModel(axisModel),\r\n\t                    [0, 0],\r\n\t                    axisModel.get('type'),\r\n\t                    axisIndex\r\n\t                );\r\n\r\n\t                var isCategory = axis.type === 'category';\r\n\t                axis.onBand = isCategory && axisModel.get('boundaryGap');\r\n\t                axis.inverse = axisModel.get('inverse');\r\n\r\n\t                // Inject axis into axisModel\r\n\t                axisModel.axis = axis;\r\n\r\n\t                // Inject axisModel into axis\r\n\t                axis.model = axisModel;\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Update axis scale after data processed\r\n\t         * @param  {module:echarts/model/Global} ecModel\r\n\t         * @param  {module:echarts/ExtensionAPI} api\r\n\t         */\r\n\t        update: function (ecModel, api) {\r\n\t            this._updateAxesFromSeries(this._model, ecModel);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Update properties from series\r\n\t         * @private\r\n\t         */\r\n\t        _updateAxesFromSeries: function (parallelModel, ecModel) {\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\r\n\t                if (!parallelModel.contains(seriesModel, ecModel)) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var data = seriesModel.getData();\r\n\r\n\t                each(this.dimensions, function (dim) {\r\n\t                    var axis = this._axesMap[dim];\r\n\t                    axis.scale.unionExtent(data.getDataExtent(dim));\r\n\t                    axisHelper.niceScaleExtent(axis, axis.model);\r\n\t                }, this);\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Resize the parallel coordinate system.\r\n\t         * @param {module:echarts/coord/parallel/ParallelModel} parallelModel\r\n\t         * @param {module:echarts/ExtensionAPI} api\r\n\t         */\r\n\t        resize: function (parallelModel, api) {\r\n\t            this._rect = layout.getLayoutRect(\r\n\t                parallelModel.getBoxLayoutParams(),\r\n\t                {\r\n\t                    width: api.getWidth(),\r\n\t                    height: api.getHeight()\r\n\t                }\r\n\t            );\r\n\r\n\t            this._layoutAxes(parallelModel);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:zrender/core/BoundingRect}\r\n\t         */\r\n\t        getRect: function () {\r\n\t            return this._rect;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _layoutAxes: function (parallelModel) {\r\n\t            var rect = this._rect;\r\n\t            var layout = parallelModel.get('layout');\r\n\t            var axes = this._axesMap;\r\n\t            var dimensions = this.dimensions;\r\n\r\n\t            var size = [rect.width, rect.height];\r\n\t            var sizeIdx = layout === 'horizontal' ? 0 : 1;\r\n\t            var layoutLength = size[sizeIdx];\r\n\t            var axisLength = size[1 - sizeIdx];\r\n\t            var axisExtent = [0, axisLength];\r\n\r\n\t            each(axes, function (axis) {\r\n\t                var idx = axis.inverse ? 1 : 0;\r\n\t                axis.setExtent(axisExtent[idx], axisExtent[1 - idx]);\r\n\t            });\r\n\r\n\t            var axisExpandable = parallelModel.get('axisExpandable');\r\n\t            var axisExpandWidth = parallelModel.get('axisExpandWidth');\r\n\t            var axisExpandCenter = parallelModel.get('axisExpandCenter');\r\n\t            var axisExpandCount = parallelModel.get('axisExpandCount') || 0;\r\n\t            var axisExpandWindow;\r\n\r\n\t            if (axisExpandCenter != null) {\r\n\t                // Clamp\r\n\t                var left = Math.max(0, Math.floor(axisExpandCenter - (axisExpandCount - 1) / 2));\r\n\t                var right = left + axisExpandCount - 1;\r\n\t                if (right >= dimensions.length) {\r\n\t                    right = dimensions.length - 1;\r\n\t                    left = Math.max(0, Math.floor(right - axisExpandCount + 1));\r\n\t                }\r\n\t                axisExpandWindow = [left, right];\r\n\t            }\r\n\r\n\t            var calcPos = (axisExpandable && axisExpandWindow && axisExpandWidth)\r\n\t                ? function (axisIndex, layoutLength, axisCount) {\r\n\t                    var peekIntervalCount = axisExpandWindow[1] - axisExpandWindow[0];\r\n\t                    var otherWidth = (\r\n\t                        layoutLength - axisExpandWidth * peekIntervalCount\r\n\t                    ) / (axisCount - 1 - peekIntervalCount);\r\n\r\n\t                    var position;\r\n\r\n\t                    if (axisIndex < axisExpandWindow[0]) {\r\n\t                        position = (axisIndex - 1) * otherWidth;\r\n\t                    }\r\n\t                    else if (axisIndex <= axisExpandWindow[1]) {\r\n\t                        position = axisExpandWindow[0] * otherWidth\r\n\t                            + (axisIndex - axisExpandWindow[0]) * axisExpandWidth;\r\n\t                    }\r\n\t                    else if (axisIndex === axisCount - 1) {\r\n\t                        position = layoutLength;\r\n\t                    }\r\n\t                    else {\r\n\t                        position = axisExpandWindow[0] * otherWidth\r\n\t                            + peekIntervalCount * axisExpandWidth\r\n\t                            + (axisIndex - axisExpandWindow[1]) * otherWidth;\r\n\t                    }\r\n\r\n\t                    return {\r\n\t                        position: position,\r\n\t                        axisNameAvailableWidth: (\r\n\t                            axisExpandWindow[0] < axisIndex && axisIndex < axisExpandWindow[1]\r\n\t                        ) ? axisExpandWidth : otherWidth\r\n\t                    };\r\n\t                }\r\n\t                : function (axisIndex, layoutLength, axisCount) {\r\n\t                    var step = layoutLength / (axisCount - 1);\r\n\t                    return {\r\n\t                        position: step * axisIndex,\r\n\t                        axisNameAvailableWidth: step\r\n\t                    };\r\n\t                };\r\n\r\n\t            each(dimensions, function (dim, idx) {\r\n\t                var posInfo = calcPos(idx, layoutLength, dimensions.length);\r\n\r\n\t                var positionTable = {\r\n\t                    horizontal: {\r\n\t                        x: posInfo.position,\r\n\t                        y: axisLength\r\n\t                    },\r\n\t                    vertical: {\r\n\t                        x: 0,\r\n\t                        y: posInfo.position\r\n\t                    }\r\n\t                };\r\n\t                var rotationTable = {\r\n\t                    horizontal: PI / 2,\r\n\t                    vertical: 0\r\n\t                };\r\n\r\n\t                var position = [\r\n\t                    positionTable[layout].x + rect.x,\r\n\t                    positionTable[layout].y + rect.y\r\n\t                ];\r\n\r\n\t                var rotation = rotationTable[layout];\r\n\t                var transform = matrix.create();\r\n\t                matrix.rotate(transform, transform, rotation);\r\n\t                matrix.translate(transform, transform, position);\r\n\r\n\t                // TODO\r\n\t                // tick等排布信息。\r\n\r\n\t                // TODO\r\n\t                // 根据axis order 更新 dimensions顺序。\r\n\r\n\t                this._axesLayout[dim] = {\r\n\t                    position: position,\r\n\t                    rotation: rotation,\r\n\t                    transform: transform,\r\n\t                    axisNameAvailableWidth: posInfo.axisNameAvailableWidth,\r\n\t                    tickDirection: 1,\r\n\t                    labelDirection: 1,\r\n\t                    axisExpandWindow: axisExpandWindow\r\n\t                };\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get axis by dim.\r\n\t         * @param {string} dim\r\n\t         * @return {module:echarts/coord/parallel/ParallelAxis} [description]\r\n\t         */\r\n\t        getAxis: function (dim) {\r\n\t            return this._axesMap[dim];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert a dim value of a single item of series data to Point.\r\n\t         * @param {*} value\r\n\t         * @param {string} dim\r\n\t         * @return {Array}\r\n\t         */\r\n\t        dataToPoint: function (value, dim) {\r\n\t            return this.axisCoordToPoint(\r\n\t                this._axesMap[dim].dataToCoord(value),\r\n\t                dim\r\n\t            );\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Travel data for one time, get activeState of each data item.\r\n\t         * @param {module:echarts/data/List} data\r\n\t         * @param {Functio} cb param: {string} activeState 'active' or 'inactive' or 'normal'\r\n\t         *                            {number} dataIndex\r\n\t         * @param {Object} context\r\n\t         */\r\n\t        eachActiveState: function (data, callback, context) {\r\n\t            var dimensions = this.dimensions;\r\n\t            var axesMap = this._axesMap;\r\n\t            var hasActiveSet = this.hasAxisbrushed();\r\n\r\n\t            for (var i = 0, len = data.count(); i < len; i++) {\r\n\t                var values = data.getValues(dimensions, i);\r\n\t                var activeState;\r\n\r\n\t                if (!hasActiveSet) {\r\n\t                    activeState = 'normal';\r\n\t                }\r\n\t                else {\r\n\t                    activeState = 'active';\r\n\t                    for (var j = 0, lenj = dimensions.length; j < lenj; j++) {\r\n\t                        var dimName = dimensions[j];\r\n\t                        var state = axesMap[dimName].model.getActiveState(values[j], j);\r\n\r\n\t                        if (state === 'inactive') {\r\n\t                            activeState = 'inactive';\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\r\n\t                callback.call(context, activeState, i);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Whether has any activeSet.\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        hasAxisbrushed: function () {\r\n\t            var dimensions = this.dimensions;\r\n\t            var axesMap = this._axesMap;\r\n\t            var hasActiveSet = false;\r\n\r\n\t            for (var j = 0, lenj = dimensions.length; j < lenj; j++) {\r\n\t                if (axesMap[dimensions[j]].model.getActiveState() !== 'normal') {\r\n\t                    hasActiveSet = true;\r\n\t                }\r\n\t            }\r\n\r\n\t            return hasActiveSet;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert coords of each axis to Point.\r\n\t         *  Return point. For example: [10, 20]\r\n\t         * @param {Array.<number>} coords\r\n\t         * @param {string} dim\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        axisCoordToPoint: function (coord, dim) {\r\n\t            var axisLayout = this._axesLayout[dim];\r\n\t            return graphic.applyTransform([coord, 0], axisLayout.transform);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get axis layout.\r\n\t         */\r\n\t        getAxisLayout: function (dim) {\r\n\t            return zrUtil.clone(this._axesLayout[dim]);\r\n\t        },\r\n\r\n\t        findClosestAxisDim: function (point) {\r\n\t            var axisDim;\r\n\t            var minDist = Infinity;\r\n\r\n\t            zrUtil.each(this._axesLayout, function (axisLayout, dim) {\r\n\t                var localPoint = graphic.applyTransform(point, axisLayout.transform, true);\r\n\t                var extent = this._axesMap[dim].getExtent();\r\n\r\n\t                if (localPoint[0] < extent[0] || localPoint[0] > extent[1]) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var dist = Math.abs(localPoint[1]);\r\n\t                if (dist < minDist) {\r\n\t                    minDist = dist;\r\n\t                    axisDim = dim;\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            return axisDim;\r\n\t        }\r\n\r\n\t    };\r\n\r\n\t    module.exports = Parallel;\r\n\r\n\r\n/***/ },\r\n/* 228 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Axis = __webpack_require__(123);\r\n\r\n\t    /**\r\n\t     * @constructor module:echarts/coord/parallel/ParallelAxis\r\n\t     * @extends {module:echarts/coord/Axis}\r\n\t     * @param {string} dim\r\n\t     * @param {*} scale\r\n\t     * @param {Array.<number>} coordExtent\r\n\t     * @param {string} axisType\r\n\t     */\r\n\t    var ParallelAxis = function (dim, scale, coordExtent, axisType, axisIndex) {\r\n\r\n\t        Axis.call(this, dim, scale, coordExtent);\r\n\r\n\t        /**\r\n\t         * Axis type\r\n\t         *  - 'category'\r\n\t         *  - 'value'\r\n\t         *  - 'time'\r\n\t         *  - 'log'\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.type = axisType || 'value';\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.axisIndex = axisIndex;\r\n\t    };\r\n\r\n\t    ParallelAxis.prototype = {\r\n\r\n\t        constructor: ParallelAxis,\r\n\r\n\t        /**\r\n\t         * Axis model\r\n\t         * @param {module:echarts/coord/parallel/AxisModel}\r\n\t         */\r\n\t        model: null\r\n\r\n\t    };\r\n\r\n\t    zrUtil.inherits(ParallelAxis, Axis);\r\n\r\n\t    module.exports = ParallelAxis;\r\n\r\n\r\n/***/ },\r\n/* 229 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Component = __webpack_require__(19);\r\n\r\n\t    __webpack_require__(230);\r\n\r\n\t    Component.extend({\r\n\r\n\t        type: 'parallel',\r\n\r\n\t        dependencies: ['parallelAxis'],\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/parallel/Parallel}\r\n\t         */\r\n\t        coordinateSystem: null,\r\n\r\n\t        /**\r\n\t         * Each item like: 'dim0', 'dim1', 'dim2', ...\r\n\t         * @type {Array.<string>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        dimensions: null,\r\n\r\n\t        /**\r\n\t         * Coresponding to dimensions.\r\n\t         * @type {Array.<number>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        parallelAxisIndex: null,\r\n\r\n\t        layoutMode: 'box',\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,\r\n\t            z: 0,\r\n\t            left: 80,\r\n\t            top: 60,\r\n\t            right: 80,\r\n\t            bottom: 60,\r\n\t            // width: {totalWidth} - left - right,\r\n\t            // height: {totalHeight} - top - bottom,\r\n\r\n\t            layout: 'horizontal',      // 'horizontal' or 'vertical'\r\n\r\n\t            // FIXME\r\n\t            // naming?\r\n\t            axisExpandable: false,\r\n\t            axisExpandCenter: null,\r\n\t            axisExpandCount: 0,\r\n\t            axisExpandWidth: 50,      // FIXME '10%' ?\r\n\r\n\t            parallelAxisDefault: null\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        init: function () {\r\n\t            Component.prototype.init.apply(this, arguments);\r\n\r\n\t            this.mergeOption({});\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        mergeOption: function (newOption) {\r\n\t            var thisOption = this.option;\r\n\r\n\t            newOption && zrUtil.merge(thisOption, newOption, true);\r\n\r\n\t            this._initDimensions();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Whether series or axis is in this coordinate system.\r\n\t         * @param {module:echarts/model/Series|module:echarts/coord/parallel/AxisModel} model\r\n\t         * @param {module:echarts/model/Global} ecModel\r\n\t         */\r\n\t        contains: function (model, ecModel) {\r\n\t            var parallelIndex = model.get('parallelIndex');\r\n\t            return parallelIndex != null\r\n\t                && ecModel.getComponent('parallel', parallelIndex) === this;\r\n\t        },\r\n\r\n\t        setAxisExpand: function (opt) {\r\n\t            zrUtil.each(\r\n\t                ['axisExpandable', 'axisExpandCenter', 'axisExpandCount', 'axisExpandWidth'],\r\n\t                function (name) {\r\n\t                    if (opt.hasOwnProperty(name)) {\r\n\t                        this.option[name] = opt[name];\r\n\t                    }\r\n\t                },\r\n\t                this\r\n\t            );\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _initDimensions: function () {\r\n\t            var dimensions = this.dimensions = [];\r\n\t            var parallelAxisIndex = this.parallelAxisIndex = [];\r\n\r\n\t            var axisModels = zrUtil.filter(this.dependentModels.parallelAxis, function (axisModel) {\r\n\t                // Can not use this.contains here, because\r\n\t                // initialization has not been completed yet.\r\n\t                return axisModel.get('parallelIndex') === this.componentIndex;\r\n\t            });\r\n\r\n\t            zrUtil.each(axisModels, function (axisModel) {\r\n\t                dimensions.push('dim' + axisModel.get('dim'));\r\n\t                parallelAxisIndex.push(axisModel.componentIndex);\r\n\t            });\r\n\t        }\r\n\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 230 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var ComponentModel = __webpack_require__(19);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var makeStyleMapper = __webpack_require__(15);\r\n\t    var axisModelCreator = __webpack_require__(127);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\r\n\t    var AxisModel = ComponentModel.extend({\r\n\r\n\t        type: 'baseParallelAxis',\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/parallel/Axis}\r\n\t         */\r\n\t        axis: null,\r\n\r\n\t        /**\r\n\t         * @type {Array.<Array.<number>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        activeIntervals: [],\r\n\r\n\t        /**\r\n\t         * @return {Object}\r\n\t         */\r\n\t        getAreaSelectStyle: function () {\r\n\t            return makeStyleMapper(\r\n\t                [\r\n\t                    ['fill', 'color'],\r\n\t                    ['lineWidth', 'borderWidth'],\r\n\t                    ['stroke', 'borderColor'],\r\n\t                    ['width', 'width'],\r\n\t                    ['opacity', 'opacity']\r\n\t                ]\r\n\t            ).call(this.getModel('areaSelectStyle'));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * The code of this feature is put on AxisModel but not ParallelAxis,\r\n\t         * because axisModel can be alive after echarts updating but instance of\r\n\t         * ParallelAxis having been disposed. this._activeInterval should be kept\r\n\t         * when action dispatched (i.e. legend click).\r\n\t         *\r\n\t         * @param {Array.<Array<number>>} intervals interval.length === 0\r\n\t         *                                          means set all active.\r\n\t         * @public\r\n\t         */\r\n\t        setActiveIntervals: function (intervals) {\r\n\t            var activeIntervals = this.activeIntervals = zrUtil.clone(intervals);\r\n\r\n\t            // Normalize\r\n\t            if (activeIntervals) {\r\n\t                for (var i = activeIntervals.length - 1; i >= 0; i--) {\r\n\t                    numberUtil.asc(activeIntervals[i]);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {number|string} [value] When attempting to detect 'no activeIntervals set',\r\n\t         *                         value can not be input.\r\n\t         * @return {string} 'normal': no activeIntervals set,\r\n\t         *                  'active',\r\n\t         *                  'inactive'.\r\n\t         * @public\r\n\t         */\r\n\t        getActiveState: function (value) {\r\n\t            var activeIntervals = this.activeIntervals;\r\n\r\n\t            if (!activeIntervals.length) {\r\n\t                return 'normal';\r\n\t            }\r\n\r\n\t            if (value == null) {\r\n\t                return 'inactive';\r\n\t            }\r\n\r\n\t            for (var i = 0, len = activeIntervals.length; i < len; i++) {\r\n\t                if (activeIntervals[i][0] <= value && value <= activeIntervals[i][1]) {\r\n\t                    return 'active';\r\n\t                }\r\n\t            }\r\n\t            return 'inactive';\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    var defaultOption = {\r\n\r\n\t        type: 'value',\r\n\r\n\t        /**\r\n\t         * @type {Array.<number>}\r\n\t         */\r\n\t        dim: null, // 0, 1, 2, ...\r\n\r\n\t        // parallelIndex: null,\r\n\r\n\t        areaSelectStyle: {\r\n\t            width: 20,\r\n\t            borderWidth: 1,\r\n\t            borderColor: 'rgba(160,197,232)',\r\n\t            color: 'rgba(160,197,232)',\r\n\t            opacity: 0.3\r\n\t        },\r\n\r\n\t        realtime: true, // Whether realtime update view when select.\r\n\r\n\t        z: 10\r\n\t    };\r\n\r\n\t    zrUtil.merge(AxisModel.prototype, __webpack_require__(129));\r\n\r\n\t    function getAxisType(axisName, option) {\r\n\t        return option.type || (option.data ? 'category' : 'value');\r\n\t    }\r\n\r\n\t    axisModelCreator('parallel', AxisModel, getAxisType, defaultOption);\r\n\r\n\t    module.exports = AxisModel;\r\n\r\n\r\n/***/ },\r\n/* 231 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(226);\r\n\t    __webpack_require__(232);\r\n\t    __webpack_require__(233);\r\n\r\n\r\n\r\n/***/ },\r\n/* 232 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    /**\r\n\t     * @payload\r\n\t     * @property {string} parallelAxisId\r\n\t     * @property {Array.<Array.<number>>} intervals\r\n\t     */\r\n\t    var actionInfo = {\r\n\t        type: 'axisAreaSelect',\r\n\t        event: 'axisAreaSelected',\r\n\t        update: 'updateVisual'\r\n\t    };\r\n\t    echarts.registerAction(actionInfo, function (payload, ecModel) {\r\n\t        ecModel.eachComponent(\r\n\t            {mainType: 'parallelAxis', query: payload},\r\n\t            function (parallelAxisModel) {\r\n\t                parallelAxisModel.axis.model.setActiveIntervals(payload.intervals);\r\n\t            }\r\n\t        );\r\n\t    });\r\n\r\n\t    /**\r\n\t     * @payload\r\n\t     */\r\n\t    echarts.registerAction('parallelAxisExpand', function (payload, ecModel) {\r\n\t        ecModel.eachComponent(\r\n\t            {mainType: 'parallel', query: payload},\r\n\t            function (parallelModel) {\r\n\t                parallelModel.setAxisExpand(payload);\r\n\t            }\r\n\t        );\r\n\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 233 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var AxisBuilder = __webpack_require__(133);\r\n\t    var BrushController = __webpack_require__(234);\r\n\t    var graphic = __webpack_require__(43);\r\n\r\n\t    var elementList = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];\r\n\r\n\t    var AxisView = __webpack_require__(1).extendComponentView({\r\n\r\n\t        type: 'parallelAxis',\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        init: function (ecModel, api) {\r\n\t            AxisView.superApply(this, 'init', arguments);\r\n\r\n\t            /**\r\n\t             * @type {module:echarts/component/helper/BrushController}\r\n\t             */\r\n\t            (this._brushController = new BrushController(api.getZr()))\r\n\t                .on('brush', zrUtil.bind(this._onBrush, this));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        render: function (axisModel, ecModel, api, payload) {\r\n\t            if (fromAxisAreaSelect(axisModel, ecModel, payload)) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            this.axisModel = axisModel;\r\n\t            this.api = api;\r\n\r\n\t            this.group.removeAll();\r\n\r\n\t            var oldAxisGroup = this._axisGroup;\r\n\t            this._axisGroup = new graphic.Group();\r\n\t            this.group.add(this._axisGroup);\r\n\r\n\t            if (!axisModel.get('show')) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var coordSys = ecModel.getComponent(\r\n\t                'parallel', axisModel.get('parallelIndex')\r\n\t            ).coordinateSystem;\r\n\r\n\t            var areaSelectStyle = axisModel.getAreaSelectStyle();\r\n\t            var areaWidth = areaSelectStyle.width;\r\n\r\n\t            var dim = axisModel.axis.dim;\r\n\t            var axisLayout = coordSys.getAxisLayout(dim);\r\n\r\n\t            // Fetch from axisModel by default.\r\n\t            var axisLabelShow;\r\n\t            var axisIndex = zrUtil.indexOf(coordSys.dimensions, dim);\r\n\r\n\t            var axisExpandWindow = axisLayout.axisExpandWindow;\r\n\t            if (axisExpandWindow\r\n\t                && (axisIndex <= axisExpandWindow[0] || axisIndex >= axisExpandWindow[1])\r\n\t            ) {\r\n\t                axisLabelShow = false;\r\n\t            }\r\n\r\n\t            var builderOpt = zrUtil.extend(\r\n\t                {\r\n\t                    axisLabelShow: axisLabelShow,\r\n\t                    strokeContainThreshold: areaWidth\r\n\t                },\r\n\t                axisLayout\r\n\t            );\r\n\r\n\t            var axisBuilder = new AxisBuilder(axisModel, builderOpt);\r\n\r\n\t            zrUtil.each(elementList, axisBuilder.add, axisBuilder);\r\n\r\n\t            this._axisGroup.add(axisBuilder.getGroup());\r\n\r\n\t            this._refreshBrushController(builderOpt, areaSelectStyle, axisModel, areaWidth);\r\n\r\n\t            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\r\n\t        },\r\n\r\n\t        _refreshBrushController: function (builderOpt, areaSelectStyle, axisModel, areaWidth) {\r\n\t            // After filtering, axis may change, select area needs to be update.\r\n\t            var axis = axisModel.axis;\r\n\t            var coverInfoList = zrUtil.map(axisModel.activeIntervals, function (interval) {\r\n\t                return {\r\n\t                    brushType: 'lineX',\r\n\t                    panelId: 'pl',\r\n\t                    range: [\r\n\t                        axis.dataToCoord(interval[0], true),\r\n\t                        axis.dataToCoord(interval[1], true)\r\n\t                    ]\r\n\t                };\r\n\t            });\r\n\r\n\t            var extent = axis.getExtent();\r\n\t            var extentLen = extent[1] - extent[0];\r\n\t            var extra = Math.min(30, Math.abs(extentLen) * 0.1); // Arbitrary value.\r\n\r\n\t            // width/height might be negative, which will be\r\n\t            // normalized in BoundingRect.\r\n\t            var rect = graphic.BoundingRect.create({\r\n\t                x: extent[0],\r\n\t                y: -areaWidth / 2,\r\n\t                width: extentLen,\r\n\t                height: areaWidth\r\n\t            });\r\n\t            rect.x -= extra;\r\n\t            rect.width += 2 * extra;\r\n\r\n\t            this._brushController\r\n\t                .mount({\r\n\t                    enableGlobalPan: true,\r\n\t                    rotation: builderOpt.rotation,\r\n\t                    position: builderOpt.position\r\n\t                })\r\n\t                .setPanels([{\r\n\t                    panelId: 'pl',\r\n\t                    rect: rect\r\n\t                }])\r\n\t                .enableBrush({\r\n\t                    brushType: 'lineX',\r\n\t                    brushStyle: areaSelectStyle,\r\n\t                    removeOnClick: true\r\n\t                })\r\n\t                .updateCovers(coverInfoList);\r\n\t        },\r\n\r\n\t        _onBrush: function (coverInfoList, opt) {\r\n\t            // Do not cache these object, because the mey be changed.\r\n\t            var axisModel = this.axisModel;\r\n\t            var axis = axisModel.axis;\r\n\r\n\t            var intervals = zrUtil.map(coverInfoList, function (coverInfo) {\r\n\t                return [\r\n\t                    axis.coordToData(coverInfo.range[0], true),\r\n\t                    axis.coordToData(coverInfo.range[1], true)\r\n\t                ];\r\n\t            });\r\n\r\n\t            // If realtime is true, action is not dispatched on drag end, because\r\n\t            // the drag end emits the same params with the last drag move event,\r\n\t            // and may have some delay when using touch pad.\r\n\t            if (!axisModel.option.realtime === opt.isEnd || opt.removeOnClick) { // jshint ignore:line\r\n\t                this.api.dispatchAction({\r\n\t                    type: 'axisAreaSelect',\r\n\t                    parallelAxisId: axisModel.id,\r\n\t                    intervals: intervals\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        dispose: function () {\r\n\t            this._brushController.dispose();\r\n\t        }\r\n\t    });\r\n\r\n\t    function fromAxisAreaSelect(axisModel, ecModel, payload) {\r\n\t        return payload\r\n\t            && payload.type === 'axisAreaSelect'\r\n\t            && ecModel.findComponents(\r\n\t                {mainType: 'parallelAxis', query: payload}\r\n\t            )[0] === axisModel;\r\n\t    }\r\n\r\n\t    module.exports = AxisView;\r\n\r\n\r\n/***/ },\r\n/* 234 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Box selection tool.\r\n\t *\r\n\t * @module echarts/component/helper/BrushController\r\n\t */\r\n\r\n\r\n\r\n\t    var Eventful = __webpack_require__(33);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var interactionMutex = __webpack_require__(176);\r\n\t    var DataDiffer = __webpack_require__(98);\r\n\r\n\t    var curry = zrUtil.curry;\r\n\t    var each = zrUtil.each;\r\n\t    var map = zrUtil.map;\r\n\t    var mathMin = Math.min;\r\n\t    var mathMax = Math.max;\r\n\t    var mathPow = Math.pow;\r\n\r\n\t    var COVER_Z = 10000;\r\n\t    var UNSELECT_THRESHOLD = 6;\r\n\t    var MIN_RESIZE_LINE_WIDTH = 6;\r\n\t    var MUTEX_RESOURCE_KEY = 'globalPan';\r\n\r\n\t    var DIRECTION_MAP = {\r\n\t        w: [0, 0],\r\n\t        e: [0, 1],\r\n\t        n: [1, 0],\r\n\t        s: [1, 1]\r\n\t    };\r\n\t    var CURSOR_MAP = {\r\n\t        w: 'ew',\r\n\t        e: 'ew',\r\n\t        n: 'ns',\r\n\t        s: 'ns',\r\n\t        ne: 'nesw',\r\n\t        sw: 'nesw',\r\n\t        nw: 'nwse',\r\n\t        se: 'nwse'\r\n\t    };\r\n\t    var DEFAULT_BRUSH_OPT = {\r\n\t        brushStyle: {\r\n\t            lineWidth: 2,\r\n\t            stroke: 'rgba(0,0,0,0.3)',\r\n\t            fill: 'rgba(0,0,0,0.1)'\r\n\t        },\r\n\t        transformable: true,\r\n\t        brushMode: 'single',\r\n\t        removeOnClick: false\r\n\t    };\r\n\r\n\t    var baseUID = 0;\r\n\r\n\t    /**\r\n\t     * @alias module:echarts/component/helper/BrushController\r\n\t     * @constructor\r\n\t     * @mixin {module:zrender/mixin/Eventful}\r\n\t     * @event module:echarts/component/helper/BrushController#brush\r\n\t     *        params:\r\n\t     *            areas: Array.<Array>, coord relates to container group,\r\n\t     *                                    If no container specified, to global.\r\n\t     *            opt {\r\n\t     *                isEnd: boolean,\r\n\t     *                removeOnClick: boolean\r\n\t     *            }\r\n\t     *\r\n\t     * @param {module:zrender/zrender~ZRender} zr\r\n\t     */\r\n\t    function BrushController(zr) {\r\n\r\n\t        if (true) {\r\n\t            zrUtil.assert(zr);\r\n\t        }\r\n\r\n\t        Eventful.call(this);\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/zrender~ZRender}\r\n\t         * @private\r\n\t         */\r\n\t        this._zr = zr;\r\n\r\n\t        /**\r\n\t         * @type {module:zrender/container/Group}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.group = new graphic.Group();\r\n\r\n\t        /**\r\n\t         * Only for drawing (after enabledBrush).\r\n\t         * @private\r\n\t         * @type {string}\r\n\t         */\r\n\t        this._brushType;\r\n\r\n\t        /**\r\n\t         * Only for drawing (after enabledBrush).\r\n\t         * @private\r\n\t         * @type {Object}\r\n\t         */\r\n\t        this._brushOption;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Object}\r\n\t         */\r\n\t        this._panels;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Array.<nubmer>}\r\n\t         */\r\n\t        this._track = [];\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        this._dragging;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Array}\r\n\t         */\r\n\t        this._covers = [];\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {moudule:zrender/container/Group}\r\n\t         */\r\n\t        this._creatingCover;\r\n\r\n\t        /**\r\n\t         * true means global panel\r\n\t         * @private\r\n\t         * @type {module:zrender/container/Group|boolean}\r\n\t         */\r\n\t        this._creatingPanel;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        this._enableGlobalPan;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        if (true) {\r\n\t            this._mounted;\r\n\t        }\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {string}\r\n\t         */\r\n\t        this._uid = 'brushController_' + baseUID++;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Object}\r\n\t         */\r\n\t        this._handlers = {};\r\n\t        each(mouseHandlers, function (handler, eventName) {\r\n\t            this._handlers[eventName] = zrUtil.bind(handler, this);\r\n\t        }, this);\r\n\t    }\r\n\r\n\t    BrushController.prototype = {\r\n\r\n\t        constructor: BrushController,\r\n\r\n\t        /**\r\n\t         * If set to null/undefined/false, select disabled.\r\n\t         * @param {Object} brushOption\r\n\t         * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false\r\n\t         *                          If pass false/null/undefined, disable brush.\r\n\t         * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'\r\n\t         * @param {boolean} [brushOption.transformable=true]\r\n\t         * @param {boolean} [brushOption.removeOnClick=false]\r\n\t         * @param {Object} [brushOption.brushStyle]\r\n\t         * @param {number} [brushOption.brushStyle.width]\r\n\t         * @param {number} [brushOption.brushStyle.lineWidth]\r\n\t         * @param {string} [brushOption.brushStyle.stroke]\r\n\t         * @param {string} [brushOption.brushStyle.fill]\r\n\t         */\r\n\t        enableBrush: function (brushOption) {\r\n\t            if (true) {\r\n\t                zrUtil.assert(this._mounted);\r\n\t            }\r\n\r\n\t            this._brushType && doDisableBrush(this);\r\n\t            brushOption.brushType && doEnableBrush(this, brushOption);\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Array.<Object>} panelOpts If not pass, it is global brush.\r\n\t         *        Each items: {panelId, rect}\r\n\t         */\r\n\t        setPanels: function (panelOpts) {\r\n\t            var oldPanels = this._panels || {};\r\n\t            var newPanels = this._panels = panelOpts && panelOpts.length && {};\r\n\t            var thisGroup = this.group;\r\n\r\n\t            newPanels && each(panelOpts, function (panelOpt) {\r\n\t                var panelId = panelOpt.panelId;\r\n\t                var panel = oldPanels[panelId];\r\n\t                if (!panel) {\r\n\t                    panel = new graphic.Rect({\r\n\t                        silent: true,\r\n\t                        invisible: true\r\n\t                    });\r\n\t                    thisGroup.add(panel);\r\n\t                }\r\n\r\n\t                var rect = panelOpt.rect;\r\n\t                // Using BoundingRect to normalize negative width/height.\r\n\t                if (!(rect instanceof BoundingRect)) {\r\n\t                    rect = BoundingRect.create(rect);\r\n\t                }\r\n\r\n\t                panel.attr('shape', rect.plain());\r\n\t                panel.__brushPanelId = panelId;\r\n\t                newPanels[panelId] = panel;\r\n\t                oldPanels[panelId] = null;\r\n\t            });\r\n\r\n\t            each(oldPanels, function (panel) {\r\n\t                panel && thisGroup.remove(panel);\r\n\t            });\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Object} [opt]\r\n\t         * @return {boolean} [opt.enableGlobalPan=false]\r\n\t         * @return {boolean} [opt.position=[0, 0]]\r\n\t         * @return {boolean} [opt.rotation=0]\r\n\t         * @return {boolean} [opt.scale=[1, 1]]\r\n\t         */\r\n\t        mount: function (opt) {\r\n\t            opt = opt || {};\r\n\r\n\t            if (true) {\r\n\t                this._mounted = true; // should be at first.\r\n\t            }\r\n\r\n\t            this._enableGlobalPan = opt.enableGlobalPan;\r\n\r\n\t            var thisGroup = this.group;\r\n\t            this._zr.add(thisGroup);\r\n\r\n\t            thisGroup.attr({\r\n\t                position: opt.position || [0, 0],\r\n\t                rotation: opt.rotation || 0,\r\n\t                scale: opt.scale || [1, 1]\r\n\t            });\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        eachCover: function (cb, context) {\r\n\t            each(this._covers, cb, context);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Update covers.\r\n\t         * @param {Array.<Object>} brushOptionList Like:\r\n\t         *        [\r\n\t         *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},\r\n\t         *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},\r\n\t         *            ...\r\n\t         *        ]\r\n\t         *        `brushType` is required in each cover info.\r\n\t         *        `id` is not mandatory.\r\n\t         *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.\r\n\t         *        If brushOptionList is null/undefined, all covers removed.\r\n\t         */\r\n\t        updateCovers: function (brushOptionList) {\r\n\t            if (true) {\r\n\t                zrUtil.assert(this._mounted);\r\n\t            }\r\n\r\n\t            brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {\r\n\t                return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\r\n\t            });\r\n\r\n\t            var tmpIdPrefix = '\\0-brush-index-';\r\n\t            var oldCovers = this._covers;\r\n\t            var newCovers = this._covers = [];\r\n\t            var controller = this;\r\n\t            var creatingCover = this._creatingCover;\r\n\r\n\t            (new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey))\r\n\t                .add(addOrUpdate)\r\n\t                .update(addOrUpdate)\r\n\t                .remove(remove)\r\n\t                .execute();\r\n\r\n\t            return this;\r\n\r\n\t            function getKey(brushOption, index) {\r\n\t                return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index)\r\n\t                    + '-' + brushOption.brushType;\r\n\t            }\r\n\r\n\t            function oldGetKey(cover, index) {\r\n\t                return getKey(cover.__brushOption, index);\r\n\t            }\r\n\r\n\t            function addOrUpdate(newIndex, oldIndex) {\r\n\t                var newBrushOption = brushOptionList[newIndex];\r\n\t                // Consider setOption in event listener of brushSelect,\r\n\t                // where updating cover when creating should be forbiden.\r\n\t                if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {\r\n\t                    newCovers[newIndex] = oldCovers[oldIndex];\r\n\t                }\r\n\t                else {\r\n\t                    var cover = newCovers[newIndex] = oldIndex != null\r\n\t                        ? (\r\n\t                            oldCovers[oldIndex].__brushOption = newBrushOption,\r\n\t                            oldCovers[oldIndex]\r\n\t                        )\r\n\t                        : endCreating(controller, createCover(controller, newBrushOption));\r\n\t                    updateCoverAfterCreation(controller, cover);\r\n\t                }\r\n\t            }\r\n\r\n\t            function remove(oldIndex) {\r\n\t                if (oldCovers[oldIndex] !== creatingCover) {\r\n\t                    controller.group.remove(oldCovers[oldIndex]);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        unmount: function () {\r\n\t            this.enableBrush(false);\r\n\r\n\t            // container may 'removeAll' outside.\r\n\t            clearCovers(this);\r\n\t            this._zr.remove(this.group);\r\n\r\n\t            if (true) {\r\n\t                this._mounted = false; // should be at last.\r\n\t            }\r\n\r\n\t            return this;\r\n\t        },\r\n\r\n\t        dispose: function () {\r\n\t            this.unmount();\r\n\t            this.off();\r\n\t        }\r\n\t    };\r\n\r\n\t    zrUtil.mixin(BrushController, Eventful);\r\n\r\n\r\n\t    function doEnableBrush(controller, brushOption) {\r\n\t        var zr = controller._zr;\r\n\r\n\t        // Consider roam, which takes globalPan too.\r\n\t        if (!controller._enableGlobalPan) {\r\n\t            interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);\r\n\t        }\r\n\r\n\t        each(controller._handlers, function (handler, eventName) {\r\n\t            zr.on(eventName, handler);\r\n\t        });\r\n\r\n\t        controller._brushType = brushOption.brushType;\r\n\t        controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\r\n\t    }\r\n\r\n\t    function doDisableBrush(controller) {\r\n\t        var zr = controller._zr;\r\n\r\n\t        interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);\r\n\r\n\t        each(controller._handlers, function (handler, eventName) {\r\n\t            zr.off(eventName, handler);\r\n\t        });\r\n\r\n\t        controller._brushType = controller._brushOption = null;\r\n\t    }\r\n\r\n\t    function createCover(controller, brushOption) {\r\n\t        var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);\r\n\t        updateZ(cover);\r\n\t        cover.__brushOption = brushOption;\r\n\t        controller.group.add(cover);\r\n\t        return cover;\r\n\t    }\r\n\r\n\t    function endCreating(controller, creatingCover) {\r\n\t        var coverRenderer = getCoverRenderer(creatingCover);\r\n\t        if (coverRenderer.endCreating) {\r\n\t            coverRenderer.endCreating(controller, creatingCover);\r\n\t            updateZ(creatingCover);\r\n\t        }\r\n\t        return creatingCover;\r\n\t    }\r\n\r\n\t    function updateCoverShape(controller, cover) {\r\n\t        var brushOption = cover.__brushOption;\r\n\t        getCoverRenderer(cover).updateCoverShape(\r\n\t            controller, cover, brushOption.range, brushOption\r\n\t        );\r\n\t    }\r\n\r\n\t    function updateZ(group) {\r\n\t        group.traverse(function (el) {\r\n\t            el.z = COVER_Z;\r\n\t            el.z2 = COVER_Z; // Consider in given container.\r\n\t        });\r\n\t    }\r\n\r\n\t    function updateCoverAfterCreation(controller, cover) {\r\n\t        getCoverRenderer(cover).updateCommon(controller, cover);\r\n\t        updateCoverShape(controller, cover);\r\n\t    }\r\n\r\n\t    function getCoverRenderer(cover) {\r\n\t        return coverRenderers[cover.__brushOption.brushType];\r\n\t    }\r\n\r\n\t    function getPanelByPoint(controller, x, y) {\r\n\t        var panels = controller._panels;\r\n\t        if (!panels) {\r\n\t            return true; // Global panel\r\n\t        }\r\n\t        var panel;\r\n\t        each(panels, function (pn) {\r\n\t            pn.contain(x, y) && (panel = pn);\r\n\t        });\r\n\t        return panel;\r\n\t    }\r\n\r\n\t    function getPanelByCover(controller, cover) {\r\n\t        var panels = controller._panels;\r\n\t        if (!panels) {\r\n\t            return true; // Global panel\r\n\t        }\r\n\t        var panelId = cover.__brushOption.panelId;\r\n\t        // User may give cover without coord sys info,\r\n\t        // which is then treated as global panel.\r\n\t        return panelId != null ? panels[panelId] : true;\r\n\t    }\r\n\r\n\t    function clearCovers(controller) {\r\n\t        var covers = controller._covers;\r\n\t        var originalLength = covers.length;\r\n\t        each(covers, function (cover) {\r\n\t            controller.group.remove(cover);\r\n\t        }, controller);\r\n\t        covers.length = 0;\r\n\r\n\t        return !!originalLength;\r\n\t    }\r\n\r\n\t    function trigger(controller, opt) {\r\n\t        var areas = map(controller._covers, function (cover) {\r\n\t            var brushOption = cover.__brushOption;\r\n\t            var range = zrUtil.clone(brushOption.range);\r\n\r\n\t            return {\r\n\t                brushType: brushOption.brushType,\r\n\t                panelId: brushOption.panelId,\r\n\t                range: range\r\n\t            };\r\n\t        });\r\n\r\n\t        controller.trigger('brush', areas, {\r\n\t            isEnd: !!opt.isEnd,\r\n\t            removeOnClick: !!opt.removeOnClick\r\n\t        });\r\n\t    }\r\n\r\n\t    function shouldShowCover(controller) {\r\n\t        var track = controller._track;\r\n\r\n\t        if (!track.length) {\r\n\t            return false;\r\n\t        }\r\n\r\n\t        var p2 = track[track.length - 1];\r\n\t        var p1 = track[0];\r\n\t        var dx = p2[0] - p1[0];\r\n\t        var dy = p2[1] - p1[1];\r\n\t        var dist = mathPow(dx * dx + dy * dy, 0.5);\r\n\r\n\t        return dist > UNSELECT_THRESHOLD;\r\n\t    }\r\n\r\n\t    function getTrackEnds(track) {\r\n\t        var tail = track.length - 1;\r\n\t        tail < 0 && (tail = 0);\r\n\t        return [track[0], track[tail]];\r\n\t    }\r\n\r\n\t    function createBaseRectCover(doDrift, controller, brushOption, edgeNames) {\r\n\t        var cover = new graphic.Group();\r\n\r\n\t        cover.add(new graphic.Rect({\r\n\t            name: 'main',\r\n\t            style: makeStyle(brushOption),\r\n\t            silent: true,\r\n\t            draggable: true,\r\n\t            cursor: 'move',\r\n\t            drift: curry(doDrift, controller, cover, 'nswe'),\r\n\t            ondragend: curry(trigger, controller, {isEnd: true})\r\n\t        }));\r\n\r\n\t        each(\r\n\t            edgeNames,\r\n\t            function (name) {\r\n\t                cover.add(new graphic.Rect({\r\n\t                    name: name,\r\n\t                    style: {opacity: 0},\r\n\t                    draggable: true,\r\n\t                    silent: true,\r\n\t                    invisible: true,\r\n\t                    drift: curry(doDrift, controller, cover, name),\r\n\t                    ondragend: curry(trigger, controller, {isEnd: true})\r\n\t                }));\r\n\t            }\r\n\t        );\r\n\r\n\t        return cover;\r\n\t    }\r\n\r\n\t    function updateBaseRect(controller, cover, localRange, brushOption) {\r\n\t        var lineWidth = brushOption.brushStyle.lineWidth || 0;\r\n\t        var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);\r\n\t        var x = localRange[0][0];\r\n\t        var y = localRange[1][0];\r\n\t        var xa = x - lineWidth / 2;\r\n\t        var ya = y - lineWidth / 2;\r\n\t        var x2 = localRange[0][1];\r\n\t        var y2 = localRange[1][1];\r\n\t        var x2a = x2 - handleSize + lineWidth / 2;\r\n\t        var y2a = y2 - handleSize + lineWidth / 2;\r\n\t        var width = x2 - x;\r\n\t        var height = y2 - y;\r\n\t        var widtha = width + lineWidth;\r\n\t        var heighta = height + lineWidth;\r\n\r\n\t        updateRectShape(controller, cover, 'main', x, y, width, height);\r\n\r\n\t        if (brushOption.transformable) {\r\n\t            updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);\r\n\t            updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);\r\n\t            updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);\r\n\t            updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);\r\n\r\n\t            updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);\r\n\t            updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);\r\n\t            updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);\r\n\t            updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);\r\n\t        }\r\n\t    }\r\n\r\n\t    function updateCommon(controller, cover) {\r\n\t        var brushOption = cover.__brushOption;\r\n\t        var transformable = brushOption.transformable;\r\n\r\n\t        var mainEl = cover.childAt(0);\r\n\t        mainEl.useStyle(makeStyle(brushOption));\r\n\t        mainEl.attr({\r\n\t            silent: !transformable,\r\n\t            cursor: transformable ? 'move' : 'default'\r\n\t        });\r\n\r\n\t        each(\r\n\t            ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'],\r\n\t            function (name) {\r\n\t                var el = cover.childOfName(name);\r\n\t                var globalDir = getGlobalDirection(controller, name);\r\n\r\n\t                el && el.attr({\r\n\t                    silent: !transformable,\r\n\t                    invisible: !transformable,\r\n\t                    cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null\r\n\t                });\r\n\t            }\r\n\t        );\r\n\t    }\r\n\r\n\t    function updateRectShape(controller, cover, name, x, y, w, h) {\r\n\t        var el = cover.childOfName(name);\r\n\t        el && el.setShape(pointsToRect(\r\n\t            clipByPanel(controller, cover, [[x, y], [x + w, y + h]])\r\n\t        ));\r\n\t    }\r\n\r\n\t    function makeStyle(brushOption) {\r\n\t        return zrUtil.defaults({strokeNoScale: true}, brushOption.brushStyle);\r\n\t    }\r\n\r\n\t    function formatRectRange(x, y, x2, y2) {\r\n\t        var min = [mathMin(x, x2), mathMin(y, y2)];\r\n\t        var max = [mathMax(x, x2), mathMax(y, y2)];\r\n\r\n\t        return [\r\n\t            [min[0], max[0]], // x range\r\n\t            [min[1], max[1]] // y range\r\n\t        ];\r\n\t    }\r\n\r\n\t    function getTransform(controller) {\r\n\t        return graphic.getTransform(controller.group);\r\n\t    }\r\n\r\n\t    function getGlobalDirection(controller, localDirection) {\r\n\t        if (localDirection.length > 1) {\r\n\t            localDirection = localDirection.split('');\r\n\t            var globalDir = [\r\n\t                getGlobalDirection(controller, localDirection[0]),\r\n\t                getGlobalDirection(controller, localDirection[1])\r\n\t            ];\r\n\t            (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();\r\n\t            return globalDir.join('');\r\n\t        }\r\n\t        else {\r\n\t            var map = {w: 'left', e: 'right', n: 'top', s: 'bottom'};\r\n\t            var inverseMap = {left: 'w', right: 'e', top: 'n', bottom: 's'};\r\n\t            var globalDir = graphic.transformDirection(\r\n\t                map[localDirection], getTransform(controller)\r\n\t            );\r\n\t            return inverseMap[globalDir];\r\n\t        }\r\n\t    }\r\n\r\n\t    function driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {\r\n\t        var brushOption = cover.__brushOption;\r\n\t        var rectRange = toRectRange(brushOption.range);\r\n\t        var localDelta = toLocalDelta(controller, dx, dy);\r\n\r\n\t        each(name.split(''), function (namePart) {\r\n\t            var ind = DIRECTION_MAP[namePart];\r\n\t            rectRange[ind[0]][ind[1]] += localDelta[ind[0]];\r\n\t        });\r\n\r\n\t        brushOption.range = fromRectRange(formatRectRange(\r\n\t            rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]\r\n\t        ));\r\n\r\n\t        updateCoverAfterCreation(controller, cover);\r\n\t        trigger(controller, {isEnd: false});\r\n\t    }\r\n\r\n\t    function driftPolygon(controller, cover, dx, dy, e) {\r\n\t        var range = cover.__brushOption.range;\r\n\t        var localDelta = toLocalDelta(controller, dx, dy);\r\n\r\n\t        each(range, function (point) {\r\n\t            point[0] += localDelta[0];\r\n\t            point[1] += localDelta[1];\r\n\t        });\r\n\r\n\t        updateCoverAfterCreation(controller, cover);\r\n\t        trigger(controller, {isEnd: false});\r\n\t    }\r\n\r\n\t    function toLocalDelta(controller, dx, dy) {\r\n\t        var thisGroup = controller.group;\r\n\t        var localD = thisGroup.transformCoordToLocal(dx, dy);\r\n\t        var localZero = thisGroup.transformCoordToLocal(0, 0);\r\n\r\n\t        return [localD[0] - localZero[0], localD[1] - localZero[1]];\r\n\t    }\r\n\r\n\t    function clipByPanel(controller, cover, data) {\r\n\t        var panel = getPanelByCover(controller, cover);\r\n\t        if (panel === true) { // Global panel\r\n\t            return zrUtil.clone(data);\r\n\t        }\r\n\r\n\t        var panelRect = panel.getBoundingRect();\r\n\r\n\t        return zrUtil.map(data, function (point) {\r\n\t            var x = point[0];\r\n\t            x = mathMax(x, panelRect.x);\r\n\t            x = mathMin(x, panelRect.x + panelRect.width);\r\n\t            var y = point[1];\r\n\t            y = mathMax(y, panelRect.y);\r\n\t            y = mathMin(y, panelRect.y + panelRect.height);\r\n\t            return [x, y];\r\n\t        });\r\n\t    }\r\n\r\n\t    function pointsToRect(points) {\r\n\t        var xmin = mathMin(points[0][0], points[1][0]);\r\n\t        var ymin = mathMin(points[0][1], points[1][1]);\r\n\t        var xmax = mathMax(points[0][0], points[1][0]);\r\n\t        var ymax = mathMax(points[0][1], points[1][1]);\r\n\r\n\t        return {\r\n\t            x: xmin,\r\n\t            y: ymin,\r\n\t            width: xmax - xmin,\r\n\t            height: ymax - ymin\r\n\t        };\r\n\t    }\r\n\r\n\t    function resetCursor(controller, e) {\r\n\t        var x = e.offsetX;\r\n\t        var y = e.offsetY;\r\n\t        var zr = controller._zr;\r\n\r\n\t        if (controller._brushType) { // If active\r\n\t            var panels = controller._panels;\r\n\t            var covers = controller._covers;\r\n\t            var inCover;\r\n\r\n\t            for (var i = 0; i < covers.length; i++) {\r\n\t                if (coverRenderers[covers[i].__brushOption.brushType].contain(covers[i], x, y)) {\r\n\t                    inCover = true;\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (!inCover) {\r\n\t                if (panels) { // Brush on panels\r\n\t                    each(panels, function (panel) {\r\n\t                        panel.contain(x, y) && zr.setCursorStyle('crosshair');\r\n\t                    });\r\n\t                }\r\n\t                else { // Global brush\r\n\t                    zr.setCursorStyle('crosshair');\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    function preventDefault(e) {\r\n\t        var rawE = e.event;\r\n\t        rawE.preventDefault && rawE.preventDefault();\r\n\t    }\r\n\r\n\t    function mainShapeContain(cover, x, y) {\r\n\t        return cover.childOfName('main').contain(x, y);\r\n\t    }\r\n\r\n\t    function updateCoverByMouse(controller, e, isEnd) {\r\n\t        var x = e.offsetX;\r\n\t        var y = e.offsetY;\r\n\t        var creatingCover = controller._creatingCover;\r\n\t        var panel = controller._creatingPanel;\r\n\t        var thisBrushOption = controller._brushOption;\r\n\t        var eventParams;\r\n\r\n\t        controller._track.push(controller.group.transformCoordToLocal(x, y));\r\n\r\n\t        if (shouldShowCover(controller) || creatingCover) {\r\n\r\n\t            if (panel && !creatingCover) {\r\n\t                thisBrushOption.brushMode === 'single' && clearCovers(controller);\r\n\t                var brushOption = zrUtil.clone(thisBrushOption);\r\n\t                brushOption.panelId = panel === true ? null : panel.__brushPanelId;\r\n\t                creatingCover = controller._creatingCover = createCover(controller, brushOption);\r\n\t                controller._covers.push(creatingCover);\r\n\t            }\r\n\r\n\t            if (creatingCover) {\r\n\t                var coverRenderer = coverRenderers[controller._brushType];\r\n\t                var coverBrushOption = creatingCover.__brushOption;\r\n\r\n\t                coverBrushOption.range = coverRenderer.getCreatingRange(\r\n\t                    clipByPanel(controller, creatingCover, controller._track)\r\n\t                );\r\n\r\n\t                if (isEnd) {\r\n\t                    endCreating(controller, creatingCover);\r\n\t                    coverRenderer.updateCommon(controller, creatingCover);\r\n\t                }\r\n\r\n\t                updateCoverShape(controller, creatingCover);\r\n\r\n\t                eventParams = {isEnd: isEnd};\r\n\t            }\r\n\t        }\r\n\t        else if (\r\n\t            isEnd\r\n\t            && thisBrushOption.brushMode === 'single'\r\n\t            && thisBrushOption.removeOnClick\r\n\t        ) {\r\n\t            // Help user to remove covers easily, only by a tiny drag, in 'single' mode.\r\n\t            // But a single click do not clear covers, because user may have casual\r\n\t            // clicks (for example, click on other component and do not expect covers\r\n\t            // disappear).\r\n\t            // Only some cover removed, trigger action, but not every click trigger action.\r\n\t            if (getPanelByPoint(controller, x, y) && clearCovers(controller)) {\r\n\t                eventParams = {isEnd: isEnd, removeOnClick: true};\r\n\t            }\r\n\t        }\r\n\r\n\t        return eventParams;\r\n\t    }\r\n\r\n\t    var mouseHandlers = {\r\n\r\n\t        mousedown: function (e) {\r\n\t            if (this._dragging) {\r\n\t                // In case some browser do not support globalOut,\r\n\t                // and release mose out side the browser.\r\n\t                handleDragEnd.call(this, e);\r\n\t            }\r\n\t            else if (!e.target || !e.target.draggable) {\r\n\r\n\t                preventDefault(e);\r\n\r\n\t                var x = e.offsetX;\r\n\t                var y = e.offsetY;\r\n\r\n\t                this._creatingCover = null;\r\n\t                var panel = this._creatingPanel = getPanelByPoint(this, x, y);\r\n\r\n\t                if (panel) {\r\n\t                    this._dragging = true;\r\n\t                    this._track = [this.group.transformCoordToLocal(x, y)];\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        mousemove: function (e) {\r\n\t            // set Cursor\r\n\t            resetCursor(this, e);\r\n\r\n\t            if (this._dragging) {\r\n\r\n\t                preventDefault(e);\r\n\r\n\t                var eventParams = updateCoverByMouse(this, e, false);\r\n\r\n\t                eventParams && trigger(this, eventParams);\r\n\t            }\r\n\t        },\r\n\r\n\t        mouseup: handleDragEnd //,\r\n\r\n\t        // FIXME\r\n\t        // in tooltip, globalout should not be triggered.\r\n\t        // globalout: handleDragEnd\r\n\t    };\r\n\r\n\t    function handleDragEnd(e) {\r\n\t        if (this._dragging) {\r\n\r\n\t            preventDefault(e);\r\n\r\n\t            var eventParams = updateCoverByMouse(this, e, true);\r\n\r\n\t            this._dragging = false;\r\n\t            this._track = [];\r\n\t            this._creatingCover = null;\r\n\r\n\t            // trigger event shoule be at final, after procedure will be nested.\r\n\t            eventParams && trigger(this, eventParams);\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * key: brushType\r\n\t     * @type {Object}\r\n\t     */\r\n\t    var coverRenderers = {\r\n\r\n\t        lineX: getLineRenderer(0),\r\n\r\n\t        lineY: getLineRenderer(1),\r\n\r\n\t        rect: {\r\n\t            createCover: function (controller, brushOption) {\r\n\t                return createBaseRectCover(\r\n\t                    curry(\r\n\t                        driftRect,\r\n\t                        function (range) {\r\n\t                            return range;\r\n\t                        },\r\n\t                        function (range) {\r\n\t                            return range;\r\n\t                        }\r\n\t                    ),\r\n\t                    controller,\r\n\t                    brushOption,\r\n\t                    ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']\r\n\t                );\r\n\t            },\r\n\t            getCreatingRange: function (localTrack) {\r\n\t                var ends = getTrackEnds(localTrack);\r\n\t                return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);\r\n\t            },\r\n\t            updateCoverShape: function (controller, cover, localRange, brushOption) {\r\n\t                updateBaseRect(controller, cover, localRange, brushOption);\r\n\t            },\r\n\t            updateCommon: updateCommon,\r\n\t            contain: mainShapeContain\r\n\t        },\r\n\r\n\t        polygon: {\r\n\t            createCover: function (controller, brushOption) {\r\n\t                var cover = new graphic.Group();\r\n\r\n\t                // Do not use graphic.Polygon because graphic.Polyline do not close the\r\n\t                // border of the shape when drawing, which is a better experience for user.\r\n\t                cover.add(new graphic.Polyline({\r\n\t                    name: 'main',\r\n\t                    style: makeStyle(brushOption),\r\n\t                    silent: true\r\n\t                }));\r\n\r\n\t                return cover;\r\n\t            },\r\n\t            getCreatingRange: function (localTrack) {\r\n\t                return localTrack;\r\n\t            },\r\n\t            endCreating: function (controller, cover) {\r\n\t                cover.remove(cover.childAt(0));\r\n\t                // Use graphic.Polygon close the shape.\r\n\t                cover.add(new graphic.Polygon({\r\n\t                    name: 'main',\r\n\t                    draggable: true,\r\n\t                    drift: curry(driftPolygon, controller, cover),\r\n\t                    ondragend: curry(trigger, controller, {isEnd: true})\r\n\t                }));\r\n\t            },\r\n\t            updateCoverShape: function (controller, cover, localRange, brushOption) {\r\n\t                cover.childAt(0).setShape({\r\n\t                    points: clipByPanel(controller, cover, localRange)\r\n\t                });\r\n\t            },\r\n\t            updateCommon: updateCommon,\r\n\t            contain: mainShapeContain\r\n\t        }\r\n\t    };\r\n\r\n\t    function getLineRenderer(xyIndex) {\r\n\t        return {\r\n\t            createCover: function (controller, brushOption) {\r\n\t                return createBaseRectCover(\r\n\t                    curry(\r\n\t                        driftRect,\r\n\t                        function (range) {\r\n\t                            var rectRange = [range, [0, 100]];\r\n\t                            xyIndex && rectRange.reverse();\r\n\t                            return rectRange;\r\n\t                        },\r\n\t                        function (rectRange) {\r\n\t                            return rectRange[xyIndex];\r\n\t                        }\r\n\t                    ),\r\n\t                    controller,\r\n\t                    brushOption,\r\n\t                    [['w', 'e'], ['n', 's']][xyIndex]\r\n\t                );\r\n\t            },\r\n\t            getCreatingRange: function (localTrack) {\r\n\t                var ends = getTrackEnds(localTrack);\r\n\t                var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);\r\n\t                var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);\r\n\r\n\t                return [min, max];\r\n\t            },\r\n\t            updateCoverShape: function (controller, cover, localRange, brushOption) {\r\n\t                var brushWidth = brushOption.brushStyle.width;\r\n\t                var otherExtent;\r\n\t                // If brushWidth not specified, fit the panel.\r\n\t                if (brushWidth == null) {\r\n\t                    var panel = getPanelByCover(controller, cover);\r\n\t                    var base = 0;\r\n\t                    if (panel !== true) {\r\n\t                        var rect = panel.getBoundingRect();\r\n\t                        brushWidth = xyIndex ? rect.width : rect.height;\r\n\t                        base = xyIndex ? rect.x : rect.y;\r\n\t                    }\r\n\t                    // FIXME\r\n\t                    // do not support global panel yet.\r\n\t                    otherExtent = [base, base + (brushWidth || 0)];\r\n\t                }\r\n\t                else {\r\n\t                    otherExtent = [-brushWidth / 2, brushWidth / 2];\r\n\t                }\r\n\t                var rectRange = [localRange, otherExtent];\r\n\t                xyIndex && rectRange.reverse();\r\n\r\n\t                updateBaseRect(controller, cover, rectRange, brushOption);\r\n\t            },\r\n\t            updateCommon: updateCommon,\r\n\t            contain: mainShapeContain\r\n\t        };\r\n\t    }\r\n\r\n\t    module.exports = BrushController;\r\n\r\n\r\n/***/ },\r\n/* 235 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\r\n\t    module.exports = function (option) {\r\n\t        createParallelIfNeeded(option);\r\n\t        mergeAxisOptionFromParallel(option);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Create a parallel coordinate if not exists.\r\n\t     * @inner\r\n\t     */\r\n\t    function createParallelIfNeeded(option) {\r\n\t        if (option.parallel) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var hasParallelSeries = false;\r\n\r\n\t        zrUtil.each(option.series, function (seriesOpt) {\r\n\t            if (seriesOpt && seriesOpt.type === 'parallel') {\r\n\t                hasParallelSeries = true;\r\n\t            }\r\n\t        });\r\n\r\n\t        if (hasParallelSeries) {\r\n\t            option.parallel = [{}];\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Merge aixs definition from parallel option (if exists) to axis option.\r\n\t     * @inner\r\n\t     */\r\n\t    function mergeAxisOptionFromParallel(option) {\r\n\t        var axes = modelUtil.normalizeToArray(option.parallelAxis);\r\n\r\n\t        zrUtil.each(axes, function (axisOption) {\r\n\t            if (!zrUtil.isObject(axisOption)) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var parallelIndex = axisOption.parallelIndex || 0;\r\n\t            var parallelOption = modelUtil.normalizeToArray(option.parallel)[parallelIndex];\r\n\r\n\t            if (parallelOption && parallelOption.parallelAxisDefault) {\r\n\t                zrUtil.merge(axisOption, parallelOption.parallelAxisDefault, false);\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 236 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var List = __webpack_require__(97);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\t    var completeDimensions = __webpack_require__(102);\r\n\r\n\t    module.exports = SeriesModel.extend({\r\n\r\n\t        type: 'series.parallel',\r\n\r\n\t        dependencies: ['parallel'],\r\n\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            var parallelModel = ecModel.getComponent(\r\n\t                'parallel', this.get('parallelIndex')\r\n\t            );\r\n\t            var parallelAxisIndices = parallelModel.parallelAxisIndex;\r\n\r\n\t            var rawData = option.data;\r\n\t            var modelDims = parallelModel.dimensions;\r\n\r\n\t            var dataDims = generateDataDims(modelDims, rawData);\r\n\r\n\t            var dataDimsInfo = zrUtil.map(dataDims, function (dim, dimIndex) {\r\n\r\n\t                var modelDimsIndex = zrUtil.indexOf(modelDims, dim);\r\n\t                var axisModel = modelDimsIndex >= 0 && ecModel.getComponent(\r\n\t                    'parallelAxis', parallelAxisIndices[modelDimsIndex]\r\n\t                );\r\n\r\n\t                if (axisModel && axisModel.get('type') === 'category') {\r\n\t                    translateCategoryValue(axisModel, dim, rawData);\r\n\t                    return {name: dim, type: 'ordinal'};\r\n\t                }\r\n\t                else if (modelDimsIndex < 0) {\r\n\t                    return completeDimensions.guessOrdinal(rawData, dimIndex)\r\n\t                        ? {name: dim, type: 'ordinal'}\r\n\t                        : dim;\r\n\t                }\r\n\t                else {\r\n\t                    return dim;\r\n\t                }\r\n\t            });\r\n\r\n\t            var list = new List(dataDimsInfo, this);\r\n\t            list.initData(rawData);\r\n\r\n\t            // Anication is forbiden in progressive data mode.\r\n\t            if (this.option.progressive) {\r\n\t                this.option.animation = false;\r\n\t            }\r\n\r\n\t            return list;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * User can get data raw indices on 'axisAreaSelected' event received.\r\n\t         *\r\n\t         * @public\r\n\t         * @param {string} activeState 'active' or 'inactive' or 'normal'\r\n\t         * @return {Array.<number>} Raw indices\r\n\t         */\r\n\t        getRawIndicesByActiveState: function (activeState) {\r\n\t            var coordSys = this.coordinateSystem;\r\n\t            var data = this.getData();\r\n\t            var indices = [];\r\n\r\n\t            coordSys.eachActiveState(data, function (theActiveState, dataIndex) {\r\n\t                if (activeState === theActiveState) {\r\n\t                    indices.push(data.getRawIndex(dataIndex));\r\n\t                }\r\n\t            });\r\n\r\n\t            return indices;\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,                  // 一级层叠\r\n\t            z: 2,                       // 二级层叠\r\n\r\n\t            coordinateSystem: 'parallel',\r\n\t            parallelIndex: 0,\r\n\r\n\t            label: {\r\n\t                normal: {\r\n\t                    show: false\r\n\t                },\r\n\t                emphasis: {\r\n\t                    show: false\r\n\t                }\r\n\t            },\r\n\r\n\t            inactiveOpacity: 0.05,\r\n\t            activeOpacity: 1,\r\n\r\n\t            lineStyle: {\r\n\t                normal: {\r\n\t                    width: 1,\r\n\t                    opacity: 0.45,\r\n\t                    type: 'solid'\r\n\t                }\r\n\t            },\r\n\t            progressive: false, // 100\r\n\t            smooth: false,\r\n\r\n\t            animationEasing: 'linear'\r\n\t        }\r\n\t    });\r\n\r\n\t    function translateCategoryValue(axisModel, dim, rawData) {\r\n\t        var axisData = axisModel.get('data');\r\n\t        var numberDim = convertDimNameToNumber(dim);\r\n\r\n\t        if (axisData && axisData.length) {\r\n\t            zrUtil.each(rawData, function (dataItem) {\r\n\t                if (!dataItem) {\r\n\t                    return;\r\n\t                }\r\n\t                // FIXME\r\n\t                // time consuming, should use hash?\r\n\t                var index = zrUtil.indexOf(axisData, dataItem[numberDim]);\r\n\t                dataItem[numberDim] = index >= 0 ? index : NaN;\r\n\t            });\r\n\t        }\r\n\t        // FIXME\r\n\t        // 如果没有设置axis data, 应自动算出，或者提示。\r\n\t    }\r\n\r\n\t    function convertDimNameToNumber(dimName) {\r\n\t        return +dimName.replace('dim', '');\r\n\t    }\r\n\r\n\t    function generateDataDims(modelDims, rawData) {\r\n\t        // parallelModel.dimension should not be regarded as data\r\n\t        // dimensions. Consider dimensions = ['dim4', 'dim2', 'dim6'];\r\n\r\n\t        // We detect max dim by parallelModel.dimensions and fist\r\n\t        // item in rawData arbitrarily.\r\n\t        var maxDimNum = 0;\r\n\t        zrUtil.each(modelDims, function (dimName) {\r\n\t            var numberDim = convertDimNameToNumber(dimName);\r\n\t            numberDim > maxDimNum && (maxDimNum = numberDim);\r\n\t        });\r\n\r\n\t        var firstItem = rawData[0];\r\n\t        if (firstItem && firstItem.length - 1 > maxDimNum) {\r\n\t            maxDimNum = firstItem.length - 1;\r\n\t        }\r\n\r\n\t        var dataDims = [];\r\n\t        for (var i = 0; i <= maxDimNum; i++) {\r\n\t            dataDims.push('dim' + i);\r\n\t        }\r\n\r\n\t        return dataDims;\r\n\t    }\r\n\r\n\r\n/***/ },\r\n/* 237 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var SMOOTH = 0.3;\r\n\r\n\t    var ParallelView = __webpack_require__(42).extend({\r\n\r\n\t        type: 'parallel',\r\n\r\n\t        init: function () {\r\n\r\n\t            /**\r\n\t             * @type {module:zrender/container/Group}\r\n\t             * @private\r\n\t             */\r\n\t            this._dataGroup = new graphic.Group();\r\n\r\n\t            this.group.add(this._dataGroup);\r\n\r\n\t            /**\r\n\t             * @type {module:echarts/data/List}\r\n\t             */\r\n\t            this._data;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        render: function (seriesModel, ecModel, api, payload) {\r\n\t            this._renderForNormal(seriesModel);\r\n\t            // this[\r\n\t            //     seriesModel.option.progressive\r\n\t            //         ? '_renderForProgressive'\r\n\t            //         : '_renderForNormal'\r\n\t            // ](seriesModel);\r\n\t        },\r\n\r\n\t        dispose: function () {},\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _renderForNormal: function (seriesModel) {\r\n\t            var dataGroup = this._dataGroup;\r\n\t            var data = seriesModel.getData();\r\n\t            var oldData = this._data;\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            var dimensions = coordSys.dimensions;\r\n\t            var option = seriesModel.option;\r\n\t            var smooth = option.smooth ? SMOOTH : null;\r\n\r\n\t            // Consider switch between progressive and not.\r\n\t            // oldData && oldData.__plProgressive && dataGroup.removeAll();\r\n\r\n\t            data.diff(oldData)\r\n\t                .add(add)\r\n\t                .update(update)\r\n\t                .remove(remove)\r\n\t                .execute();\r\n\r\n\t            // Update style\r\n\t            updateElCommon(data, smooth);\r\n\r\n\t            // First create\r\n\t            if (!this._data) {\r\n\t                var clipPath = createGridClipShape(\r\n\t                    coordSys, seriesModel, function () {\r\n\t                        // Callback will be invoked immediately if there is no animation\r\n\t                        setTimeout(function () {\r\n\t                            dataGroup.removeClipPath();\r\n\t                        });\r\n\t                    }\r\n\t                );\r\n\t                dataGroup.setClipPath(clipPath);\r\n\t            }\r\n\r\n\t            this._data = data;\r\n\r\n\t            function add(newDataIndex) {\r\n\t                addEl(data, dataGroup, newDataIndex, dimensions, coordSys, null, smooth);\r\n\t            }\r\n\r\n\t            function update(newDataIndex, oldDataIndex) {\r\n\t                var line = oldData.getItemGraphicEl(oldDataIndex);\r\n\t                var points = createLinePoints(data, newDataIndex, dimensions, coordSys);\r\n\t                data.setItemGraphicEl(newDataIndex, line);\r\n\t                graphic.updateProps(line, {shape: {points: points}}, seriesModel, newDataIndex);\r\n\t            }\r\n\r\n\t            function remove(oldDataIndex) {\r\n\t                var line = oldData.getItemGraphicEl(oldDataIndex);\r\n\t                dataGroup.remove(line);\r\n\t            }\r\n\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        // _renderForProgressive: function (seriesModel) {\r\n\t        //     var dataGroup = this._dataGroup;\r\n\t        //     var data = seriesModel.getData();\r\n\t        //     var oldData = this._data;\r\n\t        //     var coordSys = seriesModel.coordinateSystem;\r\n\t        //     var dimensions = coordSys.dimensions;\r\n\t        //     var option = seriesModel.option;\r\n\t        //     var progressive = option.progressive;\r\n\t        //     var smooth = option.smooth ? SMOOTH : null;\r\n\r\n\t        //     // In progressive animation is disabled, so use simple data diff,\r\n\t        //     // which effects performance less.\r\n\t        //     // (Typically performance for data with length 7000+ like:\r\n\t        //     // simpleDiff: 60ms, addEl: 184ms,\r\n\t        //     // in RMBP 2.4GHz intel i7, OSX 10.9 chrome 50.0.2661.102 (64-bit))\r\n\t        //     if (simpleDiff(oldData, data, dimensions)) {\r\n\t        //         dataGroup.removeAll();\r\n\t        //         data.each(function (dataIndex) {\r\n\t        //             addEl(data, dataGroup, dataIndex, dimensions, coordSys);\r\n\t        //         });\r\n\t        //     }\r\n\r\n\t        //     updateElCommon(data, progressive, smooth);\r\n\r\n\t        //     // Consider switch between progressive and not.\r\n\t        //     data.__plProgressive = true;\r\n\t        //     this._data = data;\r\n\t        // },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        remove: function () {\r\n\t            this._dataGroup && this._dataGroup.removeAll();\r\n\t            this._data = null;\r\n\t        }\r\n\t    });\r\n\r\n\t    function createGridClipShape(coordSys, seriesModel, cb) {\r\n\t        var parallelModel = coordSys.model;\r\n\t        var rect = coordSys.getRect();\r\n\t        var rectEl = new graphic.Rect({\r\n\t            shape: {\r\n\t                x: rect.x,\r\n\t                y: rect.y,\r\n\t                width: rect.width,\r\n\t                height: rect.height\r\n\t            }\r\n\t        });\r\n\r\n\t        var dim = parallelModel.get('layout') === 'horizontal' ? 'width' : 'height';\r\n\t        rectEl.setShape(dim, 0);\r\n\t        graphic.initProps(rectEl, {\r\n\t            shape: {\r\n\t                width: rect.width,\r\n\t                height: rect.height\r\n\t            }\r\n\t        }, seriesModel, cb);\r\n\t        return rectEl;\r\n\t    }\r\n\r\n\t    function createLinePoints(data, dataIndex, dimensions, coordSys) {\r\n\t        var points = [];\r\n\t        for (var i = 0; i < dimensions.length; i++) {\r\n\t            var dimName = dimensions[i];\r\n\t            var value = data.get(dimName, dataIndex);\r\n\t            if (!isEmptyValue(value, coordSys.getAxis(dimName).type)) {\r\n\t                points.push(coordSys.dataToPoint(value, dimName));\r\n\t            }\r\n\t        }\r\n\t        return points;\r\n\t    }\r\n\r\n\t    function addEl(data, dataGroup, dataIndex, dimensions, coordSys) {\r\n\t        var points = createLinePoints(data, dataIndex, dimensions, coordSys);\r\n\t        var line = new graphic.Polyline({\r\n\t            shape: {points: points},\r\n\t            silent: true,\r\n\t            z2: 10\r\n\t        });\r\n\t        dataGroup.add(line);\r\n\t        data.setItemGraphicEl(dataIndex, line);\r\n\t    }\r\n\r\n\t    function updateElCommon(data, smooth) {\r\n\t        var seriesStyleModel = data.hostModel.getModel('lineStyle.normal');\r\n\t        var lineStyle = seriesStyleModel.getLineStyle();\r\n\t        data.eachItemGraphicEl(function (line, dataIndex) {\r\n\t            if (data.hasItemOption) {\r\n\t                var itemModel = data.getItemModel(dataIndex);\r\n\t                var lineStyleModel = itemModel.getModel('lineStyle.normal', seriesStyleModel);\r\n\t                lineStyle = lineStyleModel.getLineStyle();\r\n\t            }\r\n\r\n\t            line.useStyle(zrUtil.extend(\r\n\t                lineStyle,\r\n\t                {\r\n\t                    fill: null,\r\n\t                    stroke: data.getItemVisual(dataIndex, 'color'),\r\n\t                    opacity: data.getItemVisual(dataIndex, 'opacity')\r\n\t                }\r\n\t            ));\r\n\t            line.shape.smooth = smooth;\r\n\t        });\r\n\t    }\r\n\r\n\t    // function simpleDiff(oldData, newData, dimensions) {\r\n\t    //     var oldLen;\r\n\t    //     if (!oldData\r\n\t    //         || !oldData.__plProgressive\r\n\t    //         || (oldLen = oldData.count()) !== newData.count()\r\n\t    //     ) {\r\n\t    //         return true;\r\n\t    //     }\r\n\r\n\t    //     var dimLen = dimensions.length;\r\n\t    //     for (var i = 0; i < oldLen; i++) {\r\n\t    //         for (var j = 0; j < dimLen; j++) {\r\n\t    //             if (oldData.get(dimensions[j], i) !== newData.get(dimensions[j], i)) {\r\n\t    //                 return true;\r\n\t    //             }\r\n\t    //         }\r\n\t    //     }\r\n\r\n\t    //     return false;\r\n\t    // }\r\n\r\n\t    // FIXME\r\n\t    // 公用方法?\r\n\t    function isEmptyValue(val, axisType) {\r\n\t        return axisType === 'category'\r\n\t            ? val == null\r\n\t            : (val == null || isNaN(val)); // axisType === 'value'\r\n\t    }\r\n\r\n\t    module.exports = ParallelView;\r\n\r\n\r\n/***/ },\r\n/* 238 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    module.exports = function (ecModel) {\r\n\r\n\t        ecModel.eachSeriesByType('parallel', function (seriesModel) {\r\n\r\n\t            var itemStyleModel = seriesModel.getModel('itemStyle.normal');\r\n\t            var lineStyleModel = seriesModel.getModel('lineStyle.normal');\r\n\t            var globalColors = ecModel.get('color');\r\n\r\n\t            var color = lineStyleModel.get('color')\r\n\t                || itemStyleModel.get('color')\r\n\t                || globalColors[seriesModel.seriesIndex % globalColors.length];\r\n\t            var inactiveOpacity = seriesModel.get('inactiveOpacity');\r\n\t            var activeOpacity = seriesModel.get('activeOpacity');\r\n\t            var lineStyle = seriesModel.getModel('lineStyle.normal').getLineStyle();\r\n\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            var data = seriesModel.getData();\r\n\r\n\t            var opacityMap = {\r\n\t                normal: lineStyle.opacity,\r\n\t                active: activeOpacity,\r\n\t                inactive: inactiveOpacity\r\n\t            };\r\n\r\n\t            coordSys.eachActiveState(data, function (activeState, dataIndex) {\r\n\t                data.setItemVisual(dataIndex, 'opacity', opacityMap[activeState]);\r\n\t            });\r\n\r\n\t            data.setVisual('color', color);\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 239 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    __webpack_require__(240);\r\n\t    __webpack_require__(241);\r\n\t    echarts.registerLayout(__webpack_require__(242));\r\n\t    echarts.registerVisual(__webpack_require__(244));\r\n\r\n\r\n/***/ },\r\n/* 240 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Get initial data and define sankey view's series model\r\n\t * @author Deqing Li(annong035@gmail.com)\r\n\t */\r\n\r\n\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\t    var createGraphFromNodeEdge = __webpack_require__(197);\r\n\r\n\t    var SankeySeries = SeriesModel.extend({\r\n\r\n\t        type: 'series.sankey',\r\n\r\n\t        layoutInfo: null,\r\n\r\n\t        /**\r\n\t         * Init a graph data structure from data in option series\r\n\t         *\r\n\t         * @param  {Object} option  the object used to config echarts view\r\n\t         * @return {module:echarts/data/List} storage initial data\r\n\t         */\r\n\t        getInitialData: function (option) {\r\n\t            var links = option.edges || option.links;\r\n\t            var nodes = option.data || option.nodes;\r\n\t            if (nodes && links) {\r\n\t                var graph = createGraphFromNodeEdge(nodes, links, this, true);\r\n\t                return graph.data;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Return the graphic data structure\r\n\t         *\r\n\t         * @return {module:echarts/data/Graph} graphic data structure\r\n\t         */\r\n\t        getGraph: function () {\r\n\t            return this.getData().graph;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get edge data of graphic data structure\r\n\t         *\r\n\t         * @return {module:echarts/data/List} data structure of list\r\n\t         */\r\n\t        getEdgeData: function () {\r\n\t            return this.getGraph().edgeData;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        formatTooltip: function (dataIndex, multipleSeries, dataType) {\r\n\t            // dataType === 'node' or empty do not show tooltip by default\r\n\t            if (dataType === 'edge') {\r\n\t                var params = this.getDataParams(dataIndex, dataType);\r\n\t                var rawDataOpt = params.data;\r\n\t                var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;\r\n\t                if (params.value) {\r\n\t                    html += ' : ' + params.value;\r\n\t                }\r\n\t                return html;\r\n\t            }\r\n\r\n\t            return SankeySeries.superCall(this, 'formatTooltip', dataIndex, multipleSeries);\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,\r\n\t            z: 2,\r\n\r\n\t            coordinateSystem: 'view',\r\n\r\n\t            layout: null,\r\n\r\n\t            // the position of the whole view\r\n\t            left: '5%',\r\n\t            top: '5%',\r\n\t            right: '20%',\r\n\t            bottom: '5%',\r\n\r\n\t            // the dx of the node\r\n\t            nodeWidth: 20,\r\n\r\n\t            // the vertical distance between two nodes\r\n\t            nodeGap: 8,\r\n\r\n\t            // the number of iterations to change the position of the node\r\n\t            layoutIterations: 32,\r\n\r\n\t            label: {\r\n\t                normal: {\r\n\t                    show: true,\r\n\t                    position: 'right',\r\n\t                    textStyle: {\r\n\t                        color: '#000',\r\n\t                        fontSize: 12\r\n\t                    }\r\n\t                },\r\n\t                emphasis: {\r\n\t                    show: true\r\n\t                }\r\n\t            },\r\n\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    borderWidth: 1,\r\n\t                    borderColor: '#333'\r\n\t                }\r\n\t            },\r\n\r\n\t            lineStyle: {\r\n\t                normal: {\r\n\t                    color: '#314656',\r\n\t                    opacity: 0.2,\r\n\t                    curveness: 0.5\r\n\t                },\r\n\t                emphasis: {\r\n\t                    opacity: 0.6\r\n\t                }\r\n\t            },\r\n\r\n\t            animationEasing: 'linear',\r\n\r\n\t            animationDuration: 1000\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    module.exports = SankeySeries;\r\n\r\n\r\n\r\n/***/ },\r\n/* 241 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file  The file used to draw sankey view\r\n\t * @author  Deqing Li(annong035@gmail.com)\r\n\t */\r\n\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var SankeyShape = graphic.extendShape({\r\n\t        shape: {\r\n\t            x1: 0, y1: 0,\r\n\t            x2: 0, y2: 0,\r\n\t            cpx1: 0, cpy1: 0,\r\n\t            cpx2: 0, cpy2: 0,\r\n\r\n\t            extent: 0\r\n\t        },\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\t            var halfExtent = shape.extent / 2;\r\n\t            ctx.moveTo(shape.x1, shape.y1 - halfExtent);\r\n\t            ctx.bezierCurveTo(\r\n\t                shape.cpx1, shape.cpy1 - halfExtent,\r\n\t                shape.cpx2, shape.cpy2 - halfExtent,\r\n\t                shape.x2, shape.y2 - halfExtent\r\n\t            );\r\n\t            ctx.lineTo(shape.x2, shape.y2 + halfExtent);\r\n\t            ctx.bezierCurveTo(\r\n\t                shape.cpx2, shape.cpy2 + halfExtent,\r\n\t                shape.cpx1, shape.cpy1 + halfExtent,\r\n\t                shape.x1, shape.y1 + halfExtent\r\n\t            );\r\n\t            ctx.closePath();\r\n\t        }\r\n\t    });\r\n\r\n\t    module.exports = __webpack_require__(1).extendChartView({\r\n\r\n\t        type: 'sankey',\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {module:echarts/chart/sankey/SankeySeries}\r\n\t         */\r\n\t        _model: null,\r\n\r\n\t        render: function (seriesModel, ecModel, api) {\r\n\t            var graph = seriesModel.getGraph();\r\n\t            var group = this.group;\r\n\t            var layoutInfo = seriesModel.layoutInfo;\r\n\t            var nodeData = seriesModel.getData();\r\n\t            var edgeData = seriesModel.getData('edge');\r\n\r\n\t            this._model = seriesModel;\r\n\r\n\t            group.removeAll();\r\n\r\n\t            group.position = [layoutInfo.x, layoutInfo.y];\r\n\r\n\t            // generate a bezire Curve for each edge\r\n\t            graph.eachEdge(function (edge) {\r\n\t                var curve = new SankeyShape();\r\n\r\n\t                curve.dataIndex = edge.dataIndex;\r\n\t                curve.seriesIndex = seriesModel.seriesIndex;\r\n\t                curve.dataType = 'edge';\r\n\r\n\t                var lineStyleModel = edge.getModel('lineStyle.normal');\r\n\t                var curvature = lineStyleModel.get('curveness');\r\n\t                var n1Layout = edge.node1.getLayout();\r\n\t                var n2Layout = edge.node2.getLayout();\r\n\t                var edgeLayout = edge.getLayout();\r\n\r\n\t                curve.shape.extent = Math.max(1, edgeLayout.dy);\r\n\r\n\t                var x1 = n1Layout.x + n1Layout.dx;\r\n\t                var y1 = n1Layout.y + edgeLayout.sy + edgeLayout.dy / 2;\r\n\t                var x2 = n2Layout.x;\r\n\t                var y2 = n2Layout.y + edgeLayout.ty + edgeLayout.dy / 2;\r\n\t                var cpx1 = x1 * (1 - curvature) + x2 * curvature;\r\n\t                var cpy1 = y1;\r\n\t                var cpx2 = x1 * curvature + x2 * (1 - curvature);\r\n\t                var cpy2 = y2;\r\n\r\n\t                curve.setShape({\r\n\t                    x1: x1,\r\n\t                    y1: y1,\r\n\t                    x2: x2,\r\n\t                    y2: y2,\r\n\t                    cpx1: cpx1,\r\n\t                    cpy1: cpy1,\r\n\t                    cpx2: cpx2,\r\n\t                    cpy2: cpy2\r\n\t                });\r\n\r\n\t                curve.setStyle(lineStyleModel.getItemStyle());\r\n\t                // Special color, use source node color or target node color\r\n\t                switch (curve.style.fill) {\r\n\t                    case 'source':\r\n\t                        curve.style.fill = edge.node1.getVisual('color');\r\n\t                        break;\r\n\t                    case 'target':\r\n\t                        curve.style.fill = edge.node2.getVisual('color');\r\n\t                        break;\r\n\t                }\r\n\r\n\t                graphic.setHoverStyle(curve, edge.getModel('lineStyle.emphasis').getItemStyle());\r\n\r\n\t                group.add(curve);\r\n\r\n\t                edgeData.setItemGraphicEl(edge.dataIndex, curve);\r\n\t            });\r\n\r\n\t            // generate a rect  for each node\r\n\t            graph.eachNode(function (node) {\r\n\t                var layout = node.getLayout();\r\n\t                var itemModel = node.getModel();\r\n\t                var labelModel = itemModel.getModel('label.normal');\r\n\t                var textStyleModel = labelModel.getModel('textStyle');\r\n\t                var labelHoverModel = itemModel.getModel('label.emphasis');\r\n\t                var textStyleHoverModel = labelHoverModel.getModel('textStyle');\r\n\r\n\t                var rect = new graphic.Rect({\r\n\t                    shape: {\r\n\t                        x: layout.x,\r\n\t                        y: layout.y,\r\n\t                        width: node.getLayout().dx,\r\n\t                        height: node.getLayout().dy\r\n\t                    },\r\n\t                    style: {\r\n\t                        // Get formatted label in label.normal option\r\n\t                        //  Use node id if it is not specified\r\n\t                        text: labelModel.get('show')\r\n\t                            ? seriesModel.getFormattedLabel(node.dataIndex, 'normal') || node.id\r\n\t                            // Use empty string to hide the label\r\n\t                            : '',\r\n\t                        textFont: textStyleModel.getFont(),\r\n\t                        textFill: textStyleModel.getTextColor(),\r\n\t                        textPosition: labelModel.get('position')\r\n\t                    }\r\n\t                });\r\n\r\n\t                rect.setStyle(zrUtil.defaults(\r\n\t                    {\r\n\t                        fill: node.getVisual('color')\r\n\t                    },\r\n\t                    itemModel.getModel('itemStyle.normal').getItemStyle()\r\n\t                ));\r\n\r\n\t                graphic.setHoverStyle(rect, zrUtil.extend(\r\n\t                    node.getModel('itemStyle.emphasis'),\r\n\t                    {\r\n\t                        text: labelHoverModel.get('show')\r\n\t                            ? seriesModel.getFormattedLabel(node.dataIndex, 'emphasis') || node.id\r\n\t                            : '',\r\n\t                        textFont: textStyleHoverModel.getFont(),\r\n\t                        textFill: textStyleHoverModel.getTextColor(),\r\n\t                        textPosition: labelHoverModel.get('position')\r\n\t                    }\r\n\t                ));\r\n\r\n\t                group.add(rect);\r\n\r\n\t                nodeData.setItemGraphicEl(node.dataIndex, rect);\r\n\r\n\t                rect.dataType = 'node';\r\n\t            });\r\n\r\n\t            if (!this._data && seriesModel.get('animation')) {\r\n\t                group.setClipPath(createGridClipShape(group.getBoundingRect(), seriesModel, function () {\r\n\t                    group.removeClipPath();\r\n\t                }));\r\n\t            }\r\n\r\n\t            this._data = seriesModel.getData();\r\n\t        },\r\n\r\n\t        dispose: function () {}\r\n\t    });\r\n\r\n\t    // add animation to the view\r\n\t    function createGridClipShape(rect, seriesModel, cb) {\r\n\t        var rectEl = new graphic.Rect({\r\n\t            shape: {\r\n\t                x: rect.x - 10,\r\n\t                y: rect.y - 10,\r\n\t                width: 0,\r\n\t                height: rect.height + 20\r\n\t            }\r\n\t        });\r\n\t        graphic.initProps(rectEl, {\r\n\t            shape: {\r\n\t                width: rect.width + 20,\r\n\t                height: rect.height + 20\r\n\t            }\r\n\t        }, seriesModel, cb);\r\n\r\n\t        return rectEl;\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 242 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file The layout algorithm of sankey view\r\n\t * @author  Deqing Li(annong035@gmail.com)\r\n\t */\r\n\r\n\r\n\t    var layout = __webpack_require__(21);\r\n\t    var nest = __webpack_require__(243);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    module.exports = function (ecModel, api, payload) {\r\n\r\n\t        ecModel.eachSeriesByType('sankey', function (seriesModel) {\r\n\r\n\t            var nodeWidth = seriesModel.get('nodeWidth');\r\n\t            var nodeGap = seriesModel.get('nodeGap');\r\n\r\n\t            var layoutInfo = getViewRect(seriesModel, api);\r\n\r\n\t            seriesModel.layoutInfo = layoutInfo;\r\n\r\n\t            var width = layoutInfo.width;\r\n\t            var height = layoutInfo.height;\r\n\r\n\t            var graph = seriesModel.getGraph();\r\n\r\n\t            var nodes = graph.nodes;\r\n\t            var edges = graph.edges;\r\n\r\n\t            computeNodeValues(nodes);\r\n\r\n\t            var filteredNodes = nodes.filter(function (node) {\r\n\t                return node.getLayout().value === 0;\r\n\t            });\r\n\r\n\t            var iterations = filteredNodes.length !== 0\r\n\t                ? 0 : seriesModel.get('layoutIterations');\r\n\r\n\t            layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations);\r\n\t        });\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Get the layout position of the whole view\r\n\t     *\r\n\t     * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\r\n\t     * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\r\n\t     * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\r\n\t     */\r\n\t    function getViewRect(seriesModel, api) {\r\n\t        return layout.getLayoutRect(\r\n\t            seriesModel.getBoxLayoutParams(), {\r\n\t                width: api.getWidth(),\r\n\t                height: api.getHeight()\r\n\t            }\r\n\t        );\r\n\t    }\r\n\r\n\t    function layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations) {\r\n\t        computeNodeBreadths(nodes, nodeWidth, width);\r\n\t        computeNodeDepths(nodes, edges, height, nodeGap, iterations);\r\n\t        computeEdgeDepths(nodes);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Compute the value of each node by summing the associated edge's value\r\n\t     *\r\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\r\n\t     */\r\n\t    function computeNodeValues(nodes) {\r\n\t        zrUtil.each(nodes, function (node) {\r\n\t            var value1 = sum(node.outEdges, getEdgeValue);\r\n\t            var value2 = sum(node.inEdges, getEdgeValue);\r\n\t            var value = Math.max(value1, value2);\r\n\t            node.setLayout({value: value}, true);\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Compute the x-position for each node\r\n\t     *\r\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\r\n\t     * @param  {number} nodeWidth  the dx of the node\r\n\t     * @param  {number} width  the whole width of the area to draw the view\r\n\t     */\r\n\t    function computeNodeBreadths(nodes, nodeWidth, width) {\r\n\t        var remainNodes = nodes;\r\n\t        var nextNode = null;\r\n\t        var x = 0;\r\n\t        var kx = 0;\r\n\r\n\t        while (remainNodes.length) {\r\n\t            nextNode = [];\r\n\t            for (var i = 0, len = remainNodes.length; i < len; i++) {\r\n\t                var node = remainNodes[i];\r\n\t                node.setLayout({x: x}, true);\r\n\t                node.setLayout({dx: nodeWidth}, true);\r\n\t                for (var j = 0, lenj = node.outEdges.length; j < lenj; j++) {\r\n\t                    nextNode.push(node.outEdges[j].node2);\r\n\t                }\r\n\t            }\r\n\t            remainNodes = nextNode;\r\n\t            ++x;\r\n\t        }\r\n\r\n\t        moveSinksRight(nodes, x);\r\n\t        kx = (width - nodeWidth) / (x - 1);\r\n\r\n\t        scaleNodeBreadths(nodes, kx);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * All the node without outEgdes are assigned maximum x-position and\r\n\t     *     be aligned in the last column.\r\n\t     *\r\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\r\n\t     * @param {number} x  value (x-1) use to assign to node without outEdges\r\n\t     *     as x-position\r\n\t     */\r\n\t    function moveSinksRight(nodes, x) {\r\n\t        zrUtil.each(nodes, function (node) {\r\n\t            if (!node.outEdges.length) {\r\n\t                node.setLayout({x: x - 1}, true);\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Scale node x-position to the width\r\n\t     *\r\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\r\n\t     * @param {number} kx   multiple used to scale nodes\r\n\t     */\r\n\t    function scaleNodeBreadths(nodes, kx) {\r\n\t        zrUtil.each(nodes, function (node) {\r\n\t            var nodeX = node.getLayout().x * kx;\r\n\t            node.setLayout({x: nodeX}, true);\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Using Gauss-Seidel iterations method to compute the node depth(y-position)\r\n\t     *\r\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\r\n\t     * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\r\n\t     * @param {number} height  the whole height of the area to draw the view\r\n\t     * @param {numbber} nodeGap  the vertical distance between two nodes\r\n\t     *     in the same column.\r\n\t     * @param {number} iterations  the number of iterations for the algorithm\r\n\t     */\r\n\t    function computeNodeDepths(nodes, edges, height, nodeGap, iterations) {\r\n\t        var nodesByBreadth = nest()\r\n\t            .key(function (d) {\r\n\t                return d.getLayout().x;\r\n\t            })\r\n\t            .sortKeys(ascending)\r\n\t            .entries(nodes)\r\n\t            .map(function (d) {\r\n\t                return d.values;\r\n\t            });\r\n\r\n\t        initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap);\r\n\t        resolveCollisions(nodesByBreadth, nodeGap, height);\r\n\r\n\t        for (var alpha = 1; iterations > 0; iterations--) {\r\n\t            // 0.99 is a experience parameter, ensure that each iterations of\r\n\t            // changes as small as possible.\r\n\t            alpha *= 0.99;\r\n\t            relaxRightToLeft(nodesByBreadth, alpha);\r\n\t            resolveCollisions(nodesByBreadth, nodeGap, height);\r\n\t            relaxLeftToRight(nodesByBreadth, alpha);\r\n\t            resolveCollisions(nodesByBreadth, nodeGap, height);\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Compute the original y-position for each node\r\n\t     *\r\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\r\n\t     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\r\n\t     *     group by the array of all sankey nodes based on the nodes x-position.\r\n\t     * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\r\n\t     * @param {number} height  the whole height of the area to draw the view\r\n\t     * @param {number} nodeGap  the vertical distance between two nodes\r\n\t     */\r\n\t    function initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap) {\r\n\t        var kyArray = [];\r\n\t        zrUtil.each(nodesByBreadth, function (nodes) {\r\n\t            var n = nodes.length;\r\n\t            var sum = 0;\r\n\t            zrUtil.each(nodes, function (node) {\r\n\t                sum += node.getLayout().value;\r\n\t            });\r\n\t            var ky = (height - (n - 1) * nodeGap) / sum;\r\n\t            kyArray.push(ky);\r\n\t        });\r\n\r\n\t        kyArray.sort(function (a, b) {\r\n\t            return a - b;\r\n\t        });\r\n\t        var ky0 = kyArray[0];\r\n\r\n\t        zrUtil.each(nodesByBreadth, function (nodes) {\r\n\t            zrUtil.each(nodes, function (node, i) {\r\n\t                node.setLayout({y: i}, true);\r\n\t                var nodeDy = node.getLayout().value * ky0;\r\n\t                node.setLayout({dy: nodeDy}, true);\r\n\t            });\r\n\t        });\r\n\r\n\t        zrUtil.each(edges, function (edge) {\r\n\t            var edgeDy = +edge.getValue() * ky0;\r\n\t            edge.setLayout({dy: edgeDy}, true);\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Resolve the collision of initialized depth (y-position)\r\n\t     *\r\n\t     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\r\n\t     *     group by the array of all sankey nodes based on the nodes x-position.\r\n\t     * @param {number} nodeGap  the vertical distance between two nodes\r\n\t     * @param {number} height  the whole height of the area to draw the view\r\n\t     */\r\n\t    function resolveCollisions(nodesByBreadth, nodeGap, height) {\r\n\t        zrUtil.each(nodesByBreadth, function (nodes) {\r\n\t            var node;\r\n\t            var dy;\r\n\t            var y0 = 0;\r\n\t            var n = nodes.length;\r\n\t            var i;\r\n\r\n\t            nodes.sort(ascendingDepth);\r\n\r\n\t            for (i = 0; i < n; i++) {\r\n\t                node = nodes[i];\r\n\t                dy = y0 - node.getLayout().y;\r\n\t                if (dy > 0) {\r\n\t                    var nodeY = node.getLayout().y + dy;\r\n\t                    node.setLayout({y: nodeY}, true);\r\n\t                }\r\n\t                y0 = node.getLayout().y + node.getLayout().dy + nodeGap;\r\n\t            }\r\n\r\n\t            // if the bottommost node goes outside the bounds, push it back up\r\n\t            dy = y0 - nodeGap - height;\r\n\t            if (dy > 0) {\r\n\t                var nodeY = node.getLayout().y - dy;\r\n\t                node.setLayout({y: nodeY}, true);\r\n\t                y0 = node.getLayout().y;\r\n\t                for (i = n - 2; i >= 0; --i) {\r\n\t                    node = nodes[i];\r\n\t                    dy = node.getLayout().y + node.getLayout().dy + nodeGap - y0;\r\n\t                    if (dy > 0) {\r\n\t                        nodeY = node.getLayout().y - dy;\r\n\t                        node.setLayout({y: nodeY}, true);\r\n\t                    }\r\n\t                    y0 = node.getLayout().y;\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Change the y-position of the nodes, except most the right side nodes\r\n\t     *\r\n\t     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\r\n\t     *     group by the array of all sankey nodes based on the node x-position.\r\n\t     * @param {number} alpha  parameter used to adjust the nodes y-position\r\n\t     */\r\n\t    function relaxRightToLeft(nodesByBreadth, alpha) {\r\n\t        zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {\r\n\t            zrUtil.each(nodes, function (node) {\r\n\t                if (node.outEdges.length) {\r\n\t                    var y = sum(node.outEdges, weightedTarget) / sum(node.outEdges, getEdgeValue);\r\n\t                    var nodeY = node.getLayout().y + (y - center(node)) * alpha;\r\n\t                    node.setLayout({y: nodeY}, true);\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t    }\r\n\r\n\t    function weightedTarget(edge) {\r\n\t        return center(edge.node2) * edge.getValue();\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Change the y-position of the nodes, except most the left side nodes\r\n\t     *\r\n\t     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\r\n\t     *     group by the array of all sankey nodes based on the node x-position.\r\n\t     * @param {number} alpha  parameter used to adjust the nodes y-position\r\n\t     */\r\n\t    function relaxLeftToRight(nodesByBreadth, alpha) {\r\n\t        zrUtil.each(nodesByBreadth, function (nodes) {\r\n\t            zrUtil.each(nodes, function (node) {\r\n\t                if (node.inEdges.length) {\r\n\t                    var y = sum(node.inEdges, weightedSource) / sum(node.inEdges, getEdgeValue);\r\n\t                    var nodeY = node.getLayout().y + (y - center(node)) * alpha;\r\n\t                    node.setLayout({y: nodeY}, true);\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t    }\r\n\r\n\t    function weightedSource(edge) {\r\n\t        return center(edge.node1) * edge.getValue();\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Compute the depth(y-position) of each edge\r\n\t     *\r\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\r\n\t     */\r\n\t    function computeEdgeDepths(nodes) {\r\n\t        zrUtil.each(nodes, function (node) {\r\n\t            node.outEdges.sort(ascendingTargetDepth);\r\n\t            node.inEdges.sort(ascendingSourceDepth);\r\n\t        });\r\n\t        zrUtil.each(nodes, function (node) {\r\n\t            var sy = 0;\r\n\t            var ty = 0;\r\n\t            zrUtil.each(node.outEdges, function (edge) {\r\n\t                edge.setLayout({sy: sy}, true);\r\n\t                sy += edge.getLayout().dy;\r\n\t            });\r\n\t            zrUtil.each(node.inEdges, function (edge) {\r\n\t                edge.setLayout({ty: ty}, true);\r\n\t                ty += edge.getLayout().dy;\r\n\t            });\r\n\t        });\r\n\t    }\r\n\r\n\t    function ascendingTargetDepth(a, b) {\r\n\t        return a.node2.getLayout().y - b.node2.getLayout().y;\r\n\t    }\r\n\r\n\t    function ascendingSourceDepth(a, b) {\r\n\t        return a.node1.getLayout().y - b.node1.getLayout().y;\r\n\t    }\r\n\r\n\t    function sum(array, f) {\r\n\t        var sum = 0;\r\n\t        var len = array.length;\r\n\t        var i = -1;\r\n\t        while (++i < len) {\r\n\t            var value = +f.call(array, array[i], i);\r\n\t            if (!isNaN(value)) {\r\n\t                sum += value;\r\n\t            }\r\n\t        }\r\n\t        return sum;\r\n\t    }\r\n\r\n\t    function center(node) {\r\n\t        return node.getLayout().y + node.getLayout().dy / 2;\r\n\t    }\r\n\r\n\t    function ascendingDepth(a, b) {\r\n\t        return a.getLayout().y - b.getLayout().y;\r\n\t    }\r\n\r\n\t    function ascending(a, b) {\r\n\t        return a < b ? -1 : a > b ? 1 : a === b ? 0 : NaN;\r\n\t    }\r\n\r\n\t    function getEdgeValue(edge) {\r\n\t        return edge.getValue();\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 243 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    /**\r\n\t     * nest helper used to group by the array.\r\n\t     * can specified the keys and sort the keys.\r\n\t     */\r\n\t    function nest() {\r\n\r\n\t        var keysFunction = [];\r\n\t        var sortKeysFunction = [];\r\n\r\n\t        /**\r\n\t         * map an Array into the mapObject.\r\n\t         * @param {Array} array\r\n\t         * @param {number} depth\r\n\t         */\r\n\t        function map(array, depth) {\r\n\t            if (depth >= keysFunction.length) {\r\n\t                return array;\r\n\t            }\r\n\t            var i = -1;\r\n\t            var n = array.length;\r\n\t            var keyFunction = keysFunction[depth++];\r\n\t            var mapObject = {};\r\n\t            var valuesByKey = {};\r\n\r\n\t            while (++i < n) {\r\n\t                var keyValue = keyFunction(array[i]);\r\n\t                var values = valuesByKey[keyValue];\r\n\r\n\t                if (values) {\r\n\t                    values.push(array[i]);\r\n\t                }\r\n\t                else {\r\n\t                    valuesByKey[keyValue] = [array[i]];\r\n\t                }\r\n\t            }\r\n\r\n\t            zrUtil.each(valuesByKey, function (value, key) {\r\n\t                mapObject[key] = map(value, depth);\r\n\t            });\r\n\r\n\t            return mapObject;\r\n\t        }\r\n\r\n\t        /**\r\n\t         * transform the Map Object to multidimensional Array\r\n\t         * @param {Object} map\r\n\t         * @param {number} depth\r\n\t         */\r\n\t        function entriesMap(mapObject, depth) {\r\n\t            if (depth >= keysFunction.length) {\r\n\t                return mapObject;\r\n\t            }\r\n\t            var array = [];\r\n\t            var sortKeyFunction = sortKeysFunction[depth++];\r\n\r\n\t            zrUtil.each(mapObject, function (value, key) {\r\n\t                array.push({\r\n\t                    key: key, values: entriesMap(value, depth)\r\n\t                });\r\n\t            });\r\n\r\n\t            if (sortKeyFunction) {\r\n\t                return array.sort(function (a, b) {\r\n\t                    return sortKeyFunction(a.key, b.key);\r\n\t                });\r\n\t            }\r\n\t            else {\r\n\t                return array;\r\n\t            }\r\n\t        }\r\n\r\n\t        return {\r\n\t            /**\r\n\t             * specified the key to groupby the arrays.\r\n\t             * users can specified one more keys.\r\n\t             * @param {Function} d\r\n\t             */\r\n\t            key: function (d) {\r\n\t                keysFunction.push(d);\r\n\t                return this;\r\n\t            },\r\n\r\n\t            /**\r\n\t             * specified the comparator to sort the keys\r\n\t             * @param {Function} order\r\n\t             */\r\n\t            sortKeys: function (order) {\r\n\t                sortKeysFunction[keysFunction.length - 1] = order;\r\n\t                return this;\r\n\t            },\r\n\r\n\t            /**\r\n\t             * the array to be grouped by.\r\n\t             * @param {Array} array\r\n\t             */\r\n\t            entries: function (array) {\r\n\t                return entriesMap(map(array, 0), 0);\r\n\t            }\r\n\t        };\r\n\t    }\r\n\t    module.exports = nest;\r\n\r\n\r\n/***/ },\r\n/* 244 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Visual encoding for sankey view\r\n\t * @author  Deqing Li(annong035@gmail.com)\r\n\t */\r\n\r\n\r\n\t    var VisualMapping = __webpack_require__(193);\r\n\r\n\t    module.exports = function (ecModel, payload) {\r\n\t        ecModel.eachSeriesByType('sankey', function (seriesModel) {\r\n\t            var graph = seriesModel.getGraph();\r\n\t            var nodes = graph.nodes;\r\n\r\n\t            nodes.sort(function (a, b) {\r\n\t                return a.getLayout().value - b.getLayout().value;\r\n\t            });\r\n\r\n\t            var minValue = nodes[0].getLayout().value;\r\n\t            var maxValue = nodes[nodes.length - 1].getLayout().value;\r\n\r\n\t            nodes.forEach(function (node) {\r\n\t                var mapping = new VisualMapping({\r\n\t                    type: 'color',\r\n\t                    mappingMethod: 'linear',\r\n\t                    dataExtent: [minValue, maxValue],\r\n\t                    visual: seriesModel.get('color')\r\n\t                });\r\n\r\n\t                var mapValueToColor = mapping.mapValueToVisual(node.getLayout().value);\r\n\t                node.setVisual('color', mapValueToColor);\r\n\t                // If set itemStyle.normal.color\r\n\t                var itemModel = node.getModel();\r\n\t                var customColor = itemModel.get('itemStyle.normal.color');\r\n\t                if (customColor != null) {\r\n\t                    node.setVisual('color', customColor);\r\n\t                }\r\n\t            });\r\n\r\n\t        });\r\n\t    };\r\n\r\n\r\n\r\n/***/ },\r\n/* 245 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    __webpack_require__(246);\r\n\t    __webpack_require__(249);\r\n\r\n\t    echarts.registerVisual(__webpack_require__(250));\r\n\t    echarts.registerLayout(__webpack_require__(251));\r\n\r\n\r\n\r\n/***/ },\r\n/* 246 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\t    var whiskerBoxCommon = __webpack_require__(247);\r\n\r\n\t    var BoxplotSeries = SeriesModel.extend({\r\n\r\n\t        type: 'series.boxplot',\r\n\r\n\t        dependencies: ['xAxis', 'yAxis', 'grid'],\r\n\r\n\t        // TODO\r\n\t        // box width represents group size, so dimension should have 'size'.\r\n\r\n\t        /**\r\n\t         * @see <https://en.wikipedia.org/wiki/Box_plot>\r\n\t         * The meanings of 'min' and 'max' depend on user,\r\n\t         * and echarts do not need to know it.\r\n\t         * @readOnly\r\n\t         */\r\n\t        valueDimensions: ['min', 'Q1', 'median', 'Q3', 'max'],\r\n\r\n\t        /**\r\n\t         * @type {Array.<string>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        dimensions: null,\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        defaultOption: {\r\n\t            zlevel: 0,                  // 一级层叠\r\n\t            z: 2,                       // 二级层叠\r\n\t            coordinateSystem: 'cartesian2d',\r\n\t            legendHoverLink: true,\r\n\r\n\t            hoverAnimation: true,\r\n\r\n\t            // xAxisIndex: 0,\r\n\t            // yAxisIndex: 0,\r\n\r\n\t            layout: null,               // 'horizontal' or 'vertical'\r\n\t            boxWidth: [7, 50],       // [min, max] can be percent of band width.\r\n\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    color: '#fff',\r\n\t                    borderWidth: 1\r\n\t                },\r\n\t                emphasis: {\r\n\t                    borderWidth: 2,\r\n\t                    shadowBlur: 5,\r\n\t                    shadowOffsetX: 2,\r\n\t                    shadowOffsetY: 2,\r\n\t                    shadowColor: 'rgba(0,0,0,0.4)'\r\n\t                }\r\n\t            },\r\n\r\n\t            animationEasing: 'elasticOut',\r\n\t            animationDuration: 800\r\n\t        }\r\n\t    });\r\n\r\n\t    zrUtil.mixin(BoxplotSeries, whiskerBoxCommon.seriesModelMixin, true);\r\n\r\n\t    module.exports = BoxplotSeries;\r\n\r\n\r\n\r\n/***/ },\r\n/* 247 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var List = __webpack_require__(97);\r\n\t    var completeDimensions = __webpack_require__(102);\r\n\t    var WhiskerBoxDraw = __webpack_require__(248);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    function getItemValue(item) {\r\n\t        return item.value == null ? item : item.value;\r\n\t    }\r\n\r\n\t    var seriesModelMixin = {\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {string}\r\n\t         */\r\n\t        _baseAxisDim: null,\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            // When both types of xAxis and yAxis are 'value', layout is\r\n\t            // needed to be specified by user. Otherwise, layout can be\r\n\t            // judged by which axis is category.\r\n\r\n\t            var categories;\r\n\r\n\t            var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));\r\n\t            var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));\r\n\t            var xAxisType = xAxisModel.get('type');\r\n\t            var yAxisType = yAxisModel.get('type');\r\n\t            var addOrdinal;\r\n\r\n\t            // FIXME\r\n\t            // 考虑时间轴\r\n\r\n\t            if (xAxisType === 'category') {\r\n\t                option.layout = 'horizontal';\r\n\t                categories = xAxisModel.getCategories();\r\n\t                addOrdinal = true;\r\n\t            }\r\n\t            else if (yAxisType  === 'category') {\r\n\t                option.layout = 'vertical';\r\n\t                categories = yAxisModel.getCategories();\r\n\t                addOrdinal = true;\r\n\t            }\r\n\t            else {\r\n\t                option.layout = option.layout || 'horizontal';\r\n\t            }\r\n\r\n\t            this._baseAxisDim = option.layout === 'horizontal' ? 'x' : 'y';\r\n\r\n\t            var data = option.data;\r\n\t            var dimensions = this.dimensions = ['base'].concat(this.valueDimensions);\r\n\t            completeDimensions(dimensions, data);\r\n\r\n\t            var list = new List(dimensions, this);\r\n\t            list.initData(data, categories ? categories.slice() : null, function (dataItem, dimName, idx, dimIdx) {\r\n\t                var value = getItemValue(dataItem);\r\n\t                return addOrdinal ? (dimName === 'base' ? idx : value[dimIdx - 1]) : value[dimIdx];\r\n\t            });\r\n\r\n\t            return list;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Used by Gird.\r\n\t         * @param {string} axisDim 'x' or 'y'\r\n\t         * @return {Array.<string>} dimensions on the axis.\r\n\t         */\r\n\t        coordDimToDataDim: function (axisDim) {\r\n\t            var dims = this.valueDimensions.slice();\r\n\t            var baseDim = ['base'];\r\n\t            var map = {\r\n\t                horizontal: {x: baseDim, y: dims},\r\n\t                vertical: {x: dims, y: baseDim}\r\n\t            };\r\n\t            return map[this.get('layout')][axisDim];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         * @param {string|number} dataDim\r\n\t         * @return {string} coord dimension\r\n\t         */\r\n\t        dataDimToCoordDim: function (dataDim) {\r\n\t            var dim;\r\n\r\n\t            zrUtil.each(['x', 'y'], function (coordDim, index) {\r\n\t                var dataDims = this.coordDimToDataDim(coordDim);\r\n\t                if (zrUtil.indexOf(dataDims, dataDim) >= 0) {\r\n\t                    dim = coordDim;\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            return dim;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If horizontal, base axis is x, otherwise y.\r\n\t         * @override\r\n\t         */\r\n\t        getBaseAxis: function () {\r\n\t            var dim = this._baseAxisDim;\r\n\t            return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;\r\n\t        }\r\n\t    };\r\n\r\n\t    var viewMixin = {\r\n\r\n\t        init: function () {\r\n\t            /**\r\n\t             * Old data.\r\n\t             * @private\r\n\t             * @type {module:echarts/chart/helper/WhiskerBoxDraw}\r\n\t             */\r\n\t            var whiskerBoxDraw = this._whiskerBoxDraw = new WhiskerBoxDraw(\r\n\t                this.getStyleUpdater()\r\n\t            );\r\n\t            this.group.add(whiskerBoxDraw.group);\r\n\t        },\r\n\r\n\t        render: function (seriesModel, ecModel, api) {\r\n\t            this._whiskerBoxDraw.updateData(seriesModel.getData());\r\n\t        },\r\n\r\n\t        remove: function (ecModel) {\r\n\t            this._whiskerBoxDraw.remove();\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = {\r\n\t        seriesModelMixin: seriesModelMixin,\r\n\t        viewMixin: viewMixin\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 248 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/chart/helper/Symbol\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var Path = __webpack_require__(45);\r\n\r\n\t    var WhiskerPath = Path.extend({\r\n\r\n\t        type: 'whiskerInBox',\r\n\r\n\t        shape: {},\r\n\r\n\t        buildPath: function (ctx, shape) {\r\n\t            for (var i in shape) {\r\n\t                if (shape.hasOwnProperty(i) && i.indexOf('ends') === 0) {\r\n\t                    var pts = shape[i];\r\n\t                    ctx.moveTo(pts[0][0], pts[0][1]);\r\n\t                    ctx.lineTo(pts[1][0], pts[1][1]);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @alias {module:echarts/chart/helper/WhiskerBox}\r\n\t     * @param {module:echarts/data/List} data\r\n\t     * @param {number} idx\r\n\t     * @param {Function} styleUpdater\r\n\t     * @param {boolean} isInit\r\n\t     * @extends {module:zrender/graphic/Group}\r\n\t     */\r\n\t    function WhiskerBox(data, idx, styleUpdater, isInit) {\r\n\t        graphic.Group.call(this);\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.bodyIndex;\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.whiskerIndex;\r\n\r\n\t        /**\r\n\t         * @type {Function}\r\n\t         */\r\n\t        this.styleUpdater = styleUpdater;\r\n\r\n\t        this._createContent(data, idx, isInit);\r\n\r\n\t        this.updateData(data, idx, isInit);\r\n\r\n\t        /**\r\n\t         * Last series model.\r\n\t         * @type {module:echarts/model/Series}\r\n\t         */\r\n\t        this._seriesModel;\r\n\t    }\r\n\r\n\t    var whiskerBoxProto = WhiskerBox.prototype;\r\n\r\n\t    whiskerBoxProto._createContent = function (data, idx, isInit) {\r\n\t        var itemLayout = data.getItemLayout(idx);\r\n\t        var constDim = itemLayout.chartLayout === 'horizontal' ? 1 : 0;\r\n\t        var count = 0;\r\n\r\n\t        // Whisker element.\r\n\t        this.add(new graphic.Polygon({\r\n\t            shape: {\r\n\t                points: isInit\r\n\t                    ? transInit(itemLayout.bodyEnds, constDim, itemLayout)\r\n\t                    : itemLayout.bodyEnds\r\n\t            },\r\n\t            style: {strokeNoScale: true},\r\n\t            z2: 100\r\n\t        }));\r\n\t        this.bodyIndex = count++;\r\n\r\n\t        // Box element.\r\n\t        var whiskerEnds = zrUtil.map(itemLayout.whiskerEnds, function (ends) {\r\n\t            return isInit ? transInit(ends, constDim, itemLayout) : ends;\r\n\t        });\r\n\t        this.add(new WhiskerPath({\r\n\t            shape: makeWhiskerEndsShape(whiskerEnds),\r\n\t            style: {strokeNoScale: true},\r\n\t            z2: 100\r\n\t        }));\r\n\t        this.whiskerIndex = count++;\r\n\t    };\r\n\r\n\t    function transInit(points, dim, itemLayout) {\r\n\t        return zrUtil.map(points, function (point) {\r\n\t            point = point.slice();\r\n\t            point[dim] = itemLayout.initBaseline;\r\n\t            return point;\r\n\t        });\r\n\t    }\r\n\r\n\t    function makeWhiskerEndsShape(whiskerEnds) {\r\n\t        // zr animation only support 2-dim array.\r\n\t        var shape = {};\r\n\t        zrUtil.each(whiskerEnds, function (ends, i) {\r\n\t            shape['ends' + i] = ends;\r\n\t        });\r\n\t        return shape;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Update symbol properties\r\n\t     * @param  {module:echarts/data/List} data\r\n\t     * @param  {number} idx\r\n\t     */\r\n\t    whiskerBoxProto.updateData = function (data, idx, isInit) {\r\n\t        var seriesModel = this._seriesModel = data.hostModel;\r\n\t        var itemLayout = data.getItemLayout(idx);\r\n\t        var updateMethod = graphic[isInit ? 'initProps' : 'updateProps'];\r\n\t        // this.childAt(this.bodyIndex).stopAnimation(true);\r\n\t        // this.childAt(this.whiskerIndex).stopAnimation(true);\r\n\t        updateMethod(\r\n\t            this.childAt(this.bodyIndex),\r\n\t            {shape: {points: itemLayout.bodyEnds}},\r\n\t            seriesModel, idx\r\n\t        );\r\n\t        updateMethod(\r\n\t            this.childAt(this.whiskerIndex),\r\n\t            {shape: makeWhiskerEndsShape(itemLayout.whiskerEnds)},\r\n\t            seriesModel, idx\r\n\t        );\r\n\r\n\t        this.styleUpdater.call(null, this, data, idx);\r\n\t    };\r\n\r\n\t    zrUtil.inherits(WhiskerBox, graphic.Group);\r\n\r\n\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @alias module:echarts/chart/helper/WhiskerBoxDraw\r\n\t     */\r\n\t    function WhiskerBoxDraw(styleUpdater) {\r\n\t        this.group = new graphic.Group();\r\n\t        this.styleUpdater = styleUpdater;\r\n\t    }\r\n\r\n\t    var whiskerBoxDrawProto = WhiskerBoxDraw.prototype;\r\n\r\n\t    /**\r\n\t     * Update symbols draw by new data\r\n\t     * @param {module:echarts/data/List} data\r\n\t     */\r\n\t    whiskerBoxDrawProto.updateData = function (data) {\r\n\t        var group = this.group;\r\n\t        var oldData = this._data;\r\n\t        var styleUpdater = this.styleUpdater;\r\n\r\n\t        data.diff(oldData)\r\n\t            .add(function (newIdx) {\r\n\t                if (data.hasValue(newIdx)) {\r\n\t                    var symbolEl = new WhiskerBox(data, newIdx, styleUpdater, true);\r\n\t                    data.setItemGraphicEl(newIdx, symbolEl);\r\n\t                    group.add(symbolEl);\r\n\t                }\r\n\t            })\r\n\t            .update(function (newIdx, oldIdx) {\r\n\t                var symbolEl = oldData.getItemGraphicEl(oldIdx);\r\n\r\n\t                // Empty data\r\n\t                if (!data.hasValue(newIdx)) {\r\n\t                    group.remove(symbolEl);\r\n\t                    return;\r\n\t                }\r\n\r\n\t                if (!symbolEl) {\r\n\t                    symbolEl = new WhiskerBox(data, newIdx, styleUpdater);\r\n\t                }\r\n\t                else {\r\n\t                    symbolEl.updateData(data, newIdx);\r\n\t                }\r\n\r\n\t                // Add back\r\n\t                group.add(symbolEl);\r\n\r\n\t                data.setItemGraphicEl(newIdx, symbolEl);\r\n\t            })\r\n\t            .remove(function (oldIdx) {\r\n\t                var el = oldData.getItemGraphicEl(oldIdx);\r\n\t                el && group.remove(el);\r\n\t            })\r\n\t            .execute();\r\n\r\n\t        this._data = data;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Remove symbols.\r\n\t     * @param {module:echarts/data/List} data\r\n\t     */\r\n\t    whiskerBoxDrawProto.remove = function () {\r\n\t        var group = this.group;\r\n\t        var data = this._data;\r\n\t        this._data = null;\r\n\t        data && data.eachItemGraphicEl(function (el) {\r\n\t            el && group.remove(el);\r\n\t        });\r\n\t    };\r\n\r\n\t    module.exports = WhiskerBoxDraw;\r\n\r\n\r\n/***/ },\r\n/* 249 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var ChartView = __webpack_require__(42);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var whiskerBoxCommon = __webpack_require__(247);\r\n\r\n\t    var BoxplotView = ChartView.extend({\r\n\r\n\t        type: 'boxplot',\r\n\r\n\t        getStyleUpdater: function () {\r\n\t            return updateStyle;\r\n\t        },\r\n\r\n\t        dispose: zrUtil.noop\r\n\t    });\r\n\r\n\t    zrUtil.mixin(BoxplotView, whiskerBoxCommon.viewMixin, true);\r\n\r\n\t    // Update common properties\r\n\t    var normalStyleAccessPath = ['itemStyle', 'normal'];\r\n\t    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];\r\n\r\n\t    function updateStyle(itemGroup, data, idx) {\r\n\t        var itemModel = data.getItemModel(idx);\r\n\t        var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);\r\n\t        var borderColor = data.getItemVisual(idx, 'color');\r\n\r\n\t        // Exclude borderColor.\r\n\t        var itemStyle = normalItemStyleModel.getItemStyle(['borderColor']);\r\n\r\n\t        var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);\r\n\t        whiskerEl.style.set(itemStyle);\r\n\t        whiskerEl.style.stroke = borderColor;\r\n\t        whiskerEl.dirty();\r\n\r\n\t        var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);\r\n\t        bodyEl.style.set(itemStyle);\r\n\t        bodyEl.style.stroke = borderColor;\r\n\t        bodyEl.dirty();\r\n\r\n\t        var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();\r\n\t        graphic.setHoverStyle(itemGroup, hoverStyle);\r\n\t    }\r\n\r\n\t    module.exports = BoxplotView;\r\n\r\n\r\n\r\n/***/ },\r\n/* 250 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    var borderColorQuery = ['itemStyle', 'normal', 'borderColor'];\r\n\r\n\t    module.exports = function (ecModel, api) {\r\n\r\n\t        var globalColors = ecModel.get('color');\r\n\r\n\t        ecModel.eachRawSeriesByType('boxplot', function (seriesModel) {\r\n\r\n\t            var defaulColor = globalColors[seriesModel.seriesIndex % globalColors.length];\r\n\t            var data = seriesModel.getData();\r\n\r\n\t            data.setVisual({\r\n\t                legendSymbol: 'roundRect',\r\n\t                // Use name 'color' but not 'borderColor' for legend usage and\r\n\t                // visual coding from other component like dataRange.\r\n\t                color: seriesModel.get(borderColorQuery) || defaulColor\r\n\t            });\r\n\r\n\t            // Only visible series has each data be visual encoded\r\n\t            if (!ecModel.isSeriesFiltered(seriesModel)) {\r\n\t                data.each(function (idx) {\r\n\t                    var itemModel = data.getItemModel(idx);\r\n\t                    data.setItemVisual(\r\n\t                        idx,\r\n\t                        {color: itemModel.get(borderColorQuery, true)}\r\n\t                    );\r\n\t                });\r\n\t            }\r\n\t        });\r\n\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 251 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var parsePercent = numberUtil.parsePercent;\r\n\t    var each = zrUtil.each;\r\n\r\n\t    module.exports = function (ecModel) {\r\n\r\n\t        var groupResult = groupSeriesByAxis(ecModel);\r\n\r\n\t        each(groupResult, function (groupItem) {\r\n\t            var seriesModels = groupItem.seriesModels;\r\n\r\n\t            if (!seriesModels.length) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            calculateBase(groupItem);\r\n\r\n\t            each(seriesModels, function (seriesModel, idx) {\r\n\t                layoutSingleSeries(\r\n\t                    seriesModel,\r\n\t                    groupItem.boxOffsetList[idx],\r\n\t                    groupItem.boxWidthList[idx]\r\n\t                );\r\n\t            });\r\n\t        });\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Group series by axis.\r\n\t     */\r\n\t    function groupSeriesByAxis(ecModel) {\r\n\t        var result = [];\r\n\t        var axisList = [];\r\n\r\n\t        ecModel.eachSeriesByType('boxplot', function (seriesModel) {\r\n\t            var baseAxis = seriesModel.getBaseAxis();\r\n\t            var idx = zrUtil.indexOf(axisList, baseAxis);\r\n\r\n\t            if (idx < 0) {\r\n\t                idx = axisList.length;\r\n\t                axisList[idx] = baseAxis;\r\n\t                result[idx] = {axis: baseAxis, seriesModels: []};\r\n\t            }\r\n\r\n\t            result[idx].seriesModels.push(seriesModel);\r\n\t        });\r\n\r\n\t        return result;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Calculate offset and box width for each series.\r\n\t     */\r\n\t    function calculateBase(groupItem) {\r\n\t        var extent;\r\n\t        var baseAxis = groupItem.axis;\r\n\t        var seriesModels = groupItem.seriesModels;\r\n\t        var seriesCount = seriesModels.length;\r\n\r\n\t        var boxWidthList = groupItem.boxWidthList = [];\r\n\t        var boxOffsetList = groupItem.boxOffsetList = [];\r\n\t        var boundList = [];\r\n\r\n\t        var bandWidth;\r\n\t        if (baseAxis.type === 'category') {\r\n\t            bandWidth = baseAxis.getBandWidth();\r\n\t        }\r\n\t        else {\r\n\t            var maxDataCount = 0;\r\n\t            each(seriesModels, function (seriesModel) {\r\n\t                maxDataCount = Math.max(maxDataCount, seriesModel.getData().count());\r\n\t            });\r\n\t            extent = baseAxis.getExtent(),\r\n\t            Math.abs(extent[1] - extent[0]) / maxDataCount;\r\n\t        }\r\n\r\n\t        each(seriesModels, function (seriesModel) {\r\n\t            var boxWidthBound = seriesModel.get('boxWidth');\r\n\t            if (!zrUtil.isArray(boxWidthBound)) {\r\n\t                boxWidthBound = [boxWidthBound, boxWidthBound];\r\n\t            }\r\n\t            boundList.push([\r\n\t                parsePercent(boxWidthBound[0], bandWidth) || 0,\r\n\t                parsePercent(boxWidthBound[1], bandWidth) || 0\r\n\t            ]);\r\n\t        });\r\n\r\n\t        var availableWidth = bandWidth * 0.8 - 2;\r\n\t        var boxGap = availableWidth / seriesCount * 0.3;\r\n\t        var boxWidth = (availableWidth - boxGap * (seriesCount - 1)) / seriesCount;\r\n\t        var base = boxWidth / 2 - availableWidth / 2;\r\n\r\n\t        each(seriesModels, function (seriesModel, idx) {\r\n\t            boxOffsetList.push(base);\r\n\t            base += boxGap + boxWidth;\r\n\r\n\t            boxWidthList.push(\r\n\t                Math.min(Math.max(boxWidth, boundList[idx][0]), boundList[idx][1])\r\n\t            );\r\n\t        });\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Calculate points location for each series.\r\n\t     */\r\n\t    function layoutSingleSeries(seriesModel, offset, boxWidth) {\r\n\t        var coordSys = seriesModel.coordinateSystem;\r\n\t        var data = seriesModel.getData();\r\n\t        var dimensions = seriesModel.dimensions;\r\n\t        var chartLayout = seriesModel.get('layout');\r\n\t        var halfWidth = boxWidth / 2;\r\n\r\n\t        data.each(dimensions, function () {\r\n\t            var args = arguments;\r\n\t            var dimLen = dimensions.length;\r\n\t            var axisDimVal = args[0];\r\n\t            var idx = args[dimLen];\r\n\t            var variableDim = chartLayout === 'horizontal' ? 0 : 1;\r\n\t            var constDim = 1 - variableDim;\r\n\r\n\t            var median = getPoint(args[3]);\r\n\t            var end1 = getPoint(args[1]);\r\n\t            var end5 = getPoint(args[5]);\r\n\t            var whiskerEnds = [\r\n\t                [end1, getPoint(args[2])],\r\n\t                [end5, getPoint(args[4])]\r\n\t            ];\r\n\t            layEndLine(end1);\r\n\t            layEndLine(end5);\r\n\t            layEndLine(median);\r\n\r\n\t            var bodyEnds = [];\r\n\t            addBodyEnd(whiskerEnds[0][1], 0);\r\n\t            addBodyEnd(whiskerEnds[1][1], 1);\r\n\r\n\t            data.setItemLayout(idx, {\r\n\t                chartLayout: chartLayout,\r\n\t                initBaseline: median[constDim],\r\n\t                median: median,\r\n\t                bodyEnds: bodyEnds,\r\n\t                whiskerEnds: whiskerEnds\r\n\t            });\r\n\r\n\t            function getPoint(val) {\r\n\t                var p = [];\r\n\t                p[variableDim] = axisDimVal;\r\n\t                p[constDim] = val;\r\n\t                var point;\r\n\t                if (isNaN(axisDimVal) || isNaN(val)) {\r\n\t                    point = [NaN, NaN];\r\n\t                }\r\n\t                else {\r\n\t                    point = coordSys.dataToPoint(p);\r\n\t                    point[variableDim] += offset;\r\n\t                }\r\n\t                return point;\r\n\t            }\r\n\r\n\t            function addBodyEnd(point, start) {\r\n\t                var point1 = point.slice();\r\n\t                var point2 = point.slice();\r\n\t                point1[variableDim] += halfWidth;\r\n\t                point2[variableDim] -= halfWidth;\r\n\t                start\r\n\t                    ? bodyEnds.push(point1, point2)\r\n\t                    : bodyEnds.push(point2, point1);\r\n\t            }\r\n\r\n\t            function layEndLine(endCenter) {\r\n\t                var line = [endCenter.slice(), endCenter.slice()];\r\n\t                line[0][variableDim] -= halfWidth;\r\n\t                line[1][variableDim] += halfWidth;\r\n\t                whiskerEnds.push(line);\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 252 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    __webpack_require__(253);\r\n\t    __webpack_require__(254);\r\n\r\n\t    echarts.registerPreprocessor(\r\n\t        __webpack_require__(255)\r\n\t    );\r\n\r\n\t    echarts.registerVisual(__webpack_require__(256));\r\n\t    echarts.registerLayout(__webpack_require__(257));\r\n\r\n\r\n\r\n/***/ },\r\n/* 253 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\t    var whiskerBoxCommon = __webpack_require__(247);\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var encodeHTML = formatUtil.encodeHTML;\r\n\t    var addCommas = formatUtil.addCommas;\r\n\r\n\t    var CandlestickSeries = SeriesModel.extend({\r\n\r\n\t        type: 'series.candlestick',\r\n\r\n\t        dependencies: ['xAxis', 'yAxis', 'grid'],\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         */\r\n\t        valueDimensions: ['open', 'close', 'lowest', 'highest'],\r\n\r\n\t        /**\r\n\t         * @type {Array.<string>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        dimensions: null,\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        defaultOption: {\r\n\t            zlevel: 0,                  // 一级层叠\r\n\t            z: 2,                       // 二级层叠\r\n\t            coordinateSystem: 'cartesian2d',\r\n\t            legendHoverLink: true,\r\n\r\n\t            hoverAnimation: true,\r\n\r\n\t            // xAxisIndex: 0,\r\n\t            // yAxisIndex: 0,\r\n\r\n\t            layout: null, // 'horizontal' or 'vertical'\r\n\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    color: '#c23531', // 阳线 positive\r\n\t                    color0: '#314656', // 阴线 negative     '#c23531', '#314656'\r\n\t                    borderWidth: 1,\r\n\t                    // FIXME\r\n\t                    // ec2中使用的是lineStyle.color 和 lineStyle.color0\r\n\t                    borderColor: '#c23531',\r\n\t                    borderColor0: '#314656'\r\n\t                },\r\n\t                emphasis: {\r\n\t                    borderWidth: 2\r\n\t                }\r\n\t            },\r\n\r\n\t            animationUpdate: false,\r\n\t            animationEasing: 'linear',\r\n\t            animationDuration: 300\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get dimension for shadow in dataZoom\r\n\t         * @return {string} dimension name\r\n\t         */\r\n\t        getShadowDim: function () {\r\n\t            return 'open';\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        formatTooltip: function (dataIndex, mutipleSeries) {\r\n\t            // It rearly use mutiple candlestick series in one cartesian,\r\n\t            // so only consider one series in this default tooltip.\r\n\t            var valueHTMLArr = zrUtil.map(this.valueDimensions, function (dim) {\r\n\t                return dim + ': ' + addCommas(this._data.get(dim, dataIndex));\r\n\t            }, this);\r\n\r\n\t            return encodeHTML(this.name) + '<br />' + valueHTMLArr.join('<br />');\r\n\t        },\r\n\r\n\t        brushSelector: function (itemLayout, selectors) {\r\n\t            return selectors.rect(itemLayout.brushRect);\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    zrUtil.mixin(CandlestickSeries, whiskerBoxCommon.seriesModelMixin, true);\r\n\r\n\t    module.exports = CandlestickSeries;\r\n\r\n\r\n\r\n/***/ },\r\n/* 254 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var ChartView = __webpack_require__(42);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var whiskerBoxCommon = __webpack_require__(247);\r\n\r\n\t    var CandlestickView = ChartView.extend({\r\n\r\n\t        type: 'candlestick',\r\n\r\n\t        getStyleUpdater: function () {\r\n\t            return updateStyle;\r\n\t        },\r\n\r\n\t        dispose: zrUtil.noop\r\n\t    });\r\n\r\n\t    zrUtil.mixin(CandlestickView, whiskerBoxCommon.viewMixin, true);\r\n\r\n\t    // Update common properties\r\n\t    var normalStyleAccessPath = ['itemStyle', 'normal'];\r\n\t    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];\r\n\r\n\t    function updateStyle(itemGroup, data, idx) {\r\n\t        var itemModel = data.getItemModel(idx);\r\n\t        var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);\r\n\t        var color = data.getItemVisual(idx, 'color');\r\n\t        var borderColor = data.getItemVisual(idx, 'borderColor') || color;\r\n\r\n\t        // Color must be excluded.\r\n\t        // Because symbol provide setColor individually to set fill and stroke\r\n\t        var itemStyle = normalItemStyleModel.getItemStyle(\r\n\t            ['color', 'color0', 'borderColor', 'borderColor0']\r\n\t        );\r\n\r\n\t        var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);\r\n\t        whiskerEl.useStyle(itemStyle);\r\n\t        whiskerEl.style.stroke = borderColor;\r\n\r\n\t        var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);\r\n\t        bodyEl.useStyle(itemStyle);\r\n\t        bodyEl.style.fill = color;\r\n\t        bodyEl.style.stroke = borderColor;\r\n\r\n\t        var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();\r\n\t        graphic.setHoverStyle(itemGroup, hoverStyle);\r\n\t    }\r\n\r\n\r\n\t    module.exports = CandlestickView;\r\n\r\n\r\n\r\n/***/ },\r\n/* 255 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    module.exports = function (option) {\r\n\t        if (!option || !zrUtil.isArray(option.series)) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        // Translate 'k' to 'candlestick'.\r\n\t        zrUtil.each(option.series, function (seriesItem) {\r\n\t            if (zrUtil.isObject(seriesItem) && seriesItem.type === 'k') {\r\n\t                seriesItem.type = 'candlestick';\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\r\n\r\n/***/ },\r\n/* 256 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    var positiveBorderColorQuery = ['itemStyle', 'normal', 'borderColor'];\r\n\t    var negativeBorderColorQuery = ['itemStyle', 'normal', 'borderColor0'];\r\n\t    var positiveColorQuery = ['itemStyle', 'normal', 'color'];\r\n\t    var negativeColorQuery = ['itemStyle', 'normal', 'color0'];\r\n\r\n\t    module.exports = function (ecModel, api) {\r\n\r\n\t        ecModel.eachRawSeriesByType('candlestick', function (seriesModel) {\r\n\r\n\t            var data = seriesModel.getData();\r\n\r\n\t            data.setVisual({\r\n\t                legendSymbol: 'roundRect'\r\n\t            });\r\n\r\n\t            // Only visible series has each data be visual encoded\r\n\t            if (!ecModel.isSeriesFiltered(seriesModel)) {\r\n\t                data.each(function (idx) {\r\n\t                    var itemModel = data.getItemModel(idx);\r\n\t                    var sign = data.getItemLayout(idx).sign;\r\n\r\n\t                    data.setItemVisual(\r\n\t                        idx,\r\n\t                        {\r\n\t                            color: itemModel.get(\r\n\t                                sign > 0 ? positiveColorQuery : negativeColorQuery\r\n\t                            ),\r\n\t                            borderColor: itemModel.get(\r\n\t                                sign > 0 ? positiveBorderColorQuery : negativeBorderColorQuery\r\n\t                            )\r\n\t                        }\r\n\t                    );\r\n\t                });\r\n\t            }\r\n\t        });\r\n\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 257 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    var CANDLE_MIN_WIDTH = 2;\r\n\t    var CANDLE_MIN_NICE_WIDTH = 5;\r\n\t    var GPA_MIN = 4;\r\n\r\n\t    module.exports = function (ecModel) {\r\n\r\n\t        ecModel.eachSeriesByType('candlestick', function (seriesModel) {\r\n\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            var data = seriesModel.getData();\r\n\t            var dimensions = seriesModel.dimensions;\r\n\t            var chartLayout = seriesModel.get('layout');\r\n\r\n\t            var candleWidth = calculateCandleWidth(seriesModel, data);\r\n\r\n\t            data.each(dimensions, function () {\r\n\t                var args = arguments;\r\n\t                var dimLen = dimensions.length;\r\n\t                var axisDimVal = args[0];\r\n\t                var idx = args[dimLen];\r\n\t                var variableDim = chartLayout === 'horizontal' ? 0 : 1;\r\n\t                var constDim = 1 - variableDim;\r\n\r\n\t                var openVal = args[1];\r\n\t                var closeVal = args[2];\r\n\t                var lowestVal = args[3];\r\n\t                var highestVal = args[4];\r\n\r\n\t                var ocLow = Math.min(openVal, closeVal);\r\n\t                var ocHigh = Math.max(openVal, closeVal);\r\n\r\n\t                var ocLowPoint = getPoint(ocLow);\r\n\t                var ocHighPoint = getPoint(ocHigh);\r\n\t                var lowestPoint = getPoint(lowestVal);\r\n\t                var highestPoint = getPoint(highestVal);\r\n\r\n\t                var whiskerEnds = [\r\n\t                    [highestPoint, ocHighPoint],\r\n\t                    [lowestPoint, ocLowPoint]\r\n\t                ];\r\n\r\n\t                var bodyEnds = [];\r\n\t                addBodyEnd(ocHighPoint, 0);\r\n\t                addBodyEnd(ocLowPoint, 1);\r\n\r\n\t                data.setItemLayout(idx, {\r\n\t                    chartLayout: chartLayout,\r\n\t                    sign: openVal > closeVal ? -1 : openVal < closeVal ? 1 : 0,\r\n\t                    initBaseline: openVal > closeVal\r\n\t                        ? ocHighPoint[constDim] : ocLowPoint[constDim], // open point.\r\n\t                    bodyEnds: bodyEnds,\r\n\t                    whiskerEnds: whiskerEnds,\r\n\t                    brushRect: makeBrushRect()\r\n\t                });\r\n\r\n\t                function getPoint(val) {\r\n\t                    var p = [];\r\n\t                    p[variableDim] = axisDimVal;\r\n\t                    p[constDim] = val;\r\n\t                    return (isNaN(axisDimVal) || isNaN(val))\r\n\t                        ? [NaN, NaN]\r\n\t                        : coordSys.dataToPoint(p);\r\n\t                }\r\n\r\n\t                function addBodyEnd(point, start) {\r\n\t                    var point1 = point.slice();\r\n\t                    var point2 = point.slice();\r\n\t                    point1[variableDim] += candleWidth / 2;\r\n\t                    point2[variableDim] -= candleWidth / 2;\r\n\t                    start\r\n\t                        ? bodyEnds.push(point1, point2)\r\n\t                        : bodyEnds.push(point2, point1);\r\n\t                }\r\n\r\n\t                function makeBrushRect() {\r\n\t                    var pmin = getPoint(Math.min(openVal, closeVal, lowestVal, highestVal));\r\n\t                    var pmax = getPoint(Math.max(openVal, closeVal, lowestVal, highestVal));\r\n\r\n\t                    pmin[variableDim] -= candleWidth / 2;\r\n\t                    pmax[variableDim] -= candleWidth / 2;\r\n\r\n\t                    return {\r\n\t                        x: pmin[0],\r\n\t                        y: pmin[1],\r\n\t                        width: constDim ? candleWidth : pmax[0] - pmin[0],\r\n\t                        height: constDim ? pmax[1] - pmin[1] : candleWidth\r\n\t                    };\r\n\t                }\r\n\r\n\t            }, true);\r\n\t        });\r\n\t    };\r\n\r\n\t    function calculateCandleWidth(seriesModel, data) {\r\n\t        var baseAxis = seriesModel.getBaseAxis();\r\n\t        var extent;\r\n\r\n\t        var bandWidth = baseAxis.type === 'category'\r\n\t            ? baseAxis.getBandWidth()\r\n\t            : (\r\n\t                extent = baseAxis.getExtent(),\r\n\t                Math.abs(extent[1] - extent[0]) / data.count()\r\n\t            );\r\n\r\n\t        // Half band width is perfect when space is enouph, otherwise\r\n\t        // try not to be smaller than CANDLE_MIN_NICE_WIDTH (and only\r\n\t        // gap is compressed), otherwise ensure not to be smaller than\r\n\t        // CANDLE_MIN_WIDTH in spite of overlap.\r\n\r\n\t        return bandWidth / 2 - 2 > CANDLE_MIN_NICE_WIDTH // \"- 2\" is minus border width\r\n\t            ? bandWidth / 2 - 2\r\n\t            : bandWidth - CANDLE_MIN_NICE_WIDTH > GPA_MIN\r\n\t            ? CANDLE_MIN_NICE_WIDTH\r\n\t            : Math.max(bandWidth - GPA_MIN, CANDLE_MIN_WIDTH);\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 258 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    __webpack_require__(259);\r\n\t    __webpack_require__(260);\r\n\r\n\t    echarts.registerVisual(zrUtil.curry(\r\n\t        __webpack_require__(109), 'effectScatter', 'circle', null\r\n\t    ));\r\n\t    echarts.registerLayout(zrUtil.curry(\r\n\t        __webpack_require__(110), 'effectScatter'\r\n\t    ));\r\n\r\n\r\n/***/ },\r\n/* 259 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var createListFromArray = __webpack_require__(101);\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\r\n\t    module.exports = SeriesModel.extend({\r\n\r\n\t        type: 'series.effectScatter',\r\n\r\n\t        dependencies: ['grid', 'polar'],\r\n\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            var list = createListFromArray(option.data, this, ecModel);\r\n\t            return list;\r\n\t        },\r\n\r\n\t        brushSelector: 'point',\r\n\r\n\t        defaultOption: {\r\n\t            coordinateSystem: 'cartesian2d',\r\n\t            zlevel: 0,\r\n\t            z: 2,\r\n\t            legendHoverLink: true,\r\n\r\n\t            effectType: 'ripple',\r\n\r\n\t            progressive: 0,\r\n\r\n\t            // When to show the effect, option: 'render'|'emphasis'\r\n\t            showEffectOn: 'render',\r\n\r\n\t            // Ripple effect config\r\n\t            rippleEffect: {\r\n\t                period: 4,\r\n\t                // Scale of ripple\r\n\t                scale: 2.5,\r\n\t                // Brush type can be fill or stroke\r\n\t                brushType: 'fill'\r\n\t            },\r\n\r\n\t            // Cartesian coordinate system\r\n\t            // xAxisIndex: 0,\r\n\t            // yAxisIndex: 0,\r\n\r\n\t            // Polar coordinate system\r\n\t            // polarIndex: 0,\r\n\r\n\t            // Geo coordinate system\r\n\t            // geoIndex: 0,\r\n\r\n\t            // symbol: null,        // 图形类型\r\n\t            symbolSize: 10          // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\r\n\t            // symbolRotate: null,  // 图形旋转控制\r\n\r\n\t            // large: false,\r\n\t            // Available when large is true\r\n\t            // largeThreshold: 2000,\r\n\r\n\t            // itemStyle: {\r\n\t            //     normal: {\r\n\t            //         opacity: 1\r\n\t            //     }\r\n\t            // }\r\n\t        }\r\n\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 260 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var SymbolDraw = __webpack_require__(104);\r\n\t    var EffectSymbol = __webpack_require__(261);\r\n\r\n\t    __webpack_require__(1).extendChartView({\r\n\r\n\t        type: 'effectScatter',\r\n\r\n\t        init: function () {\r\n\t            this._symbolDraw = new SymbolDraw(EffectSymbol);\r\n\t        },\r\n\r\n\t        render: function (seriesModel, ecModel, api) {\r\n\t            var data = seriesModel.getData();\r\n\t            var effectSymbolDraw = this._symbolDraw;\r\n\t            effectSymbolDraw.updateData(data);\r\n\t            this.group.add(effectSymbolDraw.group);\r\n\t        },\r\n\r\n\t        updateLayout: function () {\r\n\t            this._symbolDraw.updateLayout();\r\n\t        },\r\n\r\n\t        remove: function (ecModel, api) {\r\n\t            this._symbolDraw && this._symbolDraw.remove(api);\r\n\t        },\r\n\r\n\t        dispose: function () {}\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 261 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Symbol with ripple effect\r\n\t * @module echarts/chart/helper/EffectSymbol\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var symbolUtil = __webpack_require__(106);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var Symbol = __webpack_require__(105);\r\n\t    var Group = graphic.Group;\r\n\r\n\t    var EFFECT_RIPPLE_NUMBER = 3;\r\n\r\n\t    function normalizeSymbolSize(symbolSize) {\r\n\t        if (!zrUtil.isArray(symbolSize)) {\r\n\t            symbolSize = [+symbolSize, +symbolSize];\r\n\t        }\r\n\t        return symbolSize;\r\n\t    }\r\n\r\n\t    function updateRipplePath(rippleGroup, effectCfg) {\r\n\t        rippleGroup.eachChild(function (ripplePath) {\r\n\t            ripplePath.attr({\r\n\t                z: effectCfg.z,\r\n\t                zlevel: effectCfg.zlevel,\r\n\t                style: {\r\n\t                    stroke: effectCfg.brushType === 'stroke' ? effectCfg.color : null,\r\n\t                    fill: effectCfg.brushType === 'fill' ? effectCfg.color : null\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t    }\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @param {module:echarts/data/List} data\r\n\t     * @param {number} idx\r\n\t     * @extends {module:zrender/graphic/Group}\r\n\t     */\r\n\t    function EffectSymbol(data, idx) {\r\n\t        Group.call(this);\r\n\r\n\t        var symbol = new Symbol(data, idx);\r\n\t        var rippleGroup = new Group();\r\n\t        this.add(symbol);\r\n\t        this.add(rippleGroup);\r\n\r\n\t        rippleGroup.beforeUpdate = function () {\r\n\t            this.attr(symbol.getScale());\r\n\t        };\r\n\t        this.updateData(data, idx);\r\n\t    }\r\n\r\n\t    var effectSymbolProto = EffectSymbol.prototype;\r\n\r\n\t    effectSymbolProto.stopEffectAnimation = function () {\r\n\t        this.childAt(1).removeAll();\r\n\t    };\r\n\r\n\t    effectSymbolProto.startEffectAnimation = function (effectCfg) {\r\n\t        var symbolType = effectCfg.symbolType;\r\n\t        var color = effectCfg.color;\r\n\t        var rippleGroup = this.childAt(1);\r\n\r\n\t        for (var i = 0; i < EFFECT_RIPPLE_NUMBER; i++) {\r\n\t            // var ripplePath = symbolUtil.createSymbol(\r\n\t            //     symbolType, -0.5, -0.5, 1, 1, color\r\n\t            // );\r\n\t            // If width/height are set too small (e.g., set to 1) on ios10\r\n\t            // and macOS Sierra, a circle stroke become a rect, no matter what\r\n\t            // the scale is set. So we set width/height as 2. See #4136.\r\n\t            var ripplePath = symbolUtil.createSymbol(\r\n\t                symbolType, -1, -1, 2, 2, color\r\n\t            );\r\n\t            ripplePath.attr({\r\n\t                style: {\r\n\t                    strokeNoScale: true\r\n\t                },\r\n\t                z2: 99,\r\n\t                silent: true,\r\n\t                scale: [0.5, 0.5]\r\n\t            });\r\n\r\n\t            var delay = -i / EFFECT_RIPPLE_NUMBER * effectCfg.period + effectCfg.effectOffset;\r\n\t            // TODO Configurable effectCfg.period\r\n\t            ripplePath.animate('', true)\r\n\t                .when(effectCfg.period, {\r\n\t                    scale: [effectCfg.rippleScale / 2, effectCfg.rippleScale / 2]\r\n\t                })\r\n\t                .delay(delay)\r\n\t                .start();\r\n\t            ripplePath.animateStyle(true)\r\n\t                .when(effectCfg.period, {\r\n\t                    opacity: 0\r\n\t                })\r\n\t                .delay(delay)\r\n\t                .start();\r\n\r\n\t            rippleGroup.add(ripplePath);\r\n\t        }\r\n\r\n\t        updateRipplePath(rippleGroup, effectCfg);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Update effect symbol\r\n\t     */\r\n\t    effectSymbolProto.updateEffectAnimation = function (effectCfg) {\r\n\t        var oldEffectCfg = this._effectCfg;\r\n\t        var rippleGroup = this.childAt(1);\r\n\r\n\t        // Must reinitialize effect if following configuration changed\r\n\t        var DIFFICULT_PROPS = ['symbolType', 'period', 'rippleScale'];\r\n\t        for (var i = 0; i < DIFFICULT_PROPS; i++) {\r\n\t            var propName = DIFFICULT_PROPS[i];\r\n\t            if (oldEffectCfg[propName] !== effectCfg[propName]) {\r\n\t                this.stopEffectAnimation();\r\n\t                this.startEffectAnimation(effectCfg);\r\n\t                return;\r\n\t            }\r\n\t        }\r\n\r\n\t        updateRipplePath(rippleGroup, effectCfg);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Highlight symbol\r\n\t     */\r\n\t    effectSymbolProto.highlight = function () {\r\n\t        this.trigger('emphasis');\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Downplay symbol\r\n\t     */\r\n\t    effectSymbolProto.downplay = function () {\r\n\t        this.trigger('normal');\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Update symbol properties\r\n\t     * @param  {module:echarts/data/List} data\r\n\t     * @param  {number} idx\r\n\t     */\r\n\t    effectSymbolProto.updateData = function (data, idx) {\r\n\t        var seriesModel = data.hostModel;\r\n\r\n\t        this.childAt(0).updateData(data, idx);\r\n\r\n\t        var rippleGroup = this.childAt(1);\r\n\t        var itemModel = data.getItemModel(idx);\r\n\t        var symbolType = data.getItemVisual(idx, 'symbol');\r\n\t        var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));\r\n\t        var color = data.getItemVisual(idx, 'color');\r\n\r\n\t        rippleGroup.attr('scale', symbolSize);\r\n\r\n\t        rippleGroup.traverse(function (ripplePath) {\r\n\t            ripplePath.attr({\r\n\t                fill: color\r\n\t            });\r\n\t        });\r\n\r\n\t        var symbolOffset = itemModel.getShallow('symbolOffset');\r\n\t        if (symbolOffset) {\r\n\t            var pos = rippleGroup.position;\r\n\t            pos[0] = numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);\r\n\t            pos[1] = numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);\r\n\t        }\r\n\t        rippleGroup.rotation = (itemModel.getShallow('symbolRotate') || 0) * Math.PI / 180 || 0;\r\n\r\n\t        var effectCfg = {};\r\n\r\n\t        effectCfg.showEffectOn = seriesModel.get('showEffectOn');\r\n\t        effectCfg.rippleScale = itemModel.get('rippleEffect.scale');\r\n\t        effectCfg.brushType = itemModel.get('rippleEffect.brushType');\r\n\t        effectCfg.period = itemModel.get('rippleEffect.period') * 1000;\r\n\t        effectCfg.effectOffset = idx / data.count();\r\n\t        effectCfg.z = itemModel.getShallow('z') || 0;\r\n\t        effectCfg.zlevel = itemModel.getShallow('zlevel') || 0;\r\n\t        effectCfg.symbolType = symbolType;\r\n\t        effectCfg.color = color;\r\n\r\n\t        this.off('mouseover').off('mouseout').off('emphasis').off('normal');\r\n\r\n\t        if (effectCfg.showEffectOn === 'render') {\r\n\t            this._effectCfg\r\n\t                ? this.updateEffectAnimation(effectCfg)\r\n\t                : this.startEffectAnimation(effectCfg);\r\n\r\n\t            this._effectCfg = effectCfg;\r\n\t        }\r\n\t        else {\r\n\t            // Not keep old effect config\r\n\t            this._effectCfg = null;\r\n\r\n\t            this.stopEffectAnimation();\r\n\t            var symbol = this.childAt(0);\r\n\t            var onEmphasis = function () {\r\n\t                symbol.trigger('emphasis');\r\n\t                if (effectCfg.showEffectOn !== 'render') {\r\n\t                    this.startEffectAnimation(effectCfg);\r\n\t                }\r\n\t            };\r\n\t            var onNormal = function () {\r\n\t                symbol.trigger('normal');\r\n\t                if (effectCfg.showEffectOn !== 'render') {\r\n\t                    this.stopEffectAnimation();\r\n\t                }\r\n\t            };\r\n\t            this.on('mouseover', onEmphasis, this)\r\n\t                .on('mouseout', onNormal, this)\r\n\t                .on('emphasis', onEmphasis, this)\r\n\t                .on('normal', onNormal, this);\r\n\t        }\r\n\r\n\t        this._effectCfg = effectCfg;\r\n\t    };\r\n\r\n\t    effectSymbolProto.fadeOut = function (cb) {\r\n\t        this.off('mouseover').off('mouseout').off('emphasis').off('normal');\r\n\t        cb && cb();\r\n\t    };\r\n\r\n\t    zrUtil.inherits(EffectSymbol, Group);\r\n\r\n\t    module.exports = EffectSymbol;\r\n\r\n\r\n/***/ },\r\n/* 262 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(263);\r\n\t    __webpack_require__(264);\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    echarts.registerLayout(\r\n\t        __webpack_require__(269)\r\n\t    );\r\n\r\n\r\n/***/ },\r\n/* 263 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\t    var List = __webpack_require__(97);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var CoordinateSystem = __webpack_require__(26);\r\n\r\n\t    // Convert [ [{coord: []}, {coord: []}] ]\r\n\t    // to [ { coords: [[]] } ]\r\n\t    function preprocessOption (seriesOpt) {\r\n\t        var data = seriesOpt.data;\r\n\t        if (data && data[0] && data[0][0] && data[0][0].coord) {\r\n\t            if (true) {\r\n\t                console.warn('Lines data configuration has been changed to'\r\n\t                    + ' { coords:[[1,2],[2,3]] }');\r\n\t            }\r\n\t            seriesOpt.data = zrUtil.map(data, function (itemOpt) {\r\n\t                var coords = [\r\n\t                    itemOpt[0].coord, itemOpt[1].coord\r\n\t                ];\r\n\t                var target = {\r\n\t                    coords: coords\r\n\t                };\r\n\t                if (itemOpt[0].name) {\r\n\t                    target.fromName = itemOpt[0].name;\r\n\t                }\r\n\t                if (itemOpt[1].name) {\r\n\t                    target.toName = itemOpt[1].name;\r\n\t                }\r\n\t                return zrUtil.mergeAll([target, itemOpt[0], itemOpt[1]]);\r\n\t            });\r\n\t        }\r\n\t    }\r\n\r\n\t    var LinesSeries = SeriesModel.extend({\r\n\r\n\t        type: 'series.lines',\r\n\r\n\t        dependencies: ['grid', 'polar'],\r\n\r\n\t        visualColorAccessPath: 'lineStyle.normal.color',\r\n\r\n\t        init: function (option) {\r\n\t            // Not using preprocessor because mergeOption may not have series.type\r\n\t            preprocessOption(option);\r\n\r\n\t            LinesSeries.superApply(this, 'init', arguments);\r\n\t        },\r\n\r\n\t        mergeOption: function (option) {\r\n\t            preprocessOption(option);\r\n\r\n\t            LinesSeries.superApply(this, 'mergeOption', arguments);\r\n\t        },\r\n\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            if (true) {\r\n\t                var CoordSys = CoordinateSystem.get(option.coordinateSystem);\r\n\t                if (!CoordSys) {\r\n\t                    throw new Error('Unkown coordinate system ' + option.coordinateSystem);\r\n\t                }\r\n\t            }\r\n\r\n\t            var lineData = new List(['value'], this);\r\n\t            lineData.hasItemOption = false;\r\n\t            lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {\r\n\t                // dataItem is simply coords\r\n\t                if (dataItem instanceof Array) {\r\n\t                    return NaN;\r\n\t                }\r\n\t                else {\r\n\t                    lineData.hasItemOption = true;\r\n\t                    var value = dataItem.value;\r\n\t                    if (value != null) {\r\n\t                        return value instanceof Array ? value[dimIndex] : value;\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\r\n\t            return lineData;\r\n\t        },\r\n\r\n\t        formatTooltip: function (dataIndex) {\r\n\t            var data = this.getData();\r\n\t            var itemModel = data.getItemModel(dataIndex);\r\n\t            var name = itemModel.get('name');\r\n\t            if (name) {\r\n\t                return name;\r\n\t            }\r\n\t            var fromName = itemModel.get('fromName');\r\n\t            var toName = itemModel.get('toName');\r\n\t            return fromName + ' > ' + toName;\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\t            coordinateSystem: 'geo',\r\n\t            zlevel: 0,\r\n\t            z: 2,\r\n\t            legendHoverLink: true,\r\n\r\n\t            hoverAnimation: true,\r\n\t            // Cartesian coordinate system\r\n\t            xAxisIndex: 0,\r\n\t            yAxisIndex: 0,\r\n\r\n\t            // Geo coordinate system\r\n\t            geoIndex: 0,\r\n\r\n\t            effect: {\r\n\t                show: false,\r\n\t                period: 4,\r\n\t                // Animation delay. support callback\r\n\t                // delay: 0,\r\n\t                // If move with constant speed px/sec\r\n\t                // period will be ignored if this property is > 0,\r\n\t                constantSpeed: 0,\r\n\t                symbol: 'circle',\r\n\t                symbolSize: 3,\r\n\t                loop: true,\r\n\t                // Length of trail, 0 - 1\r\n\t                trailLength: 0.2\r\n\t                // Same with lineStyle.normal.color\r\n\t                // color\r\n\t            },\r\n\r\n\t            large: false,\r\n\t            // Available when large is true\r\n\t            largeThreshold: 2000,\r\n\r\n\t            // If lines are polyline\r\n\t            // polyline not support curveness, label, animation\r\n\t            polyline: false,\r\n\r\n\t            label: {\r\n\t                normal: {\r\n\t                    show: false,\r\n\t                    position: 'end'\r\n\t                    // distance: 5,\r\n\t                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调\r\n\t                }\r\n\t            },\r\n\r\n\t            lineStyle: {\r\n\t                normal: {\r\n\t                    opacity: 0.5\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 264 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var LineDraw = __webpack_require__(200);\r\n\t    var EffectLine = __webpack_require__(265);\r\n\t    var Line = __webpack_require__(201);\r\n\t    var Polyline = __webpack_require__(266);\r\n\t    var EffectPolyline = __webpack_require__(267);\r\n\t    var LargeLineDraw = __webpack_require__(268);\r\n\r\n\t    __webpack_require__(1).extendChartView({\r\n\r\n\t        type: 'lines',\r\n\r\n\t        init: function () {},\r\n\r\n\t        render: function (seriesModel, ecModel, api) {\r\n\t            var data = seriesModel.getData();\r\n\t            var lineDraw = this._lineDraw;\r\n\r\n\t            var hasEffect = seriesModel.get('effect.show');\r\n\t            var isPolyline = seriesModel.get('polyline');\r\n\t            var isLarge = seriesModel.get('large') && data.count() >= seriesModel.get('largeThreshold');\r\n\r\n\t            if (true) {\r\n\t                if (hasEffect && isLarge) {\r\n\t                    console.warn('Large lines not support effect');\r\n\t                }\r\n\t            }\r\n\t            if (hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLarge !== this._isLarge) {\r\n\t                if (lineDraw) {\r\n\t                    lineDraw.remove();\r\n\t                }\r\n\t                lineDraw = this._lineDraw = isLarge\r\n\t                    ? new LargeLineDraw()\r\n\t                    : new LineDraw(\r\n\t                        isPolyline\r\n\t                            ? (hasEffect ? EffectPolyline : Polyline)\r\n\t                            : (hasEffect ? EffectLine : Line)\r\n\t                    );\r\n\t                this._hasEffet = hasEffect;\r\n\t                this._isPolyline = isPolyline;\r\n\t                this._isLarge = isLarge;\r\n\t            }\r\n\r\n\t            var zlevel = seriesModel.get('zlevel');\r\n\t            var trailLength = seriesModel.get('effect.trailLength');\r\n\r\n\t            var zr = api.getZr();\r\n\t            // Avoid the drag cause ghost shadow\r\n\t            // FIXME Better way ?\r\n\t            zr.painter.getLayer(zlevel).clear(true);\r\n\t            // Config layer with motion blur\r\n\t            if (this._lastZlevel != null) {\r\n\t                zr.configLayer(this._lastZlevel, {\r\n\t                    motionBlur: false\r\n\t                });\r\n\t            }\r\n\t            if (hasEffect && trailLength) {\r\n\t                if (true) {\r\n\t                    var notInIndividual = false;\r\n\t                    ecModel.eachSeries(function (otherSeriesModel) {\r\n\t                        if (otherSeriesModel !== seriesModel && otherSeriesModel.get('zlevel') === zlevel) {\r\n\t                            notInIndividual = true;\r\n\t                        }\r\n\t                    });\r\n\t                    notInIndividual && console.warn('Lines with trail effect should have an individual zlevel');\r\n\t                }\r\n\r\n\t                zr.configLayer(zlevel, {\r\n\t                    motionBlur: true,\r\n\t                    lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)\r\n\t                });\r\n\t            }\r\n\r\n\t            this.group.add(lineDraw.group);\r\n\r\n\t            lineDraw.updateData(data);\r\n\r\n\t            this._lastZlevel = zlevel;\r\n\t        },\r\n\r\n\t        updateLayout: function (seriesModel, ecModel, api) {\r\n\t            this._lineDraw.updateLayout(seriesModel);\r\n\t            // Not use motion when dragging or zooming\r\n\t            var zr = api.getZr();\r\n\t            zr.painter.getLayer(this._lastZlevel).clear(true);\r\n\t        },\r\n\r\n\t        remove: function (ecModel, api) {\r\n\t            this._lineDraw && this._lineDraw.remove(api, true);\r\n\t        },\r\n\r\n\t        dispose: function () {}\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 265 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Provide effect for line\r\n\t * @module echarts/chart/helper/EffectLine\r\n\t */\r\n\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var Line = __webpack_require__(201);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var symbolUtil = __webpack_require__(106);\r\n\t    var vec2 = __webpack_require__(10);\r\n\r\n\t    var curveUtil = __webpack_require__(50);\r\n\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @extends {module:zrender/graphic/Group}\r\n\t     * @alias {module:echarts/chart/helper/Line}\r\n\t     */\r\n\t    function EffectLine(lineData, idx, seriesScope) {\r\n\t        graphic.Group.call(this);\r\n\r\n\t        this.add(this.createLine(lineData, idx, seriesScope));\r\n\r\n\t        this._updateEffectSymbol(lineData, idx);\r\n\t    }\r\n\r\n\t    var effectLineProto = EffectLine.prototype;\r\n\r\n\t    effectLineProto.createLine = function (lineData, idx, seriesScope) {\r\n\t        return new Line(lineData, idx, seriesScope);\r\n\t    };\r\n\r\n\t    effectLineProto._updateEffectSymbol = function (lineData, idx) {\r\n\t        var itemModel = lineData.getItemModel(idx);\r\n\t        var effectModel = itemModel.getModel('effect');\r\n\t        var size = effectModel.get('symbolSize');\r\n\t        var symbolType = effectModel.get('symbol');\r\n\t        if (!zrUtil.isArray(size)) {\r\n\t            size = [size, size];\r\n\t        }\r\n\t        var color = effectModel.get('color') || lineData.getItemVisual(idx, 'color');\r\n\t        var symbol = this.childAt(1);\r\n\r\n\t        if (this._symbolType !== symbolType) {\r\n\t            // Remove previous\r\n\t            this.remove(symbol);\r\n\r\n\t            symbol = symbolUtil.createSymbol(\r\n\t                symbolType, -0.5, -0.5, 1, 1, color\r\n\t            );\r\n\t            symbol.z2 = 100;\r\n\t            symbol.culling = true;\r\n\r\n\t            this.add(symbol);\r\n\t        }\r\n\r\n\t        // Symbol may be removed if loop is false\r\n\t        if (!symbol) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        // Shadow color is same with color in default\r\n\t        symbol.setStyle('shadowColor', color);\r\n\t        symbol.setStyle(effectModel.getItemStyle(['color']));\r\n\r\n\t        symbol.attr('scale', size);\r\n\r\n\t        symbol.setColor(color);\r\n\t        symbol.attr('scale', size);\r\n\r\n\t        this._symbolType = symbolType;\r\n\r\n\t        this._updateEffectAnimation(lineData, effectModel, idx);\r\n\t    };\r\n\r\n\t    effectLineProto._updateEffectAnimation = function (lineData, effectModel, idx) {\r\n\r\n\t        var symbol = this.childAt(1);\r\n\t        if (!symbol) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var self = this;\r\n\r\n\t        var points = lineData.getItemLayout(idx);\r\n\r\n\t        var period = effectModel.get('period') * 1000;\r\n\t        var loop = effectModel.get('loop');\r\n\t        var constantSpeed = effectModel.get('constantSpeed');\r\n\t        var delayExpr = zrUtil.retrieve(effectModel.get('delay'), function (idx) {\r\n\t            return idx / lineData.count() * period / 3;\r\n\t        });\r\n\t        var isDelayFunc = typeof delayExpr === 'function';\r\n\r\n\t        // Ignore when updating\r\n\t        symbol.ignore = true;\r\n\r\n\t        this.updateAnimationPoints(symbol, points);\r\n\r\n\t        if (constantSpeed > 0) {\r\n\t            period = this.getLineLength(symbol) / constantSpeed * 1000;\r\n\t        }\r\n\r\n\t        if (period !== this._period || loop !== this._loop) {\r\n\r\n\t            symbol.stopAnimation();\r\n\r\n\t            var delay = delayExpr;\r\n\t            if (isDelayFunc) {\r\n\t                delay = delayExpr(idx);\r\n\t            }\r\n\t            if (symbol.__t > 0) {\r\n\t                delay = -period * symbol.__t;\r\n\t            }\r\n\t            symbol.__t = 0;\r\n\t            var animator = symbol.animate('', loop)\r\n\t                .when(period, {\r\n\t                    __t: 1\r\n\t                })\r\n\t                .delay(delay)\r\n\t                .during(function () {\r\n\t                    self.updateSymbolPosition(symbol);\r\n\t                });\r\n\t            if (!loop) {\r\n\t                animator.done(function () {\r\n\t                    self.remove(symbol);\r\n\t                });\r\n\t            }\r\n\t            animator.start();\r\n\t        }\r\n\r\n\t        this._period = period;\r\n\t        this._loop = loop;\r\n\t    };\r\n\r\n\t    effectLineProto.getLineLength = function (symbol) {\r\n\t        // Not so accurate\r\n\t        return (vec2.dist(symbol.__p1, symbol.__cp1)\r\n\t            + vec2.dist(symbol.__cp1, symbol.__p2));\r\n\t    };\r\n\r\n\t    effectLineProto.updateAnimationPoints = function (symbol, points) {\r\n\t        symbol.__p1 = points[0];\r\n\t        symbol.__p2 = points[1];\r\n\t        symbol.__cp1 = points[2] || [\r\n\t            (points[0][0] + points[1][0]) / 2,\r\n\t            (points[0][1] + points[1][1]) / 2\r\n\t        ];\r\n\t    };\r\n\r\n\t    effectLineProto.updateData = function (lineData, idx, seriesScope) {\r\n\t        this.childAt(0).updateData(lineData, idx, seriesScope);\r\n\t        this._updateEffectSymbol(lineData, idx);\r\n\t    };\r\n\r\n\t    effectLineProto.updateSymbolPosition = function (symbol) {\r\n\t        var p1 = symbol.__p1;\r\n\t        var p2 = symbol.__p2;\r\n\t        var cp1 = symbol.__cp1;\r\n\t        var t = symbol.__t;\r\n\t        var pos = symbol.position;\r\n\t        var quadraticAt = curveUtil.quadraticAt;\r\n\t        var quadraticDerivativeAt = curveUtil.quadraticDerivativeAt;\r\n\t        pos[0] = quadraticAt(p1[0], cp1[0], p2[0], t);\r\n\t        pos[1] = quadraticAt(p1[1], cp1[1], p2[1], t);\r\n\r\n\t        // Tangent\r\n\t        var tx = quadraticDerivativeAt(p1[0], cp1[0], p2[0], t);\r\n\t        var ty = quadraticDerivativeAt(p1[1], cp1[1], p2[1], t);\r\n\r\n\t        symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;\r\n\r\n\t        symbol.ignore = false;\r\n\t    };\r\n\r\n\r\n\t    effectLineProto.updateLayout = function (lineData, idx) {\r\n\t        this.childAt(0).updateLayout(lineData, idx);\r\n\r\n\t        var effectModel = lineData.getItemModel(idx).getModel('effect');\r\n\t        this._updateEffectAnimation(lineData, effectModel, idx);\r\n\t    };\r\n\r\n\t    zrUtil.inherits(EffectLine, graphic.Group);\r\n\r\n\t    module.exports = EffectLine;\r\n\r\n\r\n/***/ },\r\n/* 266 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/chart/helper/Line\r\n\t */\r\n\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @extends {module:zrender/graphic/Group}\r\n\t     * @alias {module:echarts/chart/helper/Polyline}\r\n\t     */\r\n\t    function Polyline(lineData, idx, seriesScope) {\r\n\t        graphic.Group.call(this);\r\n\r\n\t        this._createPolyline(lineData, idx, seriesScope);\r\n\t    }\r\n\r\n\t    var polylineProto = Polyline.prototype;\r\n\r\n\t    polylineProto._createPolyline = function (lineData, idx, seriesScope) {\r\n\t        // var seriesModel = lineData.hostModel;\r\n\t        var points = lineData.getItemLayout(idx);\r\n\r\n\t        var line = new graphic.Polyline({\r\n\t            shape: {\r\n\t                points: points\r\n\t            }\r\n\t        });\r\n\r\n\t        this.add(line);\r\n\r\n\t        this._updateCommonStl(lineData, idx, seriesScope);\r\n\t    };\r\n\r\n\t    polylineProto.updateData = function (lineData, idx, seriesScope) {\r\n\t        var seriesModel = lineData.hostModel;\r\n\r\n\t        var line = this.childAt(0);\r\n\t        var target = {\r\n\t            shape: {\r\n\t                points: lineData.getItemLayout(idx)\r\n\t            }\r\n\t        };\r\n\t        graphic.updateProps(line, target, seriesModel, idx);\r\n\r\n\t        this._updateCommonStl(lineData, idx, seriesScope);\r\n\t    };\r\n\r\n\t    polylineProto._updateCommonStl = function (lineData, idx, seriesScope) {\r\n\t        var line = this.childAt(0);\r\n\t        var itemModel = lineData.getItemModel(idx);\r\n\r\n\t        var visualColor = lineData.getItemVisual(idx, 'color');\r\n\r\n\t        var lineStyle = seriesScope && seriesScope.lineStyle;\r\n\t        var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;\r\n\r\n\t        if (!seriesScope || lineData.hasItemOption) {\r\n\t            lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();\r\n\t            hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();\r\n\t        }\r\n\t        line.useStyle(zrUtil.defaults(\r\n\t            {\r\n\t                strokeNoScale: true,\r\n\t                fill: 'none',\r\n\t                stroke: visualColor\r\n\t            },\r\n\t            lineStyle\r\n\t        ));\r\n\t        line.hoverStyle = hoverLineStyle;\r\n\r\n\t        graphic.setHoverStyle(this);\r\n\t    };\r\n\r\n\t    polylineProto.updateLayout = function (lineData, idx) {\r\n\t        var polyline = this.childAt(0);\r\n\t        polyline.setShape('points', lineData.getItemLayout(idx));\r\n\t    };\r\n\r\n\t    zrUtil.inherits(Polyline, graphic.Group);\r\n\r\n\t    module.exports = Polyline;\r\n\r\n\r\n/***/ },\r\n/* 267 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Provide effect for line\r\n\t * @module echarts/chart/helper/EffectLine\r\n\t */\r\n\r\n\r\n\t    var Polyline = __webpack_require__(266);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var EffectLine = __webpack_require__(265);\r\n\t    var vec2 = __webpack_require__(10);\r\n\r\n\t    /**\r\n\t     * @constructor\r\n\t     * @extends {module:echarts/chart/helper/EffectLine}\r\n\t     * @alias {module:echarts/chart/helper/Polyline}\r\n\t     */\r\n\t    function EffectPolyline(lineData, idx, seriesScope) {\r\n\t        EffectLine.call(this, lineData, idx, seriesScope);\r\n\t        this._lastFrame = 0;\r\n\t        this._lastFramePercent = 0;\r\n\t    }\r\n\r\n\t    var effectPolylineProto = EffectPolyline.prototype;\r\n\r\n\t    // Overwrite\r\n\t    effectPolylineProto.createLine = function (lineData, idx, seriesScope) {\r\n\t        return new Polyline(lineData, idx, seriesScope);\r\n\t    };\r\n\r\n\t    // Overwrite\r\n\t    effectPolylineProto.updateAnimationPoints = function (symbol, points) {\r\n\t        this._points = points;\r\n\t        var accLenArr = [0];\r\n\t        var len = 0;\r\n\t        for (var i = 1; i < points.length; i++) {\r\n\t            var p1 = points[i - 1];\r\n\t            var p2 = points[i];\r\n\t            len += vec2.dist(p1, p2);\r\n\t            accLenArr.push(len);\r\n\t        }\r\n\t        if (len === 0) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        for (var i = 0; i < accLenArr.length; i++) {\r\n\t            accLenArr[i] /= len;\r\n\t        }\r\n\t        this._offsets = accLenArr;\r\n\t        this._length = len;\r\n\t    };\r\n\r\n\t    // Overwrite\r\n\t    effectPolylineProto.getLineLength = function (symbol) {\r\n\t        return this._length;\r\n\t    };\r\n\r\n\t    // Overwrite\r\n\t    effectPolylineProto.updateSymbolPosition = function (symbol) {\r\n\t        var t = symbol.__t;\r\n\t        var points = this._points;\r\n\t        var offsets = this._offsets;\r\n\t        var len = points.length;\r\n\r\n\t        if (!offsets) {\r\n\t            // Has length 0\r\n\t            return;\r\n\t        }\r\n\r\n\t        var lastFrame = this._lastFrame;\r\n\t        var frame;\r\n\r\n\t        if (t < this._lastFramePercent) {\r\n\t            // Start from the next frame\r\n\t            // PENDING start from lastFrame ?\r\n\t            var start = Math.min(lastFrame + 1, len - 1);\r\n\t            for (frame = start; frame >= 0; frame--) {\r\n\t                if (offsets[frame] <= t) {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            // PENDING really need to do this ?\r\n\t            frame = Math.min(frame, len - 2);\r\n\t        }\r\n\t        else {\r\n\t            for (var frame = lastFrame; frame < len; frame++) {\r\n\t                if (offsets[frame] > t) {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            frame = Math.min(frame - 1, len - 2);\r\n\t        }\r\n\r\n\t        vec2.lerp(\r\n\t            symbol.position, points[frame], points[frame + 1],\r\n\t            (t - offsets[frame]) / (offsets[frame + 1] - offsets[frame])\r\n\t        );\r\n\r\n\t        var tx = points[frame + 1][0] - points[frame][0];\r\n\t        var ty = points[frame + 1][1] - points[frame][1];\r\n\t        symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;\r\n\r\n\t        this._lastFrame = frame;\r\n\t        this._lastFramePercent = t;\r\n\r\n\t        symbol.ignore = false;\r\n\t    };\r\n\r\n\t    zrUtil.inherits(EffectPolyline, EffectLine);\r\n\r\n\t    module.exports = EffectPolyline;\r\n\r\n\r\n/***/ },\r\n/* 268 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// TODO Batch by color\r\n\r\n\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\r\n\t    var quadraticContain = __webpack_require__(55);\r\n\t    var lineContain = __webpack_require__(53);\r\n\r\n\t    var LargeLineShape = graphic.extendShape({\r\n\t        shape: {\r\n\t            polyline: false,\r\n\r\n\t            segs: []\r\n\t        },\r\n\r\n\t        buildPath: function (path, shape) {\r\n\t            var segs = shape.segs;\r\n\t            var isPolyline = shape.polyline;\r\n\r\n\t            for (var i = 0; i < segs.length; i++) {\r\n\t                var seg = segs[i];\r\n\t                if (isPolyline) {\r\n\t                    path.moveTo(seg[0][0], seg[0][1]);\r\n\t                    for (var j = 1; j < seg.length; j++) {\r\n\t                        path.lineTo(seg[j][0], seg[j][1]);\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    path.moveTo(seg[0][0], seg[0][1]);\r\n\t                    if (seg.length > 2) {\r\n\t                        path.quadraticCurveTo(seg[2][0], seg[2][1], seg[1][0], seg[1][1]);\r\n\t                    }\r\n\t                    else {\r\n\t                        path.lineTo(seg[1][0], seg[1][1]);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        findDataIndex: function (x, y) {\r\n\t            var shape = this.shape;\r\n\t            var segs = shape.segs;\r\n\t            var isPolyline = shape.polyline;\r\n\t            var lineWidth = Math.max(this.style.lineWidth, 1);\r\n\r\n\t            // Not consider transform\r\n\t            for (var i = 0; i < segs.length; i++) {\r\n\t                var seg = segs[i];\r\n\t                if (isPolyline) {\r\n\t                    for (var j = 1; j < seg.length; j++) {\r\n\t                        if (lineContain.containStroke(\r\n\t                            seg[j - 1][0], seg[j - 1][1], seg[j][0], seg[j][1], lineWidth, x, y\r\n\t                        )) {\r\n\t                            return i;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    if (seg.length > 2) {\r\n\t                        if (quadraticContain.containStroke(\r\n\t                            seg[0][0], seg[0][1], seg[2][0], seg[2][1], seg[1][0], seg[1][1], lineWidth, x, y\r\n\t                        )) {\r\n\t                            return i;\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        if (lineContain.containStroke(\r\n\t                            seg[0][0], seg[0][1], seg[1][0], seg[1][1], lineWidth, x, y\r\n\t                        )) {\r\n\t                            return i;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            return -1;\r\n\t        }\r\n\t    });\r\n\r\n\t    function LargeLineDraw() {\r\n\t        this.group = new graphic.Group();\r\n\r\n\t        this._lineEl = new LargeLineShape();\r\n\t    }\r\n\r\n\t    var largeLineProto = LargeLineDraw.prototype;\r\n\r\n\t    /**\r\n\t     * Update symbols draw by new data\r\n\t     * @param {module:echarts/data/List} data\r\n\t     */\r\n\t    largeLineProto.updateData = function (data) {\r\n\t        this.group.removeAll();\r\n\r\n\t        var lineEl = this._lineEl;\r\n\r\n\t        var seriesModel = data.hostModel;\r\n\r\n\t        lineEl.setShape({\r\n\t            segs: data.mapArray(data.getItemLayout),\r\n\t            polyline: seriesModel.get('polyline')\r\n\t        });\r\n\r\n\t        lineEl.useStyle(\r\n\t            seriesModel.getModel('lineStyle.normal').getLineStyle()\r\n\t        );\r\n\r\n\t        var visualColor = data.getVisual('color');\r\n\t        if (visualColor) {\r\n\t            lineEl.setStyle('stroke', visualColor);\r\n\t        }\r\n\t        lineEl.setStyle('fill');\r\n\r\n\t        // Enable tooltip\r\n\t        // PENDING May have performance issue when path is extremely large\r\n\t        lineEl.seriesIndex = seriesModel.seriesIndex;\r\n\t        lineEl.on('mousemove', function (e) {\r\n\t            lineEl.dataIndex = null;\r\n\t            var dataIndex = lineEl.findDataIndex(e.offsetX, e.offsetY);\r\n\t            if (dataIndex > 0) {\r\n\t                // Provide dataIndex for tooltip\r\n\t                lineEl.dataIndex = dataIndex;\r\n\t            }\r\n\t        });\r\n\r\n\t        // Add back\r\n\t        this.group.add(lineEl);\r\n\t    };\r\n\r\n\t    largeLineProto.updateLayout = function (seriesModel) {\r\n\t        var data = seriesModel.getData();\r\n\t        this._lineEl.setShape({\r\n\t            segs: data.mapArray(data.getItemLayout)\r\n\t        });\r\n\t    };\r\n\r\n\t    largeLineProto.remove = function () {\r\n\t        this.group.removeAll();\r\n\t    };\r\n\r\n\t    module.exports = LargeLineDraw;\r\n\r\n\r\n/***/ },\r\n/* 269 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    module.exports = function (ecModel) {\r\n\t        ecModel.eachSeriesByType('lines', function (seriesModel) {\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            var lineData = seriesModel.getData();\r\n\r\n\t            // FIXME Use data dimensions ?\r\n\t            lineData.each(function (idx) {\r\n\t                var itemModel = lineData.getItemModel(idx);\r\n\t                // TODO Support pure array\r\n\t                var coords = (itemModel.option instanceof Array) ?\r\n\t                    itemModel.option : itemModel.get('coords');\r\n\r\n\t                if (true) {\r\n\t                    if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {\r\n\t                        throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');\r\n\t                    }\r\n\t                }\r\n\t                var pts = [];\r\n\r\n\t                if (seriesModel.get('polyline')) {\r\n\t                    for (var i = 0; i < coords.length; i++) {\r\n\t                        pts.push(coordSys.dataToPoint(coords[i]));\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    pts[0] = coordSys.dataToPoint(coords[0]);\r\n\t                    pts[1] = coordSys.dataToPoint(coords[1]);\r\n\r\n\t                    var curveness = itemModel.get('lineStyle.normal.curveness');\r\n\t                    if (+curveness) {\r\n\t                        pts[2] = [\r\n\t                            (pts[0][0] + pts[1][0]) / 2 - (pts[0][1] - pts[1][1]) * curveness,\r\n\t                            (pts[0][1] + pts[1][1]) / 2 - (pts[1][0] - pts[0][0]) * curveness\r\n\t                        ];\r\n\t                    }\r\n\t                }\r\n\t                lineData.setItemLayout(idx, pts);\r\n\t            });\r\n\t        });\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 270 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(271);\r\n\t    __webpack_require__(272);\r\n\r\n\r\n/***/ },\r\n/* 271 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var SeriesModel = __webpack_require__(28);\r\n\t    var createListFromArray = __webpack_require__(101);\r\n\r\n\t    module.exports = SeriesModel.extend({\r\n\t        type: 'series.heatmap',\r\n\r\n\t        getInitialData: function (option, ecModel) {\r\n\t            return createListFromArray(option.data, this, ecModel);\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\r\n\t            // Cartesian2D or geo\r\n\t            coordinateSystem: 'cartesian2d',\r\n\r\n\t            zlevel: 0,\r\n\r\n\t            z: 2,\r\n\r\n\t            // Cartesian coordinate system\r\n\t            // xAxisIndex: 0,\r\n\t            // yAxisIndex: 0,\r\n\r\n\t            // Geo coordinate system\r\n\t            geoIndex: 0,\r\n\r\n\t            blurSize: 30,\r\n\r\n\t            pointSize: 20,\r\n\r\n\t            maxOpacity: 1,\r\n\r\n\t            minOpacity: 0\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 272 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var HeatmapLayer = __webpack_require__(273);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    function getIsInPiecewiseRange(dataExtent, pieceList, selected) {\r\n\t        var dataSpan = dataExtent[1] - dataExtent[0];\r\n\t        pieceList = zrUtil.map(pieceList, function (piece) {\r\n\t            return {\r\n\t                interval: [\r\n\t                    (piece.interval[0] - dataExtent[0]) / dataSpan,\r\n\t                    (piece.interval[1] - dataExtent[0]) / dataSpan\r\n\t                ]\r\n\t            };\r\n\t        });\r\n\t        var len = pieceList.length;\r\n\t        var lastIndex = 0;\r\n\t        return function (val) {\r\n\t            // Try to find in the location of the last found\r\n\t            for (var i = lastIndex; i < len; i++) {\r\n\t                var interval = pieceList[i].interval;\r\n\t                if (interval[0] <= val && val <= interval[1]) {\r\n\t                    lastIndex = i;\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            if (i === len) { // Not found, back interation\r\n\t                for (var i = lastIndex - 1; i >= 0; i--) {\r\n\t                    var interval = pieceList[i].interval;\r\n\t                    if (interval[0] <= val && val <= interval[1]) {\r\n\t                        lastIndex = i;\r\n\t                        break;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            return i >= 0 && i < len && selected[i];\r\n\t        };\r\n\t    }\r\n\r\n\t    function getIsInContinuousRange(dataExtent, range) {\r\n\t        var dataSpan = dataExtent[1] - dataExtent[0];\r\n\t        range = [\r\n\t            (range[0] - dataExtent[0]) / dataSpan,\r\n\t            (range[1] - dataExtent[0]) / dataSpan\r\n\t        ];\r\n\t        return function (val) {\r\n\t            return val >= range[0] && val <= range[1];\r\n\t        };\r\n\t    }\r\n\r\n\t    function isGeoCoordSys(coordSys) {\r\n\t        var dimensions = coordSys.dimensions;\r\n\t        // Not use coorSys.type === 'geo' because coordSys maybe extended\r\n\t        return dimensions[0] === 'lng' && dimensions[1] === 'lat';\r\n\t    }\r\n\r\n\t    module.exports = __webpack_require__(1).extendChartView({\r\n\r\n\t        type: 'heatmap',\r\n\r\n\t        render: function (seriesModel, ecModel, api) {\r\n\t            var visualMapOfThisSeries;\r\n\t            ecModel.eachComponent('visualMap', function (visualMap) {\r\n\t                visualMap.eachTargetSeries(function (targetSeries) {\r\n\t                    if (targetSeries === seriesModel) {\r\n\t                        visualMapOfThisSeries = visualMap;\r\n\t                    }\r\n\t                });\r\n\t            });\r\n\r\n\t            if (true) {\r\n\t                if (!visualMapOfThisSeries) {\r\n\t                    throw new Error('Heatmap must use with visualMap');\r\n\t                }\r\n\t            }\r\n\r\n\t            this.group.removeAll();\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            if (coordSys.type === 'cartesian2d') {\r\n\t                this._renderOnCartesian(coordSys, seriesModel, api);\r\n\t            }\r\n\t            else if (isGeoCoordSys(coordSys)) {\r\n\t                this._renderOnGeo(\r\n\t                    coordSys, seriesModel, visualMapOfThisSeries, api\r\n\t                );\r\n\t            }\r\n\t        },\r\n\r\n\t        dispose: function () {},\r\n\r\n\t        _renderOnCartesian: function (cartesian, seriesModel, api) {\r\n\t            var xAxis = cartesian.getAxis('x');\r\n\t            var yAxis = cartesian.getAxis('y');\r\n\t            var group = this.group;\r\n\r\n\t            if (true) {\r\n\t                if (!(xAxis.type === 'category' && yAxis.type === 'category')) {\r\n\t                    throw new Error('Heatmap on cartesian must have two category axes');\r\n\t                }\r\n\t                if (!(xAxis.onBand && yAxis.onBand)) {\r\n\t                    throw new Error('Heatmap on cartesian must have two axes with boundaryGap true');\r\n\t                }\r\n\t            }\r\n\r\n\t            var width = xAxis.getBandWidth();\r\n\t            var height = yAxis.getBandWidth();\r\n\r\n\t            var data = seriesModel.getData();\r\n\r\n\t            var itemStyleQuery = 'itemStyle.normal';\r\n\t            var hoverItemStyleQuery = 'itemStyle.emphasis';\r\n\t            var labelQuery = 'label.normal';\r\n\t            var hoverLabelQuery = 'label.emphasis';\r\n\t            var style = seriesModel.getModel(itemStyleQuery).getItemStyle(['color']);\r\n\t            var hoverStl = seriesModel.getModel(hoverItemStyleQuery).getItemStyle();\r\n\t            var labelModel = seriesModel.getModel('label.normal');\r\n\t            var hoverLabelModel = seriesModel.getModel('label.emphasis');\r\n\r\n\t            data.each(['x', 'y', 'z'], function (x, y, z, idx) {\r\n\t                var itemModel = data.getItemModel(idx);\r\n\t                var point = cartesian.dataToPoint([x, y]);\r\n\t                // Ignore empty data\r\n\t                if (isNaN(z)) {\r\n\t                    return;\r\n\t                }\r\n\t                var rect = new graphic.Rect({\r\n\t                    shape: {\r\n\t                        x: point[0] - width / 2,\r\n\t                        y: point[1] - height / 2,\r\n\t                        width: width,\r\n\t                        height: height\r\n\t                    },\r\n\t                    style: {\r\n\t                        fill: data.getItemVisual(idx, 'color'),\r\n\t                        opacity: data.getItemVisual(idx, 'opacity')\r\n\t                    }\r\n\t                });\r\n\t                // Optimization for large datset\r\n\t                if (data.hasItemOption) {\r\n\t                    style = itemModel.getModel(itemStyleQuery).getItemStyle(['color']);\r\n\t                    hoverStl = itemModel.getModel(hoverItemStyleQuery).getItemStyle();\r\n\t                    labelModel = itemModel.getModel(labelQuery);\r\n\t                    hoverLabelModel = itemModel.getModel(hoverLabelQuery);\r\n\t                }\r\n\r\n\t                var rawValue = seriesModel.getRawValue(idx);\r\n\t                var defaultText = '-';\r\n\t                if (rawValue && rawValue[2] != null) {\r\n\t                    defaultText = rawValue[2];\r\n\t                }\r\n\t                if (labelModel.getShallow('show')) {\r\n\t                    graphic.setText(style, labelModel);\r\n\t                    style.text = seriesModel.getFormattedLabel(idx, 'normal') || defaultText;\r\n\t                }\r\n\t                if (hoverLabelModel.getShallow('show')) {\r\n\t                    graphic.setText(hoverStl, hoverLabelModel);\r\n\t                    hoverStl.text = seriesModel.getFormattedLabel(idx, 'emphasis') || defaultText;\r\n\t                }\r\n\r\n\t                rect.setStyle(style);\r\n\r\n\t                graphic.setHoverStyle(rect, data.hasItemOption ? hoverStl : zrUtil.extend({}, hoverStl));\r\n\r\n\t                group.add(rect);\r\n\t                data.setItemGraphicEl(idx, rect);\r\n\t            });\r\n\t        },\r\n\r\n\t        _renderOnGeo: function (geo, seriesModel, visualMapModel, api) {\r\n\t            var inRangeVisuals = visualMapModel.targetVisuals.inRange;\r\n\t            var outOfRangeVisuals = visualMapModel.targetVisuals.outOfRange;\r\n\t            // if (!visualMapping) {\r\n\t            //     throw new Error('Data range must have color visuals');\r\n\t            // }\r\n\r\n\t            var data = seriesModel.getData();\r\n\t            var hmLayer = this._hmLayer || (this._hmLayer || new HeatmapLayer());\r\n\t            hmLayer.blurSize = seriesModel.get('blurSize');\r\n\t            hmLayer.pointSize = seriesModel.get('pointSize');\r\n\t            hmLayer.minOpacity = seriesModel.get('minOpacity');\r\n\t            hmLayer.maxOpacity = seriesModel.get('maxOpacity');\r\n\r\n\t            var rect = geo.getViewRect().clone();\r\n\t            var roamTransform = geo.getRoamTransform().transform;\r\n\t            rect.applyTransform(roamTransform);\r\n\r\n\t            // Clamp on viewport\r\n\t            var x = Math.max(rect.x, 0);\r\n\t            var y = Math.max(rect.y, 0);\r\n\t            var x2 = Math.min(rect.width + rect.x, api.getWidth());\r\n\t            var y2 = Math.min(rect.height + rect.y, api.getHeight());\r\n\t            var width = x2 - x;\r\n\t            var height = y2 - y;\r\n\r\n\t            var points = data.mapArray(['lng', 'lat', 'value'], function (lng, lat, value) {\r\n\t                var pt = geo.dataToPoint([lng, lat]);\r\n\t                pt[0] -= x;\r\n\t                pt[1] -= y;\r\n\t                pt.push(value);\r\n\t                return pt;\r\n\t            });\r\n\r\n\t            var dataExtent = visualMapModel.getExtent();\r\n\t            var isInRange = visualMapModel.type === 'visualMap.continuous'\r\n\t                ? getIsInContinuousRange(dataExtent, visualMapModel.option.range)\r\n\t                : getIsInPiecewiseRange(\r\n\t                    dataExtent, visualMapModel.getPieceList(), visualMapModel.option.selected\r\n\t                );\r\n\r\n\t            hmLayer.update(\r\n\t                points, width, height,\r\n\t                inRangeVisuals.color.getNormalizer(),\r\n\t                {\r\n\t                    inRange: inRangeVisuals.color.getColorMapper(),\r\n\t                    outOfRange: outOfRangeVisuals.color.getColorMapper()\r\n\t                },\r\n\t                isInRange\r\n\t            );\r\n\t            var img = new graphic.Image({\r\n\t                style: {\r\n\t                    width: width,\r\n\t                    height: height,\r\n\t                    x: x,\r\n\t                    y: y,\r\n\t                    image: hmLayer.canvas\r\n\t                },\r\n\t                silent: true\r\n\t            });\r\n\t            this.group.add(img);\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 273 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file defines echarts Heatmap Chart\r\n\t * @author Ovilia (me@zhangwenli.com)\r\n\t * Inspired by https://github.com/mourner/simpleheat\r\n\t *\r\n\t * @module\r\n\t */\r\n\r\n\r\n\t    var GRADIENT_LEVELS = 256;\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    /**\r\n\t     * Heatmap Chart\r\n\t     *\r\n\t     * @class\r\n\t     */\r\n\t    function Heatmap() {\r\n\t        var canvas = zrUtil.createCanvas();\r\n\t        this.canvas = canvas;\r\n\r\n\t        this.blurSize = 30;\r\n\t        this.pointSize = 20;\r\n\r\n\t        this.maxOpacity = 1;\r\n\t        this.minOpacity = 0;\r\n\r\n\t        this._gradientPixels = {};\r\n\t    }\r\n\r\n\t    Heatmap.prototype = {\r\n\t        /**\r\n\t         * Renders Heatmap and returns the rendered canvas\r\n\t         * @param {Array} data array of data, each has x, y, value\r\n\t         * @param {number} width canvas width\r\n\t         * @param {number} height canvas height\r\n\t         */\r\n\t        update: function(data, width, height, normalize, colorFunc, isInRange) {\r\n\t            var brush = this._getBrush();\r\n\t            var gradientInRange = this._getGradient(data, colorFunc, 'inRange');\r\n\t            var gradientOutOfRange = this._getGradient(data, colorFunc, 'outOfRange');\r\n\t            var r = this.pointSize + this.blurSize;\r\n\r\n\t            var canvas = this.canvas;\r\n\t            var ctx = canvas.getContext('2d');\r\n\t            var len = data.length;\r\n\t            canvas.width = width;\r\n\t            canvas.height = height;\r\n\t            for (var i = 0; i < len; ++i) {\r\n\t                var p = data[i];\r\n\t                var x = p[0];\r\n\t                var y = p[1];\r\n\t                var value = p[2];\r\n\r\n\t                // calculate alpha using value\r\n\t                var alpha = normalize(value);\r\n\r\n\t                // draw with the circle brush with alpha\r\n\t                ctx.globalAlpha = alpha;\r\n\t                ctx.drawImage(brush, x - r, y - r);\r\n\t            }\r\n\r\n\t            // colorize the canvas using alpha value and set with gradient\r\n\t            var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\t            var pixels = imageData.data;\r\n\t            var offset = 0;\r\n\t            var pixelLen = pixels.length;\r\n\t            var minOpacity = this.minOpacity;\r\n\t            var maxOpacity = this.maxOpacity;\r\n\t            var diffOpacity = maxOpacity - minOpacity;\r\n\r\n\t            while(offset < pixelLen) {\r\n\t                var alpha = pixels[offset + 3] / 256;\r\n\t                var gradientOffset = Math.floor(alpha * (GRADIENT_LEVELS - 1)) * 4;\r\n\t                // Simple optimize to ignore the empty data\r\n\t                if (alpha > 0) {\r\n\t                    var gradient = isInRange(alpha) ? gradientInRange : gradientOutOfRange;\r\n\t                    // Any alpha > 0 will be mapped to [minOpacity, maxOpacity]\r\n\t                    alpha > 0 && (alpha = alpha * diffOpacity + minOpacity);\r\n\t                    pixels[offset++] = gradient[gradientOffset];\r\n\t                    pixels[offset++] = gradient[gradientOffset + 1];\r\n\t                    pixels[offset++] = gradient[gradientOffset + 2];\r\n\t                    pixels[offset++] = gradient[gradientOffset + 3] * alpha * 256;\r\n\t                }\r\n\t                else {\r\n\t                    offset += 4;\r\n\t                }\r\n\t            }\r\n\t            ctx.putImageData(imageData, 0, 0);\r\n\r\n\t            return canvas;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * get canvas of a black circle brush used for canvas to draw later\r\n\t         * @private\r\n\t         * @returns {Object} circle brush canvas\r\n\t         */\r\n\t        _getBrush: function() {\r\n\t            var brushCanvas = this._brushCanvas || (this._brushCanvas = zrUtil.createCanvas());\r\n\t            // set brush size\r\n\t            var r = this.pointSize + this.blurSize;\r\n\t            var d = r * 2;\r\n\t            brushCanvas.width = d;\r\n\t            brushCanvas.height = d;\r\n\r\n\t            var ctx = brushCanvas.getContext('2d');\r\n\t            ctx.clearRect(0, 0, d, d);\r\n\r\n\t            // in order to render shadow without the distinct circle,\r\n\t            // draw the distinct circle in an invisible place,\r\n\t            // and use shadowOffset to draw shadow in the center of the canvas\r\n\t            ctx.shadowOffsetX = d;\r\n\t            ctx.shadowBlur = this.blurSize;\r\n\t            // draw the shadow in black, and use alpha and shadow blur to generate\r\n\t            // color in color map\r\n\t            ctx.shadowColor = '#000';\r\n\r\n\t            // draw circle in the left to the canvas\r\n\t            ctx.beginPath();\r\n\t            ctx.arc(-r, r, this.pointSize, 0, Math.PI * 2, true);\r\n\t            ctx.closePath();\r\n\t            ctx.fill();\r\n\t            return brushCanvas;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * get gradient color map\r\n\t         * @private\r\n\t         */\r\n\t        _getGradient: function (data, colorFunc, state) {\r\n\t            var gradientPixels = this._gradientPixels;\r\n\t            var pixelsSingleState = gradientPixels[state] || (gradientPixels[state] = new Uint8ClampedArray(256 * 4));\r\n\t            var color = [];\r\n\t            var off = 0;\r\n\t            for (var i = 0; i < 256; i++) {\r\n\t                colorFunc[state](i / 255, true, color);\r\n\t                pixelsSingleState[off++] = color[0];\r\n\t                pixelsSingleState[off++] = color[1];\r\n\t                pixelsSingleState[off++] = color[2];\r\n\t                pixelsSingleState[off++] = color[3];\r\n\t            }\r\n\t            return pixelsSingleState;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = Heatmap;\r\n\r\n\r\n\r\n/***/ },\r\n/* 274 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Legend component entry file8\r\n\t */\r\n\r\n\r\n\t    __webpack_require__(275);\r\n\t    __webpack_require__(276);\r\n\t    __webpack_require__(277);\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    // Series Filter\r\n\t    echarts.registerProcessor(__webpack_require__(279));\r\n\r\n\r\n/***/ },\r\n/* 275 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Model = __webpack_require__(12);\r\n\r\n\t    var LegendModel = __webpack_require__(1).extendComponentModel({\r\n\r\n\t        type: 'legend',\r\n\r\n\t        dependencies: ['series'],\r\n\r\n\t        layoutMode: {\r\n\t            type: 'box',\r\n\t            ignoreSize: true\r\n\t        },\r\n\r\n\t        init: function (option, parentModel, ecModel) {\r\n\t            this.mergeDefaultAndTheme(option, ecModel);\r\n\r\n\t            option.selected = option.selected || {};\r\n\t        },\r\n\r\n\t        mergeOption: function (option) {\r\n\t            LegendModel.superCall(this, 'mergeOption', option);\r\n\t        },\r\n\r\n\t        optionUpdated: function () {\r\n\t            this._updateData(this.ecModel);\r\n\r\n\t            var legendData = this._data;\r\n\r\n\t            // If selectedMode is single, try to select one\r\n\t            if (legendData[0] && this.get('selectedMode') === 'single') {\r\n\t                var hasSelected = false;\r\n\t                // If has any selected in option.selected\r\n\t                for (var i = 0; i < legendData.length; i++) {\r\n\t                    var name = legendData[i].get('name');\r\n\t                    if (this.isSelected(name)) {\r\n\t                        // Force to unselect others\r\n\t                        this.select(name);\r\n\t                        hasSelected = true;\r\n\t                        break;\r\n\t                    }\r\n\t                }\r\n\t                // Try select the first if selectedMode is single\r\n\t                !hasSelected && this.select(legendData[0].get('name'));\r\n\t            }\r\n\t        },\r\n\r\n\t        _updateData: function (ecModel) {\r\n\t            var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {\r\n\t                // Can be string or number\r\n\t                if (typeof dataItem === 'string' || typeof dataItem === 'number') {\r\n\t                    dataItem = {\r\n\t                        name: dataItem\r\n\t                    };\r\n\t                }\r\n\t                return new Model(dataItem, this, this.ecModel);\r\n\t            }, this);\r\n\t            this._data = legendData;\r\n\r\n\t            var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {\r\n\t                return series.name;\r\n\t            });\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\t                if (seriesModel.legendDataProvider) {\r\n\t                    var data = seriesModel.legendDataProvider();\r\n\t                    availableNames = availableNames.concat(data.mapArray(data.getName));\r\n\t                }\r\n\t            });\r\n\t            /**\r\n\t             * @type {Array.<string>}\r\n\t             * @private\r\n\t             */\r\n\t            this._availableNames = availableNames;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {Array.<module:echarts/model/Model>}\r\n\t         */\r\n\t        getData: function () {\r\n\t            return this._data;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} name\r\n\t         */\r\n\t        select: function (name) {\r\n\t            var selected = this.option.selected;\r\n\t            var selectedMode = this.get('selectedMode');\r\n\t            if (selectedMode === 'single') {\r\n\t                var data = this._data;\r\n\t                zrUtil.each(data, function (dataItem) {\r\n\t                    selected[dataItem.get('name')] = false;\r\n\t                });\r\n\t            }\r\n\t            selected[name] = true;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} name\r\n\t         */\r\n\t        unSelect: function (name) {\r\n\t            if (this.get('selectedMode') !== 'single') {\r\n\t                this.option.selected[name] = false;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} name\r\n\t         */\r\n\t        toggleSelected: function (name) {\r\n\t            var selected = this.option.selected;\r\n\t            // Default is true\r\n\t            if (!selected.hasOwnProperty(name)) {\r\n\t                selected[name] = true;\r\n\t            }\r\n\t            this[selected[name] ? 'unSelect' : 'select'](name);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} name\r\n\t         */\r\n\t        isSelected: function (name) {\r\n\t            var selected = this.option.selected;\r\n\t            return !(selected.hasOwnProperty(name) && !selected[name])\r\n\t                && zrUtil.indexOf(this._availableNames, name) >= 0;\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\t            // 一级层叠\r\n\t            zlevel: 0,\r\n\t            // 二级层叠\r\n\t            z: 4,\r\n\t            show: true,\r\n\r\n\t            // 布局方式，默认为水平布局，可选为：\r\n\t            // 'horizontal' | 'vertical'\r\n\t            orient: 'horizontal',\r\n\r\n\t            left: 'center',\r\n\t            // right: 'center',\r\n\r\n\t            top: 'top',\r\n\t            // bottom: 'top',\r\n\r\n\t            // 水平对齐\r\n\t            // 'auto' | 'left' | 'right'\r\n\t            // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐\r\n\t            align: 'auto',\r\n\r\n\t            backgroundColor: 'rgba(0,0,0,0)',\r\n\t            // 图例边框颜色\r\n\t            borderColor: '#ccc',\r\n\t            // 图例边框线宽，单位px，默认为0（无边框）\r\n\t            borderWidth: 0,\r\n\t            // 图例内边距，单位px，默认各方向内边距为5，\r\n\t            // 接受数组分别设定上右下左边距，同css\r\n\t            padding: 5,\r\n\t            // 各个item之间的间隔，单位px，默认为10，\r\n\t            // 横向布局时为水平间隔，纵向布局时为纵向间隔\r\n\t            itemGap: 10,\r\n\t            // 图例图形宽度\r\n\t            itemWidth: 25,\r\n\t            // 图例图形高度\r\n\t            itemHeight: 14,\r\n\r\n\t            // 图例关闭时候的颜色\r\n\t            inactiveColor: '#ccc',\r\n\r\n\t            textStyle: {\r\n\t                // 图例文字颜色\r\n\t                color: '#333'\r\n\t            },\r\n\t            // formatter: '',\r\n\t            // 选择模式，默认开启图例开关\r\n\t            selectedMode: true,\r\n\t            // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入\r\n\t            // selected: null,\r\n\t            // 图例内容（详见legend.data，数组中每一项代表一个item\r\n\t            // data: [],\r\n\r\n\t            // Tooltip 相关配置\r\n\t            tooltip: {\r\n\t                show: false\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    module.exports = LegendModel;\r\n\r\n\r\n/***/ },\r\n/* 276 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Legend action\r\n\t */\r\n\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    function legendSelectActionHandler(methodName, payload, ecModel) {\r\n\t        var selectedMap = {};\r\n\t        var isToggleSelect = methodName === 'toggleSelected';\r\n\t        var isSelected;\r\n\t        // Update all legend components\r\n\t        ecModel.eachComponent('legend', function (legendModel) {\r\n\t            if (isToggleSelect && isSelected != null) {\r\n\t                // Force other legend has same selected status\r\n\t                // Or the first is toggled to true and other are toggled to false\r\n\t                // In the case one legend has some item unSelected in option. And if other legend\r\n\t                // doesn't has the item, they will assume it is selected.\r\n\t                legendModel[isSelected ? 'select' : 'unSelect'](payload.name);\r\n\t            }\r\n\t            else {\r\n\t                legendModel[methodName](payload.name);\r\n\t                isSelected = legendModel.isSelected(payload.name);\r\n\t            }\r\n\t            var legendData = legendModel.getData();\r\n\t            zrUtil.each(legendData, function (model) {\r\n\t                var name = model.get('name');\r\n\t                // Wrap element\r\n\t                if (name === '\\n' || name === '') {\r\n\t                    return;\r\n\t                }\r\n\t                var isItemSelected = legendModel.isSelected(name);\r\n\t                if (name in selectedMap) {\r\n\t                    // Unselected if any legend is unselected\r\n\t                    selectedMap[name] = selectedMap[name] && isItemSelected;\r\n\t                }\r\n\t                else {\r\n\t                    selectedMap[name] = isItemSelected;\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t        // Return the event explicitly\r\n\t        return {\r\n\t            name: payload.name,\r\n\t            selected: selectedMap\r\n\t        };\r\n\t    }\r\n\t    /**\r\n\t     * @event legendToggleSelect\r\n\t     * @type {Object}\r\n\t     * @property {string} type 'legendToggleSelect'\r\n\t     * @property {string} [from]\r\n\t     * @property {string} name Series name or data item name\r\n\t     */\r\n\t    echarts.registerAction(\r\n\t        'legendToggleSelect', 'legendselectchanged',\r\n\t        zrUtil.curry(legendSelectActionHandler, 'toggleSelected')\r\n\t    );\r\n\r\n\t    /**\r\n\t     * @event legendSelect\r\n\t     * @type {Object}\r\n\t     * @property {string} type 'legendSelect'\r\n\t     * @property {string} name Series name or data item name\r\n\t     */\r\n\t    echarts.registerAction(\r\n\t        'legendSelect', 'legendselected',\r\n\t        zrUtil.curry(legendSelectActionHandler, 'select')\r\n\t    );\r\n\r\n\t    /**\r\n\t     * @event legendUnSelect\r\n\t     * @type {Object}\r\n\t     * @property {string} type 'legendUnSelect'\r\n\t     * @property {string} name Series name or data item name\r\n\t     */\r\n\t    echarts.registerAction(\r\n\t        'legendUnSelect', 'legendunselected',\r\n\t        zrUtil.curry(legendSelectActionHandler, 'unSelect')\r\n\t    );\r\n\r\n\r\n/***/ },\r\n/* 277 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var symbolCreator = __webpack_require__(106);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var listComponentHelper = __webpack_require__(278);\r\n\r\n\t    var curry = zrUtil.curry;\r\n\r\n\t    function dispatchSelectAction(name, api) {\r\n\t        api.dispatchAction({\r\n\t            type: 'legendToggleSelect',\r\n\t            name: name\r\n\t        });\r\n\t    }\r\n\r\n\t    function dispatchHighlightAction(seriesModel, dataName, api) {\r\n\t        // If element hover will move to a hoverLayer.\r\n\t        var el = api.getZr().storage.getDisplayList()[0];\r\n\t        if (!(el && el.useHoverLayer)) {\r\n\t            seriesModel.get('legendHoverLink') && api.dispatchAction({\r\n\t                type: 'highlight',\r\n\t                seriesName: seriesModel.name,\r\n\t                name: dataName\r\n\t            });\r\n\t        }\r\n\t    }\r\n\r\n\t    function dispatchDownplayAction(seriesModel, dataName, api) {\r\n\t        // If element hover will move to a hoverLayer.\r\n\t        var el = api.getZr().storage.getDisplayList()[0];\r\n\t        if (!(el && el.useHoverLayer)) {\r\n\t            seriesModel.get('legendHoverLink') && api.dispatchAction({\r\n\t                type: 'downplay',\r\n\t                seriesName: seriesModel.name,\r\n\t                name: dataName\r\n\t            });\r\n\t        }\r\n\t    }\r\n\r\n\t    module.exports = __webpack_require__(1).extendComponentView({\r\n\r\n\t        type: 'legend',\r\n\r\n\t        init: function () {\r\n\t            this._symbolTypeStore = {};\r\n\t        },\r\n\r\n\t        render: function (legendModel, ecModel, api) {\r\n\t            var group = this.group;\r\n\t            group.removeAll();\r\n\r\n\t            if (!legendModel.get('show')) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var selectMode = legendModel.get('selectedMode');\r\n\t            var itemAlign = legendModel.get('align');\r\n\r\n\t            if (itemAlign === 'auto') {\r\n\t                itemAlign = (legendModel.get('left') === 'right'\r\n\t                    && legendModel.get('orient') === 'vertical')\r\n\t                    ? 'right' : 'left';\r\n\t            }\r\n\r\n\t            var legendDrawedMap = {};\r\n\r\n\t            zrUtil.each(legendModel.getData(), function (itemModel) {\r\n\t                var name = itemModel.get('name');\r\n\r\n\t                // Use empty string or \\n as a newline string\r\n\t                if (name === '' || name === '\\n') {\r\n\t                    group.add(new graphic.Group({\r\n\t                        newline: true\r\n\t                    }));\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var seriesModel = ecModel.getSeriesByName(name)[0];\r\n\r\n\t                if (legendDrawedMap[name]) {\r\n\t                    // Have been drawed\r\n\t                    return;\r\n\t                }\r\n\r\n\t                // Series legend\r\n\t                if (seriesModel) {\r\n\t                    var data = seriesModel.getData();\r\n\t                    var color = data.getVisual('color');\r\n\r\n\t                    // If color is a callback function\r\n\t                    if (typeof color === 'function') {\r\n\t                        // Use the first data\r\n\t                        color = color(seriesModel.getDataParams(0));\r\n\t                    }\r\n\r\n\t                    // Using rect symbol defaultly\r\n\t                    var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';\r\n\t                    var symbolType = data.getVisual('symbol');\r\n\r\n\t                    var itemGroup = this._createItem(\r\n\t                        name, itemModel, legendModel,\r\n\t                        legendSymbolType, symbolType,\r\n\t                        itemAlign, color,\r\n\t                        selectMode\r\n\t                    );\r\n\r\n\t                    itemGroup.on('click', curry(dispatchSelectAction, name, api))\r\n\t                        .on('mouseover', curry(dispatchHighlightAction, seriesModel, null, api))\r\n\t                        .on('mouseout', curry(dispatchDownplayAction, seriesModel, null, api));\r\n\r\n\t                    legendDrawedMap[name] = true;\r\n\t                }\r\n\t                else {\r\n\t                    // Data legend of pie, funnel\r\n\t                    ecModel.eachRawSeries(function (seriesModel) {\r\n\t                        // In case multiple series has same data name\r\n\t                        if (legendDrawedMap[name]) {\r\n\t                            return;\r\n\t                        }\r\n\t                        if (seriesModel.legendDataProvider) {\r\n\t                            var data = seriesModel.legendDataProvider();\r\n\t                            var idx = data.indexOfName(name);\r\n\t                            if (idx < 0) {\r\n\t                                return;\r\n\t                            }\r\n\r\n\t                            var color = data.getItemVisual(idx, 'color');\r\n\r\n\t                            var legendSymbolType = 'roundRect';\r\n\r\n\t                            var itemGroup = this._createItem(\r\n\t                                name, itemModel, legendModel,\r\n\t                                legendSymbolType, null,\r\n\t                                itemAlign, color,\r\n\t                                selectMode\r\n\t                            );\r\n\r\n\t                            itemGroup.on('click', curry(dispatchSelectAction, name, api))\r\n\t                                // FIXME Should not specify the series name\r\n\t                                .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api))\r\n\t                                .on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));\r\n\r\n\t                            legendDrawedMap[name] = true;\r\n\t                        }\r\n\t                    }, this);\r\n\t                }\r\n\r\n\t                if (true) {\r\n\t                    if (!legendDrawedMap[name]) {\r\n\t                        console.warn(name + ' series not exists. Legend data should be same with series name or data name.');\r\n\t                    }\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            listComponentHelper.layout(group, legendModel, api);\r\n\t            // Render background after group is layout\r\n\t            // FIXME\r\n\t            listComponentHelper.addBackground(group, legendModel);\r\n\t        },\r\n\r\n\t        _createItem: function (\r\n\t            name, itemModel, legendModel,\r\n\t            legendSymbolType, symbolType,\r\n\t            itemAlign, color, selectMode\r\n\t        ) {\r\n\t            var itemWidth = legendModel.get('itemWidth');\r\n\t            var itemHeight = legendModel.get('itemHeight');\r\n\t            var inactiveColor = legendModel.get('inactiveColor');\r\n\r\n\t            var isSelected = legendModel.isSelected(name);\r\n\t            var itemGroup = new graphic.Group();\r\n\r\n\t            var textStyleModel = itemModel.getModel('textStyle');\r\n\r\n\t            var itemIcon = itemModel.get('icon');\r\n\r\n\t            var tooltipModel = itemModel.getModel('tooltip');\r\n\t            var legendGlobalTooltipModel = tooltipModel.parentModel;\r\n\r\n\t            // Use user given icon first\r\n\t            legendSymbolType = itemIcon || legendSymbolType;\r\n\t            itemGroup.add(symbolCreator.createSymbol(\r\n\t                legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor\r\n\t            ));\r\n\r\n\t            // Compose symbols\r\n\t            // PENDING\r\n\t            if (!itemIcon && symbolType\r\n\t                // At least show one symbol, can't be all none\r\n\t                && ((symbolType !== legendSymbolType) || symbolType == 'none')\r\n\t            ) {\r\n\t                var size = itemHeight * 0.8;\r\n\t                if (symbolType === 'none') {\r\n\t                    symbolType = 'circle';\r\n\t                }\r\n\t                // Put symbol in the center\r\n\t                itemGroup.add(symbolCreator.createSymbol(\r\n\t                    symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size,\r\n\t                    isSelected ? color : inactiveColor\r\n\t                ));\r\n\t            }\r\n\r\n\t            // Text\r\n\t            var textX = itemAlign === 'left' ? itemWidth + 5 : -5;\r\n\t            var textAlign = itemAlign;\r\n\r\n\t            var formatter = legendModel.get('formatter');\r\n\t            var content = name;\r\n\t            if (typeof formatter === 'string' && formatter) {\r\n\t                content = formatter.replace('{name}', name);\r\n\t            }\r\n\t            else if (typeof formatter === 'function') {\r\n\t                content = formatter(name);\r\n\t            }\r\n\r\n\t            var text = new graphic.Text({\r\n\t                style: {\r\n\t                    text: content,\r\n\t                    x: textX,\r\n\t                    y: itemHeight / 2,\r\n\t                    fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,\r\n\t                    textFont: textStyleModel.getFont(),\r\n\t                    textAlign: textAlign,\r\n\t                    textVerticalAlign: 'middle'\r\n\t                }\r\n\t            });\r\n\t            itemGroup.add(text);\r\n\r\n\t            // Add a invisible rect to increase the area of mouse hover\r\n\t            var hitRect = new graphic.Rect({\r\n\t                shape: itemGroup.getBoundingRect(),\r\n\t                invisible: true,\r\n\t                tooltip: tooltipModel.get('show') ? zrUtil.extend({\r\n\t                    content: name,\r\n\t                    // Defaul formatter\r\n\t                    formatter: legendGlobalTooltipModel.get('formatter', true) || function () {\r\n\t                        return name;\r\n\t                    },\r\n\t                    formatterParams: {\r\n\t                        componentType: 'legend',\r\n\t                        legendIndex: legendModel.componentIndex,\r\n\t                        name: name,\r\n\t                        $vars: ['name']\r\n\t                    }\r\n\t                }, tooltipModel.option) : null\r\n\t            });\r\n\t            itemGroup.add(hitRect);\r\n\r\n\t            itemGroup.eachChild(function (child) {\r\n\t                child.silent = true;\r\n\t            });\r\n\r\n\t            hitRect.silent = !selectMode;\r\n\r\n\r\n\r\n\t            this.group.add(itemGroup);\r\n\r\n\t            graphic.setHoverStyle(itemGroup);\r\n\r\n\t            return itemGroup;\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 278 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    // List layout\r\n\t    var layout = __webpack_require__(21);\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var graphic = __webpack_require__(43);\r\n\r\n\t    function positionGroup(group, model, api) {\r\n\t        layout.positionGroup(\r\n\t            group, model.getBoxLayoutParams(),\r\n\t            {\r\n\t                width: api.getWidth(),\r\n\t                height: api.getHeight()\r\n\t            },\r\n\t            model.get('padding')\r\n\t        );\r\n\t    }\r\n\r\n\t    module.exports = {\r\n\t        /**\r\n\t         * Layout list like component.\r\n\t         * It will box layout each items in group of component and then position the whole group in the viewport\r\n\t         * @param {module:zrender/group/Group} group\r\n\t         * @param {module:echarts/model/Component} componentModel\r\n\t         * @param {module:echarts/ExtensionAPI}\r\n\t         */\r\n\t        layout: function (group, componentModel, api) {\r\n\t            var rect = layout.getLayoutRect(componentModel.getBoxLayoutParams(), {\r\n\t                width: api.getWidth(),\r\n\t                height: api.getHeight()\r\n\t            }, componentModel.get('padding'));\r\n\t            layout.box(\r\n\t                componentModel.get('orient'),\r\n\t                group,\r\n\t                componentModel.get('itemGap'),\r\n\t                rect.width,\r\n\t                rect.height\r\n\t            );\r\n\r\n\t            positionGroup(group, componentModel, api);\r\n\t        },\r\n\r\n\t        addBackground: function (group, componentModel) {\r\n\t            var padding = formatUtil.normalizeCssArray(\r\n\t                componentModel.get('padding')\r\n\t            );\r\n\t            var boundingRect = group.getBoundingRect();\r\n\t            var style = componentModel.getItemStyle(['color', 'opacity']);\r\n\t            style.fill = componentModel.get('backgroundColor');\r\n\t            var rect = new graphic.Rect({\r\n\t                shape: {\r\n\t                    x: boundingRect.x - padding[3],\r\n\t                    y: boundingRect.y - padding[0],\r\n\t                    width: boundingRect.width + padding[1] + padding[3],\r\n\t                    height: boundingRect.height + padding[0] + padding[2]\r\n\t                },\r\n\t                style: style,\r\n\t                silent: true,\r\n\t                z2: -1\r\n\t            });\r\n\t            graphic.subPixelOptimizeRect(rect);\r\n\r\n\t            group.add(rect);\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 279 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\t   module.exports = function (ecModel) {\r\n\t        var legendModels = ecModel.findComponents({\r\n\t            mainType: 'legend'\r\n\t        });\r\n\t        if (legendModels && legendModels.length) {\r\n\t            ecModel.filterSeries(function (series) {\r\n\t                // If in any legend component the status is not selected.\r\n\t                // Because in legend series is assumed selected when it is not in the legend data.\r\n\t                for (var i = 0; i < legendModels.length; i++) {\r\n\t                    if (!legendModels[i].isSelected(series.name)) {\r\n\t                        return false;\r\n\t                    }\r\n\t                }\r\n\t                return true;\r\n\t            });\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 280 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// FIXME Better way to pack data in graphic element\r\n\r\n\r\n\t    __webpack_require__(281);\r\n\r\n\t    __webpack_require__(282);\r\n\r\n\t    // Show tip action\r\n\t    /**\r\n\t     * @action\r\n\t     * @property {string} type\r\n\t     * @property {number} seriesIndex\r\n\t     * @property {number} dataIndex\r\n\t     * @property {number} [x]\r\n\t     * @property {number} [y]\r\n\t     */\r\n\t    __webpack_require__(1).registerAction(\r\n\t        {\r\n\t            type: 'showTip',\r\n\t            event: 'showTip',\r\n\t            update: 'none'\r\n\t        },\r\n\t        // noop\r\n\t        function () {}\r\n\t    );\r\n\t    // Hide tip action\r\n\t    __webpack_require__(1).registerAction(\r\n\t        {\r\n\t            type: 'hideTip',\r\n\t            event: 'hideTip',\r\n\t            update: 'none'\r\n\t        },\r\n\t        // noop\r\n\t        function () {}\r\n\t    );\r\n\r\n\r\n/***/ },\r\n/* 281 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(1).extendComponentModel({\r\n\r\n\t        type: 'tooltip',\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,\r\n\r\n\t            z: 8,\r\n\r\n\t            show: true,\r\n\r\n\t            // tooltip主体内容\r\n\t            showContent: true,\r\n\r\n\t            // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'\r\n\t            trigger: 'item',\r\n\r\n\t            // 触发条件，支持 'click' | 'mousemove' | 'none'\r\n\t            triggerOn: 'mousemove',\r\n\r\n\t            // 是否永远显示 content\r\n\t            alwaysShowContent: false,\r\n\r\n\t            // 位置 {Array} | {Function}\r\n\t            // position: null\r\n\r\n\t            // 内容格式器：{string}（Template） ¦ {Function}\r\n\t            // formatter: null\r\n\r\n\t            showDelay: 0,\r\n\r\n\t            // 隐藏延迟，单位ms\r\n\t            hideDelay: 100,\r\n\r\n\t            // 动画变换时间，单位s\r\n\t            transitionDuration: 0.4,\r\n\r\n\t            enterable: false,\r\n\r\n\t            // 提示背景颜色，默认为透明度为0.7的黑色\r\n\t            backgroundColor: 'rgba(50,50,50,0.7)',\r\n\r\n\t            // 提示边框颜色\r\n\t            borderColor: '#333',\r\n\r\n\t            // 提示边框圆角，单位px，默认为4\r\n\t            borderRadius: 4,\r\n\r\n\t            // 提示边框线宽，单位px，默认为0（无边框）\r\n\t            borderWidth: 0,\r\n\r\n\t            // 提示内边距，单位px，默认各方向内边距为5，\r\n\t            // 接受数组分别设定上右下左边距，同css\r\n\t            padding: 5,\r\n\r\n\t            // Extra css text\r\n\t            extraCssText: '',\r\n\r\n\t            // 坐标轴指示器，坐标轴触发有效\r\n\t            axisPointer: {\r\n\t                // 默认为直线\r\n\t                // 可选为：'line' | 'shadow' | 'cross'\r\n\t                type: 'line',\r\n\r\n\t                // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选\r\n\t                // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'\r\n\t                // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴\r\n\t                // 极坐标系会默认选择 angle 轴\r\n\t                axis: 'auto',\r\n\r\n\t                animation: true,\r\n\t                animationDurationUpdate: 200,\r\n\t                animationEasingUpdate: 'exponentialOut',\r\n\r\n\t                // 直线指示器样式设置\r\n\t                lineStyle: {\r\n\t                    color: '#555',\r\n\t                    width: 1,\r\n\t                    type: 'solid'\r\n\t                },\r\n\r\n\t                crossStyle: {\r\n\t                    color: '#555',\r\n\t                    width: 1,\r\n\t                    type: 'dashed',\r\n\r\n\t                    // TODO formatter\r\n\t                    textStyle: {}\r\n\t                },\r\n\r\n\t                // 阴影指示器样式设置\r\n\t                shadowStyle: {\r\n\t                    color: 'rgba(150,150,150,0.3)'\r\n\t                }\r\n\t            },\r\n\t            textStyle: {\r\n\t                color: '#fff',\r\n\t                fontSize: 14\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 282 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var TooltipContent = __webpack_require__(283);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var parsePercent = numberUtil.parsePercent;\r\n\t    var env = __webpack_require__(2);\r\n\t    var Model = __webpack_require__(12);\r\n\r\n\t    function dataEqual(a, b) {\r\n\t        if (!a || !b) {\r\n\t            return false;\r\n\t        }\r\n\t        var round = numberUtil.round;\r\n\t        return round(a[0]) === round(b[0])\r\n\t            && round(a[1]) === round(b[1]);\r\n\t    }\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function makeLineShape(x1, y1, x2, y2) {\r\n\t        return {\r\n\t            x1: x1,\r\n\t            y1: y1,\r\n\t            x2: x2,\r\n\t            y2: y2\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function makeRectShape(x, y, width, height) {\r\n\t        return {\r\n\t            x: x,\r\n\t            y: y,\r\n\t            width: width,\r\n\t            height: height\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {\r\n\t        return {\r\n\t            cx: cx,\r\n\t            cy: cy,\r\n\t            r0: r0,\r\n\t            r: r,\r\n\t            startAngle: startAngle,\r\n\t            endAngle: endAngle,\r\n\t            clockwise: true\r\n\t        };\r\n\t    }\r\n\r\n\t    function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {\r\n\t        var width = el.clientWidth;\r\n\t        var height = el.clientHeight;\r\n\t        var gap = 20;\r\n\r\n\t        if (x + width + gap > viewWidth) {\r\n\t            x -= width + gap;\r\n\t        }\r\n\t        else {\r\n\t            x += gap;\r\n\t        }\r\n\t        if (y + height + gap > viewHeight) {\r\n\t            y -= height + gap;\r\n\t        }\r\n\t        else {\r\n\t            y += gap;\r\n\t        }\r\n\t        return [x, y];\r\n\t    }\r\n\r\n\t    function calcTooltipPosition(position, rect, dom) {\r\n\t        var domWidth = dom.clientWidth;\r\n\t        var domHeight = dom.clientHeight;\r\n\t        var gap = 5;\r\n\t        var x = 0;\r\n\t        var y = 0;\r\n\t        var rectWidth = rect.width;\r\n\t        var rectHeight = rect.height;\r\n\t        switch (position) {\r\n\t            case 'inside':\r\n\t                x = rect.x + rectWidth / 2 - domWidth / 2;\r\n\t                y = rect.y + rectHeight / 2 - domHeight / 2;\r\n\t                break;\r\n\t            case 'top':\r\n\t                x = rect.x + rectWidth / 2 - domWidth / 2;\r\n\t                y = rect.y - domHeight - gap;\r\n\t                break;\r\n\t            case 'bottom':\r\n\t                x = rect.x + rectWidth / 2 - domWidth / 2;\r\n\t                y = rect.y + rectHeight + gap;\r\n\t                break;\r\n\t            case 'left':\r\n\t                x = rect.x - domWidth - gap;\r\n\t                y = rect.y + rectHeight / 2 - domHeight / 2;\r\n\t                break;\r\n\t            case 'right':\r\n\t                x = rect.x + rectWidth + gap;\r\n\t                y = rect.y + rectHeight / 2 - domHeight / 2;\r\n\t        }\r\n\t        return [x, y];\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param  {string|Function|Array.<number>} positionExpr\r\n\t     * @param  {number} x Mouse x\r\n\t     * @param  {number} y Mouse y\r\n\t     * @param  {module:echarts/component/tooltip/TooltipContent} content\r\n\t     * @param  {Object|<Array.<Object>} params\r\n\t     * @param  {module:zrender/Element} el target element\r\n\t     * @param  {module:echarts/ExtensionAPI} api\r\n\t     * @return {Array.<number>}\r\n\t     */\r\n\t    function updatePosition(positionExpr, x, y, content, params, el, api) {\r\n\t        var viewWidth = api.getWidth();\r\n\t        var viewHeight = api.getHeight();\r\n\r\n\t        var rect = el && el.getBoundingRect().clone();\r\n\t        el && rect.applyTransform(el.transform);\r\n\t        if (typeof positionExpr === 'function') {\r\n\t            // Callback of position can be an array or a string specify the position\r\n\t            positionExpr = positionExpr([x, y], params, content.el, rect);\r\n\t        }\r\n\r\n\t        if (zrUtil.isArray(positionExpr)) {\r\n\t            x = parsePercent(positionExpr[0], viewWidth);\r\n\t            y = parsePercent(positionExpr[1], viewHeight);\r\n\t        }\r\n\t        // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element\r\n\t        else if (typeof positionExpr === 'string' && el) {\r\n\t            var pos = calcTooltipPosition(\r\n\t                positionExpr, rect, content.el\r\n\t            );\r\n\t            x = pos[0];\r\n\t            y = pos[1];\r\n\t        }\r\n\t        else {\r\n\t            var pos = refixTooltipPosition(\r\n\t                x, y, content.el, viewWidth, viewHeight\r\n\t            );\r\n\t            x = pos[0];\r\n\t            y = pos[1];\r\n\t        }\r\n\r\n\t        content.moveTo(x, y);\r\n\t    }\r\n\r\n\t    function ifSeriesSupportAxisTrigger(seriesModel) {\r\n\t        var coordSys = seriesModel.coordinateSystem;\r\n\t        var trigger = seriesModel.get('tooltip.trigger', true);\r\n\t        // Ignore series use item tooltip trigger and series coordinate system is not cartesian or\r\n\t        return !(!coordSys\r\n\t            || (coordSys.type !== 'cartesian2d' && coordSys.type !== 'polar' && coordSys.type !== 'singleAxis')\r\n\t            || trigger === 'item');\r\n\t    }\r\n\r\n\t    __webpack_require__(1).extendComponentView({\r\n\r\n\t        type: 'tooltip',\r\n\r\n\t        _axisPointers: {},\r\n\r\n\t        init: function (ecModel, api) {\r\n\t            if (env.node) {\r\n\t                return;\r\n\t            }\r\n\t            var tooltipContent = new TooltipContent(api.getDom(), api);\r\n\t            this._tooltipContent = tooltipContent;\r\n\r\n\t            api.on('showTip', this._manuallyShowTip, this);\r\n\t            api.on('hideTip', this._manuallyHideTip, this);\r\n\t        },\r\n\r\n\t        render: function (tooltipModel, ecModel, api) {\r\n\t            if (env.node) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            // Reset\r\n\t            this.group.removeAll();\r\n\r\n\t            /**\r\n\t             * @type {Object}\r\n\t             * @private\r\n\t             */\r\n\t            this._axisPointers = {};\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {module:echarts/component/tooltip/TooltipModel}\r\n\t             */\r\n\t            this._tooltipModel = tooltipModel;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {module:echarts/model/Global}\r\n\t             */\r\n\t            this._ecModel = ecModel;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {module:echarts/ExtensionAPI}\r\n\t             */\r\n\t            this._api = api;\r\n\r\n\t            /**\r\n\t             * @type {Object}\r\n\t             * @private\r\n\t             */\r\n\t            this._lastHover = {\r\n\t                // data\r\n\t                // payloadBatch\r\n\t            };\r\n\r\n\t            var tooltipContent = this._tooltipContent;\r\n\t            tooltipContent.update();\r\n\t            tooltipContent.enterable = tooltipModel.get('enterable');\r\n\t            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');\r\n\r\n\t            /**\r\n\t             * @type {Object.<string, Array>}\r\n\t             */\r\n\t            this._seriesGroupByAxis = this._prepareAxisTriggerData(\r\n\t                tooltipModel, ecModel\r\n\t            );\r\n\r\n\t            var crossText = this._crossText;\r\n\t            if (crossText) {\r\n\t                this.group.add(crossText);\r\n\t            }\r\n\r\n\t            var triggerOn = tooltipModel.get('triggerOn');\r\n\r\n\t            // Try to keep the tooltip show when refreshing\r\n\t            if (this._lastX != null\r\n\t                && this._lastY != null\r\n\t                // When user is willing to control tooltip totally using API,\r\n\t                // self._manuallyShowTip({x, y}) might cause tooltip hide,\r\n\t                // which is not expected.\r\n\t                && triggerOn !== 'none'\r\n\t            ) {\r\n\t                var self = this;\r\n\t                clearTimeout(this._refreshUpdateTimeout);\r\n\t                this._refreshUpdateTimeout = setTimeout(function () {\r\n\t                    // Show tip next tick after other charts are rendered\r\n\t                    // In case highlight action has wrong result\r\n\t                    // FIXME\r\n\t                    self._manuallyShowTip({\r\n\t                        x: self._lastX,\r\n\t                        y: self._lastY\r\n\t                    });\r\n\t                });\r\n\t            }\r\n\r\n\t            var zr = this._api.getZr();\r\n\t            zr.off('click', this._tryShow);\r\n\t            zr.off('mousemove', this._mousemove);\r\n\t            zr.off('mouseout', this._hide);\r\n\t            zr.off('globalout', this._hide);\r\n\r\n\t            if (triggerOn === 'click') {\r\n\t                zr.on('click', this._tryShow, this);\r\n\t            }\r\n\t            else if (triggerOn === 'mousemove') {\r\n\t                zr.on('mousemove', this._mousemove, this);\r\n\t                zr.on('mouseout', this._hide, this);\r\n\t                zr.on('globalout', this._hide, this);\r\n\t            }\r\n\t            // else triggerOn is 'none', which enable user\r\n\t            // to control tooltip totally using API.\r\n\t        },\r\n\r\n\t        _mousemove: function (e) {\r\n\t            var showDelay = this._tooltipModel.get('showDelay');\r\n\t            var self = this;\r\n\t            clearTimeout(this._showTimeout);\r\n\t            if (showDelay > 0) {\r\n\t                this._showTimeout = setTimeout(function () {\r\n\t                    self._tryShow(e);\r\n\t                }, showDelay);\r\n\t            }\r\n\t            else {\r\n\t                this._tryShow(e);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Show tip manually by\r\n\t         * dispatchAction({\r\n\t         *     type: 'showTip',\r\n\t         *     x: 10,\r\n\t         *     y: 10\r\n\t         * });\r\n\t         * Or\r\n\t         * dispatchAction({\r\n\t         *      type: 'showTip',\r\n\t         *      seriesIndex: 0,\r\n\t         *      dataIndex or dataIndexInside or name\r\n\t         * });\r\n\t         *\r\n\t         *  TODO Batch\r\n\t         */\r\n\t        _manuallyShowTip: function (event) {\r\n\t            // From self\r\n\t            if (event.from === this.uid) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var ecModel = this._ecModel;\r\n\t            var seriesIndex = event.seriesIndex;\r\n\t            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\r\n\t            var api = this._api;\r\n\r\n\t            if (event.x == null || event.y == null) {\r\n\t                if (!seriesModel) {\r\n\t                    // Find the first series can use axis trigger\r\n\t                    ecModel.eachSeries(function (_series) {\r\n\t                        if (ifSeriesSupportAxisTrigger(_series) && !seriesModel) {\r\n\t                            seriesModel = _series;\r\n\t                        }\r\n\t                    });\r\n\t                }\r\n\t                if (seriesModel) {\r\n\t                    var data = seriesModel.getData();\r\n\t                    var dataIndex = modelUtil.queryDataIndex(data, event);\r\n\r\n\t                    if (dataIndex == null || zrUtil.isArray(dataIndex)) {\r\n\t                        return;\r\n\t                    }\r\n\r\n\t                    var el = data.getItemGraphicEl(dataIndex);\r\n\t                    var cx;\r\n\t                    var cy;\r\n\t                    // Try to get the point in coordinate system\r\n\t                    var coordSys = seriesModel.coordinateSystem;\r\n\t                    if (seriesModel.getTooltipPosition) {\r\n\t                        var point = seriesModel.getTooltipPosition(dataIndex) || [];\r\n\t                        cx = point[0];\r\n\t                        cy = point[1];\r\n\t                    }\r\n\t                    else if (coordSys && coordSys.dataToPoint) {\r\n\t                        var point = coordSys.dataToPoint(\r\n\t                            data.getValues(\r\n\t                                zrUtil.map(coordSys.dimensions, function (dim) {\r\n\t                                    return seriesModel.coordDimToDataDim(dim)[0];\r\n\t                                }), dataIndex, true\r\n\t                            )\r\n\t                        );\r\n\t                        cx = point && point[0];\r\n\t                        cy = point && point[1];\r\n\t                    }\r\n\t                    else if (el) {\r\n\t                        // Use graphic bounding rect\r\n\t                        var rect = el.getBoundingRect().clone();\r\n\t                        rect.applyTransform(el.transform);\r\n\t                        cx = rect.x + rect.width / 2;\r\n\t                        cy = rect.y + rect.height / 2;\r\n\t                    }\r\n\r\n\t                    if (cx != null && cy != null) {\r\n\t                        this._tryShow({\r\n\t                            offsetX: cx,\r\n\t                            offsetY: cy,\r\n\t                            position: event.position,\r\n\t                            target: el,\r\n\t                            event: {}\r\n\t                        });\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                var el = api.getZr().handler.findHover(event.x, event.y);\r\n\t                this._tryShow({\r\n\t                    offsetX: event.x,\r\n\t                    offsetY: event.y,\r\n\t                    position: event.position,\r\n\t                    target: el,\r\n\t                    event: {}\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        _manuallyHideTip: function (e) {\r\n\t            if (e.from === this.uid) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            this._hide();\r\n\t        },\r\n\r\n\t        _prepareAxisTriggerData: function (tooltipModel, ecModel) {\r\n\t            // Prepare data for axis trigger\r\n\t            var seriesGroupByAxis = {};\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\t                if (ifSeriesSupportAxisTrigger(seriesModel)) {\r\n\t                    var coordSys = seriesModel.coordinateSystem;\r\n\t                    var baseAxis;\r\n\t                    var key;\r\n\r\n\t                    // Only cartesian2d, polar and single support axis trigger\r\n\t                    if (coordSys.type === 'cartesian2d') {\r\n\t                        // FIXME `axisPointer.axis` is not baseAxis\r\n\t                        baseAxis = coordSys.getBaseAxis();\r\n\t                        key = baseAxis.dim + baseAxis.index;\r\n\t                    }\r\n\t                    else if (coordSys.type === 'singleAxis') {\r\n\t                        baseAxis = coordSys.getAxis();\r\n\t                        key = baseAxis.dim + baseAxis.type;\r\n\t                    }\r\n\t                    else {\r\n\t                        baseAxis = coordSys.getBaseAxis();\r\n\t                        key = baseAxis.dim + coordSys.name;\r\n\t                    }\r\n\r\n\t                    seriesGroupByAxis[key] = seriesGroupByAxis[key] || {\r\n\t                        coordSys: [],\r\n\t                        series: []\r\n\t                    };\r\n\t                    seriesGroupByAxis[key].coordSys.push(coordSys);\r\n\t                    seriesGroupByAxis[key].series.push(seriesModel);\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            return seriesGroupByAxis;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * mousemove handler\r\n\t         * @param {Object} e\r\n\t         * @private\r\n\t         */\r\n\t        _tryShow: function (e) {\r\n\t            var el = e.target;\r\n\t            var tooltipModel = this._tooltipModel;\r\n\t            var globalTrigger = tooltipModel.get('trigger');\r\n\t            var ecModel = this._ecModel;\r\n\t            var api = this._api;\r\n\r\n\t            if (!tooltipModel) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed\r\n\t            this._lastX = e.offsetX;\r\n\t            this._lastY = e.offsetY;\r\n\r\n\t            // Always show item tooltip if mouse is on the element with dataIndex\r\n\t            if (el && el.dataIndex != null) {\r\n\t                // Use dataModel in element if possible\r\n\t                // Used when mouseover on a element like markPoint or edge\r\n\t                // In which case, the data is not main data in series.\r\n\t                var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\r\n\t                var dataIndex = el.dataIndex;\r\n\t                var itemModel = dataModel.getData().getItemModel(dataIndex);\r\n\t                // Series or single data may use item trigger when global is axis trigger\r\n\t                if ((itemModel.get('tooltip.trigger') || globalTrigger) === 'axis') {\r\n\t                    this._showAxisTooltip(tooltipModel, ecModel, e);\r\n\t                }\r\n\t                else {\r\n\t                    // Reset ticket\r\n\t                    this._ticket = '';\r\n\t                    // If either single data or series use item trigger\r\n\t                    this._hideAxisPointer();\r\n\t                    // Reset last hover and dispatch downplay action\r\n\t                    this._resetLastHover();\r\n\r\n\t                    this._showItemTooltipContent(dataModel, dataIndex, el.dataType, e);\r\n\t                }\r\n\r\n\t                api.dispatchAction({\r\n\t                    type: 'showTip',\r\n\t                    from: this.uid,\r\n\t                    dataIndexInside: el.dataIndex,\r\n\t                    seriesIndex: el.seriesIndex\r\n\t                });\r\n\t            }\r\n\t            // Tooltip provided directly. Like legend\r\n\t            else if (el && el.tooltip) {\r\n\t                var tooltipOpt = el.tooltip;\r\n\t                if (typeof tooltipOpt === 'string') {\r\n\t                    var content = tooltipOpt;\r\n\t                    tooltipOpt = {\r\n\t                        content: content,\r\n\t                        // Fixed formatter\r\n\t                        formatter: content\r\n\t                    };\r\n\t                }\r\n\t                var subTooltipModel = new Model(tooltipOpt, tooltipModel);\r\n\t                var defaultHtml = subTooltipModel.get('content');\r\n\t                var asyncTicket = Math.random();\r\n\t                this._showTooltipContent(\r\n\t                    // TODO params\r\n\t                    subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {},\r\n\t                    asyncTicket, e.offsetX, e.offsetY, e.position, el, api\r\n\t                );\r\n\t            }\r\n\t            else {\r\n\t                if (globalTrigger === 'item') {\r\n\t                    this._hide();\r\n\t                }\r\n\t                else {\r\n\t                    // Try show axis tooltip\r\n\t                    this._showAxisTooltip(tooltipModel, ecModel, e);\r\n\t                }\r\n\r\n\t                // Action of cross pointer\r\n\t                // other pointer types will trigger action in _dispatchAndShowSeriesTooltipContent method\r\n\t                if (tooltipModel.get('axisPointer.type') === 'cross') {\r\n\t                    api.dispatchAction({\r\n\t                        type: 'showTip',\r\n\t                        from: this.uid,\r\n\t                        x: e.offsetX,\r\n\t                        y: e.offsetY\r\n\t                    });\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Show tooltip on axis\r\n\t         * @param {module:echarts/component/tooltip/TooltipModel} tooltipModel\r\n\t         * @param {module:echarts/model/Global} ecModel\r\n\t         * @param {Object} e\r\n\t         * @private\r\n\t         */\r\n\t        _showAxisTooltip: function (tooltipModel, ecModel, e) {\r\n\t            var axisPointerModel = tooltipModel.getModel('axisPointer');\r\n\t            var axisPointerType = axisPointerModel.get('type');\r\n\r\n\t            if (axisPointerType === 'cross') {\r\n\t                var el = e.target;\r\n\t                if (el && el.dataIndex != null) {\r\n\t                    var seriesModel = ecModel.getSeriesByIndex(el.seriesIndex);\r\n\t                    var dataIndex = el.dataIndex;\r\n\t                    this._showItemTooltipContent(seriesModel, dataIndex, el.dataType, e);\r\n\t                }\r\n\t            }\r\n\r\n\t            this._showAxisPointer();\r\n\t            var allNotShow = true;\r\n\t            zrUtil.each(this._seriesGroupByAxis, function (seriesCoordSysSameAxis) {\r\n\t                // Try show the axis pointer\r\n\t                var allCoordSys = seriesCoordSysSameAxis.coordSys;\r\n\t                var coordSys = allCoordSys[0];\r\n\r\n\t                // If mouse position is not in the grid or polar\r\n\t                var point = [e.offsetX, e.offsetY];\r\n\r\n\t                if (!coordSys.containPoint(point)) {\r\n\t                    // Hide axis pointer\r\n\t                    this._hideAxisPointer(coordSys.name);\r\n\t                    return;\r\n\t                }\r\n\r\n\t                allNotShow = false;\r\n\t                // Make sure point is discrete on cateogry axis\r\n\t                var dimensions = coordSys.dimensions;\r\n\t                var value = coordSys.pointToData(point, true);\r\n\t                point = coordSys.dataToPoint(value);\r\n\t                var baseAxis = coordSys.getBaseAxis();\r\n\t                var axisType = axisPointerModel.get('axis');\r\n\t                if (axisType === 'auto') {\r\n\t                    axisType = baseAxis.dim;\r\n\t                }\r\n\r\n\t                var contentNotChange = false;\r\n\t                var lastHover = this._lastHover;\r\n\t                if (axisPointerType === 'cross') {\r\n\t                    // If hover data not changed\r\n\t                    // Possible when two axes are all category\r\n\t                    if (dataEqual(lastHover.data, value)) {\r\n\t                        contentNotChange = true;\r\n\t                    }\r\n\t                    lastHover.data = value;\r\n\t                }\r\n\t                else {\r\n\t                    var valIndex = zrUtil.indexOf(dimensions, axisType);\r\n\r\n\t                    // If hover data not changed on the axis dimension\r\n\t                    if (lastHover.data === value[valIndex]) {\r\n\t                        contentNotChange = true;\r\n\t                    }\r\n\t                    lastHover.data = value[valIndex];\r\n\t                }\r\n\r\n\t                if (coordSys.type === 'cartesian2d' && !contentNotChange) {\r\n\t                    this._showCartesianPointer(\r\n\t                        axisPointerModel, coordSys, axisType, point\r\n\t                    );\r\n\t                }\r\n\t                else if (coordSys.type === 'polar' && !contentNotChange) {\r\n\t                    this._showPolarPointer(\r\n\t                        axisPointerModel, coordSys, axisType, point\r\n\t                    );\r\n\t                }\r\n\t                else if (coordSys.type === 'singleAxis' && !contentNotChange) {\r\n\t                    this._showSinglePointer(\r\n\t                        axisPointerModel, coordSys, axisType, point\r\n\t                    );\r\n\t                }\r\n\r\n\t                if (axisPointerType !== 'cross') {\r\n\t                    this._dispatchAndShowSeriesTooltipContent(\r\n\t                        coordSys, seriesCoordSysSameAxis.series, point, value, contentNotChange, e.position\r\n\t                    );\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            if (!this._tooltipModel.get('show')) {\r\n\t                this._hideAxisPointer();\r\n\t            }\r\n\r\n\t            if (allNotShow) {\r\n\t                this._hide();\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Show tooltip on axis of cartesian coordinate\r\n\t         * @param {module:echarts/model/Model} axisPointerModel\r\n\t         * @param {module:echarts/coord/cartesian/Cartesian2D} cartesians\r\n\t         * @param {string} axisType\r\n\t         * @param {Array.<number>} point\r\n\t         * @private\r\n\t         */\r\n\t        _showCartesianPointer: function (axisPointerModel, cartesian, axisType, point) {\r\n\t            var self = this;\r\n\r\n\t            var axisPointerType = axisPointerModel.get('type');\r\n\t            var baseAxis = cartesian.getBaseAxis();\r\n\t            var moveAnimation = axisPointerType !== 'cross'\r\n\t                && baseAxis.type === 'category'\r\n\t                && baseAxis.getBandWidth() > 20;\r\n\r\n\t            if (axisPointerType === 'cross') {\r\n\t                moveGridLine('x', point, cartesian.getAxis('y').getGlobalExtent());\r\n\t                moveGridLine('y', point, cartesian.getAxis('x').getGlobalExtent());\r\n\r\n\t                this._updateCrossText(cartesian, point, axisPointerModel);\r\n\t            }\r\n\t            else {\r\n\t                var otherAxis = cartesian.getAxis(axisType === 'x' ? 'y' : 'x');\r\n\t                var otherExtent = otherAxis.getGlobalExtent();\r\n\r\n\t                if (cartesian.type === 'cartesian2d') {\r\n\t                    (axisPointerType === 'line' ? moveGridLine : moveGridShadow)(\r\n\t                        axisType, point, otherExtent\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\r\n\t            /**\r\n\t             * @inner\r\n\t             */\r\n\t            function moveGridLine(axisType, point, otherExtent) {\r\n\t                var targetShape = axisType === 'x'\r\n\t                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])\r\n\t                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);\r\n\r\n\t                var pointerEl = self._getPointerElement(\r\n\t                    cartesian, axisPointerModel, axisType, targetShape\r\n\t                );\r\n\t                graphic.subPixelOptimizeLine({\r\n\t                    shape: targetShape,\r\n\t                    style: pointerEl.style\r\n\t                });\r\n\r\n\t                moveAnimation\r\n\t                    ? graphic.updateProps(pointerEl, {\r\n\t                        shape: targetShape\r\n\t                    }, axisPointerModel)\r\n\t                    :  pointerEl.attr({\r\n\t                        shape: targetShape\r\n\t                    });\r\n\t            }\r\n\r\n\t            /**\r\n\t             * @inner\r\n\t             */\r\n\t            function moveGridShadow(axisType, point, otherExtent) {\r\n\t                var axis = cartesian.getAxis(axisType);\r\n\t                var bandWidth = axis.getBandWidth();\r\n\t                var span = otherExtent[1] - otherExtent[0];\r\n\t                var targetShape = axisType === 'x'\r\n\t                    ? makeRectShape(point[0] - bandWidth / 2, otherExtent[0], bandWidth, span)\r\n\t                    : makeRectShape(otherExtent[0], point[1] - bandWidth / 2, span, bandWidth);\r\n\r\n\t                var pointerEl = self._getPointerElement(\r\n\t                    cartesian, axisPointerModel, axisType, targetShape\r\n\t                );\r\n\t                moveAnimation\r\n\t                    ? graphic.updateProps(pointerEl, {\r\n\t                        shape: targetShape\r\n\t                    }, axisPointerModel)\r\n\t                    :  pointerEl.attr({\r\n\t                        shape: targetShape\r\n\t                    });\r\n\t            }\r\n\t        },\r\n\r\n\t        _showSinglePointer: function (axisPointerModel, single, axisType, point) {\r\n\t            var self = this;\r\n\t            var axisPointerType = axisPointerModel.get('type');\r\n\t            var moveAnimation = axisPointerType !== 'cross' && single.getBaseAxis().type === 'category';\r\n\t            var rect = single.getRect();\r\n\t            var otherExtent = [rect.y, rect.y + rect.height];\r\n\r\n\t            moveSingleLine(axisType, point, otherExtent);\r\n\r\n\t            /**\r\n\t             * @inner\r\n\t             */\r\n\t            function moveSingleLine(axisType, point, otherExtent) {\r\n\t                var axis = single.getAxis();\r\n\t                var orient = axis.orient;\r\n\r\n\t                var targetShape = orient === 'horizontal'\r\n\t                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])\r\n\t                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);\r\n\r\n\t                var pointerEl = self._getPointerElement(\r\n\t                    single, axisPointerModel, axisType, targetShape\r\n\t                );\r\n\t                moveAnimation\r\n\t                    ? graphic.updateProps(pointerEl, {\r\n\t                        shape: targetShape\r\n\t                    }, axisPointerModel)\r\n\t                    :  pointerEl.attr({\r\n\t                        shape: targetShape\r\n\t                    });\r\n\t            }\r\n\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Show tooltip on axis of polar coordinate\r\n\t         * @param {module:echarts/model/Model} axisPointerModel\r\n\t         * @param {Array.<module:echarts/coord/polar/Polar>} polar\r\n\t         * @param {string} axisType\r\n\t         * @param {Array.<number>} point\r\n\t         */\r\n\t        _showPolarPointer: function (axisPointerModel, polar, axisType, point) {\r\n\t            var self = this;\r\n\r\n\t            var axisPointerType = axisPointerModel.get('type');\r\n\r\n\t            var angleAxis = polar.getAngleAxis();\r\n\t            var radiusAxis = polar.getRadiusAxis();\r\n\r\n\t            var moveAnimation = axisPointerType !== 'cross'\r\n\t                && polar.getBaseAxis().type === 'category';\r\n\r\n\t            if (axisPointerType === 'cross') {\r\n\t                movePolarLine('angle', point, radiusAxis.getExtent());\r\n\t                movePolarLine('radius', point, angleAxis.getExtent());\r\n\r\n\t                this._updateCrossText(polar, point, axisPointerModel);\r\n\t            }\r\n\t            else {\r\n\t                var otherAxis = polar.getAxis(axisType === 'radius' ? 'angle' : 'radius');\r\n\t                var otherExtent = otherAxis.getExtent();\r\n\r\n\t                (axisPointerType === 'line' ? movePolarLine : movePolarShadow)(\r\n\t                    axisType, point, otherExtent\r\n\t                );\r\n\t            }\r\n\t            /**\r\n\t             * @inner\r\n\t             */\r\n\t            function movePolarLine(axisType, point, otherExtent) {\r\n\t                var mouseCoord = polar.pointToCoord(point);\r\n\r\n\t                var targetShape;\r\n\r\n\t                if (axisType === 'angle') {\r\n\t                    var p1 = polar.coordToPoint([otherExtent[0], mouseCoord[1]]);\r\n\t                    var p2 = polar.coordToPoint([otherExtent[1], mouseCoord[1]]);\r\n\t                    targetShape = makeLineShape(p1[0], p1[1], p2[0], p2[1]);\r\n\t                }\r\n\t                else {\r\n\t                    targetShape = {\r\n\t                        cx: polar.cx,\r\n\t                        cy: polar.cy,\r\n\t                        r: mouseCoord[0]\r\n\t                    };\r\n\t                }\r\n\r\n\t                var pointerEl = self._getPointerElement(\r\n\t                    polar, axisPointerModel, axisType, targetShape\r\n\t                );\r\n\r\n\t                moveAnimation\r\n\t                    ? graphic.updateProps(pointerEl, {\r\n\t                        shape: targetShape\r\n\t                    }, axisPointerModel)\r\n\t                    :  pointerEl.attr({\r\n\t                        shape: targetShape\r\n\t                    });\r\n\t            }\r\n\r\n\t            /**\r\n\t             * @inner\r\n\t             */\r\n\t            function movePolarShadow(axisType, point, otherExtent) {\r\n\t                var axis = polar.getAxis(axisType);\r\n\t                var bandWidth = axis.getBandWidth();\r\n\r\n\t                var mouseCoord = polar.pointToCoord(point);\r\n\r\n\t                var targetShape;\r\n\r\n\t                var radian = Math.PI / 180;\r\n\r\n\t                if (axisType === 'angle') {\r\n\t                    targetShape = makeSectorShape(\r\n\t                        polar.cx, polar.cy,\r\n\t                        otherExtent[0], otherExtent[1],\r\n\t                        // In ECharts y is negative if angle is positive\r\n\t                        (-mouseCoord[1] - bandWidth / 2) * radian,\r\n\t                        (-mouseCoord[1] + bandWidth / 2) * radian\r\n\t                    );\r\n\t                }\r\n\t                else {\r\n\t                    targetShape = makeSectorShape(\r\n\t                        polar.cx, polar.cy,\r\n\t                        mouseCoord[0] - bandWidth / 2,\r\n\t                        mouseCoord[0] + bandWidth / 2,\r\n\t                        0, Math.PI * 2\r\n\t                    );\r\n\t                }\r\n\r\n\t                var pointerEl = self._getPointerElement(\r\n\t                    polar, axisPointerModel, axisType, targetShape\r\n\t                );\r\n\t                moveAnimation\r\n\t                    ? graphic.updateProps(pointerEl, {\r\n\t                        shape: targetShape\r\n\t                    }, axisPointerModel)\r\n\t                    :  pointerEl.attr({\r\n\t                        shape: targetShape\r\n\t                    });\r\n\t            }\r\n\t        },\r\n\r\n\t        _updateCrossText: function (coordSys, point, axisPointerModel) {\r\n\t            var crossStyleModel = axisPointerModel.getModel('crossStyle');\r\n\t            var textStyleModel = crossStyleModel.getModel('textStyle');\r\n\r\n\t            var tooltipModel = this._tooltipModel;\r\n\r\n\t            var text = this._crossText;\r\n\t            if (!text) {\r\n\t                text = this._crossText = new graphic.Text({\r\n\t                    style: {\r\n\t                        textAlign: 'left',\r\n\t                        textVerticalAlign: 'bottom'\r\n\t                    }\r\n\t                });\r\n\t                this.group.add(text);\r\n\t            }\r\n\r\n\t            var value = coordSys.pointToData(point);\r\n\r\n\t            var dims = coordSys.dimensions;\r\n\t            value = zrUtil.map(value, function (val, idx) {\r\n\t                var axis = coordSys.getAxis(dims[idx]);\r\n\t                if (axis.type === 'category' || axis.type === 'time') {\r\n\t                    val = axis.scale.getLabel(val);\r\n\t                }\r\n\t                else {\r\n\t                    val = formatUtil.addCommas(\r\n\t                        val.toFixed(axis.getPixelPrecision())\r\n\t                    );\r\n\t                }\r\n\t                return val;\r\n\t            });\r\n\r\n\t            text.setStyle({\r\n\t                fill: textStyleModel.getTextColor() || crossStyleModel.get('color'),\r\n\t                textFont: textStyleModel.getFont(),\r\n\t                text: value.join(', '),\r\n\t                x: point[0] + 5,\r\n\t                y: point[1] - 5\r\n\t            });\r\n\t            text.z = tooltipModel.get('z');\r\n\t            text.zlevel = tooltipModel.get('zlevel');\r\n\t        },\r\n\r\n\t        _getPointerElement: function (coordSys, pointerModel, axisType, initShape) {\r\n\t            var tooltipModel = this._tooltipModel;\r\n\t            var z = tooltipModel.get('z');\r\n\t            var zlevel = tooltipModel.get('zlevel');\r\n\t            var axisPointers = this._axisPointers;\r\n\t            var coordSysName = coordSys.name;\r\n\t            axisPointers[coordSysName] = axisPointers[coordSysName] || {};\r\n\t            if (axisPointers[coordSysName][axisType]) {\r\n\t                return axisPointers[coordSysName][axisType];\r\n\t            }\r\n\r\n\t            // Create if not exists\r\n\t            var pointerType = pointerModel.get('type');\r\n\t            var styleModel = pointerModel.getModel(pointerType + 'Style');\r\n\t            var isShadow = pointerType === 'shadow';\r\n\t            var style = styleModel[isShadow ? 'getAreaStyle' : 'getLineStyle']();\r\n\r\n\t            var elementType = coordSys.type === 'polar'\r\n\t                ? (isShadow ? 'Sector' : (axisType === 'radius' ? 'Circle' : 'Line'))\r\n\t                : (isShadow ? 'Rect' : 'Line');\r\n\r\n\t            isShadow ? (style.stroke = null) : (style.fill = null);\r\n\r\n\t            var el = axisPointers[coordSysName][axisType] = new graphic[elementType]({\r\n\t                style: style,\r\n\t                z: z,\r\n\t                zlevel: zlevel,\r\n\t                silent: true,\r\n\t                shape: initShape\r\n\t            });\r\n\r\n\t            this.group.add(el);\r\n\t            return el;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Dispatch actions and show tooltip on series\r\n\t         * @param {Array.<module:echarts/model/Series>} seriesList\r\n\t         * @param {Array.<number>} point\r\n\t         * @param {Array.<number>} value\r\n\t         * @param {boolean} contentNotChange\r\n\t         * @param {Array.<number>|string|Function} [positionExpr]\r\n\t         */\r\n\t        _dispatchAndShowSeriesTooltipContent: function (\r\n\t            coordSys, seriesList, point, value, contentNotChange, positionExpr\r\n\t        ) {\r\n\r\n\t            var rootTooltipModel = this._tooltipModel;\r\n\r\n\t            var baseAxis = coordSys.getBaseAxis();\r\n\t            var baseDimIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\r\n\r\n\t            var payloadBatch = zrUtil.map(seriesList, function (series) {\r\n\t                return {\r\n\t                    seriesIndex: series.seriesIndex,\r\n\t                    dataIndexInside: series.getAxisTooltipDataIndex\r\n\t                        ? series.getAxisTooltipDataIndex(series.coordDimToDataDim(baseAxis.dim), value, baseAxis)\r\n\t                        : series.getData().indexOfNearest(\r\n\t                            series.coordDimToDataDim(baseAxis.dim)[0],\r\n\t                            value[baseDimIndex],\r\n\t                            // Add a threshold to avoid find the wrong dataIndex when data length is not same\r\n\t                            false, baseAxis.type === 'category' ? 0.5 : null\r\n\t                        )\r\n\t                };\r\n\t            });\r\n\r\n\t            var lastHover = this._lastHover;\r\n\t            var api = this._api;\r\n\t            // Dispatch downplay action\r\n\t            if (lastHover.payloadBatch && !contentNotChange) {\r\n\t                api.dispatchAction({\r\n\t                    type: 'downplay',\r\n\t                    batch: lastHover.payloadBatch\r\n\t                });\r\n\t            }\r\n\t            // Dispatch highlight action\r\n\t            if (!contentNotChange) {\r\n\t                api.dispatchAction({\r\n\t                    type: 'highlight',\r\n\t                    batch: payloadBatch\r\n\t                });\r\n\t                lastHover.payloadBatch = payloadBatch;\r\n\t            }\r\n\t            // Dispatch showTip action\r\n\t            api.dispatchAction({\r\n\t                type: 'showTip',\r\n\t                dataIndexInside: payloadBatch[0].dataIndexInside,\r\n\t                seriesIndex: payloadBatch[0].seriesIndex,\r\n\t                from: this.uid\r\n\t            });\r\n\r\n\t            if (baseAxis && rootTooltipModel.get('showContent') && rootTooltipModel.get('show')) {\r\n\t                var paramsList = zrUtil.map(seriesList, function (series, index) {\r\n\t                    return series.getDataParams(payloadBatch[index].dataIndexInside);\r\n\t                });\r\n\r\n\t                if (!contentNotChange) {\r\n\t                    // Update html content\r\n\t                    var firstDataIndex = payloadBatch[0].dataIndexInside;\r\n\r\n\t                    // Default tooltip content\r\n\t                    // FIXME\r\n\t                    // (1) shold be the first data which has name?\r\n\t                    // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.\r\n\t                    var firstLine = baseAxis.type === 'time'\r\n\t                        ? baseAxis.scale.getLabel(value[baseDimIndex])\r\n\t                        : seriesList[0].getData().getName(firstDataIndex);\r\n\t                    var defaultHtml = (firstLine ? firstLine + '<br />' : '')\r\n\t                        + zrUtil.map(seriesList, function (series, index) {\r\n\t                            return series.formatTooltip(payloadBatch[index].dataIndexInside, true);\r\n\t                        }).join('<br />');\r\n\r\n\t                    var asyncTicket = 'axis_' + coordSys.name + '_' + firstDataIndex;\r\n\r\n\t                    this._showTooltipContent(\r\n\t                        rootTooltipModel, defaultHtml, paramsList, asyncTicket,\r\n\t                        point[0], point[1], positionExpr, null, api\r\n\t                    );\r\n\t                }\r\n\t                else {\r\n\t                    updatePosition(\r\n\t                        positionExpr || rootTooltipModel.get('position'), point[0], point[1],\r\n\t                        this._tooltipContent, paramsList, null, api\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Show tooltip on item\r\n\t         * @param {module:echarts/model/Series} seriesModel\r\n\t         * @param {number} dataIndex\r\n\t         * @param {string} dataType\r\n\t         * @param {Object} e\r\n\t         */\r\n\t        _showItemTooltipContent: function (seriesModel, dataIndex, dataType, e) {\r\n\t            // FIXME Graph data\r\n\t            var api = this._api;\r\n\t            var data = seriesModel.getData(dataType);\r\n\t            var itemModel = data.getItemModel(dataIndex);\r\n\r\n\t            var tooltipOpt = itemModel.get('tooltip', true);\r\n\t            if (typeof tooltipOpt === 'string') {\r\n\t                // In each data item tooltip can be simply write:\r\n\t                // {\r\n\t                //  value: 10,\r\n\t                //  tooltip: 'Something you need to know'\r\n\t                // }\r\n\t                var tooltipContent = tooltipOpt;\r\n\t                tooltipOpt = {\r\n\t                    formatter: tooltipContent\r\n\t                };\r\n\t            }\r\n\t            var rootTooltipModel = this._tooltipModel;\r\n\t            var seriesTooltipModel = seriesModel.getModel(\r\n\t                'tooltip', rootTooltipModel\r\n\t            );\r\n\t            var tooltipModel = new Model(tooltipOpt, seriesTooltipModel, seriesTooltipModel.ecModel);\r\n\r\n\t            var params = seriesModel.getDataParams(dataIndex, dataType);\r\n\t            var defaultHtml = seriesModel.formatTooltip(dataIndex, false, dataType);\r\n\r\n\t            var asyncTicket = 'item_' + seriesModel.name + '_' + dataIndex;\r\n\r\n\t            this._showTooltipContent(\r\n\t                tooltipModel, defaultHtml, params, asyncTicket,\r\n\t                e.offsetX, e.offsetY, e.position, e.target, api\r\n\t            );\r\n\t        },\r\n\r\n\t        _showTooltipContent: function (\r\n\t            tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, target, api\r\n\t        ) {\r\n\t            // Reset ticket\r\n\t            this._ticket = '';\r\n\r\n\t            if (tooltipModel.get('showContent') && tooltipModel.get('show')) {\r\n\t                var tooltipContent = this._tooltipContent;\r\n\r\n\t                var formatter = tooltipModel.get('formatter');\r\n\t                positionExpr = positionExpr || tooltipModel.get('position');\r\n\t                var html = defaultHtml;\r\n\r\n\t                if (formatter) {\r\n\t                    if (typeof formatter === 'string') {\r\n\t                        html = formatUtil.formatTpl(formatter, params);\r\n\t                    }\r\n\t                    else if (typeof formatter === 'function') {\r\n\t                        var self = this;\r\n\t                        var ticket = asyncTicket;\r\n\t                        var callback = function (cbTicket, html) {\r\n\t                            if (cbTicket === self._ticket) {\r\n\t                                tooltipContent.setContent(html);\r\n\r\n\t                                updatePosition(\r\n\t                                    positionExpr, x, y,\r\n\t                                    tooltipContent, params, target, api\r\n\t                                );\r\n\t                            }\r\n\t                        };\r\n\t                        self._ticket = ticket;\r\n\t                        html = formatter(params, ticket, callback);\r\n\t                    }\r\n\t                }\r\n\r\n\t                tooltipContent.show(tooltipModel);\r\n\t                tooltipContent.setContent(html);\r\n\r\n\t                updatePosition(\r\n\t                    positionExpr, x, y,\r\n\t                    tooltipContent, params, target, api\r\n\t                );\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Show axis pointer\r\n\t         * @param {string} [coordSysName]\r\n\t         */\r\n\t        _showAxisPointer: function (coordSysName) {\r\n\t            if (coordSysName) {\r\n\t                var axisPointers = this._axisPointers[coordSysName];\r\n\t                axisPointers && zrUtil.each(axisPointers, function (el) {\r\n\t                    el.show();\r\n\t                });\r\n\t            }\r\n\t            else {\r\n\t                this.group.eachChild(function (child) {\r\n\t                    child.show();\r\n\t                });\r\n\t                this.group.show();\r\n\t            }\r\n\t        },\r\n\r\n\t        _resetLastHover: function () {\r\n\t            var lastHover = this._lastHover;\r\n\t            if (lastHover.payloadBatch) {\r\n\t                this._api.dispatchAction({\r\n\t                    type: 'downplay',\r\n\t                    batch: lastHover.payloadBatch\r\n\t                });\r\n\t            }\r\n\t            // Reset lastHover\r\n\t            this._lastHover = {};\r\n\t        },\r\n\t        /**\r\n\t         * Hide axis pointer\r\n\t         * @param {string} [coordSysName]\r\n\t         */\r\n\t        _hideAxisPointer: function (coordSysName) {\r\n\t            if (coordSysName) {\r\n\t                var axisPointers = this._axisPointers[coordSysName];\r\n\t                axisPointers && zrUtil.each(axisPointers, function (el) {\r\n\t                    el.hide();\r\n\t                });\r\n\t            }\r\n\t            else {\r\n\t                if (this.group.children().length) {\r\n\t                    this.group.hide();\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        _hide: function () {\r\n\t            clearTimeout(this._showTimeout);\r\n\r\n\t            this._hideAxisPointer();\r\n\t            this._resetLastHover();\r\n\t            if (!this._alwaysShowContent) {\r\n\t                this._tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));\r\n\t            }\r\n\r\n\t            this._api.dispatchAction({\r\n\t                type: 'hideTip',\r\n\t                from: this.uid\r\n\t            });\r\n\r\n\t            this._lastX = this._lastY = null;\r\n\t        },\r\n\r\n\t        dispose: function (ecModel, api) {\r\n\t            if (env.node) {\r\n\t                return;\r\n\t            }\r\n\t            var zr = api.getZr();\r\n\t            this._tooltipContent.hide();\r\n\r\n\t            zr.off('click', this._tryShow);\r\n\t            zr.off('mousemove', this._mousemove);\r\n\t            zr.off('mouseout', this._hide);\r\n\t            zr.off('globalout', this._hide);\r\n\r\n\t            api.off('showTip', this._manuallyShowTip);\r\n\t            api.off('hideTip', this._manuallyHideTip);\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 283 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/component/tooltip/TooltipContent\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var zrColor = __webpack_require__(39);\r\n\t    var eventUtil = __webpack_require__(87);\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var each = zrUtil.each;\r\n\t    var toCamelCase = formatUtil.toCamelCase;\r\n\t    var env = __webpack_require__(2);\r\n\r\n\t    var vendors = ['', '-webkit-', '-moz-', '-o-'];\r\n\r\n\t    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';\r\n\r\n\t    /**\r\n\t     * @param {number} duration\r\n\t     * @return {string}\r\n\t     * @inner\r\n\t     */\r\n\t    function assembleTransition(duration) {\r\n\t        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';\r\n\t        var transitionText = 'left ' + duration + 's ' + transitionCurve + ','\r\n\t                            + 'top ' + duration + 's ' + transitionCurve;\r\n\t        return zrUtil.map(vendors, function (vendorPrefix) {\r\n\t            return vendorPrefix + 'transition:' + transitionText;\r\n\t        }).join(';');\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {Object} textStyle\r\n\t     * @return {string}\r\n\t     * @inner\r\n\t     */\r\n\t    function assembleFont(textStyleModel) {\r\n\t        var cssText = [];\r\n\r\n\t        var fontSize = textStyleModel.get('fontSize');\r\n\t        var color = textStyleModel.getTextColor();\r\n\r\n\t        color && cssText.push('color:' + color);\r\n\r\n\t        cssText.push('font:' + textStyleModel.getFont());\r\n\r\n\t        fontSize &&\r\n\t            cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');\r\n\r\n\t        each(['decoration', 'align'], function (name) {\r\n\t            var val = textStyleModel.get(name);\r\n\t            val && cssText.push('text-' + name + ':' + val);\r\n\t        });\r\n\r\n\t        return cssText.join(';');\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {Object} tooltipModel\r\n\t     * @return {string}\r\n\t     * @inner\r\n\t     */\r\n\t    function assembleCssText(tooltipModel) {\r\n\r\n\t        tooltipModel = tooltipModel;\r\n\r\n\t        var cssText = [];\r\n\r\n\t        var transitionDuration = tooltipModel.get('transitionDuration');\r\n\t        var backgroundColor = tooltipModel.get('backgroundColor');\r\n\t        var textStyleModel = tooltipModel.getModel('textStyle');\r\n\t        var padding = tooltipModel.get('padding');\r\n\r\n\t        // Animation transition\r\n\t        transitionDuration &&\r\n\t            cssText.push(assembleTransition(transitionDuration));\r\n\r\n\t        if (backgroundColor) {\r\n\t            if (env.canvasSupported) {\r\n\t                cssText.push('background-Color:' + backgroundColor);\r\n\t            }\r\n\t            else {\r\n\t                // for ie\r\n\t                cssText.push(\r\n\t                    'background-Color:#' + zrColor.toHex(backgroundColor)\r\n\t                );\r\n\t                cssText.push('filter:alpha(opacity=70)');\r\n\t            }\r\n\t        }\r\n\r\n\t        // Border style\r\n\t        each(['width', 'color', 'radius'], function (name) {\r\n\t            var borderName = 'border-' + name;\r\n\t            var camelCase = toCamelCase(borderName);\r\n\t            var val = tooltipModel.get(camelCase);\r\n\t            val != null &&\r\n\t                cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));\r\n\t        });\r\n\r\n\t        // Text style\r\n\t        cssText.push(assembleFont(textStyleModel));\r\n\r\n\t        // Padding\r\n\t        if (padding != null) {\r\n\t            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');\r\n\t        }\r\n\r\n\t        return cssText.join(';') + ';';\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @alias module:echarts/component/tooltip/TooltipContent\r\n\t     * @constructor\r\n\t     */\r\n\t    function TooltipContent(container, api) {\r\n\t        var el = document.createElement('div');\r\n\t        var zr = api.getZr();\r\n\r\n\t        this.el = el;\r\n\r\n\t        this._x = api.getWidth() / 2;\r\n\t        this._y = api.getHeight() / 2;\r\n\r\n\t        container.appendChild(el);\r\n\r\n\t        this._container = container;\r\n\r\n\t        this._show = false;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        this._hideTimeout;\r\n\r\n\t        var self = this;\r\n\t        el.onmouseenter = function () {\r\n\t            // clear the timeout in hideLater and keep showing tooltip\r\n\t            if (self.enterable) {\r\n\t                clearTimeout(self._hideTimeout);\r\n\t                self._show = true;\r\n\t            }\r\n\t            self._inContent = true;\r\n\t        };\r\n\t        el.onmousemove = function (e) {\r\n\t            e = e || window.event;\r\n\t            if (!self.enterable) {\r\n\t                // Try trigger zrender event to avoid mouse\r\n\t                // in and out shape too frequently\r\n\t                var handler = zr.handler;\r\n\t                eventUtil.normalizeEvent(container, e, true);\r\n\t                handler.dispatch('mousemove', e);\r\n\t            }\r\n\t        };\r\n\t        el.onmouseleave = function () {\r\n\t            if (self.enterable) {\r\n\t                if (self._show) {\r\n\t                    self.hideLater(self._hideDelay);\r\n\t                }\r\n\t            }\r\n\t            self._inContent = false;\r\n\t        };\r\n\r\n\t        compromiseMobile(el, container);\r\n\t    }\r\n\r\n\t    function compromiseMobile(tooltipContentEl, container) {\r\n\t        // Prevent default behavior on mobile. For example,\r\n\t        // default pinch gesture will cause browser zoom.\r\n\t        // We do not preventing event on tooltip content el,\r\n\t        // because user may need customization in tooltip el.\r\n\t        eventUtil.addEventListener(container, 'touchstart', preventDefault);\r\n\t        eventUtil.addEventListener(container, 'touchmove', preventDefault);\r\n\t        eventUtil.addEventListener(container, 'touchend', preventDefault);\r\n\r\n\t        function preventDefault(e) {\r\n\t            if (!contains(e.target)) {\r\n\t                e.preventDefault();\r\n\t            }\r\n\t        }\r\n\r\n\t        function contains(targetEl) {\r\n\t            while (targetEl && targetEl !== container) {\r\n\t                if (targetEl === tooltipContentEl) {\r\n\t                    return true;\r\n\t                }\r\n\t                targetEl = targetEl.parentNode;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    TooltipContent.prototype = {\r\n\r\n\t        constructor: TooltipContent,\r\n\r\n\t        enterable: true,\r\n\r\n\t        /**\r\n\t         * Update when tooltip is rendered\r\n\t         */\r\n\t        update: function () {\r\n\t            var container = this._container;\r\n\t            var stl = container.currentStyle\r\n\t                || document.defaultView.getComputedStyle(container);\r\n\t            var domStyle = container.style;\r\n\t            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {\r\n\t                domStyle.position = 'relative';\r\n\t            }\r\n\t            // Hide the tooltip\r\n\t            // PENDING\r\n\t            // this.hide();\r\n\t        },\r\n\r\n\t        show: function (tooltipModel) {\r\n\t            clearTimeout(this._hideTimeout);\r\n\t            var el = this.el;\r\n\r\n\t            el.style.cssText = gCssText + assembleCssText(tooltipModel)\r\n\t                // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore\r\n\t                + ';left:' + this._x + 'px;top:' + this._y + 'px;'\r\n\t                + (tooltipModel.get('extraCssText') || '');\r\n\r\n\t            el.style.display = el.innerHTML ?  'block' : 'none';\r\n\r\n\t            this._show = true;\r\n\t        },\r\n\r\n\t        setContent: function (content) {\r\n\t            var el = this.el;\r\n\t            el.innerHTML = content;\r\n\t            el.style.display = content ? 'block' : 'none';\r\n\t        },\r\n\r\n\t        moveTo: function (x, y) {\r\n\t            var style = this.el.style;\r\n\t            style.left = x + 'px';\r\n\t            style.top = y + 'px';\r\n\r\n\t            this._x = x;\r\n\t            this._y = y;\r\n\t        },\r\n\r\n\t        hide: function () {\r\n\t            this.el.style.display = 'none';\r\n\t            this._show = false;\r\n\t        },\r\n\r\n\t        // showLater: function ()\r\n\r\n\t        hideLater: function (time) {\r\n\t            if (this._show && !(this._inContent && this.enterable)) {\r\n\t                if (time) {\r\n\t                    this._hideDelay = time;\r\n\t                    // Set show false to avoid invoke hideLater mutiple times\r\n\t                    this._show = false;\r\n\t                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);\r\n\t                }\r\n\t                else {\r\n\t                    this.hide();\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        isShow: function () {\r\n\t            return this._show;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = TooltipContent;\r\n\r\n\r\n/***/ },\r\n/* 284 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    __webpack_require__(285);\r\n\t    __webpack_require__(291);\r\n\t    __webpack_require__(293);\r\n\r\n\t    // Polar view\r\n\t    __webpack_require__(1).extendComponentView({\r\n\t        type: 'polar'\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 285 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// TODO Axis scale\r\n\r\n\r\n\t    var Polar = __webpack_require__(286);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var axisHelper = __webpack_require__(114);\r\n\t    var niceScaleExtent = axisHelper.niceScaleExtent;\r\n\r\n\t    // 依赖 PolarModel 做预处理\r\n\t    __webpack_require__(289);\r\n\r\n\t    /**\r\n\t     * Resize method bound to the polar\r\n\t     * @param {module:echarts/coord/polar/PolarModel} polarModel\r\n\t     * @param {module:echarts/ExtensionAPI} api\r\n\t     */\r\n\t    function resizePolar(polarModel, api) {\r\n\t        var center = polarModel.get('center');\r\n\t        var radius = polarModel.get('radius');\r\n\t        var width = api.getWidth();\r\n\t        var height = api.getHeight();\r\n\t        var parsePercent = numberUtil.parsePercent;\r\n\r\n\t        this.cx = parsePercent(center[0], width);\r\n\t        this.cy = parsePercent(center[1], height);\r\n\r\n\t        var radiusAxis = this.getRadiusAxis();\r\n\t        var size = Math.min(width, height) / 2;\r\n\t        // var idx = radiusAxis.inverse ? 1 : 0;\r\n\t        radiusAxis.setExtent(0, parsePercent(radius, size));\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Update polar\r\n\t     */\r\n\t    function updatePolarScale(ecModel, api) {\r\n\t        var polar = this;\r\n\t        var angleAxis = polar.getAngleAxis();\r\n\t        var radiusAxis = polar.getRadiusAxis();\r\n\t        // Reset scale\r\n\t        angleAxis.scale.setExtent(Infinity, -Infinity);\r\n\t        radiusAxis.scale.setExtent(Infinity, -Infinity);\r\n\r\n\t        ecModel.eachSeries(function (seriesModel) {\r\n\t            if (seriesModel.coordinateSystem === polar) {\r\n\t                var data = seriesModel.getData();\r\n\t                radiusAxis.scale.unionExtent(\r\n\t                    data.getDataExtent('radius', radiusAxis.type !== 'category')\r\n\t                );\r\n\t                angleAxis.scale.unionExtent(\r\n\t                    data.getDataExtent('angle', angleAxis.type !== 'category')\r\n\t                );\r\n\t            }\r\n\t        });\r\n\r\n\t        niceScaleExtent(angleAxis, angleAxis.model);\r\n\t        niceScaleExtent(radiusAxis, radiusAxis.model);\r\n\r\n\t        // Fix extent of category angle axis\r\n\t        if (angleAxis.type === 'category' && !angleAxis.onBand) {\r\n\t            var extent = angleAxis.getExtent();\r\n\t            var diff = 360 / angleAxis.scale.count();\r\n\t            angleAxis.inverse ? (extent[1] += diff) : (extent[1] -= diff);\r\n\t            angleAxis.setExtent(extent[0], extent[1]);\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Set common axis properties\r\n\t     * @param {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\r\n\t     * @param {module:echarts/coord/polar/AxisModel}\r\n\t     * @inner\r\n\t     */\r\n\t    function setAxis(axis, axisModel) {\r\n\t        axis.type = axisModel.get('type');\r\n\t        axis.scale = axisHelper.createScaleByModel(axisModel);\r\n\t        axis.onBand = axisModel.get('boundaryGap') && axis.type === 'category';\r\n\r\n\t        // FIXME Radius axis not support inverse axis\r\n\t        if (axisModel.mainType === 'angleAxis') {\r\n\t            var startAngle = axisModel.get('startAngle');\r\n\t            axis.inverse = axisModel.get('inverse') ^ axisModel.get('clockwise');\r\n\t            axis.setExtent(startAngle, startAngle + (axis.inverse ? -360 : 360));\r\n\t        }\r\n\r\n\t        // Inject axis instance\r\n\t        axisModel.axis = axis;\r\n\t        axis.model = axisModel;\r\n\t    }\r\n\r\n\r\n\t    var polarCreator = {\r\n\r\n\t        dimensions: Polar.prototype.dimensions,\r\n\r\n\t        create: function (ecModel, api) {\r\n\t            var polarList = [];\r\n\t            ecModel.eachComponent('polar', function (polarModel, idx) {\r\n\t                var polar = new Polar(idx);\r\n\t                // Inject resize and update method\r\n\t                polar.resize = resizePolar;\r\n\t                polar.update = updatePolarScale;\r\n\r\n\t                var radiusAxis = polar.getRadiusAxis();\r\n\t                var angleAxis = polar.getAngleAxis();\r\n\r\n\t                var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\r\n\t                var angleAxisModel = polarModel.findAxisModel('angleAxis');\r\n\r\n\t                setAxis(radiusAxis, radiusAxisModel);\r\n\t                setAxis(angleAxis, angleAxisModel);\r\n\r\n\t                polar.resize(polarModel, api);\r\n\t                polarList.push(polar);\r\n\r\n\t                polarModel.coordinateSystem = polar;\r\n\t            });\r\n\t            // Inject coordinateSystem to series\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\t                if (seriesModel.get('coordinateSystem') === 'polar') {\r\n\t                    var polarModel = ecModel.queryComponents({\r\n\t                        mainType: 'polar',\r\n\t                        index: seriesModel.get('polarIndex'),\r\n\t                        id: seriesModel.get('polarId')\r\n\t                    })[0];\r\n\r\n\t                    if (true) {\r\n\t                        if (!polarModel) {\r\n\t                            throw new Error(\r\n\t                                'Polar \"' + zrUtil.retrieve(\r\n\t                                    seriesModel.get('polarIndex'),\r\n\t                                    seriesModel.get('polarId'),\r\n\t                                    0\r\n\t                                ) + '\" not found'\r\n\t                            );\r\n\t                        }\r\n\t                    }\r\n\t                    seriesModel.coordinateSystem = polarModel.coordinateSystem;\r\n\t                }\r\n\t            });\r\n\r\n\t            return polarList;\r\n\t        }\r\n\t    };\r\n\r\n\t    __webpack_require__(26).register('polar', polarCreator);\r\n\r\n\r\n/***/ },\r\n/* 286 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t/**\r\n\t * @module echarts/coord/polar/Polar\r\n\t */\r\n\r\n\r\n\t    var RadiusAxis = __webpack_require__(287);\r\n\t    var AngleAxis = __webpack_require__(288);\r\n\r\n\t    /**\r\n\t     * @alias {module:echarts/coord/polar/Polar}\r\n\t     * @constructor\r\n\t     * @param {string} name\r\n\t     */\r\n\t    var Polar = function (name) {\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.name = name || '';\r\n\r\n\t        /**\r\n\t         * x of polar center\r\n\t         * @type {number}\r\n\t         */\r\n\t        this.cx = 0;\r\n\r\n\t        /**\r\n\t         * y of polar center\r\n\t         * @type {number}\r\n\t         */\r\n\t        this.cy = 0;\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/polar/RadiusAxis}\r\n\t         * @private\r\n\t         */\r\n\t        this._radiusAxis = new RadiusAxis();\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/polar/AngleAxis}\r\n\t         * @private\r\n\t         */\r\n\t        this._angleAxis = new AngleAxis();\r\n\t    };\r\n\r\n\t    Polar.prototype = {\r\n\r\n\t        constructor: Polar,\r\n\r\n\t        type: 'polar',\r\n\r\n\t        /**\r\n\t         * @param {Array.<string>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        dimensions: ['radius', 'angle'],\r\n\r\n\t        /**\r\n\t         * If contain coord\r\n\t         * @param {Array.<number>} point\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        containPoint: function (point) {\r\n\t            var coord = this.pointToCoord(point);\r\n\t            return this._radiusAxis.contain(coord[0])\r\n\t                && this._angleAxis.contain(coord[1]);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If contain data\r\n\t         * @param {Array.<number>} data\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        containData: function (data) {\r\n\t            return this._radiusAxis.containData(data[0])\r\n\t                && this._angleAxis.containData(data[1]);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {string} axisType\r\n\t         * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\r\n\t         */\r\n\t        getAxis: function (axisType) {\r\n\t            return this['_' + axisType + 'Axis'];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get axes by type of scale\r\n\t         * @param {string} scaleType\r\n\t         * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\r\n\t         */\r\n\t        getAxesByScale: function (scaleType) {\r\n\t            var axes = [];\r\n\t            var angleAxis = this._angleAxis;\r\n\t            var radiusAxis = this._radiusAxis;\r\n\t            angleAxis.scale.type === scaleType && axes.push(angleAxis);\r\n\t            radiusAxis.scale.type === scaleType && axes.push(radiusAxis);\r\n\r\n\t            return axes;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:echarts/coord/polar/AngleAxis}\r\n\t         */\r\n\t        getAngleAxis: function () {\r\n\t            return this._angleAxis;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:echarts/coord/polar/RadiusAxis}\r\n\t         */\r\n\t        getRadiusAxis: function () {\r\n\t            return this._radiusAxis;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/coord/polar/Axis}\r\n\t         * @return {module:echarts/coord/polar/Axis}\r\n\t         */\r\n\t        getOtherAxis: function (axis) {\r\n\t            var angleAxis = this._angleAxis;\r\n\t            return axis === angleAxis ? this._radiusAxis : angleAxis;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Base axis will be used on stacking.\r\n\t         *\r\n\t         * @return {module:echarts/coord/polar/Axis}\r\n\t         */\r\n\t        getBaseAxis: function () {\r\n\t            return this.getAxesByScale('ordinal')[0]\r\n\t                || this.getAxesByScale('time')[0]\r\n\t                || this.getAngleAxis();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert series data to a list of (x, y) points\r\n\t         * @param {module:echarts/data/List} data\r\n\t         * @return {Array}\r\n\t         *  Return list of coordinates. For example:\r\n\t         *  `[[10, 10], [20, 20], [30, 30]]`\r\n\t         */\r\n\t        dataToPoints: function (data) {\r\n\t            return data.mapArray(this.dimensions, function (radius, angle) {\r\n\t                return this.dataToPoint([radius, angle]);\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert a single data item to (x, y) point.\r\n\t         * Parameter data is an array which the first element is radius and the second is angle\r\n\t         * @param {Array.<number>} data\r\n\t         * @param {boolean} [clamp=false]\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        dataToPoint: function (data, clamp) {\r\n\t            return this.coordToPoint([\r\n\t                this._radiusAxis.dataToRadius(data[0], clamp),\r\n\t                this._angleAxis.dataToAngle(data[1], clamp)\r\n\t            ]);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert a (x, y) point to data\r\n\t         * @param {Array.<number>} point\r\n\t         * @param {boolean} [clamp=false]\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        pointToData: function (point, clamp) {\r\n\t            var coord = this.pointToCoord(point);\r\n\t            return [\r\n\t                this._radiusAxis.radiusToData(coord[0], clamp),\r\n\t                this._angleAxis.angleToData(coord[1], clamp)\r\n\t            ];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert a (x, y) point to (radius, angle) coord\r\n\t         * @param {Array.<number>} point\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        pointToCoord: function (point) {\r\n\t            var dx = point[0] - this.cx;\r\n\t            var dy = point[1] - this.cy;\r\n\t            var angleAxis = this.getAngleAxis();\r\n\t            var extent = angleAxis.getExtent();\r\n\t            var minAngle = Math.min(extent[0], extent[1]);\r\n\t            var maxAngle = Math.max(extent[0], extent[1]);\r\n\t            // Fix fixed extent in polarCreator\r\n\t            // FIXME\r\n\t            angleAxis.inverse\r\n\t                ? (minAngle = maxAngle - 360)\r\n\t                : (maxAngle = minAngle + 360);\r\n\r\n\t            var radius = Math.sqrt(dx * dx + dy * dy);\r\n\t            dx /= radius;\r\n\t            dy /= radius;\r\n\r\n\t            var radian = Math.atan2(-dy, dx) / Math.PI * 180;\r\n\r\n\t            // move to angleExtent\r\n\t            var dir = radian < minAngle ? 1 : -1;\r\n\t            while (radian < minAngle || radian > maxAngle) {\r\n\t                radian += dir * 360;\r\n\t            }\r\n\r\n\t            return [radius, radian];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert a (radius, angle) coord to (x, y) point\r\n\t         * @param {Array.<number>} coord\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        coordToPoint: function (coord) {\r\n\t            var radius = coord[0];\r\n\t            var radian = coord[1] / 180 * Math.PI;\r\n\t            var x = Math.cos(radian) * radius + this.cx;\r\n\t            // Inverse the y\r\n\t            var y = -Math.sin(radian) * radius + this.cy;\r\n\r\n\t            return [x, y];\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = Polar;\r\n\r\n\r\n/***/ },\r\n/* 287 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Axis = __webpack_require__(123);\r\n\r\n\t    function RadiusAxis(scale, radiusExtent) {\r\n\r\n\t        Axis.call(this, 'radius', scale, radiusExtent);\r\n\r\n\t        /**\r\n\t         * Axis type\r\n\t         *  - 'category'\r\n\t         *  - 'value'\r\n\t         *  - 'time'\r\n\t         *  - 'log'\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.type = 'category';\r\n\t    }\r\n\r\n\t    RadiusAxis.prototype = {\r\n\r\n\t        constructor: RadiusAxis,\r\n\r\n\t        dataToRadius: Axis.prototype.dataToCoord,\r\n\r\n\t        radiusToData: Axis.prototype.coordToData\r\n\t    };\r\n\r\n\t    zrUtil.inherits(RadiusAxis, Axis);\r\n\r\n\t    module.exports = RadiusAxis;\r\n\r\n\r\n/***/ },\r\n/* 288 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Axis = __webpack_require__(123);\r\n\r\n\t    function AngleAxis(scale, angleExtent) {\r\n\r\n\t        angleExtent = angleExtent || [0, 360];\r\n\r\n\t        Axis.call(this, 'angle', scale, angleExtent);\r\n\r\n\t        /**\r\n\t         * Axis type\r\n\t         *  - 'category'\r\n\t         *  - 'value'\r\n\t         *  - 'time'\r\n\t         *  - 'log'\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.type = 'category';\r\n\t    }\r\n\r\n\t    AngleAxis.prototype = {\r\n\r\n\t        constructor: AngleAxis,\r\n\r\n\t        dataToAngle: Axis.prototype.dataToCoord,\r\n\r\n\t        angleToData: Axis.prototype.coordToData\r\n\t    };\r\n\r\n\t    zrUtil.inherits(AngleAxis, Axis);\r\n\r\n\t    module.exports = AngleAxis;\r\n\r\n\r\n/***/ },\r\n/* 289 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    __webpack_require__(290);\r\n\r\n\t    __webpack_require__(1).extendComponentModel({\r\n\r\n\t        type: 'polar',\r\n\r\n\t        dependencies: ['polarAxis', 'angleAxis'],\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/polar/Polar}\r\n\t         */\r\n\t        coordinateSystem: null,\r\n\r\n\t        /**\r\n\t         * @param {string} axisType\r\n\t         * @return {module:echarts/coord/polar/AxisModel}\r\n\t         */\r\n\t        findAxisModel: function (axisType) {\r\n\t            var foundAxisModel;\r\n\t            var ecModel = this.ecModel;\r\n\r\n\t            ecModel.eachComponent(axisType, function (axisModel) {\r\n\t                var polarModel = ecModel.queryComponents({\r\n\t                    mainType: 'polar',\r\n\t                    index: axisModel.getShallow('polarIndex'),\r\n\t                    id: axisModel.getShallow('polarId')\r\n\t                })[0];\r\n\r\n\t                if(polarModel === this) {\r\n\t                    foundAxisModel = axisModel;\r\n\t                }\r\n\t            }, this);\r\n\t            return foundAxisModel;\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\r\n\t            zlevel: 0,\r\n\r\n\t            z: 0,\r\n\r\n\t            center: ['50%', '50%'],\r\n\r\n\t            radius: '80%'\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 290 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var ComponentModel = __webpack_require__(19);\r\n\t    var axisModelCreator = __webpack_require__(127);\r\n\r\n\t    var PolarAxisModel = ComponentModel.extend({\r\n\r\n\t        type: 'polarAxis',\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\r\n\t         */\r\n\t        axis: null\r\n\r\n\t    });\r\n\r\n\t    zrUtil.merge(PolarAxisModel.prototype, __webpack_require__(129));\r\n\t    zrUtil.merge(PolarAxisModel.prototype, __webpack_require__(130));\r\n\r\n\t    var polarAxisDefaultExtendedOption = {\r\n\t        angle: {\r\n\t            // polarIndex: 0,\r\n\t            // polarId: '',\r\n\r\n\t            startAngle: 90,\r\n\r\n\t            clockwise: true,\r\n\r\n\t            splitNumber: 12,\r\n\r\n\t            axisLabel: {\r\n\t                rotate: false\r\n\t            }\r\n\t        },\r\n\t        radius: {\r\n\t            // polarIndex: 0,\r\n\t            // polarId: '',\r\n\r\n\t            splitNumber: 5\r\n\t        }\r\n\t    };\r\n\r\n\t    function getAxisType(axisDim, option) {\r\n\t        // Default axis with data is category axis\r\n\t        return option.type || (option.data ? 'category' : 'value');\r\n\t    }\r\n\r\n\t    axisModelCreator('angle', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.angle);\r\n\t    axisModelCreator('radius', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.radius);\r\n\r\n\r\n\r\n/***/ },\r\n/* 291 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    __webpack_require__(285);\r\n\r\n\t    __webpack_require__(292);\r\n\r\n\r\n/***/ },\r\n/* 292 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var Model = __webpack_require__(12);\r\n\r\n\t    var elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];\r\n\r\n\t    function getAxisLineShape(polar, r0, r, angle) {\r\n\t        var start = polar.coordToPoint([r0, angle]);\r\n\t        var end = polar.coordToPoint([r, angle]);\r\n\r\n\t        return {\r\n\t            x1: start[0],\r\n\t            y1: start[1],\r\n\t            x2: end[0],\r\n\t            y2: end[1]\r\n\t        };\r\n\t    }\r\n\t    __webpack_require__(1).extendComponentView({\r\n\r\n\t        type: 'angleAxis',\r\n\r\n\t        render: function (angleAxisModel, ecModel) {\r\n\t            this.group.removeAll();\r\n\t            if (!angleAxisModel.get('show')) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var polarModel = ecModel.getComponent('polar', angleAxisModel.get('polarIndex'));\r\n\t            var angleAxis = angleAxisModel.axis;\r\n\t            var polar = polarModel.coordinateSystem;\r\n\t            var radiusExtent = polar.getRadiusAxis().getExtent();\r\n\t            var ticksAngles = angleAxis.getTicksCoords();\r\n\r\n\t            if (angleAxis.type !== 'category') {\r\n\t                // Remove the last tick which will overlap the first tick\r\n\t                ticksAngles.pop();\r\n\t            }\r\n\r\n\t            zrUtil.each(elementList, function (name) {\r\n\t                if (angleAxisModel.get(name +'.show')) {\r\n\t                    this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent);\r\n\t                }\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _axisLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\r\n\t            var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');\r\n\r\n\t            var circle = new graphic.Circle({\r\n\t                shape: {\r\n\t                    cx: polar.cx,\r\n\t                    cy: polar.cy,\r\n\t                    r: radiusExtent[1]\r\n\t                },\r\n\t                style: lineStyleModel.getLineStyle(),\r\n\t                z2: 1,\r\n\t                silent: true\r\n\t            });\r\n\t            circle.style.fill = null;\r\n\r\n\t            this.group.add(circle);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _axisTick: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\r\n\t            var tickModel = angleAxisModel.getModel('axisTick');\r\n\r\n\t            var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');\r\n\r\n\t            var lines = zrUtil.map(ticksAngles, function (tickAngle) {\r\n\t                return new graphic.Line({\r\n\t                    shape: getAxisLineShape(polar, radiusExtent[1], radiusExtent[1] + tickLen, tickAngle)\r\n\t                });\r\n\t            });\r\n\t            this.group.add(graphic.mergePath(\r\n\t                lines, {\r\n\t                    style: zrUtil.defaults(\r\n\t                        tickModel.getModel('lineStyle').getLineStyle(),\r\n\t                        {\r\n\t                            stroke: angleAxisModel.get('axisLine.lineStyle.color')\r\n\t                        }\r\n\t                    )\r\n\t                }\r\n\t            ));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _axisLabel: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\r\n\t            var axis = angleAxisModel.axis;\r\n\r\n\t            var categoryData = angleAxisModel.get('data');\r\n\r\n\t            var labelModel = angleAxisModel.getModel('axisLabel');\r\n\t            var axisTextStyleModel = labelModel.getModel('textStyle');\r\n\r\n\t            var labels = angleAxisModel.getFormattedLabels();\r\n\r\n\t            var labelMargin = labelModel.get('margin');\r\n\t            var labelsAngles = axis.getLabelsCoords();\r\n\r\n\t            // Use length of ticksAngles because it may remove the last tick to avoid overlapping\r\n\t            for (var i = 0; i < ticksAngles.length; i++) {\r\n\t                var r = radiusExtent[1];\r\n\t                var p = polar.coordToPoint([r + labelMargin, labelsAngles[i]]);\r\n\t                var cx = polar.cx;\r\n\t                var cy = polar.cy;\r\n\r\n\t                var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3\r\n\t                    ? 'center' : (p[0] > cx ? 'left' : 'right');\r\n\t                var labelTextBaseline = Math.abs(p[1] - cy) / r < 0.3\r\n\t                    ? 'middle' : (p[1] > cy ? 'top' : 'bottom');\r\n\r\n\t                var textStyleModel = axisTextStyleModel;\r\n\t                if (categoryData && categoryData[i] && categoryData[i].textStyle) {\r\n\t                    textStyleModel = new Model(\r\n\t                        categoryData[i].textStyle, axisTextStyleModel\r\n\t                    );\r\n\t                }\r\n\t                this.group.add(new graphic.Text({\r\n\t                    style: {\r\n\t                        x: p[0],\r\n\t                        y: p[1],\r\n\t                        fill: textStyleModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),\r\n\t                        text: labels[i],\r\n\t                        textAlign: labelTextAlign,\r\n\t                        textVerticalAlign: labelTextBaseline,\r\n\t                        textFont: textStyleModel.getFont()\r\n\t                    },\r\n\t                    silent: true\r\n\t                }));\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _splitLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\r\n\t            var splitLineModel = angleAxisModel.getModel('splitLine');\r\n\t            var lineStyleModel = splitLineModel.getModel('lineStyle');\r\n\t            var lineColors = lineStyleModel.get('color');\r\n\t            var lineCount = 0;\r\n\r\n\t            lineColors = lineColors instanceof Array ? lineColors : [lineColors];\r\n\r\n\t            var splitLines = [];\r\n\r\n\t            for (var i = 0; i < ticksAngles.length; i++) {\r\n\t                var colorIndex = (lineCount++) % lineColors.length;\r\n\t                splitLines[colorIndex] = splitLines[colorIndex] || [];\r\n\t                splitLines[colorIndex].push(new graphic.Line({\r\n\t                    shape: getAxisLineShape(polar, radiusExtent[0], radiusExtent[1], ticksAngles[i])\r\n\t                }));\r\n\t            }\r\n\r\n\t            // Simple optimization\r\n\t            // Batching the lines if color are the same\r\n\t            for (var i = 0; i < splitLines.length; i++) {\r\n\t                this.group.add(graphic.mergePath(splitLines[i], {\r\n\t                    style: zrUtil.defaults({\r\n\t                        stroke: lineColors[i % lineColors.length]\r\n\t                    }, lineStyleModel.getLineStyle()),\r\n\t                    silent: true,\r\n\t                    z: angleAxisModel.get('z')\r\n\t                }));\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _splitArea: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\r\n\r\n\t            var splitAreaModel = angleAxisModel.getModel('splitArea');\r\n\t            var areaStyleModel = splitAreaModel.getModel('areaStyle');\r\n\t            var areaColors = areaStyleModel.get('color');\r\n\t            var lineCount = 0;\r\n\r\n\t            areaColors = areaColors instanceof Array ? areaColors : [areaColors];\r\n\r\n\t            var splitAreas = [];\r\n\r\n\t            var RADIAN = Math.PI / 180;\r\n\t            var prevAngle = -ticksAngles[0] * RADIAN;\r\n\t            var r0 = Math.min(radiusExtent[0], radiusExtent[1]);\r\n\t            var r1 = Math.max(radiusExtent[0], radiusExtent[1]);\r\n\r\n\t            var clockwise = angleAxisModel.get('clockwise');\r\n\r\n\t            for (var i = 1; i < ticksAngles.length; i++) {\r\n\t                var colorIndex = (lineCount++) % areaColors.length;\r\n\t                splitAreas[colorIndex] = splitAreas[colorIndex] || [];\r\n\t                splitAreas[colorIndex].push(new graphic.Sector({\r\n\t                    shape: {\r\n\t                        cx: polar.cx,\r\n\t                        cy: polar.cy,\r\n\t                        r0: r0,\r\n\t                        r: r1,\r\n\t                        startAngle: prevAngle,\r\n\t                        endAngle: -ticksAngles[i] * RADIAN,\r\n\t                        clockwise: clockwise\r\n\t                    },\r\n\t                    silent: true\r\n\t                }));\r\n\t                prevAngle = -ticksAngles[i] * RADIAN;\r\n\t            }\r\n\r\n\t            // Simple optimization\r\n\t            // Batching the lines if color are the same\r\n\t            for (var i = 0; i < splitAreas.length; i++) {\r\n\t                this.group.add(graphic.mergePath(splitAreas[i], {\r\n\t                    style: zrUtil.defaults({\r\n\t                        fill: areaColors[i % areaColors.length]\r\n\t                    }, areaStyleModel.getAreaStyle()),\r\n\t                    silent: true\r\n\t                }));\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 293 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(285);\r\n\r\n\t    __webpack_require__(294);\r\n\r\n\r\n/***/ },\r\n/* 294 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var AxisBuilder = __webpack_require__(133);\r\n\r\n\t    var axisBuilderAttrs = [\r\n\t        'axisLine', 'axisLabel', 'axisTick', 'axisName'\r\n\t    ];\r\n\t    var selfBuilderAttrs = [\r\n\t        'splitLine', 'splitArea'\r\n\t    ];\r\n\r\n\t    __webpack_require__(1).extendComponentView({\r\n\r\n\t        type: 'radiusAxis',\r\n\r\n\t        render: function (radiusAxisModel, ecModel) {\r\n\t            this.group.removeAll();\r\n\t            if (!radiusAxisModel.get('show')) {\r\n\t                return;\r\n\t            }\r\n\t            var polarModel = ecModel.getComponent('polar', radiusAxisModel.get('polarIndex'));\r\n\t            var angleAxis = polarModel.coordinateSystem.getAngleAxis();\r\n\t            var radiusAxis = radiusAxisModel.axis;\r\n\t            var polar = polarModel.coordinateSystem;\r\n\t            var ticksCoords = radiusAxis.getTicksCoords();\r\n\t            var axisAngle = angleAxis.getExtent()[0];\r\n\t            var radiusExtent = radiusAxis.getExtent();\r\n\r\n\t            var layout = layoutAxis(polar, radiusAxisModel, axisAngle);\r\n\t            var axisBuilder = new AxisBuilder(radiusAxisModel, layout);\r\n\t            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\r\n\t            this.group.add(axisBuilder.getGroup());\r\n\r\n\t            zrUtil.each(selfBuilderAttrs, function (name) {\r\n\t                if (radiusAxisModel.get(name +'.show')) {\r\n\t                    this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords);\r\n\t                }\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _splitLine: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\r\n\t            var splitLineModel = radiusAxisModel.getModel('splitLine');\r\n\t            var lineStyleModel = splitLineModel.getModel('lineStyle');\r\n\t            var lineColors = lineStyleModel.get('color');\r\n\t            var lineCount = 0;\r\n\r\n\t            lineColors = lineColors instanceof Array ? lineColors : [lineColors];\r\n\r\n\t            var splitLines = [];\r\n\r\n\t            for (var i = 0; i < ticksCoords.length; i++) {\r\n\t                var colorIndex = (lineCount++) % lineColors.length;\r\n\t                splitLines[colorIndex] = splitLines[colorIndex] || [];\r\n\t                splitLines[colorIndex].push(new graphic.Circle({\r\n\t                    shape: {\r\n\t                        cx: polar.cx,\r\n\t                        cy: polar.cy,\r\n\t                        r: ticksCoords[i]\r\n\t                    },\r\n\t                    silent: true\r\n\t                }));\r\n\t            }\r\n\r\n\t            // Simple optimization\r\n\t            // Batching the lines if color are the same\r\n\t            for (var i = 0; i < splitLines.length; i++) {\r\n\t                this.group.add(graphic.mergePath(splitLines[i], {\r\n\t                    style: zrUtil.defaults({\r\n\t                        stroke: lineColors[i % lineColors.length],\r\n\t                        fill: null\r\n\t                    }, lineStyleModel.getLineStyle()),\r\n\t                    silent: true\r\n\t                }));\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _splitArea: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\r\n\r\n\t            var splitAreaModel = radiusAxisModel.getModel('splitArea');\r\n\t            var areaStyleModel = splitAreaModel.getModel('areaStyle');\r\n\t            var areaColors = areaStyleModel.get('color');\r\n\t            var lineCount = 0;\r\n\r\n\t            areaColors = areaColors instanceof Array ? areaColors : [areaColors];\r\n\r\n\t            var splitAreas = [];\r\n\r\n\t            var prevRadius = ticksCoords[0];\r\n\t            for (var i = 1; i < ticksCoords.length; i++) {\r\n\t                var colorIndex = (lineCount++) % areaColors.length;\r\n\t                splitAreas[colorIndex] = splitAreas[colorIndex] || [];\r\n\t                splitAreas[colorIndex].push(new graphic.Sector({\r\n\t                    shape: {\r\n\t                        cx: polar.cx,\r\n\t                        cy: polar.cy,\r\n\t                        r0: prevRadius,\r\n\t                        r: ticksCoords[i],\r\n\t                        startAngle: 0,\r\n\t                        endAngle: Math.PI * 2\r\n\t                    },\r\n\t                    silent: true\r\n\t                }));\r\n\t                prevRadius = ticksCoords[i];\r\n\t            }\r\n\r\n\t            // Simple optimization\r\n\t            // Batching the lines if color are the same\r\n\t            for (var i = 0; i < splitAreas.length; i++) {\r\n\t                this.group.add(graphic.mergePath(splitAreas[i], {\r\n\t                    style: zrUtil.defaults({\r\n\t                        fill: areaColors[i % areaColors.length]\r\n\t                    }, areaStyleModel.getAreaStyle()),\r\n\t                    silent: true\r\n\t                }));\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function layoutAxis(polar, radiusAxisModel, axisAngle) {\r\n\t        return {\r\n\t            position: [polar.cx, polar.cy],\r\n\t            rotation: axisAngle / 180 * Math.PI,\r\n\t            labelDirection: -1,\r\n\t            tickDirection: -1,\r\n\t            nameDirection: 1,\r\n\t            labelRotation: radiusAxisModel.getModel('axisLabel').get('rotate'),\r\n\t            // Over splitLine and splitArea\r\n\t            z2: 1\r\n\t        };\r\n\t    }\r\n\r\n\r\n/***/ },\r\n/* 295 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(296);\r\n\r\n\t    __webpack_require__(164);\r\n\r\n\t    __webpack_require__(297);\r\n\r\n\t    __webpack_require__(177);\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    function makeAction(method, actionInfo) {\r\n\t        actionInfo.update = 'updateView';\r\n\t        echarts.registerAction(actionInfo, function (payload, ecModel) {\r\n\t            var selected = {};\r\n\r\n\t            ecModel.eachComponent(\r\n\t                { mainType: 'geo', query: payload},\r\n\t                function (geoModel) {\r\n\t                    geoModel[method](payload.name);\r\n\t                    var geo = geoModel.coordinateSystem;\r\n\t                    zrUtil.each(geo.regions, function (region) {\r\n\t                        selected[region.name] = geoModel.isSelected(region.name) || false;\r\n\t                    });\r\n\t                }\r\n\t            );\r\n\r\n\t            return {\r\n\t                selected: selected,\r\n\t                name: payload.name\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    makeAction('toggleSelected', {\r\n\t        type: 'geoToggleSelect',\r\n\t        event: 'geoselectchanged'\r\n\t    });\r\n\t    makeAction('select', {\r\n\t        type: 'geoSelect',\r\n\t        event: 'geoselected'\r\n\t    });\r\n\t    makeAction('unSelect', {\r\n\t        type: 'geoUnSelect',\r\n\t        event: 'geounselected'\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 296 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var ComponentModel = __webpack_require__(19);\r\n\t    var Model = __webpack_require__(12);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var selectableMixin = __webpack_require__(141);\r\n\r\n\t    var geoCreator = __webpack_require__(164);\r\n\r\n\t    var GeoModel = ComponentModel.extend({\r\n\r\n\t        type: 'geo',\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/geo/Geo}\r\n\t         */\r\n\t        coordinateSystem: null,\r\n\r\n\t        layoutMode: 'box',\r\n\r\n\t        init: function (option) {\r\n\t            ComponentModel.prototype.init.apply(this, arguments);\r\n\r\n\t            // Default label emphasis `position` and `show`\r\n\t            modelUtil.defaultEmphasis(\r\n\t                option.label, ['position', 'show', 'textStyle', 'distance', 'formatter']\r\n\t            );\r\n\t        },\r\n\r\n\t        optionUpdated: function () {\r\n\t            var option = this.option;\r\n\t            var self = this;\r\n\r\n\t            option.regions = geoCreator.getFilledRegions(option.regions, option.map);\r\n\r\n\t            this._optionModelMap = zrUtil.reduce(option.regions || [], function (obj, regionOpt) {\r\n\t                if (regionOpt.name) {\r\n\t                    obj[regionOpt.name] = new Model(regionOpt, self);\r\n\t                }\r\n\t                return obj;\r\n\t            }, {});\r\n\r\n\t            this.updateSelectedMap(option.regions);\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\r\n\t            zlevel: 0,\r\n\r\n\t            z: 0,\r\n\r\n\t            show: true,\r\n\r\n\t            left: 'center',\r\n\r\n\t            top: 'center',\r\n\r\n\r\n\t            // width:,\r\n\t            // height:,\r\n\t            // right\r\n\t            // bottom\r\n\r\n\t            // Aspect is width / height. Inited to be geoJson bbox aspect\r\n\t            // This parameter is used for scale this aspect\r\n\t            aspectScale: 0.75,\r\n\r\n\t            ///// Layout with center and size\r\n\t            // If you wan't to put map in a fixed size box with right aspect ratio\r\n\t            // This two properties may more conveninet\r\n\t            // layoutCenter: [50%, 50%]\r\n\t            // layoutSize: 100\r\n\r\n\r\n\t            silent: false,\r\n\r\n\t            // Map type\r\n\t            map: '',\r\n\r\n\t            // Default on center of map\r\n\t            center: null,\r\n\r\n\t            zoom: 1,\r\n\r\n\t            scaleLimit: null,\r\n\r\n\t            // selectedMode: false\r\n\r\n\t            label: {\r\n\t                normal: {\r\n\t                    show: false,\r\n\t                    textStyle: {\r\n\t                        color: '#000'\r\n\t                    }\r\n\t                },\r\n\t                emphasis: {\r\n\t                    show: true,\r\n\t                    textStyle: {\r\n\t                        color: 'rgb(100,0,0)'\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    // color: 各异,\r\n\t                    borderWidth: 0.5,\r\n\t                    borderColor: '#444',\r\n\t                    color: '#eee'\r\n\t                },\r\n\t                emphasis: {                 // 也是选中样式\r\n\t                    color: 'rgba(255,215,0,0.8)'\r\n\t                }\r\n\t            },\r\n\r\n\t            regions: []\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get model of region\r\n\t         * @param  {string} name\r\n\t         * @return {module:echarts/model/Model}\r\n\t         */\r\n\t        getRegionModel: function (name) {\r\n\t            return this._optionModelMap[name];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Format label\r\n\t         * @param {string} name Region name\r\n\t         * @param {string} [status='normal'] 'normal' or 'emphasis'\r\n\t         * @return {string}\r\n\t         */\r\n\t        getFormattedLabel: function (name, status) {\r\n\t            var formatter = this.get('label.' + status + '.formatter');\r\n\t            var params = {\r\n\t                name: name\r\n\t            };\r\n\t            if (typeof formatter === 'function') {\r\n\t                params.status = status;\r\n\t                return formatter(params);\r\n\t            }\r\n\t            else if (typeof formatter === 'string') {\r\n\t                return formatter.replace('{a}', params.seriesName);\r\n\t            }\r\n\t        },\r\n\r\n\t        setZoom: function (zoom) {\r\n\t            this.option.zoom = zoom;\r\n\t        },\r\n\r\n\t        setCenter: function (center) {\r\n\t            this.option.center = center;\r\n\t        }\r\n\t    });\r\n\r\n\t    zrUtil.mixin(GeoModel, selectableMixin);\r\n\r\n\t    module.exports = GeoModel;\r\n\r\n\r\n/***/ },\r\n/* 297 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var MapDraw = __webpack_require__(174);\r\n\r\n\t    module.exports = __webpack_require__(1).extendComponentView({\r\n\r\n\t        type: 'geo',\r\n\r\n\t        init: function (ecModel, api) {\r\n\t            var mapDraw = new MapDraw(api, true);\r\n\t            this._mapDraw = mapDraw;\r\n\r\n\t            this.group.add(mapDraw.group);\r\n\t        },\r\n\r\n\t        render: function (geoModel, ecModel, api, payload) {\r\n\t            // Not render if it is an toggleSelect action from self\r\n\t            if (payload && payload.type === 'geoToggleSelect'\r\n\t                && payload.from === this.uid\r\n\t            ) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var mapDraw = this._mapDraw;\r\n\t            if (geoModel.get('show')) {\r\n\t                mapDraw.draw(geoModel, ecModel, api, this, payload);\r\n\t            }\r\n\t            else {\r\n\t                this._mapDraw.group.removeAll();\r\n\t            }\r\n\r\n\t            this.group.silent = geoModel.get('silent');\r\n\t        },\r\n\r\n\t        dispose: function () {\r\n\t            this._mapDraw && this._mapDraw.remove();\r\n\t        }\r\n\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 298 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(299);\r\n\t    __webpack_require__(302);\r\n\t    __webpack_require__(303);\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    echarts.extendComponentView({\r\n\t        type: 'single'\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 299 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Single coordinate system creator.\r\n\t */\r\n\r\n\r\n\t    var Single = __webpack_require__(300);\r\n\r\n\t    /**\r\n\t     * Create single coordinate system and inject it into seriesModel.\r\n\t     *\r\n\t     * @param {module:echarts/model/Global} ecModel\r\n\t     * @param {module:echarts/ExtensionAPI} api\r\n\t     * @return {Array.<module:echarts/coord/single/Single>}\r\n\t     */\r\n\t    function create(ecModel, api) {\r\n\t        var singles = [];\r\n\r\n\t        ecModel.eachComponent('singleAxis', function(axisModel, idx) {\r\n\r\n\t            var single = new Single(axisModel, ecModel, api);\r\n\t            single.name = 'single_' + idx;\r\n\t            single.resize(axisModel, api);\r\n\t            axisModel.coordinateSystem = single;\r\n\t            singles.push(single);\r\n\r\n\t        });\r\n\r\n\t        ecModel.eachSeries(function (seriesModel) {\r\n\t            if (seriesModel.get('coordinateSystem') === 'singleAxis') {\r\n\t                var singleAxisModel = ecModel.queryComponents({\r\n\t                    mainType: 'singleAxis',\r\n\t                    index: seriesModel.get('singleAxisIndex'),\r\n\t                    id: seriesModel.get('singleAxisId')\r\n\t                })[0];\r\n\t                seriesModel.coordinateSystem = singleAxisModel.coordinateSystem;\r\n\t            }\r\n\t        });\r\n\r\n\t        return singles;\r\n\t    }\r\n\r\n\t    __webpack_require__(26).register('single', {\r\n\t        create: create,\r\n\t        dimensions: Single.prototype.dimensions\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 300 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Single coordinates system.\r\n\t */\r\n\r\n\r\n\t    var SingleAxis = __webpack_require__(301);\r\n\t    var axisHelper = __webpack_require__(114);\r\n\t    var layout = __webpack_require__(21);\r\n\r\n\t    /**\r\n\t     * Create a single coordinates system.\r\n\t     *\r\n\t     * @param {module:echarts/coord/single/AxisModel} axisModel\r\n\t     * @param {module:echarts/model/Global} ecModel\r\n\t     * @param {module:echarts/ExtensionAPI} api\r\n\t     */\r\n\t    function Single(axisModel, ecModel, api) {\r\n\r\n\t        /**\r\n\t         * @type {string}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.dimension = 'x';\r\n\r\n\t        /**\r\n\t         * Add it just for draw tooltip.\r\n\t         *\r\n\t         * @type {Array.<string>}\r\n\t         * @readOnly\r\n\t         */\r\n\t        this.dimensions = ['x'];\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {module:echarts/coord/single/SingleAxis}.\r\n\t         */\r\n\t        this._axis = null;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {module:zrender/core/BoundingRect}\r\n\t         */\r\n\t        this._rect;\r\n\r\n\t        this._init(axisModel, ecModel, api);\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/single/AxisModel}\r\n\t         */\r\n\t        this._model = axisModel;\r\n\t    }\r\n\r\n\t    Single.prototype = {\r\n\r\n\t        type: 'singleAxis',\r\n\r\n\t        constructor: Single,\r\n\r\n\t        /**\r\n\t         * Initialize single coordinate system.\r\n\t         *\r\n\t         * @param  {module:echarts/coord/single/AxisModel} axisModel\r\n\t         * @param  {module:echarts/model/Global} ecModel\r\n\t         * @param  {module:echarts/ExtensionAPI} api\r\n\t         * @private\r\n\t         */\r\n\t        _init: function (axisModel, ecModel, api) {\r\n\r\n\t            var dim = this.dimension;\r\n\r\n\t            var axis = new SingleAxis(\r\n\t                dim,\r\n\t                axisHelper.createScaleByModel(axisModel),\r\n\t                [0, 0],\r\n\t                axisModel.get('type'),\r\n\t                axisModel.get('position')\r\n\t            );\r\n\r\n\t            var isCategory = axis.type === 'category';\r\n\t            axis.onBand = isCategory && axisModel.get('boundaryGap');\r\n\t            axis.inverse = axisModel.get('inverse');\r\n\t            axis.orient = axisModel.get('orient');\r\n\r\n\t            axisModel.axis = axis;\r\n\t            axis.model = axisModel;\r\n\t            this._axis = axis;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Update axis scale after data processed\r\n\t         * @param  {module:echarts/model/Global} ecModel\r\n\t         * @param  {module:echarts/ExtensionAPI} api\r\n\t         */\r\n\t        update: function (ecModel, api) {\r\n\t            this._updateAxisFromSeries(ecModel);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Update the axis extent from series.\r\n\t         *\r\n\t         * @param  {module:echarts/model/Global} ecModel\r\n\t         * @private\r\n\t         */\r\n\t        _updateAxisFromSeries: function (ecModel) {\r\n\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\r\n\t                var data = seriesModel.getData();\r\n\t                var dim = this.dimension;\r\n\t                this._axis.scale.unionExtent(\r\n\t                    data.getDataExtent(seriesModel.coordDimToDataDim(dim))\r\n\t                );\r\n\t                axisHelper.niceScaleExtent(this._axis, this._axis.model);\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Resize the single coordinate system.\r\n\t         *\r\n\t         * @param  {module:echarts/coord/single/AxisModel} axisModel\r\n\t         * @param  {module:echarts/ExtensionAPI} api\r\n\t         */\r\n\t        resize: function (axisModel, api) {\r\n\t            this._rect = layout.getLayoutRect(\r\n\t                {\r\n\t                    left: axisModel.get('left'),\r\n\t                    top: axisModel.get('top'),\r\n\t                    right: axisModel.get('right'),\r\n\t                    bottom: axisModel.get('bottom'),\r\n\t                    width: axisModel.get('width'),\r\n\t                    height: axisModel.get('height')\r\n\t                },\r\n\t                {\r\n\t                    width: api.getWidth(),\r\n\t                    height: api.getHeight()\r\n\t                }\r\n\t            );\r\n\r\n\t            this._adjustAxis();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {module:zrender/core/BoundingRect}\r\n\t         */\r\n\t        getRect: function () {\r\n\t            return this._rect;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _adjustAxis: function () {\r\n\r\n\t            var rect = this._rect;\r\n\t            var axis = this._axis;\r\n\r\n\t            var isHorizontal = axis.isHorizontal();\r\n\t            var extent = isHorizontal ? [0, rect.width] : [0, rect.height];\r\n\t            var idx =  axis.reverse ? 1 : 0;\r\n\r\n\t            axis.setExtent(extent[idx], extent[1 - idx]);\r\n\r\n\t            this._updateAxisTransform(axis, isHorizontal ? rect.x : rect.y);\r\n\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param  {module:echarts/coord/single/SingleAxis} axis\r\n\t         * @param  {number} coordBase\r\n\t         */\r\n\t        _updateAxisTransform: function (axis, coordBase) {\r\n\r\n\t            var axisExtent = axis.getExtent();\r\n\t            var extentSum = axisExtent[0] + axisExtent[1];\r\n\t            var isHorizontal = axis.isHorizontal();\r\n\r\n\t            axis.toGlobalCoord = isHorizontal ?\r\n\t                function (coord) {\r\n\t                    return coord + coordBase;\r\n\t                } :\r\n\t                function (coord) {\r\n\t                    return extentSum - coord + coordBase;\r\n\t                };\r\n\r\n\t            axis.toLocalCoord = isHorizontal ?\r\n\t                function (coord) {\r\n\t                    return coord - coordBase;\r\n\t                } :\r\n\t                function (coord) {\r\n\t                    return extentSum - coord + coordBase;\r\n\t                };\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get axis.\r\n\t         *\r\n\t         * @return {module:echarts/coord/single/SingleAxis}\r\n\t         */\r\n\t        getAxis: function () {\r\n\t            return this._axis;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get axis, add it just for draw tooltip.\r\n\t         *\r\n\t         * @return {[type]} [description]\r\n\t         */\r\n\t        getBaseAxis: function () {\r\n\t            return this._axis;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If contain point.\r\n\t         *\r\n\t         * @param  {Array.<number>} point\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        containPoint: function (point) {\r\n\t            var rect = this.getRect();\r\n\t            var axis = this.getAxis();\r\n\t            var orient = axis.orient;\r\n\t            if (orient === 'horizontal') {\r\n\t                return axis.contain(axis.toLocalCoord(point[0]))\r\n\t                && (point[1] >= rect.y && point[1] <= (rect.y + rect.height));\r\n\t            }\r\n\t            else {\r\n\t                return axis.contain(axis.toLocalCoord(point[1]))\r\n\t                && (point[0] >= rect.y && point[0] <= (rect.y + rect.height));\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Array.<number>} point\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        pointToData: function (point) {\r\n\t            var axis = this.getAxis();\r\n\t            return [axis.coordToData(axis.toLocalCoord(\r\n\t                point[axis.orient === 'horizontal' ? 0 : 1]\r\n\t            ))];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert the series data to concrete point.\r\n\t         *\r\n\t         * @param  {number|Array.<number>} val\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        dataToPoint: function (val) {\r\n\t            var axis = this.getAxis();\r\n\t            var rect = this.getRect();\r\n\t            var pt = [];\r\n\t            var idx = axis.orient === 'horizontal' ? 0 : 1;\r\n\t            pt[idx] = axis.toGlobalCoord(axis.dataToCoord(+val));\r\n\t            pt[1 - idx] = idx === 0 ? (rect.y + rect.height / 2) : (rect.x + rect.width / 2);\r\n\t            return pt;\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = Single;\r\n\r\n\r\n\r\n/***/ },\r\n/* 301 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Axis = __webpack_require__(123);\r\n\t    var axisHelper = __webpack_require__(114);\r\n\r\n\t    /**\r\n\t     * @constructor  module:echarts/coord/single/SingleAxis\r\n\t     * @extends {module:echarts/coord/Axis}\r\n\t     * @param {string} dim\r\n\t     * @param {*} scale\r\n\t     * @param {Array.<number>} coordExtent\r\n\t     * @param {string} axisType\r\n\t     * @param {string} position\r\n\t     */\r\n\t    var SingleAxis = function (dim, scale, coordExtent, axisType, position) {\r\n\r\n\t        Axis.call(this, dim, scale, coordExtent);\r\n\r\n\t        /**\r\n\t         * Axis type\r\n\t         * - 'category'\r\n\t         * - 'value'\r\n\t         * - 'time'\r\n\t         * - 'log'\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.type = axisType || 'value';\r\n\r\n\t        /**\r\n\t         * Axis position\r\n\t         *  - 'top'\r\n\t         *  - 'bottom'\r\n\t         *  - 'left'\r\n\t         *  - 'right'\r\n\t         *  @type {string}\r\n\t         */\r\n\t        this.position = position || 'bottom';\r\n\r\n\t        /**\r\n\t         * Axis orient\r\n\t         *  - 'horizontal'\r\n\t         *  - 'vertical'\r\n\t         * @type {[type]}\r\n\t         */\r\n\t        this.orient = null;\r\n\r\n\t        /**\r\n\t         * @type {number}\r\n\t         */\r\n\t        this._labelInterval = null;\r\n\r\n\t    };\r\n\r\n\t    SingleAxis.prototype = {\r\n\r\n\t        constructor: SingleAxis,\r\n\r\n\t        /**\r\n\t         * Axis model\r\n\t         * @type {module:echarts/coord/single/AxisModel}\r\n\t         */\r\n\t        model: null,\r\n\r\n\t        /**\r\n\t         * Judge the orient of the axis.\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        isHorizontal: function () {\r\n\t            var position = this.position;\r\n\t            return position === 'top' || position === 'bottom';\r\n\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Get interval of the axis label.\r\n\t         * @return {number}\r\n\t         */\r\n\t        getLabelInterval: function () {\r\n\t            var labelInterval = this._labelInterval;\r\n\t            if (!labelInterval) {\r\n\t                var axisModel = this.model;\r\n\t                var labelModel = axisModel.getModel('axisLabel');\r\n\t                var interval = labelModel.get('interval');\r\n\t                if (!(this.type === 'category' && interval === 'auto')) {\r\n\r\n\t                    labelInterval = this._labelInterval = interval === 'auto' ? 0 : interval;\r\n\t                    return labelInterval;\r\n\t                }\r\n\t                labelInterval = this._labelInterval =\r\n\t                    axisHelper.getAxisLabelInterval(\r\n\t                        zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),\r\n\t                        axisModel.getFormattedLabels(),\r\n\t                        labelModel.getModel('textStyle').getFont(),\r\n\t                        this.isHorizontal()\r\n\t                    );\r\n\t            }\r\n\t            return labelInterval;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Convert the local coord(processed by dataToCoord())\r\n\t         * to global coord(concrete pixel coord).\r\n\t         * designated by module:echarts/coord/single/Single.\r\n\t         * @type {Function}\r\n\t         */\r\n\t        toGlobalCoord: null,\r\n\r\n\t        /**\r\n\t         * Convert the global coord to local coord.\r\n\t         * designated by module:echarts/coord/single/Single.\r\n\t         * @type {Function}\r\n\t         */\r\n\t        toLocalCoord: null\r\n\r\n\t    };\r\n\r\n\t    zrUtil.inherits(SingleAxis, Axis);\r\n\r\n\t    module.exports = SingleAxis;\r\n\r\n\r\n/***/ },\r\n/* 302 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var AxisBuilder = __webpack_require__(133);\r\n\t    var zrUtil =  __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var getInterval = AxisBuilder.getInterval;\r\n\t    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;\r\n\r\n\t    var axisBuilderAttrs = [\r\n\t        'axisLine', 'axisLabel', 'axisTick', 'axisName'\r\n\t    ];\r\n\r\n\t    var selfBuilderAttr = 'splitLine';\r\n\r\n\t    var AxisView = __webpack_require__(1).extendComponentView({\r\n\r\n\t        type: 'singleAxis',\r\n\r\n\t        render: function (axisModel, ecModel) {\r\n\r\n\t            var group = this.group;\r\n\r\n\t            group.removeAll();\r\n\r\n\t            var layout =  axisLayout(axisModel);\r\n\r\n\t            var axisBuilder = new AxisBuilder(axisModel, layout);\r\n\r\n\t            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\r\n\r\n\t            group.add(axisBuilder.getGroup());\r\n\r\n\t            if (axisModel.get(selfBuilderAttr + '.show')) {\r\n\t                this['_' + selfBuilderAttr](axisModel, layout.labelInterval);\r\n\t            }\r\n\t        },\r\n\r\n\t        _splitLine: function(axisModel, labelInterval) {\r\n\t            var axis = axisModel.axis;\r\n\t            var splitLineModel = axisModel.getModel('splitLine');\r\n\t            var lineStyleModel = splitLineModel.getModel('lineStyle');\r\n\t            var lineWidth = lineStyleModel.get('width');\r\n\t            var lineColors = lineStyleModel.get('color');\r\n\t            var lineInterval = getInterval(splitLineModel, labelInterval);\r\n\r\n\t            lineColors = lineColors instanceof Array ? lineColors : [lineColors];\r\n\r\n\t            var gridRect = axisModel.coordinateSystem.getRect();\r\n\t            var isHorizontal = axis.isHorizontal();\r\n\r\n\t            var splitLines = [];\r\n\t            var lineCount = 0;\r\n\r\n\t            var ticksCoords = axis.getTicksCoords();\r\n\r\n\t            var p1 = [];\r\n\t            var p2 = [];\r\n\r\n\t            for (var i = 0; i < ticksCoords.length; ++i) {\r\n\t                if (ifIgnoreOnTick(axis, i, lineInterval)) {\r\n\t                    continue;\r\n\t                }\r\n\t                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\r\n\t                if (isHorizontal) {\r\n\t                    p1[0] = tickCoord;\r\n\t                    p1[1] = gridRect.y;\r\n\t                    p2[0] = tickCoord;\r\n\t                    p2[1] = gridRect.y + gridRect.height;\r\n\t                }\r\n\t                else {\r\n\t                    p1[0] = gridRect.x;\r\n\t                    p1[1] = tickCoord;\r\n\t                    p2[0] = gridRect.x + gridRect.width;\r\n\t                    p2[1] = tickCoord;\r\n\t                }\r\n\t                var colorIndex = (lineCount++) % lineColors.length;\r\n\t                splitLines[colorIndex] = splitLines[colorIndex] || [];\r\n\t                splitLines[colorIndex].push(new graphic.Line(\r\n\t                    graphic.subPixelOptimizeLine({\r\n\t                        shape: {\r\n\t                            x1: p1[0],\r\n\t                            y1: p1[1],\r\n\t                            x2: p2[0],\r\n\t                            y2: p2[1]\r\n\t                        },\r\n\t                        style: {\r\n\t                            lineWidth: lineWidth\r\n\t                        },\r\n\t                        silent: true\r\n\t                    })));\r\n\t            }\r\n\r\n\t            for (var i = 0; i < splitLines.length; ++i) {\r\n\t                this.group.add(graphic.mergePath(splitLines[i], {\r\n\t                    style: {\r\n\t                        stroke: lineColors[i % lineColors.length],\r\n\t                        lineDash: lineStyleModel.getLineDash(lineWidth),\r\n\t                        lineWidth: lineWidth\r\n\t                    },\r\n\t                    silent: true\r\n\t                }));\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    function axisLayout(axisModel) {\r\n\r\n\t        var single = axisModel.coordinateSystem;\r\n\t        var axis = axisModel.axis;\r\n\t        var layout = {};\r\n\r\n\t        var axisPosition = axis.position;\r\n\t        var orient = axis.orient;\r\n\r\n\t        var rect = single.getRect();\r\n\t        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];\r\n\r\n\t        var positionMap = {\r\n\t            horizontal: {top: rectBound[2], bottom: rectBound[3]},\r\n\t            vertical: {left: rectBound[0], right: rectBound[1]}\r\n\t        };\r\n\r\n\t        layout.position = [\r\n\t            orient === 'vertical'\r\n\t                ? positionMap.vertical[axisPosition]\r\n\t                : rectBound[0],\r\n\t            orient === 'horizontal'\r\n\t                ? positionMap.horizontal[axisPosition]\r\n\t                : rectBound[3]\r\n\t        ];\r\n\r\n\t        var r = {horizontal: 0, vertical: 1};\r\n\t        layout.rotation = Math.PI / 2 * r[orient];\r\n\r\n\t        var directionMap = {top: -1, bottom: 1, right: 1, left: -1};\r\n\r\n\t        layout.labelDirection = layout.tickDirection\r\n\t            = layout.nameDirection\r\n\t            = directionMap[axisPosition];\r\n\r\n\t        if (axisModel.getModel('axisTick').get('inside')) {\r\n\t            layout.tickDirection = -layout.tickDirection;\r\n\t        }\r\n\r\n\t        if (axisModel.getModel('axisLabel').get('inside')) {\r\n\t            layout.labelDirection = -layout.labelDirection;\r\n\t        }\r\n\r\n\t        var labelRotation = axisModel.getModel('axisLabel').get('rotate');\r\n\t        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;\r\n\r\n\t        layout.labelInterval = axis.getLabelInterval();\r\n\r\n\t        layout.z2 = 1;\r\n\r\n\t        return layout;\r\n\t    }\r\n\r\n\t    module.exports = AxisView;\r\n\r\n\r\n\r\n/***/ },\r\n/* 303 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var ComponentModel = __webpack_require__(19);\r\n\t    var axisModelCreator = __webpack_require__(127);\r\n\t    var zrUtil =  __webpack_require__(4);\r\n\r\n\t    var AxisModel = ComponentModel.extend({\r\n\r\n\t        type: 'singleAxis',\r\n\r\n\t        layoutMode: 'box',\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/single/SingleAxis}\r\n\t         */\r\n\t        axis: null,\r\n\r\n\t        /**\r\n\t         * @type {module:echarts/coord/single/Single}\r\n\t         */\r\n\t        coordinateSystem: null\r\n\r\n\t    });\r\n\r\n\t    var defaultOption = {\r\n\r\n\t        left: '5%',\r\n\t        top: '5%',\r\n\t        right: '5%',\r\n\t        bottom: '5%',\r\n\r\n\t        type: 'value',\r\n\r\n\t        position: 'bottom',\r\n\r\n\t        orient: 'horizontal',\r\n\r\n\t        axisLine: {\r\n\t            show: true,\r\n\t            lineStyle: {\r\n\t                width: 2,\r\n\t                type: 'solid'\r\n\t            }\r\n\t        },\r\n\r\n\t        axisTick: {\r\n\t            show: true,\r\n\t            length: 6,\r\n\t            lineStyle: {\r\n\t                width: 2\r\n\t            }\r\n\t        },\r\n\r\n\t        axisLabel: {\r\n\t            show: true,\r\n\t            interval: 'auto'\r\n\t        },\r\n\r\n\t        splitLine: {\r\n\t            show: true,\r\n\t            lineStyle: {\r\n\t                type: 'dashed',\r\n\t                opacity: 0.2\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    function getAxisType(axisName, option) {\r\n\t        return option.type || (option.data ? 'category' : 'value');\r\n\t    }\r\n\r\n\t    zrUtil.merge(AxisModel.prototype, __webpack_require__(129));\r\n\r\n\t    axisModelCreator('single', AxisModel, getAxisType, defaultOption);\r\n\r\n\t    module.exports = AxisModel;\r\n\r\n\r\n/***/ },\r\n/* 304 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * Brush component entry\r\n\t */\r\n\r\n\r\n\t    __webpack_require__(1).registerPreprocessor(\r\n\t        __webpack_require__(305)\r\n\t    );\r\n\r\n\t    __webpack_require__(306);\r\n\t    __webpack_require__(311);\r\n\t    __webpack_require__(312);\r\n\t    __webpack_require__(313);\r\n\r\n\t    __webpack_require__(314);\r\n\r\n\r\n\r\n/***/ },\r\n/* 305 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file brush preprocessor\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var DEFAULT_TOOLBOX_BTNS = ['rect', 'polygon', 'keep', 'clear'];\r\n\r\n\t    module.exports = function (option, isNew) {\r\n\t        var brushComponents = option && option.brush;\r\n\t        if (!zrUtil.isArray(brushComponents)) {\r\n\t            brushComponents = brushComponents ? [brushComponents] : [];\r\n\t        }\r\n\r\n\t        if (!brushComponents.length) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var brushComponentSpecifiedBtns = [];\r\n\r\n\t        zrUtil.each(brushComponents, function (brushOpt) {\r\n\t            var tbs = brushOpt.hasOwnProperty('toolbox')\r\n\t                ? brushOpt.toolbox : [];\r\n\r\n\t            if (tbs instanceof Array) {\r\n\t                brushComponentSpecifiedBtns = brushComponentSpecifiedBtns.concat(tbs);\r\n\t            }\r\n\t        });\r\n\r\n\t        var toolbox = option && option.toolbox;\r\n\r\n\t        if (zrUtil.isArray(toolbox)) {\r\n\t            toolbox = toolbox[0];\r\n\t        }\r\n\t        if (!toolbox) {\r\n\t            toolbox = {feature: {}};\r\n\t            option.toolbox = [toolbox];\r\n\t        }\r\n\r\n\t        var toolboxFeature = (toolbox.feature || (toolbox.feature = {}));\r\n\t        var toolboxBrush = toolboxFeature.brush || (toolboxFeature.brush = {});\r\n\t        var brushTypes = toolboxBrush.type || (toolboxBrush.type = []);\r\n\r\n\t        brushTypes.push.apply(brushTypes, brushComponentSpecifiedBtns);\r\n\r\n\t        removeDuplicate(brushTypes);\r\n\r\n\t        if (isNew && !brushTypes.length) {\r\n\t            brushTypes.push.apply(brushTypes, DEFAULT_TOOLBOX_BTNS);\r\n\t        }\r\n\t    };\r\n\r\n\t    function removeDuplicate(arr) {\r\n\t        var map = {};\r\n\t        zrUtil.each(arr, function (val) {\r\n\t            map[val] = 1;\r\n\t        });\r\n\t        arr.length = 0;\r\n\t        zrUtil.each(map, function (flag, val) {\r\n\t            arr.push(val);\r\n\t        });\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 306 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Brush visual coding.\r\n\t */\r\n\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var visualSolution = __webpack_require__(307);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\t    var selector = __webpack_require__(308);\r\n\t    var throttle = __webpack_require__(309);\r\n\t    var brushHelper = __webpack_require__(310);\r\n\r\n\t    var STATE_LIST = ['inBrush', 'outOfBrush'];\r\n\t    var DISPATCH_METHOD = '__ecBrushSelect';\r\n\t    var DISPATCH_FLAG = '__ecInBrushSelectEvent';\r\n\t    var PRIORITY_BRUSH = echarts.PRIORITY.VISUAL.BRUSH;\r\n\r\n\t    /**\r\n\t     * Layout for visual, the priority higher than other layout, and before brush visual.\r\n\t     */\r\n\t    echarts.registerLayout(PRIORITY_BRUSH, function (ecModel, api, payload) {\r\n\t        ecModel.eachComponent({mainType: 'brush'}, function (brushModel) {\r\n\r\n\t            payload && payload.type === 'takeGlobalCursor' && brushModel.setBrushOption(\r\n\t                payload.key === 'brush' ? payload.brushOption : {brushType: false}\r\n\t            );\r\n\r\n\t            brushModel.coordInfoList = brushHelper.makeCoordInfoList(brushModel.option, ecModel);\r\n\r\n\t            brushHelper.parseInputRanges(brushModel, ecModel);\r\n\t        });\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Register the visual encoding if this modules required.\r\n\t     */\r\n\t    echarts.registerVisual(PRIORITY_BRUSH, function (ecModel, api, payload) {\r\n\r\n\t        var brushSelected = [];\r\n\t        var throttleType;\r\n\t        var throttleDelay;\r\n\r\n\t        ecModel.eachComponent({mainType: 'brush'}, function (brushModel, brushIndex) {\r\n\r\n\t            var thisBrushSelected = {\r\n\t                brushId: brushModel.id,\r\n\t                brushIndex: brushIndex,\r\n\t                brushName: brushModel.name,\r\n\t                areas: zrUtil.clone(brushModel.areas),\r\n\t                selected: []\r\n\t            };\r\n\t            // Every brush component exists in event params, convenient\r\n\t            // for user to find by index.\r\n\t            brushSelected.push(thisBrushSelected);\r\n\r\n\t            var brushOption = brushModel.option;\r\n\t            var brushLink = brushOption.brushLink;\r\n\t            var linkedSeriesMap = [];\r\n\t            var selectedDataIndexForLink = [];\r\n\t            var rangeInfoBySeries = [];\r\n\t            var hasBrushExists = 0;\r\n\r\n\t            if (!brushIndex) { // Only the first throttle setting works.\r\n\t                throttleType = brushOption.throttleType;\r\n\t                throttleDelay = brushOption.throttleDelay;\r\n\t            }\r\n\r\n\t            // Add boundingRect and selectors to range.\r\n\t            var areas = zrUtil.map(brushModel.areas, function (area) {\r\n\t                return bindSelector(\r\n\t                    zrUtil.defaults(\r\n\t                        {boundingRect: boundingRectBuilders[area.brushType](area)},\r\n\t                        area\r\n\t                    )\r\n\t                );\r\n\t            });\r\n\r\n\t            var visualMappings = visualSolution.createVisualMappings(\r\n\t                brushModel.option, STATE_LIST, function (mappingOption) {\r\n\t                    mappingOption.mappingMethod = 'fixed';\r\n\t                }\r\n\t            );\r\n\r\n\t            zrUtil.isArray(brushLink) && zrUtil.each(brushLink, function (seriesIndex) {\r\n\t                linkedSeriesMap[seriesIndex] = 1;\r\n\t            });\r\n\r\n\t            function linkOthers(seriesIndex) {\r\n\t                return brushLink === 'all' || linkedSeriesMap[seriesIndex];\r\n\t            }\r\n\r\n\t            // If no supported brush or no brush on the series,\r\n\t            // all visuals should be in original state.\r\n\t            function brushed(rangeInfoList) {\r\n\t                return !!rangeInfoList.length;\r\n\t            }\r\n\r\n\t            /**\r\n\t             * Logic for each series: (If the logic has to be modified one day, do it carefully!)\r\n\t             *\r\n\t             * ( brushed ┬ && ┬hasBrushExist ┬ && linkOthers  ) => StepA: ┬record, ┬ StepB: ┬visualByRecord.\r\n\t             *   !brushed┘    ├hasBrushExist ┤                            └nothing,┘        ├visualByRecord.\r\n\t             *                └!hasBrushExist┘                                              └nothing.\r\n\t             * ( !brushed  && ┬hasBrushExist ┬ && linkOthers  ) => StepA:  nothing,  StepB: ┬visualByRecord.\r\n\t             *                └!hasBrushExist┘                                              └nothing.\r\n\t             * ( brushed ┬ &&                     !linkOthers ) => StepA:  nothing,  StepB: ┬visualByCheck.\r\n\t             *   !brushed┘                                                                  └nothing.\r\n\t             * ( !brushed  &&                     !linkOthers ) => StepA:  nothing,  StepB:  nothing.\r\n\t             */\r\n\r\n\t            // Step A\r\n\t            ecModel.eachSeries(function (seriesModel, seriesIndex) {\r\n\t                var rangeInfoList = rangeInfoBySeries[seriesIndex] = [];\r\n\r\n\t                seriesModel.subType === 'parallel'\r\n\t                    ? stepAParallel(seriesModel, seriesIndex, rangeInfoList)\r\n\t                    : stepAOthers(seriesModel, seriesIndex, rangeInfoList);\r\n\t            });\r\n\r\n\t            function stepAParallel(seriesModel, seriesIndex) {\r\n\t                var coordSys = seriesModel.coordinateSystem;\r\n\t                hasBrushExists |= coordSys.hasAxisbrushed();\r\n\r\n\t                linkOthers(seriesIndex) && coordSys.eachActiveState(\r\n\t                    seriesModel.getData(),\r\n\t                    function (activeState, dataIndex) {\r\n\t                        activeState === 'active' && (selectedDataIndexForLink[dataIndex] = 1);\r\n\t                    }\r\n\t                );\r\n\t            }\r\n\r\n\t            function stepAOthers(seriesModel, seriesIndex, rangeInfoList) {\r\n\t                var selectorsByBrushType = getSelectorsByBrushType(seriesModel);\r\n\t                if (!selectorsByBrushType || brushModelNotControll(brushModel, seriesIndex)) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                zrUtil.each(areas, function (area) {\r\n\t                    selectorsByBrushType[area.brushType]\r\n\t                        && brushHelper.controlSeries(area, brushModel, seriesModel)\r\n\t                        && rangeInfoList.push(area);\r\n\t                    hasBrushExists |= brushed(rangeInfoList);\r\n\t                });\r\n\r\n\t                if (linkOthers(seriesIndex) && brushed(rangeInfoList)) {\r\n\t                    var data = seriesModel.getData();\r\n\t                    data.each(function (dataIndex) {\r\n\t                        if (checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex)) {\r\n\t                            selectedDataIndexForLink[dataIndex] = 1;\r\n\t                        }\r\n\t                    });\r\n\t                }\r\n\t            }\r\n\r\n\t            // Step B\r\n\t            ecModel.eachSeries(function (seriesModel, seriesIndex) {\r\n\t                var seriesBrushSelected = {\r\n\t                    seriesId: seriesModel.id,\r\n\t                    seriesIndex: seriesIndex,\r\n\t                    seriesName: seriesModel.name,\r\n\t                    dataIndex: []\r\n\t                };\r\n\t                // Every series exists in event params, convenient\r\n\t                // for user to find series by seriesIndex.\r\n\t                thisBrushSelected.selected.push(seriesBrushSelected);\r\n\r\n\t                var selectorsByBrushType = getSelectorsByBrushType(seriesModel);\r\n\t                var rangeInfoList = rangeInfoBySeries[seriesIndex];\r\n\r\n\t                var data = seriesModel.getData();\r\n\t                var getValueState = linkOthers(seriesIndex)\r\n\t                    ? function (dataIndex) {\r\n\t                        return selectedDataIndexForLink[dataIndex]\r\n\t                            ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), 'inBrush')\r\n\t                            : 'outOfBrush';\r\n\t                    }\r\n\t                    : function (dataIndex) {\r\n\t                        return checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex)\r\n\t                            ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), 'inBrush')\r\n\t                            : 'outOfBrush';\r\n\t                    };\r\n\r\n\t                // If no supported brush or no brush, all visuals are in original state.\r\n\t                (linkOthers(seriesIndex) ? hasBrushExists : brushed(rangeInfoList))\r\n\t                    && visualSolution.applyVisual(\r\n\t                        STATE_LIST, visualMappings, data, getValueState\r\n\t                    );\r\n\t            });\r\n\r\n\t        });\r\n\r\n\t        dispatchAction(api, throttleType, throttleDelay, brushSelected, payload);\r\n\t    });\r\n\r\n\t    function dispatchAction(api, throttleType, throttleDelay, brushSelected, payload) {\r\n\t        // This event will not be triggered when `setOpion`, otherwise dead lock may\r\n\t        // triggered when do `setOption` in event listener, which we do not find\r\n\t        // satisfactory way to solve yet. Some considered resolutions:\r\n\t        // (a) Diff with prevoius selected data ant only trigger event when changed.\r\n\t        // But store previous data and diff precisely (i.e., not only by dataIndex, but\r\n\t        // also detect value changes in selected data) might bring complexity or fragility.\r\n\t        // (b) Use spectial param like `silent` to suppress event triggering.\r\n\t        // But such kind of volatile param may be weird in `setOption`.\r\n\t        if (!payload) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var zr = api.getZr();\r\n\t        if (zr[DISPATCH_FLAG]) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        if (!zr[DISPATCH_METHOD]) {\r\n\t            zr[DISPATCH_METHOD] = doDispatch;\r\n\t        }\r\n\r\n\t        var fn = throttle.createOrUpdate(zr, DISPATCH_METHOD, throttleDelay, throttleType);\r\n\r\n\t        fn(api, brushSelected);\r\n\t    }\r\n\r\n\t    function doDispatch(api, brushSelected) {\r\n\t        if (!api.isDisposed()) {\r\n\t            var zr = api.getZr();\r\n\t            zr[DISPATCH_FLAG] = true;\r\n\t            api.dispatchAction({\r\n\t                type: 'brushSelect',\r\n\t                batch: brushSelected\r\n\t            });\r\n\t            zr[DISPATCH_FLAG] = false;\r\n\t        }\r\n\t    }\r\n\r\n\t    function checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex) {\r\n\t        var itemLayout = data.getItemLayout(dataIndex);\r\n\t        for (var i = 0, len = rangeInfoList.length; i < len; i++) {\r\n\t            var area = rangeInfoList[i];\r\n\t            if (selectorsByBrushType[area.brushType](\r\n\t                itemLayout, area.selectors, area\r\n\t            )) {\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    function getSelectorsByBrushType(seriesModel) {\r\n\t        var brushSelector = seriesModel.brushSelector;\r\n\t        if (zrUtil.isString(brushSelector)) {\r\n\t            var sels = [];\r\n\t            zrUtil.each(selector, function (selectorsByElementType, brushType) {\r\n\t                sels[brushType] = selectorsByElementType[brushSelector];\r\n\t            });\r\n\t            return sels;\r\n\t        }\r\n\t        else if (zrUtil.isFunction(brushSelector)) {\r\n\t            var bSelector = {};\r\n\t            zrUtil.each(selector, function (sel, brushType) {\r\n\t                bSelector[brushType] = brushSelector;\r\n\t            });\r\n\t            return bSelector;\r\n\t        }\r\n\t        return brushSelector;\r\n\t    }\r\n\r\n\t    function brushModelNotControll(brushModel, seriesIndex) {\r\n\t        var seriesIndices = brushModel.option.seriesIndex;\r\n\t        return seriesIndices != null\r\n\t            && seriesIndices !== 'all'\r\n\t            && (\r\n\t                zrUtil.isArray(seriesIndices)\r\n\t                ? zrUtil.indexOf(seriesIndices, seriesIndex) < 0\r\n\t                : seriesIndex !== seriesIndices\r\n\t            );\r\n\t    }\r\n\r\n\t    function bindSelector(area) {\r\n\t        var selectors = area.selectors = {};\r\n\t        zrUtil.each(selector[area.brushType], function (selFn, elType) {\r\n\t            // Do not use function binding or curry for performance.\r\n\t            selectors[elType] = function (itemLayout) {\r\n\t                return selFn(itemLayout, selectors, area);\r\n\t            };\r\n\t        });\r\n\t        return area;\r\n\t    }\r\n\r\n\t    var boundingRectBuilders = {\r\n\r\n\t        lineX: zrUtil.noop,\r\n\r\n\t        lineY: zrUtil.noop,\r\n\r\n\t        rect: function (area) {\r\n\t            return getBoundingRectFromMinMax(area.range);\r\n\t        },\r\n\r\n\t        polygon: function (area) {\r\n\t            var minMax;\r\n\t            var range = area.range;\r\n\r\n\t            for (var i = 0, len = range.length; i < len; i++) {\r\n\t                minMax = minMax || [[Infinity, -Infinity], [Infinity, -Infinity]];\r\n\t                var rg = range[i];\r\n\t                rg[0] < minMax[0][0] && (minMax[0][0] = rg[0]);\r\n\t                rg[0] > minMax[0][1] && (minMax[0][1] = rg[0]);\r\n\t                rg[1] < minMax[1][0] && (minMax[1][0] = rg[1]);\r\n\t                rg[1] > minMax[1][1] && (minMax[1][1] = rg[1]);\r\n\t            }\r\n\r\n\t            return minMax && getBoundingRectFromMinMax(minMax);\r\n\t        }\r\n\t    };\r\n\r\n\t    function getBoundingRectFromMinMax(minMax) {\r\n\t        return new BoundingRect(\r\n\t            minMax[0][0],\r\n\t            minMax[1][0],\r\n\t            minMax[0][1] - minMax[0][0],\r\n\t            minMax[1][1] - minMax[1][0]\r\n\t        );\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 307 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Visual solution, for consistent option specification.\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var VisualMapping = __webpack_require__(193);\r\n\t    var each = zrUtil.each;\r\n\r\n\t    function hasKeys(obj) {\r\n\t        if (obj) {\r\n\t            for (var name in obj){\r\n\t                if (obj.hasOwnProperty(name)) {\r\n\t                    return true;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    var visualSolution = {\r\n\r\n\t        /**\r\n\t         * @param {Object} option\r\n\t         * @param {Array.<string>} stateList\r\n\t         * @param {Function} [supplementVisualOption]\r\n\t         * @return {Object} visualMappings <state, <visualType, module:echarts/visual/VisualMapping>>\r\n\t         */\r\n\t        createVisualMappings: function (option, stateList, supplementVisualOption) {\r\n\t            var visualMappings = {};\r\n\r\n\t            each(stateList, function (state) {\r\n\t                var mappings = visualMappings[state] = createMappings();\r\n\r\n\t                each(option[state], function (visualData, visualType) {\r\n\t                    if (!VisualMapping.isValidType(visualType)) {\r\n\t                        return;\r\n\t                    }\r\n\t                    var mappingOption = {\r\n\t                        type: visualType,\r\n\t                        visual: visualData\r\n\t                    };\r\n\t                    supplementVisualOption && supplementVisualOption(mappingOption, state);\r\n\t                    mappings[visualType] = new VisualMapping(mappingOption);\r\n\r\n\t                    // Prepare a alpha for opacity, for some case that opacity\r\n\t                    // is not supported, such as rendering using gradient color.\r\n\t                    if (visualType === 'opacity') {\r\n\t                        mappingOption = zrUtil.clone(mappingOption);\r\n\t                        mappingOption.type = 'colorAlpha';\r\n\t                        mappings.__hidden.__alphaForOpacity = new VisualMapping(mappingOption);\r\n\t                    }\r\n\t                });\r\n\t            });\r\n\r\n\t            return visualMappings;\r\n\r\n\t            function createMappings() {\r\n\t                var Creater = function () {};\r\n\t                // Make sure hidden fields will not be visited by\r\n\t                // object iteration (with hasOwnProperty checking).\r\n\t                Creater.prototype.__hidden = Creater.prototype;\r\n\t                var obj = new Creater();\r\n\t                return obj;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Object} thisOption\r\n\t         * @param {Object} newOption\r\n\t         * @param {Array.<string>} keys\r\n\t         */\r\n\t        replaceVisualOption: function (thisOption, newOption, keys) {\r\n\t            // Visual attributes merge is not supported, otherwise it\r\n\t            // brings overcomplicated merge logic. See #2853. So if\r\n\t            // newOption has anyone of these keys, all of these keys\r\n\t            // will be reset. Otherwise, all keys remain.\r\n\t            var has;\r\n\t            zrUtil.each(keys, function (key) {\r\n\t                if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {\r\n\t                    has = true;\r\n\t                }\r\n\t            });\r\n\t            has && zrUtil.each(keys, function (key) {\r\n\t                if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {\r\n\t                    thisOption[key] = zrUtil.clone(newOption[key]);\r\n\t                }\r\n\t                else {\r\n\t                    delete thisOption[key];\r\n\t                }\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {Array.<string>} stateList\r\n\t         * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>\r\n\t         * @param {module:echarts/data/List} list\r\n\t         * @param {Function} getValueState param: valueOrIndex, return: state.\r\n\t         * @param {object} [scope] Scope for getValueState\r\n\t         * @param {string} [dimension] Concrete dimension, if used.\r\n\t         */\r\n\t        applyVisual: function (stateList, visualMappings, data, getValueState, scope, dimension) {\r\n\t            var visualTypesMap = {};\r\n\t            zrUtil.each(stateList, function (state) {\r\n\t                var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);\r\n\t                visualTypesMap[state] = visualTypes;\r\n\t            });\r\n\r\n\t            var dataIndex;\r\n\r\n\t            function getVisual(key) {\r\n\t                return data.getItemVisual(dataIndex, key);\r\n\t            }\r\n\r\n\t            function setVisual(key, value) {\r\n\t                data.setItemVisual(dataIndex, key, value);\r\n\t            }\r\n\r\n\t            if (dimension == null) {\r\n\t                data.each(eachItem, true);\r\n\t            }\r\n\t            else {\r\n\t                data.each([dimension], eachItem, true);\r\n\t            }\r\n\r\n\t            function eachItem(valueOrIndex, index) {\r\n\t                dataIndex = dimension == null ? valueOrIndex : index;\r\n\t                var valueState = getValueState.call(scope, valueOrIndex);\r\n\t                var mappings = visualMappings[valueState];\r\n\t                var visualTypes = visualTypesMap[valueState];\r\n\r\n\t                for (var i = 0, len = visualTypes.length; i < len; i++) {\r\n\t                    var type = visualTypes[i];\r\n\t                    mappings[type] && mappings[type].applyVisual(\r\n\t                        valueOrIndex, getVisual, setVisual\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = visualSolution;\r\n\r\n\r\n\r\n/***/ },\r\n/* 308 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var polygonContain = __webpack_require__(168).contain;\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\r\n\t    // Key of the first level is brushType: `line`, `rect`, `polygon`.\r\n\t    // Key of the second level is chart element type: `point`, `rect`.\r\n\t    // See moudule:echarts/component/helper/BrushController\r\n\t    // function param:\r\n\t    //      {Object} itemLayout fetch from data.getItemLayout(dataIndex)\r\n\t    //      {Object} selectors {point: selector, rect: selector, ...}\r\n\t    //      {Object} area {range: [[], [], ..], boudingRect}\r\n\t    // function return:\r\n\t    //      {boolean} Whether in the given brush.\r\n\t    var selector = {\r\n\t        lineX: getLineSelectors(0),\r\n\t        lineY: getLineSelectors(1),\r\n\t        rect: {\r\n\t            point: function (itemLayout, selectors, area) {\r\n\t                return area.boundingRect.contain(itemLayout[0], itemLayout[1]);\r\n\t            },\r\n\t            rect: function (itemLayout, selectors, area) {\r\n\t                return area.boundingRect.intersect(itemLayout);\r\n\t            }\r\n\t        },\r\n\t        polygon: {\r\n\t            point: function (itemLayout, selectors, area) {\r\n\t                return area.boundingRect.contain(itemLayout[0], itemLayout[1])\r\n\t                    && polygonContain(area.range, itemLayout[0], itemLayout[1]);\r\n\t            },\r\n\t            rect: function (itemLayout, selectors, area) {\r\n\t                // FIXME\r\n\t                // 随意写的，没有考察过效率。\r\n\t                var points = area.range;\r\n\r\n\t                if (points.length <= 1) {\r\n\t                    return false;\r\n\t                }\r\n\r\n\t                var x = itemLayout.x;\r\n\t                var y = itemLayout.y;\r\n\t                var width = itemLayout.width;\r\n\t                var height = itemLayout.height;\r\n\t                var p = points[0];\r\n\r\n\t                if (polygonContain(points, x, y)\r\n\t                    || polygonContain(points, x + width, y)\r\n\t                    || polygonContain(points, x, y + height)\r\n\t                    || polygonContain(points, x + width, y + height)\r\n\t                    || BoundingRect.create(itemLayout).contain(p[0], p[1])\r\n\t                    || lineIntersectPolygon(x, y, x + width, y, points)\r\n\t                    || lineIntersectPolygon(x, y, x, y + height, points)\r\n\t                    || lineIntersectPolygon(x + width, y, x + width, y + height, points)\r\n\t                    || lineIntersectPolygon(x, y + height, x + width, y + height, points)\r\n\t                ) {\r\n\t                    return true;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    function getLineSelectors(xyIndex) {\r\n\t        var xy = ['x', 'y'];\r\n\t        var wh = ['width', 'height'];\r\n\r\n\t        return {\r\n\t            point: function (itemLayout, selectors, area) {\r\n\t                var range = area.range;\r\n\t                var p = itemLayout[xyIndex];\r\n\t                return inLineRange(p, range);\r\n\t            },\r\n\t            rect: function (itemLayout, selectors, area) {\r\n\t                var range = area.range;\r\n\t                return inLineRange(itemLayout[xy[xyIndex]], range)\r\n\t                    || inLineRange(itemLayout[xy[xyIndex]] + itemLayout[wh[xyIndex]], range);\r\n\t            }\r\n\t        };\r\n\t    }\r\n\r\n\t    function inLineRange(p, range) {\r\n\t        return range[0] <= p && p <= range[1];\r\n\t    }\r\n\r\n\t    // FIXME\r\n\t    // 随意写的，没考察过效率。\r\n\t    function lineIntersectPolygon(lx, ly, l2x, l2y, points) {\r\n\t        for (var i = 0, p2 = points[points.length - 1]; i < points.length; i++) {\r\n\t            var p = points[i];\r\n\t            if (lineIntersect(lx, ly, l2x, l2y, p[0], p[1], p2[0], p2[1])) {\r\n\t                return true;\r\n\t            }\r\n\t            p2 = p;\r\n\t        }\r\n\t    }\r\n\r\n\t    // Code from <http://blog.csdn.net/rickliuxiao/article/details/6259322> with some fix.\r\n\t    // See <https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection>\r\n\t    function lineIntersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {\r\n\t        var delta = determinant(a2x - a1x, b1x - b2x, a2y - a1y, b1y - b2y);\r\n\t        if (nearZero(delta)) { // parallel\r\n\t            return false;\r\n\t        }\r\n\t        var namenda = determinant(b1x - a1x, b1x - b2x, b1y - a1y, b1y - b2y) / delta;\r\n\t        if (namenda < 0 || namenda > 1) {\r\n\t            return false;\r\n\t        }\r\n\t        var miu = determinant(a2x - a1x, b1x - a1x, a2y - a1y, b1y - a1y) / delta;\r\n\t        if (miu < 0 || miu > 1) {\r\n\t            return false;\r\n\t        }\r\n\t        return true;\r\n\t    }\r\n\r\n\t    function nearZero(val) {\r\n\t        return val <= (1e-6) && val >= -(1e-6);\r\n\t    }\r\n\r\n\t    function determinant(v1, v2, v3, v4) {\r\n\t        return v1 * v4 - v2 * v3;\r\n\t    }\r\n\r\n\t    module.exports = selector;\r\n\r\n\r\n\r\n/***/ },\r\n/* 309 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    var lib = {};\r\n\r\n\t    var ORIGIN_METHOD = '\\0__throttleOriginMethod';\r\n\t    var RATE = '\\0__throttleRate';\r\n\t    var THROTTLE_TYPE = '\\0__throttleType';\r\n\r\n\t    /**\r\n\t     * @public\r\n\t     * @param {(Function)} fn\r\n\t     * @param {number} [delay=0] Unit: ms.\r\n\t     * @param {boolean} [debounce=false]\r\n\t     *        true: If call interval less than `delay`, only the last call works.\r\n\t     *        false: If call interval less than `delay, call works on fixed rate.\r\n\t     * @return {(Function)} throttled fn.\r\n\t     */\r\n\t    lib.throttle = function (fn, delay, debounce) {\r\n\r\n\t        var currCall;\r\n\t        var lastCall = 0;\r\n\t        var lastExec = 0;\r\n\t        var timer = null;\r\n\t        var diff;\r\n\t        var scope;\r\n\t        var args;\r\n\r\n\t        delay = delay || 0;\r\n\r\n\t        function exec() {\r\n\t            lastExec = (new Date()).getTime();\r\n\t            timer = null;\r\n\t            fn.apply(scope, args || []);\r\n\t        }\r\n\r\n\t        var cb = function () {\r\n\t            currCall = (new Date()).getTime();\r\n\t            scope = this;\r\n\t            args = arguments;\r\n\t            diff = currCall - (debounce ? lastCall : lastExec) - delay;\r\n\r\n\t            clearTimeout(timer);\r\n\r\n\t            if (debounce) {\r\n\t                timer = setTimeout(exec, delay);\r\n\t            }\r\n\t            else {\r\n\t                if (diff >= 0) {\r\n\t                    exec();\r\n\t                }\r\n\t                else {\r\n\t                    timer = setTimeout(exec, -diff);\r\n\t                }\r\n\t            }\r\n\r\n\t            lastCall = currCall;\r\n\t        };\r\n\r\n\t        /**\r\n\t         * Clear throttle.\r\n\t         * @public\r\n\t         */\r\n\t        cb.clear = function () {\r\n\t            if (timer) {\r\n\t                clearTimeout(timer);\r\n\t                timer = null;\r\n\t            }\r\n\t        };\r\n\r\n\t        return cb;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Create throttle method or update throttle rate.\r\n\t     *\r\n\t     * @example\r\n\t     * ComponentView.prototype.render = function () {\r\n\t     *     ...\r\n\t     *     throttle.createOrUpdate(\r\n\t     *         this,\r\n\t     *         '_dispatchAction',\r\n\t     *         this.model.get('throttle'),\r\n\t     *         'fixRate'\r\n\t     *     );\r\n\t     * };\r\n\t     * ComponentView.prototype.remove = function () {\r\n\t     *     throttle.clear(this, '_dispatchAction');\r\n\t     * };\r\n\t     * ComponentView.prototype.dispose = function () {\r\n\t     *     throttle.clear(this, '_dispatchAction');\r\n\t     * };\r\n\t     *\r\n\t     * @public\r\n\t     * @param {Object} obj\r\n\t     * @param {string} fnAttr\r\n\t     * @param {number} [rate]\r\n\t     * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'\r\n\t     * @return {Function} throttled function.\r\n\t     */\r\n\t    lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {\r\n\t        var fn = obj[fnAttr];\r\n\r\n\t        if (!fn) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var originFn = fn[ORIGIN_METHOD] || fn;\r\n\t        var lastThrottleType = fn[THROTTLE_TYPE];\r\n\t        var lastRate = fn[RATE];\r\n\r\n\t        if (lastRate !== rate || lastThrottleType !== throttleType) {\r\n\t            if (rate == null || !throttleType) {\r\n\t                return (obj[fnAttr] = originFn);\r\n\t            }\r\n\r\n\t            fn = obj[fnAttr] = lib.throttle(\r\n\t                originFn, rate, throttleType === 'debounce'\r\n\t            );\r\n\t            fn[ORIGIN_METHOD] = originFn;\r\n\t            fn[THROTTLE_TYPE] = throttleType;\r\n\t            fn[RATE] = rate;\r\n\t        }\r\n\r\n\t        return fn;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Clear throttle. Example see throttle.createOrUpdate.\r\n\t     *\r\n\t     * @public\r\n\t     * @param {Object} obj\r\n\t     * @param {string} fnAttr\r\n\t     */\r\n\t    lib.clear = function (obj, fnAttr) {\r\n\t        var fn = obj[fnAttr];\r\n\t        if (fn && fn[ORIGIN_METHOD]) {\r\n\t            obj[fnAttr] = fn[ORIGIN_METHOD];\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = lib;\r\n\r\n\r\n\r\n/***/ },\r\n/* 310 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\r\n\t    var each = zrUtil.each;\r\n\r\n\t    var helper = {};\r\n\r\n\t    var COMPONENT_NAMES = ['geo', 'xAxis', 'yAxis'];\r\n\t    var PANEL_ID_SPLIT = '--';\r\n\t    var COORD_CONVERTS = ['dataToPoint', 'pointToData'];\r\n\r\n\t    helper.parseOutputRanges = function (areas, coordInfoList, ecModel, rangesCoordInfo) {\r\n\t        each(areas, function (area, index) {\r\n\t            var panelId = area.panelId;\r\n\r\n\t            if (panelId) {\r\n\t                panelId = panelId.split(PANEL_ID_SPLIT);\r\n\r\n\t                area[panelId[0] + 'Index'] = +panelId[1];\r\n\r\n\t                var coordInfo = findCoordInfo(area, coordInfoList);\r\n\t                area.coordRange = coordConvert[area.brushType](\r\n\t                    1, coordInfo, area.range\r\n\t                );\r\n\t                rangesCoordInfo && (rangesCoordInfo[index] = coordInfo);\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\t    helper.parseInputRanges = function (brushModel, ecModel) {\r\n\t        each(brushModel.areas, function (area) {\r\n\t            var coordInfo = findCoordInfo(area, brushModel.coordInfoList);\r\n\r\n\t            if (true) {\r\n\t                zrUtil.assert(\r\n\t                    !coordInfo || coordInfo === true || area.coordRange,\r\n\t                    'coordRange must be specified when coord index specified.'\r\n\t                );\r\n\t                zrUtil.assert(\r\n\t                    !coordInfo || coordInfo !== true || area.range,\r\n\t                    'range must be specified.'\r\n\t                );\r\n\t            }\r\n\r\n\t            area.range = area.range || [];\r\n\r\n\t            // convert coordRange to global range and set panelId.\r\n\t            if (coordInfo && coordInfo !== true) {\r\n\t                area.range = coordConvert[area.brushType](\r\n\t                    0, coordInfo, area.coordRange\r\n\t                );\r\n\t                area.panelId = coordInfo.panelId;\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\t    helper.makePanelOpts = function (coordInfoList) {\r\n\t        var panelOpts = [];\r\n\r\n\t        each(coordInfoList, function (coordInfo) {\r\n\t            var coordSys = coordInfo.coordSys;\r\n\t            var rect;\r\n\r\n\t            if (coordInfo.geoIndex >= 0) {\r\n\t                rect = coordSys.getBoundingRect().clone();\r\n\t                // geo roam and zoom transform\r\n\t                rect.applyTransform(graphic.getTransform(coordSys));\r\n\t            }\r\n\t            else { // xAxis or yAxis\r\n\t                // grid is not Transformable.\r\n\t                rect = coordSys.grid.getRect().clone();\r\n\t            }\r\n\r\n\t            panelOpts.push({panelId: coordInfo.panelId, rect: rect});\r\n\t        });\r\n\r\n\t        return panelOpts;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @param {Object} option {xAxisIndex, yAxisIndex, geoIndex}\r\n\t     * @param {module:echarts/model/Global} ecModel\r\n\t     * @return {Array.<Obejct>} coordInfoList\r\n\t     */\r\n\t    helper.makeCoordInfoList = function (option, ecModel) {\r\n\t        var coordInfoList = [];\r\n\r\n\t        each(COMPONENT_NAMES, function (componentName) {\r\n\t            var componentIndices = option[componentName + 'Index'];\r\n\t            if (componentIndices == null || componentIndices === 'none') {\r\n\t                return;\r\n\t            }\r\n\t            if (componentIndices !== 'all' && !zrUtil.isArray(componentIndices)) {\r\n\t                componentIndices = [componentIndices];\r\n\t            }\r\n\r\n\t            ecModel.eachComponent({mainType: componentName}, function (componentModel, index) {\r\n\t                if (componentIndices !== 'all' && zrUtil.indexOf(componentIndices, index) < 0) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var grid;\r\n\t                var coordSys;\r\n\r\n\t                (componentName === 'xAxis' || componentName === 'yAxis')\r\n\t                    ? (grid = componentModel.axis.grid)\r\n\t                    : (coordSys = componentModel.coordinateSystem); // geo\r\n\r\n\t                var coordInfo;\r\n\r\n\t                // Check duplicate and find cartesian when tranval to yAxis.\r\n\t                for (var i = 0, len = coordInfoList.length; i < len; i++) {\r\n\t                    var cInfo = coordInfoList[i];\r\n\t                    if (true) {\r\n\t                        zrUtil.assert(\r\n\t                            cInfo[componentName + 'Index'] != index,\r\n\t                            'Coord should not be defined duplicately: ' + componentName + index\r\n\t                        );\r\n\t                    }\r\n\t                    // CoordSys is always required for `rect brush` or `polygon brush`.\r\n\t                    // If both xAxisIndex and yAxisIndex specified, fetch cartesian by them.\r\n\t                    if (componentName === 'yAxis' && !cInfo.yAxis && cInfo.xAxis) {\r\n\t                        var aCoordSys = grid.getCartesian(cInfo.xAxisIndex, index);\r\n\t                        if (aCoordSys) { // The yAxis and xAxis are in the same cartesian.\r\n\t                            coordSys = aCoordSys;\r\n\t                            coordInfo = cInfo;\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\r\n\t                !coordInfo && coordInfoList.push(coordInfo = {});\r\n\r\n\t                coordInfo[componentName] = componentModel;\r\n\t                coordInfo[componentName + 'Index'] = index;\r\n\t                // If both xAxisIndex and yAxisIndex specified, panelId only use yAxisIndex,\r\n\t                // which is enough to index panel.\r\n\t                coordInfo.panelId = componentName + PANEL_ID_SPLIT + index;\r\n\t                coordInfo.coordSys = coordSys\r\n\t                    // If only xAxisIndex or only yAxisIndex specified, find its first cartesian.\r\n\t                    || grid.getCartesian(coordInfo.xAxisIndex, coordInfo.yAxisIndex);\r\n\r\n\t                coordInfo.coordSys\r\n\t                    ? (coordInfoList[componentName + 'Has'] = true)\r\n\t                    : coordInfoList.pop(); // If a coordInfo exists originally, existance of coordSys is ensured.\r\n\t            });\r\n\t        });\r\n\r\n\t        return coordInfoList;\r\n\t    };\r\n\r\n\t    helper.controlSeries = function (area, brushModel, seriesModel) {\r\n\t        // Check whether area is bound in coord, and series do not belong to that coord.\r\n\t        // If do not do this check, some brush (like lineX) will controll all axes.\r\n\t        var coordInfo = findCoordInfo(area, brushModel.coordInfoList);\r\n\t        return coordInfo === true || (coordInfo && coordInfo.coordSys === seriesModel.coordinateSystem);\r\n\t    };\r\n\r\n\t    function formatMinMax(minMax) {\r\n\t        minMax[0] > minMax[1] && minMax.reverse();\r\n\t        return minMax;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * If return Object, a coord found.\r\n\t     * If reutrn true, global found.\r\n\t     * Otherwise nothing found.\r\n\t     *\r\n\t     * @param {Object} area {<componentName>Index}\r\n\t     * @param {Array} coordInfoList\r\n\t     * @return {Obejct|boolean}\r\n\t     */\r\n\t    function findCoordInfo(area, coordInfoList) {\r\n\t        var isGlobal = true;\r\n\t        for (var j = 0; j < COMPONENT_NAMES.length; j++) {\r\n\t            var indexAttr = COMPONENT_NAMES[j] + 'Index';\r\n\t            if (area[indexAttr] >= 0) {\r\n\t                isGlobal = false;\r\n\t                for (var i = 0; i < coordInfoList.length; i++) {\r\n\t                    if (coordInfoList[i][indexAttr] === area[indexAttr]) {\r\n\t                        return coordInfoList[i];\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return isGlobal;\r\n\t    }\r\n\r\n\t    function axisConvert(axisName, to, coordInfo, coordRange) {\r\n\t        var axis = coordInfo.coordSys.getAxis(axisName);\r\n\r\n\t        if (true) {\r\n\t            zrUtil.assert(axis, 'line brush is only available in cartesian (grid).');\r\n\t        }\r\n\r\n\t        return formatMinMax(zrUtil.map([0, 1], function (i) {\r\n\t            return to\r\n\t                ? axis.coordToData(axis.toLocalCoord(coordRange[i]))\r\n\t                : axis.toGlobalCoord(axis.dataToCoord(coordRange[i]));\r\n\t        }));\r\n\t    }\r\n\r\n\t    var coordConvert = {\r\n\r\n\t        lineX: zrUtil.curry(axisConvert, 'x'),\r\n\r\n\t        lineY: zrUtil.curry(axisConvert, 'y'),\r\n\r\n\t        rect: function (to, coordInfo, coordRange) {\r\n\t            var coordSys = coordInfo.coordSys;\r\n\t            var xminymin = coordSys[COORD_CONVERTS[to]]([coordRange[0][0], coordRange[1][0]]);\r\n\t            var xmaxymax = coordSys[COORD_CONVERTS[to]]([coordRange[0][1], coordRange[1][1]]);\r\n\t            return [\r\n\t                formatMinMax([xminymin[0], xmaxymax[0]]),\r\n\t                formatMinMax([xminymin[1], xmaxymax[1]])\r\n\t            ];\r\n\t        },\r\n\r\n\t        polygon: function (to, coordInfo, coordRange) {\r\n\t            var coordSys = coordInfo.coordSys;\r\n\t            return zrUtil.map(coordRange, coordSys[COORD_CONVERTS[to]], coordSys);\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = helper;\r\n\r\n\r\n\r\n/***/ },\r\n/* 311 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Brush model\r\n\t */\r\n\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var visualSolution = __webpack_require__(307);\r\n\t    var Model = __webpack_require__(12);\r\n\r\n\t    var DEFAULT_OUT_OF_BRUSH_COLOR = ['#ddd'];\r\n\r\n\t    var BrushModel = echarts.extendComponentModel({\r\n\r\n\t        type: 'brush',\r\n\r\n\t        dependencies: ['geo', 'grid', 'xAxis', 'yAxis', 'parallel', 'series'],\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        defaultOption: {\r\n\t            // inBrush: null,\r\n\t            // outOfBrush: null,\r\n\t            toolbox: null,          // Default value see preprocessor.\r\n\t            brushLink: null,        // Series indices array, broadcast using dataIndex.\r\n\t                                    // or 'all', which means all series. 'none' or null means no series.\r\n\t            seriesIndex: 'all',     // seriesIndex array, specify series controlled by this brush component.\r\n\t            geoIndex: null,         //\r\n\t            xAxisIndex: null,\r\n\t            yAxisIndex: null,\r\n\r\n\t            brushType: 'rect',      // Default brushType, see BrushController.\r\n\t            brushMode: 'single',    // Default brushMode, 'single' or 'multiple'\r\n\t            transformable: true,    // Default transformable.\r\n\t            brushStyle: {           // Default brushStyle\r\n\t                borderWidth: 1,\r\n\t                color: 'rgba(120,140,180,0.3)',\r\n\t                borderColor: 'rgba(120,140,180,0.8)',\r\n\t                width: null         // do not use bursh width in line brush, but fetch from grid.\r\n\t            },\r\n\r\n\t            throttleType: 'fixRate',// Throttle in brushSelected event. 'fixRate' or 'debounce'.\r\n\t                                    // If null, no throttle. Valid only in the first brush component\r\n\t            throttleDelay: 0,       // Unit: ms, 0 means every event will be triggered.\r\n\r\n\t            // FIXME\r\n\t            // 试验效果\r\n\t            removeOnClick: true\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {Array.<Object>}\r\n\t         */\r\n\t        areas: [],\r\n\r\n\t        /**\r\n\t         * Current activated brush type.\r\n\t         * If null, brush is inactived.\r\n\t         * see module:echarts/component/helper/BrushController\r\n\t         * @readOnly\r\n\t         * @type {string}\r\n\t         */\r\n\t        brushType: null,\r\n\r\n\t        /**\r\n\t         * Current brush opt.\r\n\t         * see module:echarts/component/helper/BrushController\r\n\t         * @readOnly\r\n\t         * @type {Object}\r\n\t         */\r\n\t        brushOption: {},\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {Array.<Object>}\r\n\t         */\r\n\t        coordInfoList: [],\r\n\r\n\t        optionUpdated: function (newOption, isInit) {\r\n\t            var thisOption = this.option;\r\n\r\n\t            !isInit && visualSolution.replaceVisualOption(\r\n\t                thisOption, newOption, ['inBrush', 'outOfBrush']\r\n\t            );\r\n\r\n\t            thisOption.inBrush = thisOption.inBrush || {};\r\n\t            // Always give default visual, consider setOption at the second time.\r\n\t            thisOption.outOfBrush = thisOption.outOfBrush || {color: DEFAULT_OUT_OF_BRUSH_COLOR};\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If ranges is null/undefined, range state remain.\r\n\t         *\r\n\t         * @param {Array.<Object>} [ranges]\r\n\t         */\r\n\t        setAreas: function (areas) {\r\n\t            if (true) {\r\n\t                zrUtil.assert(zrUtil.isArray(areas));\r\n\t                zrUtil.each(areas, function (area) {\r\n\t                    zrUtil.assert(area.brushType, 'Illegal areas');\r\n\t                });\r\n\t            }\r\n\r\n\t            // If ranges is null/undefined, range state remain.\r\n\t            // This helps user to dispatchAction({type: 'brush'}) with no areas\r\n\t            // set but just want to get the current brush select info from a `brush` event.\r\n\t            if (!areas) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            this.areas = zrUtil.map(areas, function (area) {\r\n\t                return this._mergeBrushOption(area);\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * see module:echarts/component/helper/BrushController\r\n\t         * @param {Object} brushOption\r\n\t         */\r\n\t        setBrushOption: function (brushOption) {\r\n\t            this.brushOption = this._mergeBrushOption(brushOption);\r\n\t            this.brushType = this.brushOption.brushType;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _mergeBrushOption: function (brushOption) {\r\n\t            var option = this.option;\r\n\t            return zrUtil.merge(\r\n\t                {\r\n\t                    brushType: option.brushType,\r\n\t                    brushMode: option.brushMode,\r\n\t                    transformable: option.transformable,\r\n\t                    brushStyle: new Model(option.brushStyle).getItemStyle(),\r\n\t                    removeOnClick: option.removeOnClick\r\n\t                },\r\n\t                brushOption,\r\n\t                true\r\n\t            );\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    module.exports = BrushModel;\r\n\r\n\r\n\r\n/***/ },\r\n/* 312 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var BrushController = __webpack_require__(234);\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var brushHelper = __webpack_require__(310);\r\n\r\n\t    module.exports = echarts.extendComponentView({\r\n\r\n\t        type: 'brush',\r\n\r\n\t        init: function (ecModel, api) {\r\n\r\n\t            /**\r\n\t             * @readOnly\r\n\t             * @type {module:echarts/model/Global}\r\n\t             */\r\n\t            this.ecModel = ecModel;\r\n\r\n\t            /**\r\n\t             * @readOnly\r\n\t             * @type {module:echarts/ExtensionAPI}\r\n\t             */\r\n\t            this.api = api;\r\n\r\n\t            /**\r\n\t             * @readOnly\r\n\t             * @type {module:echarts/component/brush/BrushModel}\r\n\t             */\r\n\t            this.model;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {module:echarts/component/helper/BrushController}\r\n\t             */\r\n\t            (this._brushController = new BrushController(api.getZr()))\r\n\t                .on('brush', zrUtil.bind(this._onBrush, this))\r\n\t                .mount();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        render: function (brushModel) {\r\n\t            this.model = brushModel;\r\n\t            return updateController.apply(this, arguments);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        updateView: updateController,\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        updateLayout: updateController,\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        updateVisual: updateController,\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        dispose: function () {\r\n\t            this._brushController.dispose();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _onBrush: function (areas, opt) {\r\n\t            var modelId = this.model.id;\r\n\r\n\t            brushHelper.parseOutputRanges(areas, this.model.coordInfoList, this.ecModel);\r\n\r\n\t            // Action is not dispatched on drag end, because the drag end\r\n\t            // emits the same params with the last drag move event, and\r\n\t            // may have some delay when using touch pad, which makes\r\n\t            // animation not smooth (when using debounce).\r\n\t            (!opt.isEnd || opt.removeOnClick) && this.api.dispatchAction({\r\n\t                type: 'brush',\r\n\t                brushId: modelId,\r\n\t                areas: zrUtil.clone(areas),\r\n\t                $from: modelId\r\n\t            });\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    function updateController(brushModel, ecModel, api, payload) {\r\n\t        // Do not update controller when drawing.\r\n\t        (!payload || payload.$from !== brushModel.id) && this._brushController\r\n\t            .setPanels(brushHelper.makePanelOpts(brushModel.coordInfoList))\r\n\t            .enableBrush(brushModel.brushOption)\r\n\t            .updateCovers(brushModel.areas.slice());\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 313 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Brush action\r\n\t */\r\n\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    /**\r\n\t     * payload: {\r\n\t     *      brushIndex: number, or,\r\n\t     *      brushId: string, or,\r\n\t     *      brushName: string,\r\n\t     *      globalRanges: Array\r\n\t     * }\r\n\t     */\r\n\t    echarts.registerAction(\r\n\t         {type: 'brush', event: 'brush', update: 'updateView'},\r\n\t        function (payload, ecModel) {\r\n\t            ecModel.eachComponent({mainType: 'brush', query: payload}, function (brushModel) {\r\n\t                brushModel.setAreas(payload.areas);\r\n\t            });\r\n\t        }\r\n\t    );\r\n\r\n\t    /**\r\n\t     * payload: {\r\n\t     *      brushComponents: [\r\n\t     *          {\r\n\t     *              brushId,\r\n\t     *              brushIndex,\r\n\t     *              brushName,\r\n\t     *              series: [\r\n\t     *                  {\r\n\t     *                      seriesId,\r\n\t     *                      seriesIndex,\r\n\t     *                      seriesName,\r\n\t     *                      rawIndices: [21, 34, ...]\r\n\t     *                  },\r\n\t     *                  ...\r\n\t     *              ]\r\n\t     *          },\r\n\t     *          ...\r\n\t     *      ]\r\n\t     * }\r\n\t     */\r\n\t    echarts.registerAction(\r\n\t         {type: 'brushSelect', event: 'brushSelected', update: 'none'},\r\n\t        function () {}\r\n\t    );\r\n\r\n\r\n/***/ },\r\n/* 314 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var featureManager = __webpack_require__(315);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    function Brush(model, ecModel, api) {\r\n\t        this.model = model;\r\n\t        this.ecModel = ecModel;\r\n\t        this.api = api;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {string}\r\n\t         */\r\n\t        this._brushType;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {string}\r\n\t         */\r\n\t        this._brushMode;\r\n\t    }\r\n\r\n\t    Brush.defaultOption = {\r\n\t        show: true,\r\n\t        type: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],\r\n\t        icon: {\r\n\t            rect: 'M7.3,34.7 M0.4,10V-0.2h9.8 M89.6,10V-0.2h-9.8 M0.4,60v10.2h9.8 M89.6,60v10.2h-9.8 M12.3,22.4V10.5h13.1 M33.6,10.5h7.8 M49.1,10.5h7.8 M77.5,22.4V10.5h-13 M12.3,31.1v8.2 M77.7,31.1v8.2 M12.3,47.6v11.9h13.1 M33.6,59.5h7.6 M49.1,59.5 h7.7 M77.5,47.6v11.9h-13', // jshint ignore:line\r\n\t            polygon: 'M55.2,34.9c1.7,0,3.1,1.4,3.1,3.1s-1.4,3.1-3.1,3.1 s-3.1-1.4-3.1-3.1S53.5,34.9,55.2,34.9z M50.4,51c1.7,0,3.1,1.4,3.1,3.1c0,1.7-1.4,3.1-3.1,3.1c-1.7,0-3.1-1.4-3.1-3.1 C47.3,52.4,48.7,51,50.4,51z M55.6,37.1l1.5-7.8 M60.1,13.5l1.6-8.7l-7.8,4 M59,19l-1,5.3 M24,16.1l6.4,4.9l6.4-3.3 M48.5,11.6 l-5.9,3.1 M19.1,12.8L9.7,5.1l1.1,7.7 M13.4,29.8l1,7.3l6.6,1.6 M11.6,18.4l1,6.1 M32.8,41.9 M26.6,40.4 M27.3,40.2l6.1,1.6 M49.9,52.1l-5.6-7.6l-4.9-1.2', // jshint ignore:line\r\n\t            lineX: 'M15.2,30 M19.7,15.6V1.9H29 M34.8,1.9H40.4 M55.3,15.6V1.9H45.9 M19.7,44.4V58.1H29 M34.8,58.1H40.4 M55.3,44.4 V58.1H45.9 M12.5,20.3l-9.4,9.6l9.6,9.8 M3.1,29.9h16.5 M62.5,20.3l9.4,9.6L62.3,39.7 M71.9,29.9H55.4', // jshint ignore:line\r\n\t            lineY: 'M38.8,7.7 M52.7,12h13.2v9 M65.9,26.6V32 M52.7,46.3h13.2v-9 M24.9,12H11.8v9 M11.8,26.6V32 M24.9,46.3H11.8v-9 M48.2,5.1l-9.3-9l-9.4,9.2 M38.9-3.9V12 M48.2,53.3l-9.3,9l-9.4-9.2 M38.9,62.3V46.4', // jshint ignore:line\r\n\t            keep: 'M4,10.5V1h10.3 M20.7,1h6.1 M33,1h6.1 M55.4,10.5V1H45.2 M4,17.3v6.6 M55.6,17.3v6.6 M4,30.5V40h10.3 M20.7,40 h6.1 M33,40h6.1 M55.4,30.5V40H45.2 M21,18.9h62.9v48.6H21V18.9z', // jshint ignore:line\r\n\t            clear: 'M22,14.7l30.9,31 M52.9,14.7L22,45.7 M4.7,16.8V4.2h13.1 M26,4.2h7.8 M41.6,4.2h7.8 M70.3,16.8V4.2H57.2 M4.7,25.9v8.6 M70.3,25.9v8.6 M4.7,43.2v12.6h13.1 M26,55.8h7.8 M41.6,55.8h7.8 M70.3,43.2v12.6H57.2' // jshint ignore:line\r\n\t        },\r\n\t        title: {\r\n\t            rect: '矩形选择',\r\n\t            polygon: '圈选',\r\n\t            lineX: '横向选择',\r\n\t            lineY: '纵向选择',\r\n\t            keep: '保持选择',\r\n\t            clear: '清除选择'\r\n\t        }\r\n\t    };\r\n\r\n\t    var proto = Brush.prototype;\r\n\r\n\t    proto.render =\r\n\t    proto.updateView =\r\n\t    proto.updateLayout = function (featureModel, ecModel, api) {\r\n\t        var brushType;\r\n\t        var brushMode;\r\n\t        var isBrushed;\r\n\r\n\t        ecModel.eachComponent({mainType: 'brush'}, function (brushModel) {\r\n\t            brushType = brushModel.brushType;\r\n\t            brushMode = brushModel.brushOption.brushMode || 'single';\r\n\t            isBrushed |= brushModel.areas.length;\r\n\t        });\r\n\t        this._brushType = brushType;\r\n\t        this._brushMode = brushMode;\r\n\r\n\t        zrUtil.each(featureModel.get('type', true), function (type) {\r\n\t            featureModel.setIconStatus(\r\n\t                type,\r\n\t                (\r\n\t                    type === 'keep'\r\n\t                    ? brushMode === 'multiple'\r\n\t                    : type === 'clear'\r\n\t                    ? isBrushed\r\n\t                    : type === brushType\r\n\t                ) ? 'emphasis' : 'normal'\r\n\t            );\r\n\t        });\r\n\t    };\r\n\r\n\t    proto.getIcons = function () {\r\n\t        var model = this.model;\r\n\t        var availableIcons = model.get('icon', true);\r\n\t        var icons = {};\r\n\t        zrUtil.each(model.get('type', true), function (type) {\r\n\t            if (availableIcons[type]) {\r\n\t                icons[type] = availableIcons[type];\r\n\t            }\r\n\t        });\r\n\t        return icons;\r\n\t    };\r\n\r\n\t    proto.onclick = function (ecModel, api, type) {\r\n\t        var api = this.api;\r\n\t        var brushType = this._brushType;\r\n\t        var brushMode = this._brushMode;\r\n\r\n\t        if (type === 'clear') {\r\n\t            api.dispatchAction({\r\n\t                type: 'brush',\r\n\t                // Clear all areas of all brush components.\r\n\t                areas: []\r\n\t            });\r\n\t        }\r\n\t        else {\r\n\t            api.dispatchAction({\r\n\t                type: 'takeGlobalCursor',\r\n\t                key: 'brush',\r\n\t                brushOption: {\r\n\t                    brushType: type === 'keep'\r\n\t                        ? brushType\r\n\t                        : (brushType === type ? false : type),\r\n\t                    brushMode: type === 'keep'\r\n\t                        ? (brushMode === 'multiple' ? 'single' : 'multiple')\r\n\t                        : brushMode\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t    };\r\n\r\n\t    featureManager.register('brush', Brush);\r\n\r\n\t    module.exports = Brush;\r\n\r\n\r\n/***/ },\r\n/* 315 */\r\n/***/ function(module, exports) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var features = {};\r\n\r\n\t    module.exports = {\r\n\t        register: function (name, ctor) {\r\n\t            features[name] = ctor;\r\n\t        },\r\n\r\n\t        get: function (name) {\r\n\t            return features[name];\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 316 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var layout = __webpack_require__(21);\r\n\r\n\t    // Model\r\n\t    echarts.extendComponentModel({\r\n\r\n\t        type: 'title',\r\n\r\n\t        layoutMode: {type: 'box', ignoreSize: true},\r\n\r\n\t        defaultOption: {\r\n\t            // 一级层叠\r\n\t            zlevel: 0,\r\n\t            // 二级层叠\r\n\t            z: 6,\r\n\t            show: true,\r\n\r\n\t            text: '',\r\n\t            // 超链接跳转\r\n\t            // link: null,\r\n\t            // 仅支持self | blank\r\n\t            target: 'blank',\r\n\t            subtext: '',\r\n\r\n\t            // 超链接跳转\r\n\t            // sublink: null,\r\n\t            // 仅支持self | blank\r\n\t            subtarget: 'blank',\r\n\r\n\t            // 'center' ¦ 'left' ¦ 'right'\r\n\t            // ¦ {number}（x坐标，单位px）\r\n\t            left: 0,\r\n\t            // 'top' ¦ 'bottom' ¦ 'center'\r\n\t            // ¦ {number}（y坐标，单位px）\r\n\t            top: 0,\r\n\r\n\t            // 水平对齐\r\n\t            // 'auto' | 'left' | 'right' | 'center'\r\n\t            // 默认根据 left 的位置判断是左对齐还是右对齐\r\n\t            // textAlign: null\r\n\t            //\r\n\t            // 垂直对齐\r\n\t            // 'auto' | 'top' | 'bottom' | 'middle'\r\n\t            // 默认根据 top 位置判断是上对齐还是下对齐\r\n\t            // textBaseline: null\r\n\r\n\t            backgroundColor: 'rgba(0,0,0,0)',\r\n\r\n\t            // 标题边框颜色\r\n\t            borderColor: '#ccc',\r\n\r\n\t            // 标题边框线宽，单位px，默认为0（无边框）\r\n\t            borderWidth: 0,\r\n\r\n\t            // 标题内边距，单位px，默认各方向内边距为5，\r\n\t            // 接受数组分别设定上右下左边距，同css\r\n\t            padding: 5,\r\n\r\n\t            // 主副标题纵向间隔，单位px，默认为10，\r\n\t            itemGap: 10,\r\n\t            textStyle: {\r\n\t                fontSize: 18,\r\n\t                fontWeight: 'bolder',\r\n\t                color: '#333'\r\n\t            },\r\n\t            subtextStyle: {\r\n\t                color: '#aaa'\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    // View\r\n\t    echarts.extendComponentView({\r\n\r\n\t        type: 'title',\r\n\r\n\t        render: function (titleModel, ecModel, api) {\r\n\t            this.group.removeAll();\r\n\r\n\t            if (!titleModel.get('show')) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var group = this.group;\r\n\r\n\t            var textStyleModel = titleModel.getModel('textStyle');\r\n\t            var subtextStyleModel = titleModel.getModel('subtextStyle');\r\n\r\n\t            var textAlign = titleModel.get('textAlign');\r\n\t            var textBaseline = titleModel.get('textBaseline');\r\n\r\n\t            var textEl = new graphic.Text({\r\n\t                style: {\r\n\t                    text: titleModel.get('text'),\r\n\t                    textFont: textStyleModel.getFont(),\r\n\t                    fill: textStyleModel.getTextColor()\r\n\t                },\r\n\t                z2: 10\r\n\t            });\r\n\r\n\t            var textRect = textEl.getBoundingRect();\r\n\r\n\t            var subText = titleModel.get('subtext');\r\n\t            var subTextEl = new graphic.Text({\r\n\t                style: {\r\n\t                    text: subText,\r\n\t                    textFont: subtextStyleModel.getFont(),\r\n\t                    fill: subtextStyleModel.getTextColor(),\r\n\t                    y: textRect.height + titleModel.get('itemGap'),\r\n\t                    textBaseline: 'top'\r\n\t                },\r\n\t                z2: 10\r\n\t            });\r\n\r\n\t            var link = titleModel.get('link');\r\n\t            var sublink = titleModel.get('sublink');\r\n\r\n\t            textEl.silent = !link;\r\n\t            subTextEl.silent = !sublink;\r\n\r\n\t            if (link) {\r\n\t                textEl.on('click', function () {\r\n\t                    window.open(link, '_' + titleModel.get('target'));\r\n\t                });\r\n\t            }\r\n\t            if (sublink) {\r\n\t                subTextEl.on('click', function () {\r\n\t                    window.open(sublink, '_' + titleModel.get('subtarget'));\r\n\t                });\r\n\t            }\r\n\r\n\t            group.add(textEl);\r\n\t            subText && group.add(subTextEl);\r\n\t            // If no subText, but add subTextEl, there will be an empty line.\r\n\r\n\t            var groupRect = group.getBoundingRect();\r\n\t            var layoutOption = titleModel.getBoxLayoutParams();\r\n\t            layoutOption.width = groupRect.width;\r\n\t            layoutOption.height = groupRect.height;\r\n\t            var layoutRect = layout.getLayoutRect(\r\n\t                layoutOption, {\r\n\t                    width: api.getWidth(),\r\n\t                    height: api.getHeight()\r\n\t                }, titleModel.get('padding')\r\n\t            );\r\n\t            // Adjust text align based on position\r\n\t            if (!textAlign) {\r\n\t                // Align left if title is on the left. center and right is same\r\n\t                textAlign = titleModel.get('left') || titleModel.get('right');\r\n\t                if (textAlign === 'middle') {\r\n\t                    textAlign = 'center';\r\n\t                }\r\n\t                // Adjust layout by text align\r\n\t                if (textAlign === 'right') {\r\n\t                    layoutRect.x += layoutRect.width;\r\n\t                }\r\n\t                else if (textAlign === 'center') {\r\n\t                    layoutRect.x += layoutRect.width / 2;\r\n\t                }\r\n\t            }\r\n\t            if (!textBaseline) {\r\n\t                textBaseline = titleModel.get('top') || titleModel.get('bottom');\r\n\t                if (textBaseline === 'center') {\r\n\t                    textBaseline = 'middle';\r\n\t                }\r\n\t                if (textBaseline === 'bottom') {\r\n\t                    layoutRect.y += layoutRect.height;\r\n\t                }\r\n\t                else if (textBaseline === 'middle') {\r\n\t                    layoutRect.y += layoutRect.height / 2;\r\n\t                }\r\n\r\n\t                textBaseline = textBaseline || 'top';\r\n\t            }\r\n\r\n\t            group.attr('position', [layoutRect.x, layoutRect.y]);\r\n\t            var alignStyle = {\r\n\t                textAlign: textAlign,\r\n\t                textVerticalAlign: textBaseline\r\n\t            };\r\n\t            textEl.setStyle(alignStyle);\r\n\t            subTextEl.setStyle(alignStyle);\r\n\r\n\t            // Render background\r\n\t            // Get groupRect again because textAlign has been changed\r\n\t            groupRect = group.getBoundingRect();\r\n\t            var padding = layoutRect.margin;\r\n\t            var style = titleModel.getItemStyle(['color', 'opacity']);\r\n\t            style.fill = titleModel.get('backgroundColor');\r\n\t            var rect = new graphic.Rect({\r\n\t                shape: {\r\n\t                    x: groupRect.x - padding[3],\r\n\t                    y: groupRect.y - padding[0],\r\n\t                    width: groupRect.width + padding[1] + padding[3],\r\n\t                    height: groupRect.height + padding[0] + padding[2]\r\n\t                },\r\n\t                style: style,\r\n\t                silent: true\r\n\t            });\r\n\t            graphic.subPixelOptimizeRect(rect);\r\n\r\n\t            group.add(rect);\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 317 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * DataZoom component entry\r\n\t */\r\n\r\n\r\n\t    __webpack_require__(318);\r\n\r\n\t    __webpack_require__(319);\r\n\t    __webpack_require__(322);\r\n\r\n\t    __webpack_require__(323);\r\n\t    __webpack_require__(324);\r\n\r\n\t    __webpack_require__(326);\r\n\t    __webpack_require__(327);\r\n\r\n\t    __webpack_require__(329);\r\n\t    __webpack_require__(330);\r\n\r\n\r\n\r\n/***/ },\r\n/* 318 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(19).registerSubTypeDefaulter('dataZoom', function (option) {\r\n\t        // Default 'slider' when no type specified.\r\n\t        return 'slider';\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 319 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Data zoom model\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var env = __webpack_require__(2);\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var helper = __webpack_require__(320);\r\n\t    var AxisProxy = __webpack_require__(321);\r\n\t    var each = zrUtil.each;\r\n\t    var eachAxisDim = helper.eachAxisDim;\r\n\r\n\t    var DataZoomModel = echarts.extendComponentModel({\r\n\r\n\t        type: 'dataZoom',\r\n\r\n\t        dependencies: [\r\n\t            'xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'series'\r\n\t        ],\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        defaultOption: {\r\n\t            zlevel: 0,\r\n\t            z: 4,                   // Higher than normal component (z: 2).\r\n\t            orient: null,           // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.\r\n\t            xAxisIndex: null,       // Default the first horizontal category axis.\r\n\t            yAxisIndex: null,       // Default the first vertical category axis.\r\n\r\n\t            filterMode: 'filter',   // Possible values: 'filter' or 'empty'.\r\n\t                                    // 'filter': data items which are out of window will be removed.\r\n\t                                    //           This option is applicable when filtering outliers.\r\n\t                                    // 'empty': data items which are out of window will be set to empty.\r\n\t                                    //          This option is applicable when user should not neglect\r\n\t                                    //          that there are some data items out of window.\r\n\t                                    // Taking line chart as an example, line will be broken in\r\n\t                                    // the filtered points when filterModel is set to 'empty', but\r\n\t                                    // be connected when set to 'filter'.\r\n\r\n\t            throttle: null,         // Dispatch action by the fixed rate, avoid frequency.\r\n\t                                    // default 100. Do not throttle when use null/undefined.\r\n\t                                    // If animation === true and animationDurationUpdate > 0,\r\n\t                                    // default value is 100, otherwise 20.\r\n\t            start: 0,               // Start percent. 0 ~ 100\r\n\t            end: 100,               // End percent. 0 ~ 100\r\n\t            startValue: null,       // Start value. If startValue specified, start is ignored.\r\n\t            endValue: null          // End value. If endValue specified, end is ignored.\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        init: function (option, parentModel, ecModel) {\r\n\r\n\t            /**\r\n\t             * key like x_0, y_1\r\n\t             * @private\r\n\t             * @type {Object}\r\n\t             */\r\n\t            this._dataIntervalByAxis = {};\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._dataInfo = {};\r\n\r\n\t            /**\r\n\t             * key like x_0, y_1\r\n\t             * @private\r\n\t             */\r\n\t            this._axisProxies = {};\r\n\r\n\t            /**\r\n\t             * @readOnly\r\n\t             */\r\n\t            this.textStyleModel;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._autoThrottle = true;\r\n\r\n\t            var rawOption = retrieveRaw(option);\r\n\r\n\t            this.mergeDefaultAndTheme(option, ecModel);\r\n\r\n\t            this.doInit(rawOption);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        mergeOption: function (newOption) {\r\n\t            var rawOption = retrieveRaw(newOption);\r\n\r\n\t            //FIX #2591\r\n\t            zrUtil.merge(this.option, newOption, true);\r\n\r\n\t            this.doInit(rawOption);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        doInit: function (rawOption) {\r\n\t            var thisOption = this.option;\r\n\r\n\t            // Disable realtime view update if canvas is not supported.\r\n\t            if (!env.canvasSupported) {\r\n\t                thisOption.realtime = false;\r\n\t            }\r\n\r\n\t            this._setDefaultThrottle(rawOption);\r\n\r\n\t            processRangeProp('start', 'startValue', rawOption, thisOption);\r\n\t            processRangeProp('end', 'endValue', rawOption, thisOption);\r\n\r\n\t            this.textStyleModel = this.getModel('textStyle');\r\n\r\n\t            this._resetTarget();\r\n\r\n\t            this._giveAxisProxies();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _giveAxisProxies: function () {\r\n\t            var axisProxies = this._axisProxies;\r\n\r\n\t            this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {\r\n\t                var axisModel = this.dependentModels[dimNames.axis][axisIndex];\r\n\r\n\t                // If exists, share axisProxy with other dataZoomModels.\r\n\t                var axisProxy = axisModel.__dzAxisProxy || (\r\n\t                    // Use the first dataZoomModel as the main model of axisProxy.\r\n\t                    axisModel.__dzAxisProxy = new AxisProxy(\r\n\t                        dimNames.name, axisIndex, this, ecModel\r\n\t                    )\r\n\t                );\r\n\t                // FIXME\r\n\t                // dispose __dzAxisProxy\r\n\r\n\t                axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _resetTarget: function () {\r\n\t            var thisOption = this.option;\r\n\r\n\t            var autoMode = this._judgeAutoMode();\r\n\r\n\t            eachAxisDim(function (dimNames) {\r\n\t                var axisIndexName = dimNames.axisIndex;\r\n\t                thisOption[axisIndexName] = modelUtil.normalizeToArray(\r\n\t                    thisOption[axisIndexName]\r\n\t                );\r\n\t            }, this);\r\n\r\n\t            if (autoMode === 'axisIndex') {\r\n\t                this._autoSetAxisIndex();\r\n\t            }\r\n\t            else if (autoMode === 'orient') {\r\n\t                this._autoSetOrient();\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _judgeAutoMode: function () {\r\n\t            // Auto set only works for setOption at the first time.\r\n\t            // The following is user's reponsibility. So using merged\r\n\t            // option is OK.\r\n\t            var thisOption = this.option;\r\n\r\n\t            var hasIndexSpecified = false;\r\n\t            eachAxisDim(function (dimNames) {\r\n\t                // When user set axisIndex as a empty array, we think that user specify axisIndex\r\n\t                // but do not want use auto mode. Because empty array may be encountered when\r\n\t                // some error occured.\r\n\t                if (thisOption[dimNames.axisIndex] != null) {\r\n\t                    hasIndexSpecified = true;\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            var orient = thisOption.orient;\r\n\r\n\t            if (orient == null && hasIndexSpecified) {\r\n\t                return 'orient';\r\n\t            }\r\n\t            else if (!hasIndexSpecified) {\r\n\t                if (orient == null) {\r\n\t                    thisOption.orient = 'horizontal';\r\n\t                }\r\n\t                return 'axisIndex';\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _autoSetAxisIndex: function () {\r\n\t            var autoAxisIndex = true;\r\n\t            var orient = this.get('orient', true);\r\n\t            var thisOption = this.option;\r\n\r\n\t            if (autoAxisIndex) {\r\n\t                // Find axis that parallel to dataZoom as default.\r\n\t                var dimNames = orient === 'vertical'\r\n\t                    ? {dim: 'y', axisIndex: 'yAxisIndex', axis: 'yAxis'}\r\n\t                    : {dim: 'x', axisIndex: 'xAxisIndex', axis: 'xAxis'};\r\n\r\n\t                if (this.dependentModels[dimNames.axis].length) {\r\n\t                    thisOption[dimNames.axisIndex] = [0];\r\n\t                    autoAxisIndex = false;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (autoAxisIndex) {\r\n\t                // Find the first category axis as default. (consider polar)\r\n\t                eachAxisDim(function (dimNames) {\r\n\t                    if (!autoAxisIndex) {\r\n\t                        return;\r\n\t                    }\r\n\t                    var axisIndices = [];\r\n\t                    var axisModels = this.dependentModels[dimNames.axis];\r\n\t                    if (axisModels.length && !axisIndices.length) {\r\n\t                        for (var i = 0, len = axisModels.length; i < len; i++) {\r\n\t                            if (axisModels[i].get('type') === 'category') {\r\n\t                                axisIndices.push(i);\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t                    thisOption[dimNames.axisIndex] = axisIndices;\r\n\t                    if (axisIndices.length) {\r\n\t                        autoAxisIndex = false;\r\n\t                    }\r\n\t                }, this);\r\n\t            }\r\n\r\n\t            if (autoAxisIndex) {\r\n\t                // FIXME\r\n\t                // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），\r\n\t                // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？\r\n\r\n\t                // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,\r\n\t                // dataZoom component auto adopts series that reference to\r\n\t                // both xAxis and yAxis which type is 'value'.\r\n\t                this.ecModel.eachSeries(function (seriesModel) {\r\n\t                    if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {\r\n\t                        eachAxisDim(function (dimNames) {\r\n\t                            var axisIndices = thisOption[dimNames.axisIndex];\r\n\r\n\t                            var axisIndex = seriesModel.get(dimNames.axisIndex);\r\n\t                            var axisId = seriesModel.get(dimNames.axisId);\r\n\r\n\t                            var axisModel = seriesModel.ecModel.queryComponents({\r\n\t                                mainType: dimNames.axis,\r\n\t                                index: axisIndex,\r\n\t                                id: axisId\r\n\t                            })[0];\r\n\r\n\t                            if (true) {\r\n\t                                if (!axisModel) {\r\n\t                                    throw new Error(\r\n\t                                        dimNames.axis + ' \"' + zrUtil.retrieve(\r\n\t                                            axisIndex,\r\n\t                                            axisId,\r\n\t                                            0\r\n\t                                        ) + '\" not found'\r\n\t                                    );\r\n\t                                }\r\n\t                            }\r\n\t                            axisIndex = axisModel.componentIndex;\r\n\r\n\t                            if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {\r\n\t                                axisIndices.push(axisIndex);\r\n\t                            }\r\n\t                        });\r\n\t                    }\r\n\t                }, this);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _autoSetOrient: function () {\r\n\t            var dim;\r\n\r\n\t            // Find the first axis\r\n\t            this.eachTargetAxis(function (dimNames) {\r\n\t                !dim && (dim = dimNames.name);\r\n\t            }, this);\r\n\r\n\t            this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {\r\n\t            // FIXME\r\n\t            // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。\r\n\t            // 例如series.type === scatter时。\r\n\r\n\t            var is = true;\r\n\t            eachAxisDim(function (dimNames) {\r\n\t                var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);\r\n\t                var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];\r\n\r\n\t                if (!axisModel || axisModel.get('type') !== axisType) {\r\n\t                    is = false;\r\n\t                }\r\n\t            }, this);\r\n\t            return is;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _setDefaultThrottle: function (rawOption) {\r\n\t            // When first time user set throttle, auto throttle ends.\r\n\t            if (rawOption.hasOwnProperty('throttle')) {\r\n\t                this._autoThrottle = false;\r\n\t            }\r\n\t            if (this._autoThrottle) {\r\n\t                var globalOption = this.ecModel.option;\r\n\t                this.option.throttle =\r\n\t                    (globalOption.animation && globalOption.animationDurationUpdate > 0)\r\n\t                    ? 100 : 20;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         */\r\n\t        getFirstTargetAxisModel: function () {\r\n\t            var firstAxisModel;\r\n\t            eachAxisDim(function (dimNames) {\r\n\t                if (firstAxisModel == null) {\r\n\t                    var indices = this.get(dimNames.axisIndex);\r\n\t                    if (indices.length) {\r\n\t                        firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];\r\n\t                    }\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            return firstAxisModel;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel\r\n\t         */\r\n\t        eachTargetAxis: function (callback, context) {\r\n\t            var ecModel = this.ecModel;\r\n\t            eachAxisDim(function (dimNames) {\r\n\t                each(\r\n\t                    this.get(dimNames.axisIndex),\r\n\t                    function (axisIndex) {\r\n\t                        callback.call(context, dimNames, axisIndex, this, ecModel);\r\n\t                    },\r\n\t                    this\r\n\t                );\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        getAxisProxy: function (dimName, axisIndex) {\r\n\t            return this._axisProxies[dimName + '_' + axisIndex];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If not specified, set to undefined.\r\n\t         *\r\n\t         * @public\r\n\t         * @param {Object} opt\r\n\t         * @param {number} [opt.start]\r\n\t         * @param {number} [opt.end]\r\n\t         * @param {number} [opt.startValue]\r\n\t         * @param {number} [opt.endValue]\r\n\t         */\r\n\t        setRawRange: function (opt) {\r\n\t            each(['start', 'end', 'startValue', 'endValue'], function (name) {\r\n\t                // If any of those prop is null/undefined, we should alos set\r\n\t                // them, because only one pair between start/end and\r\n\t                // startValue/endValue can work.\r\n\t                this.option[name] = opt[name];\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @return {Array.<number>} [startPercent, endPercent]\r\n\t         */\r\n\t        getPercentRange: function () {\r\n\t            var axisProxy = this.findRepresentativeAxisProxy();\r\n\t            if (axisProxy) {\r\n\t                return axisProxy.getDataPercentWindow();\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);\r\n\t         *\r\n\t         * @param {string} [axisDimName]\r\n\t         * @param {number} [axisIndex]\r\n\t         * @return {Array.<number>} [startValue, endValue]\r\n\t         */\r\n\t        getValueRange: function (axisDimName, axisIndex) {\r\n\t            if (axisDimName == null && axisIndex == null) {\r\n\t                var axisProxy = this.findRepresentativeAxisProxy();\r\n\t                if (axisProxy) {\r\n\t                    return axisProxy.getDataValueWindow();\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @return {module:echarts/component/dataZoom/AxisProxy}\r\n\t         */\r\n\t        findRepresentativeAxisProxy: function () {\r\n\t            // Find the first hosted axisProxy\r\n\t            var axisProxies = this._axisProxies;\r\n\t            for (var key in axisProxies) {\r\n\t                if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {\r\n\t                    return axisProxies[key];\r\n\t                }\r\n\t            }\r\n\r\n\t            // If no hosted axis find not hosted axisProxy.\r\n\t            // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,\r\n\t            // and the option.start or option.end settings are different. The percentRange\r\n\t            // should follow axisProxy.\r\n\t            // (We encounter this problem in toolbox data zoom.)\r\n\t            for (var key in axisProxies) {\r\n\t                if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {\r\n\t                    return axisProxies[key];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    function retrieveRaw(option) {\r\n\t        var ret = {};\r\n\t        each(\r\n\t            ['start', 'end', 'startValue', 'endValue', 'throttle'],\r\n\t            function (name) {\r\n\t                option.hasOwnProperty(name) && (ret[name] = option[name]);\r\n\t            }\r\n\t        );\r\n\t        return ret;\r\n\t    }\r\n\r\n\t    function processRangeProp(percentProp, valueProp, rawOption, thisOption) {\r\n\t        // start/end has higher priority over startValue/endValue,\r\n\t        // but we should make chart.setOption({endValue: 1000}) effective,\r\n\t        // rather than chart.setOption({endValue: 1000, end: null}).\r\n\t        if (rawOption[valueProp] != null && rawOption[percentProp] == null) {\r\n\t            thisOption[percentProp] = null;\r\n\t        }\r\n\t        // Otherwise do nothing and use the merge result.\r\n\t    }\r\n\r\n\t    module.exports = DataZoomModel;\r\n\r\n\r\n\r\n/***/ },\r\n/* 320 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var helper = {};\r\n\r\n\t    var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle'];\r\n\r\n\t    /**\r\n\t     * Create \"each\" method to iterate names.\r\n\t     *\r\n\t     * @pubilc\r\n\t     * @param  {Array.<string>} names\r\n\t     * @param  {Array.<string>=} attrs\r\n\t     * @return {Function}\r\n\t     */\r\n\t    helper.createNameEach = function (names, attrs) {\r\n\t        names = names.slice();\r\n\t        var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);\r\n\t        attrs = (attrs || []).slice();\r\n\t        var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);\r\n\r\n\t        return function (callback, context) {\r\n\t            zrUtil.each(names, function (name, index) {\r\n\t                var nameObj = {name: name, capital: capitalNames[index]};\r\n\r\n\t                for (var j = 0; j < attrs.length; j++) {\r\n\t                    nameObj[attrs[j]] = name + capitalAttrs[j];\r\n\t                }\r\n\r\n\t                callback.call(context, nameObj);\r\n\t            });\r\n\t        };\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Iterate each dimension name.\r\n\t     *\r\n\t     * @public\r\n\t     * @param {Function} callback The parameter is like:\r\n\t     *                            {\r\n\t     *                                name: 'angle',\r\n\t     *                                capital: 'Angle',\r\n\t     *                                axis: 'angleAxis',\r\n\t     *                                axisIndex: 'angleAixs',\r\n\t     *                                index: 'angleIndex'\r\n\t     *                            }\r\n\t     * @param {Object} context\r\n\t     */\r\n\t    helper.eachAxisDim = helper.createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);\r\n\r\n\t    /**\r\n\t     * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.\r\n\t     * dataZoomModels and 'links' make up one or more graphics.\r\n\t     * This function finds the graphic where the source dataZoomModel is in.\r\n\t     *\r\n\t     * @public\r\n\t     * @param {Function} forEachNode Node iterator.\r\n\t     * @param {Function} forEachEdgeType edgeType iterator\r\n\t     * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.\r\n\t     * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}\r\n\t     */\r\n\t    helper.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {\r\n\r\n\t        return function (sourceNode) {\r\n\t            var result = {\r\n\t                nodes: [],\r\n\t                records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).\r\n\t            };\r\n\r\n\t            forEachEdgeType(function (edgeType) {\r\n\t                result.records[edgeType.name] = {};\r\n\t            });\r\n\r\n\t            if (!sourceNode) {\r\n\t                return result;\r\n\t            }\r\n\r\n\t            absorb(sourceNode, result);\r\n\r\n\t            var existsLink;\r\n\t            do {\r\n\t                existsLink = false;\r\n\t                forEachNode(processSingleNode);\r\n\t            }\r\n\t            while (existsLink);\r\n\r\n\t            function processSingleNode(node) {\r\n\t                if (!isNodeAbsorded(node, result) && isLinked(node, result)) {\r\n\t                    absorb(node, result);\r\n\t                    existsLink = true;\r\n\t                }\r\n\t            }\r\n\r\n\t            return result;\r\n\t        };\r\n\r\n\t        function isNodeAbsorded(node, result) {\r\n\t            return zrUtil.indexOf(result.nodes, node) >= 0;\r\n\t        }\r\n\r\n\t        function isLinked(node, result) {\r\n\t            var hasLink = false;\r\n\t            forEachEdgeType(function (edgeType) {\r\n\t                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\r\n\t                    result.records[edgeType.name][edgeId] && (hasLink = true);\r\n\t                });\r\n\t            });\r\n\t            return hasLink;\r\n\t        }\r\n\r\n\t        function absorb(node, result) {\r\n\t            result.nodes.push(node);\r\n\t            forEachEdgeType(function (edgeType) {\r\n\t                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\r\n\t                    result.records[edgeType.name][edgeId] = true;\r\n\t                });\r\n\t            });\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = helper;\r\n\r\n\r\n/***/ },\r\n/* 321 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Axis operator\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var each = zrUtil.each;\r\n\t    var asc = numberUtil.asc;\r\n\r\n\t    /**\r\n\t     * Operate single axis.\r\n\t     * One axis can only operated by one axis operator.\r\n\t     * Different dataZoomModels may be defined to operate the same axis.\r\n\t     * (i.e. 'inside' data zoom and 'slider' data zoom components)\r\n\t     * So dataZoomModels share one axisProxy in that case.\r\n\t     *\r\n\t     * @class\r\n\t     */\r\n\t    var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {string}\r\n\t         */\r\n\t        this._dimName = dimName;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        this._axisIndex = axisIndex;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Array.<number>}\r\n\t         */\r\n\t        this._valueWindow;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Array.<number>}\r\n\t         */\r\n\t        this._percentWindow;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {Array.<number>}\r\n\t         */\r\n\t        this._dataExtent;\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {module: echarts/model/Global}\r\n\t         */\r\n\t        this.ecModel = ecModel;\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {module: echarts/component/dataZoom/DataZoomModel}\r\n\t         */\r\n\t        this._dataZoomModel = dataZoomModel;\r\n\t    };\r\n\r\n\t    AxisProxy.prototype = {\r\n\r\n\t        constructor: AxisProxy,\r\n\r\n\t        /**\r\n\t         * Whether the axisProxy is hosted by dataZoomModel.\r\n\t         *\r\n\t         * @public\r\n\t         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        hostedBy: function (dataZoomModel) {\r\n\t            return this._dataZoomModel === dataZoomModel;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        getDataExtent: function () {\r\n\t            return this._dataExtent.slice();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        getDataValueWindow: function () {\r\n\t            return this._valueWindow.slice();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {Array.<number>}\r\n\t         */\r\n\t        getDataPercentWindow: function () {\r\n\t            return this._percentWindow.slice();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {number} axisIndex\r\n\t         * @return {Array} seriesModels\r\n\t         */\r\n\t        getTargetSeriesModels: function () {\r\n\t            var seriesModels = [];\r\n\t            var ecModel = this.ecModel;\r\n\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\t                var coordSysName = seriesModel.get('coordinateSystem');\r\n\t                if (coordSysName === 'cartesian2d' || coordSysName === 'polar') {\r\n\t                    var dimName = this._dimName;\r\n\t                    var axisModel = ecModel.queryComponents({\r\n\t                        mainType: dimName + 'Axis',\r\n\t                        index: seriesModel.get(dimName + 'AxisIndex'),\r\n\t                        id: seriesModel.get(dimName + 'AxisId')\r\n\t                    })[0];\r\n\t                    if (this._axisIndex === (axisModel && axisModel.componentIndex)) {\r\n\t                        seriesModels.push(seriesModel);\r\n\t                    }\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            return seriesModels;\r\n\t        },\r\n\r\n\t        getAxisModel: function () {\r\n\t            return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);\r\n\t        },\r\n\r\n\t        getOtherAxisModel: function () {\r\n\t            var axisDim = this._dimName;\r\n\t            var ecModel = this.ecModel;\r\n\t            var axisModel = this.getAxisModel();\r\n\t            var isCartesian = axisDim === 'x' || axisDim === 'y';\r\n\t            var otherAxisDim;\r\n\t            var coordSysIndexName;\r\n\t            if (isCartesian) {\r\n\t                coordSysIndexName = 'gridIndex';\r\n\t                otherAxisDim = axisDim === 'x' ? 'y' : 'x';\r\n\t            }\r\n\t            else {\r\n\t                coordSysIndexName = 'polarIndex';\r\n\t                otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';\r\n\t            }\r\n\t            var foundOtherAxisModel;\r\n\t            ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {\r\n\t                if ((otherAxisModel.get(coordSysIndexName) || 0)\r\n\t                    === (axisModel.get(coordSysIndexName) || 0)\r\n\t                ) {\r\n\t                    foundOtherAxisModel = otherAxisModel;\r\n\t                }\r\n\t            });\r\n\t            return foundOtherAxisModel;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Notice: reset should not be called before series.restoreData() called,\r\n\t         * so it is recommanded to be called in \"process stage\" but not \"model init\r\n\t         * stage\".\r\n\t         *\r\n\t         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\r\n\t         */\r\n\t        reset: function (dataZoomModel) {\r\n\t            if (dataZoomModel !== this._dataZoomModel) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            // Culculate data window and data extent, and record them.\r\n\t            var dataExtent = this._dataExtent = calculateDataExtent(\r\n\t                this._dimName, this.getTargetSeriesModels()\r\n\t            );\r\n\t            var dataWindow = calculateDataWindow(\r\n\t                dataZoomModel.option, dataExtent, this\r\n\t            );\r\n\t            this._valueWindow = dataWindow.valueWindow;\r\n\t            this._percentWindow = dataWindow.percentWindow;\r\n\r\n\t            // Update axis setting then.\r\n\t            setAxisModel(this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\r\n\t         */\r\n\t        restore: function (dataZoomModel) {\r\n\t            if (dataZoomModel !== this._dataZoomModel) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            this._valueWindow = this._percentWindow = null;\r\n\t            setAxisModel(this, true);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\r\n\t         */\r\n\t        filterData: function (dataZoomModel) {\r\n\t            if (dataZoomModel !== this._dataZoomModel) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var axisDim = this._dimName;\r\n\t            var seriesModels = this.getTargetSeriesModels();\r\n\t            var filterMode = dataZoomModel.get('filterMode');\r\n\t            var valueWindow = this._valueWindow;\r\n\r\n\t            // FIXME\r\n\t            // Toolbox may has dataZoom injected. And if there are stacked bar chart\r\n\t            // with NaN data, NaN will be filtered and stack will be wrong.\r\n\t            // So we need to force the mode to be set empty.\r\n\t            // In fect, it is not a big deal that do not support filterMode-'filter'\r\n\t            // when using toolbox#dataZoom, utill tooltip#dataZoom support \"single axis\r\n\t            // selection\" some day, which might need \"adapt to data extent on the\r\n\t            // otherAxis\", which is disabled by filterMode-'empty'.\r\n\t            var otherAxisModel = this.getOtherAxisModel();\r\n\t            if (dataZoomModel.get('$fromToolbox')\r\n\t                && otherAxisModel\r\n\t                && otherAxisModel.get('type') === 'category'\r\n\t            ) {\r\n\t                filterMode = 'empty';\r\n\t            }\r\n\r\n\t            // Process series data\r\n\t            each(seriesModels, function (seriesModel) {\r\n\t                var seriesData = seriesModel.getData();\r\n\r\n\t                seriesData && each(seriesModel.coordDimToDataDim(axisDim), function (dim) {\r\n\t                    if (filterMode === 'empty') {\r\n\t                        seriesModel.setData(\r\n\t                            seriesData.map(dim, function (value) {\r\n\t                                return !isInWindow(value) ? NaN : value;\r\n\t                            })\r\n\t                        );\r\n\t                    }\r\n\t                    else {\r\n\t                        seriesData.filterSelf(dim, isInWindow);\r\n\t                    }\r\n\t                });\r\n\t            });\r\n\r\n\t            function isInWindow(value) {\r\n\t                return value >= valueWindow[0] && value <= valueWindow[1];\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    function calculateDataExtent(axisDim, seriesModels) {\r\n\t        var dataExtent = [Infinity, -Infinity];\r\n\r\n\t        each(seriesModels, function (seriesModel) {\r\n\t            var seriesData = seriesModel.getData();\r\n\t            if (seriesData) {\r\n\t                each(seriesModel.coordDimToDataDim(axisDim), function (dim) {\r\n\t                    var seriesExtent = seriesData.getDataExtent(dim);\r\n\t                    seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);\r\n\t                    seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);\r\n\t                });\r\n\t            }\r\n\t        }, this);\r\n\r\n\t        return dataExtent;\r\n\t    }\r\n\r\n\t    function calculateDataWindow(opt, dataExtent, axisProxy) {\r\n\t        var axisModel = axisProxy.getAxisModel();\r\n\t        var scale = axisModel.axis.scale;\r\n\t        var percentExtent = [0, 100];\r\n\t        var percentWindow = [\r\n\t            opt.start,\r\n\t            opt.end\r\n\t        ];\r\n\t        var valueWindow = [];\r\n\r\n\t        // In percent range is used and axis min/max/scale is set,\r\n\t        // window should be based on min/max/0, but should not be\r\n\t        // based on the extent of filtered data.\r\n\t        dataExtent = dataExtent.slice();\r\n\t        fixExtendByAxis(dataExtent, axisModel, scale);\r\n\r\n\t        each(['startValue', 'endValue'], function (prop) {\r\n\t            valueWindow.push(\r\n\t                opt[prop] != null\r\n\t                    ? scale.parse(opt[prop])\r\n\t                    : null\r\n\t            );\r\n\t        });\r\n\r\n\t        // Normalize bound.\r\n\t        each([0, 1], function (idx) {\r\n\t            var boundValue = valueWindow[idx];\r\n\t            var boundPercent = percentWindow[idx];\r\n\r\n\t            // start/end has higher priority over startValue/endValue,\r\n\t            // because start/end can be consistent among different type\r\n\t            // of axis but startValue/endValue not.\r\n\r\n\t            if (boundPercent != null || boundValue == null) {\r\n\t                if (boundPercent == null) {\r\n\t                    boundPercent = percentExtent[idx];\r\n\t                }\r\n\t                // Use scale.parse to math round for category or time axis.\r\n\t                boundValue = scale.parse(numberUtil.linearMap(\r\n\t                    boundPercent, percentExtent, dataExtent, true\r\n\t                ));\r\n\t            }\r\n\t            else { // boundPercent == null && boundValue != null\r\n\t                boundPercent = numberUtil.linearMap(\r\n\t                    boundValue, dataExtent, percentExtent, true\r\n\t                );\r\n\t            }\r\n\t            // valueWindow[idx] = round(boundValue);\r\n\t            // percentWindow[idx] = round(boundPercent);\r\n\t            valueWindow[idx] = boundValue;\r\n\t            percentWindow[idx] = boundPercent;\r\n\t        });\r\n\r\n\t        return {\r\n\t            valueWindow: asc(valueWindow),\r\n\t            percentWindow: asc(percentWindow)\r\n\t        };\r\n\t    }\r\n\r\n\t    function fixExtendByAxis(dataExtent, axisModel, scale) {\r\n\t        each(['min', 'max'], function (minMax, index) {\r\n\t            var axisMax = axisModel.get(minMax, true);\r\n\t            // Consider 'dataMin', 'dataMax'\r\n\t            if (axisMax != null && (axisMax + '').toLowerCase() !== 'data' + minMax) {\r\n\t                dataExtent[index] = scale.parse(axisMax);\r\n\t            }\r\n\t        });\r\n\r\n\t        if (!axisModel.get('scale', true)) {\r\n\t            dataExtent[0] > 0 && (dataExtent[0] = 0);\r\n\t            dataExtent[1] < 0 && (dataExtent[1] = 0);\r\n\t        }\r\n\r\n\t        return dataExtent;\r\n\t    }\r\n\r\n\t    function setAxisModel(axisProxy, isRestore) {\r\n\t        var axisModel = axisProxy.getAxisModel();\r\n\r\n\t        var percentWindow = axisProxy._percentWindow;\r\n\t        var valueWindow = axisProxy._valueWindow;\r\n\r\n\t        if (!percentWindow) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var isFull = isRestore || (percentWindow[0] === 0 && percentWindow[1] === 100);\r\n\t        // [0, 500]: arbitrary value, guess axis extent.\r\n\t        var precision = !isRestore && numberUtil.getPixelPrecision(valueWindow, [0, 500]);\r\n\t        // toFixed() digits argument must be between 0 and 20\r\n\t        var invalidPrecision = !isRestore && !(precision < 20 && precision >= 0);\r\n\r\n\t        var useOrigin = isRestore || isFull || invalidPrecision;\r\n\r\n\t        axisModel.setRange && axisModel.setRange(\r\n\t            useOrigin ? null : +valueWindow[0].toFixed(precision),\r\n\t            useOrigin ? null : +valueWindow[1].toFixed(precision)\r\n\t        );\r\n\t    }\r\n\r\n\t    module.exports = AxisProxy;\r\n\r\n\r\n\r\n/***/ },\r\n/* 322 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var ComponentView = __webpack_require__(29);\r\n\r\n\t    module.exports = ComponentView.extend({\r\n\r\n\t        type: 'dataZoom',\r\n\r\n\t        render: function (dataZoomModel, ecModel, api, payload) {\r\n\t            this.dataZoomModel = dataZoomModel;\r\n\t            this.ecModel = ecModel;\r\n\t            this.api = api;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Find the first target coordinate system.\r\n\t         *\r\n\t         * @protected\r\n\t         * @return {Object} {\r\n\t         *                   cartesians: [\r\n\t         *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},\r\n\t         *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},\r\n\t         *                       ...\r\n\t         *                   ],  // cartesians must not be null/undefined.\r\n\t         *                   polars: [\r\n\t         *                       {model: coord0, axisModels: [axis4], coordIndex: 0},\r\n\t         *                       ...\r\n\t         *                   ],  // polars must not be null/undefined.\r\n\t         *                   axisModels: [axis0, axis1, axis2, axis3, axis4]\r\n\t         *                       // axisModels must not be null/undefined.\r\n\t         *                  }\r\n\t         */\r\n\t        getTargetInfo: function () {\r\n\t            var dataZoomModel = this.dataZoomModel;\r\n\t            var ecModel = this.ecModel;\r\n\t            var cartesians = [];\r\n\t            var polars = [];\r\n\t            var axisModels = [];\r\n\r\n\t            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {\r\n\t                var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);\r\n\t                if (axisModel) {\r\n\t                    axisModels.push(axisModel);\r\n\t                    var coordSysName;\r\n\t                    var axisName = dimNames.axis;\r\n\r\n\t                    if (axisName === 'xAxis' || axisName === 'yAxis') {\r\n\t                        coordSysName = 'grid';\r\n\t                    }\r\n\t                    else if (axisName === 'angleAxis' || axisName === 'radiusAxis') {\r\n\t                        coordSysName = 'polar';\r\n\t                    }\r\n\r\n\t                    var coordModel = coordSysName\r\n\t                        ? ecModel.queryComponents({\r\n\t                            mainType: coordSysName,\r\n\t                            index: axisModel.get(coordSysName + 'Index'),\r\n\t                            id: axisModel.get(coordSysName + 'Id')\r\n\t                        })[0]\r\n\t                        : null;\r\n\r\n\t                    if (coordModel != null) {\r\n\t                        save(\r\n\t                            coordModel,\r\n\t                            axisModel,\r\n\t                            coordSysName === 'grid' ? cartesians : polars,\r\n\t                            coordModel.componentIndex\r\n\t                        );\r\n\t                    }\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            function save(coordModel, axisModel, store, coordIndex) {\r\n\t                var item;\r\n\t                for (var i = 0; i < store.length; i++) {\r\n\t                    if (store[i].model === coordModel) {\r\n\t                        item = store[i];\r\n\t                        break;\r\n\t                    }\r\n\t                }\r\n\t                if (!item) {\r\n\t                    store.push(item = {\r\n\t                        model: coordModel, axisModels: [], coordIndex: coordIndex\r\n\t                    });\r\n\t                }\r\n\t                item.axisModels.push(axisModel);\r\n\t            }\r\n\r\n\t            return {\r\n\t                cartesians: cartesians,\r\n\t                polars: polars,\r\n\t                axisModels: axisModels\r\n\t            };\r\n\t        }\r\n\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 323 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Data zoom model\r\n\t */\r\n\r\n\r\n\t    var DataZoomModel = __webpack_require__(319);\r\n\r\n\t    var SliderZoomModel = DataZoomModel.extend({\r\n\r\n\t        type: 'dataZoom.slider',\r\n\r\n\t        layoutMode: 'box',\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        defaultOption: {\r\n\t            show: true,\r\n\r\n\t            // ph => placeholder. Using placehoder here because\r\n\t            // deault value can only be drived in view stage.\r\n\t            right: 'ph',  // Default align to grid rect.\r\n\t            top: 'ph',    // Default align to grid rect.\r\n\t            width: 'ph',  // Default align to grid rect.\r\n\t            height: 'ph', // Default align to grid rect.\r\n\t            left: null,   // Default align to grid rect.\r\n\t            bottom: null, // Default align to grid rect.\r\n\r\n\t            backgroundColor: 'rgba(47,69,84,0)',    // Background of slider zoom component.\r\n\t            // dataBackgroundColor: '#ddd',         // Background coor of data shadow and border of box,\r\n\t                                                    // highest priority, remain for compatibility of\r\n\t                                                    // previous version, but not recommended any more.\r\n\t            dataBackground: {\r\n\t                lineStyle: {\r\n\t                    color: '#2f4554',\r\n\t                    width: 0.5,\r\n\t                    opacity: 0.3\r\n\t                },\r\n\t                areaStyle: {\r\n\t                    color: 'rgba(47,69,84,0.3)',\r\n\t                    opacity: 0.3\r\n\t                }\r\n\t            },\r\n\t            borderColor: '#ddd',                    // border color of the box. For compatibility,\r\n\t                                                    // if dataBackgroundColor is set, borderColor\r\n\t                                                    // is ignored.\r\n\r\n\t            fillerColor: 'rgba(167,183,204,0.4)',     // Color of selected area.\r\n\t            // handleColor: 'rgba(89,170,216,0.95)',     // Color of handle.\r\n\t            // handleIcon: 'path://M4.9,17.8c0-1.4,4.5-10.5,5.5-12.4c0-0.1,0.6-1.1,0.9-1.1c0.4,0,0.9,1,0.9,1.1c1.1,2.2,5.4,11,5.4,12.4v17.8c0,1.5-0.6,2.1-1.3,2.1H6.1c-0.7,0-1.3-0.6-1.3-2.1V17.8z',\r\n\t            handleIcon: 'M8.2,13.6V3.9H6.3v9.7H3.1v14.9h3.3v9.7h1.8v-9.7h3.3V13.6H8.2z M9.7,24.4H4.8v-1.4h4.9V24.4z M9.7,19.1H4.8v-1.4h4.9V19.1z',\r\n\t            // Percent of the slider height\r\n\t            handleSize: '100%',\r\n\r\n\t            handleStyle: {\r\n\t                color: '#a7b7cc'\r\n\t            },\r\n\r\n\t            labelPrecision: null,\r\n\t            labelFormatter: null,\r\n\t            showDetail: true,\r\n\t            showDataShadow: 'auto',                 // Default auto decision.\r\n\t            realtime: true,\r\n\t            zoomLock: false,                        // Whether disable zoom.\r\n\t            textStyle: {\r\n\t                color: '#333'\r\n\t            }\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    module.exports = SliderZoomModel;\r\n\r\n\r\n\r\n/***/ },\r\n/* 324 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var throttle = __webpack_require__(309);\r\n\t    var DataZoomView = __webpack_require__(322);\r\n\t    var Rect = graphic.Rect;\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var linearMap = numberUtil.linearMap;\r\n\t    var layout = __webpack_require__(21);\r\n\t    var sliderMove = __webpack_require__(325);\r\n\t    var asc = numberUtil.asc;\r\n\t    var bind = zrUtil.bind;\r\n\t    // var mathMax = Math.max;\r\n\t    var each = zrUtil.each;\r\n\r\n\t    // Constants\r\n\t    var DEFAULT_LOCATION_EDGE_GAP = 7;\r\n\t    var DEFAULT_FRAME_BORDER_WIDTH = 1;\r\n\t    var DEFAULT_FILLER_SIZE = 30;\r\n\t    var HORIZONTAL = 'horizontal';\r\n\t    var VERTICAL = 'vertical';\r\n\t    var LABEL_GAP = 5;\r\n\t    var SHOW_DATA_SHADOW_SERIES_TYPE = ['line', 'bar', 'candlestick', 'scatter'];\r\n\r\n\t    var SliderZoomView = DataZoomView.extend({\r\n\r\n\t        type: 'dataZoom.slider',\r\n\r\n\t        init: function (ecModel, api) {\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {Object}\r\n\t             */\r\n\t            this._displayables = {};\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {string}\r\n\t             */\r\n\t            this._orient;\r\n\r\n\t            /**\r\n\t             * [0, 100]\r\n\t             * @private\r\n\t             */\r\n\t            this._range;\r\n\r\n\t            /**\r\n\t             * [coord of the first handle, coord of the second handle]\r\n\t             * @private\r\n\t             */\r\n\t            this._handleEnds;\r\n\r\n\t            /**\r\n\t             * [length, thick]\r\n\t             * @private\r\n\t             * @type {Array.<number>}\r\n\t             */\r\n\t            this._size;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {number}\r\n\t             */\r\n\t            this._handleWidth;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {number}\r\n\t             */\r\n\t            this._handleHeight;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._location;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._dragging;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._dataShadowInfo;\r\n\r\n\t            this.api = api;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        render: function (dataZoomModel, ecModel, api, payload) {\r\n\t            SliderZoomView.superApply(this, 'render', arguments);\r\n\r\n\t            throttle.createOrUpdate(\r\n\t                this,\r\n\t                '_dispatchZoomAction',\r\n\t                this.dataZoomModel.get('throttle'),\r\n\t                'fixRate'\r\n\t            );\r\n\r\n\t            this._orient = dataZoomModel.get('orient');\r\n\r\n\t            if (this.dataZoomModel.get('show') === false) {\r\n\t                this.group.removeAll();\r\n\t                return;\r\n\t            }\r\n\r\n\t            // Notice: this._resetInterval() should not be executed when payload.type\r\n\t            // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'\r\n\t            // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,\r\n\t            if (!payload || payload.type !== 'dataZoom' || payload.from !== this.uid) {\r\n\t                this._buildView();\r\n\t            }\r\n\r\n\t            this._updateView();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        remove: function () {\r\n\t            SliderZoomView.superApply(this, 'remove', arguments);\r\n\t            throttle.clear(this, '_dispatchZoomAction');\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        dispose: function () {\r\n\t            SliderZoomView.superApply(this, 'dispose', arguments);\r\n\t            throttle.clear(this, '_dispatchZoomAction');\r\n\t        },\r\n\r\n\t        _buildView: function () {\r\n\t            var thisGroup = this.group;\r\n\r\n\t            thisGroup.removeAll();\r\n\r\n\t            this._resetLocation();\r\n\t            this._resetInterval();\r\n\r\n\t            var barGroup = this._displayables.barGroup = new graphic.Group();\r\n\r\n\t            this._renderBackground();\r\n\r\n\t            this._renderHandle();\r\n\r\n\t            this._renderDataShadow();\r\n\r\n\t            thisGroup.add(barGroup);\r\n\r\n\t            this._positionGroup();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _resetLocation: function () {\r\n\t            var dataZoomModel = this.dataZoomModel;\r\n\t            var api = this.api;\r\n\r\n\t            // If some of x/y/width/height are not specified,\r\n\t            // auto-adapt according to target grid.\r\n\t            var coordRect = this._findCoordRect();\r\n\t            var ecSize = {width: api.getWidth(), height: api.getHeight()};\r\n\t            // Default align by coordinate system rect.\r\n\t            var positionInfo = this._orient === HORIZONTAL\r\n\t                ? {\r\n\t                    // Why using 'right', because right should be used in vertical,\r\n\t                    // and it is better to be consistent for dealing with position param merge.\r\n\t                    right: ecSize.width - coordRect.x - coordRect.width,\r\n\t                    top: (ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP),\r\n\t                    width: coordRect.width,\r\n\t                    height: DEFAULT_FILLER_SIZE\r\n\t                }\r\n\t                : { // vertical\r\n\t                    right: DEFAULT_LOCATION_EDGE_GAP,\r\n\t                    top: coordRect.y,\r\n\t                    width: DEFAULT_FILLER_SIZE,\r\n\t                    height: coordRect.height\r\n\t                };\r\n\r\n\t            // Do not write back to option and replace value 'ph', because\r\n\t            // the 'ph' value should be recalculated when resize.\r\n\t            var layoutParams = layout.getLayoutParams(dataZoomModel.option);\r\n\r\n\t            // Replace the placeholder value.\r\n\t            zrUtil.each(['right', 'top', 'width', 'height'], function (name) {\r\n\t                if (layoutParams[name] === 'ph') {\r\n\t                    layoutParams[name] = positionInfo[name];\r\n\t                }\r\n\t            });\r\n\r\n\t            var layoutRect = layout.getLayoutRect(\r\n\t                layoutParams,\r\n\t                ecSize,\r\n\t                dataZoomModel.padding\r\n\t            );\r\n\r\n\t            this._location = {x: layoutRect.x, y: layoutRect.y};\r\n\t            this._size = [layoutRect.width, layoutRect.height];\r\n\t            this._orient === VERTICAL && this._size.reverse();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _positionGroup: function () {\r\n\t            var thisGroup = this.group;\r\n\t            var location = this._location;\r\n\t            var orient = this._orient;\r\n\r\n\t            // Just use the first axis to determine mapping.\r\n\t            var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();\r\n\t            var inverse = targetAxisModel && targetAxisModel.get('inverse');\r\n\r\n\t            var barGroup = this._displayables.barGroup;\r\n\t            var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse;\r\n\r\n\t            // Transform barGroup.\r\n\t            barGroup.attr(\r\n\t                (orient === HORIZONTAL && !inverse)\r\n\t                ? {scale: otherAxisInverse ? [1, 1] : [1, -1]}\r\n\t                : (orient === HORIZONTAL && inverse)\r\n\t                ? {scale: otherAxisInverse ? [-1, 1] : [-1, -1]}\r\n\t                : (orient === VERTICAL && !inverse)\r\n\t                ? {scale: otherAxisInverse ? [1, -1] : [1, 1], rotation: Math.PI / 2}\r\n\t                // Dont use Math.PI, considering shadow direction.\r\n\t                : {scale: otherAxisInverse ? [-1, -1] : [-1, 1], rotation: Math.PI / 2}\r\n\t            );\r\n\r\n\t            // Position barGroup\r\n\t            var rect = thisGroup.getBoundingRect([barGroup]);\r\n\t            thisGroup.attr('position', [location.x - rect.x, location.y - rect.y]);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _getViewExtent: function () {\r\n\t            return [0, this._size[0]];\r\n\t        },\r\n\r\n\t        _renderBackground : function () {\r\n\t            var dataZoomModel = this.dataZoomModel;\r\n\t            var size = this._size;\r\n\r\n\t            this._displayables.barGroup.add(new Rect({\r\n\t                silent: true,\r\n\t                shape: {\r\n\t                    x: 0, y: 0, width: size[0], height: size[1]\r\n\t                },\r\n\t                style: {\r\n\t                    fill: dataZoomModel.get('backgroundColor')\r\n\t                },\r\n\t                z2: -40\r\n\t            }));\r\n\t        },\r\n\r\n\t        _renderDataShadow: function () {\r\n\t            var info = this._dataShadowInfo = this._prepareDataShadowInfo();\r\n\r\n\t            if (!info) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var size = this._size;\r\n\t            var seriesModel = info.series;\r\n\t            var data = seriesModel.getRawData();\r\n\t            var otherDim = seriesModel.getShadowDim\r\n\t                ? seriesModel.getShadowDim() // @see candlestick\r\n\t                : info.otherDim;\r\n\r\n\t            var otherDataExtent = data.getDataExtent(otherDim);\r\n\t            // Nice extent.\r\n\t            var otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;\r\n\t            otherDataExtent = [\r\n\t                otherDataExtent[0] - otherOffset,\r\n\t                otherDataExtent[1] + otherOffset\r\n\t            ];\r\n\t            var otherShadowExtent = [0, size[1]];\r\n\r\n\t            var thisShadowExtent = [0, size[0]];\r\n\r\n\t            var areaPoints = [[size[0], 0], [0, 0]];\r\n\t            var linePoints = [];\r\n\t            var step = thisShadowExtent[1] / (data.count() - 1);\r\n\t            var thisCoord = 0;\r\n\r\n\t            // Optimize for large data shadow\r\n\t            var stride = Math.round(data.count() / size[0]);\r\n\t            var lastIsEmpty;\r\n\t            data.each([otherDim], function (value, index) {\r\n\t                if (stride > 0 && (index % stride)) {\r\n\t                    thisCoord += step;\r\n\t                    return;\r\n\t                }\r\n\r\n\t                // FIXME\r\n\t                // Should consider axis.min/axis.max when drawing dataShadow.\r\n\r\n\t                // FIXME\r\n\t                // 应该使用统一的空判断？还是在list里进行空判断？\r\n\t                var isEmpty = value == null || isNaN(value) || value === '';\r\n\t                // See #4235.\r\n\t                var otherCoord = isEmpty\r\n\t                    ? 0 : linearMap(value, otherDataExtent, otherShadowExtent, true);\r\n\r\n\t                // Attempt to draw data shadow precisely when there are empty value.\r\n\t                if (isEmpty && !lastIsEmpty && index) {\r\n\t                    areaPoints.push([areaPoints[areaPoints.length - 1][0], 0]);\r\n\t                    linePoints.push([linePoints[linePoints.length - 1][0], 0]);\r\n\t                }\r\n\t                else if (!isEmpty && lastIsEmpty) {\r\n\t                    areaPoints.push([thisCoord, 0]);\r\n\t                    linePoints.push([thisCoord, 0]);\r\n\t                }\r\n\r\n\t                areaPoints.push([thisCoord, otherCoord]);\r\n\t                linePoints.push([thisCoord, otherCoord]);\r\n\r\n\t                thisCoord += step;\r\n\t                lastIsEmpty = isEmpty;\r\n\t            });\r\n\r\n\t            var dataZoomModel = this.dataZoomModel;\r\n\t            // var dataBackgroundModel = dataZoomModel.getModel('dataBackground');\r\n\t            this._displayables.barGroup.add(new graphic.Polygon({\r\n\t                shape: {points: areaPoints},\r\n\t                style: zrUtil.defaults(\r\n\t                    {fill: dataZoomModel.get('dataBackgroundColor')},\r\n\t                    dataZoomModel.getModel('dataBackground.areaStyle').getAreaStyle()\r\n\t                ),\r\n\t                silent: true,\r\n\t                z2: -20\r\n\t            }));\r\n\t            this._displayables.barGroup.add(new graphic.Polyline({\r\n\t                shape: {points: linePoints},\r\n\t                style: dataZoomModel.getModel('dataBackground.lineStyle').getLineStyle(),\r\n\t                silent: true,\r\n\t                z2: -19\r\n\t            }));\r\n\t        },\r\n\r\n\t        _prepareDataShadowInfo: function () {\r\n\t            var dataZoomModel = this.dataZoomModel;\r\n\t            var showDataShadow = dataZoomModel.get('showDataShadow');\r\n\r\n\t            if (showDataShadow === false) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            // Find a representative series.\r\n\t            var result;\r\n\t            var ecModel = this.ecModel;\r\n\r\n\t            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {\r\n\t                var seriesModels = dataZoomModel\r\n\t                    .getAxisProxy(dimNames.name, axisIndex)\r\n\t                    .getTargetSeriesModels();\r\n\r\n\t                zrUtil.each(seriesModels, function (seriesModel) {\r\n\t                    if (result) {\r\n\t                        return;\r\n\t                    }\r\n\r\n\t                    if (showDataShadow !== true && zrUtil.indexOf(\r\n\t                            SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get('type')\r\n\t                        ) < 0\r\n\t                    ) {\r\n\t                        return;\r\n\t                    }\r\n\r\n\t                    var otherDim = getOtherDim(dimNames.name);\r\n\r\n\t                    var thisAxis = ecModel.getComponent(dimNames.axis, axisIndex).axis;\r\n\r\n\t                    result = {\r\n\t                        thisAxis: thisAxis,\r\n\t                        series: seriesModel,\r\n\t                        thisDim: dimNames.name,\r\n\t                        otherDim: otherDim,\r\n\t                        otherAxisInverse: seriesModel\r\n\t                            .coordinateSystem.getOtherAxis(thisAxis).inverse\r\n\t                    };\r\n\r\n\t                }, this);\r\n\r\n\t            }, this);\r\n\r\n\t            return result;\r\n\t        },\r\n\r\n\t        _renderHandle: function () {\r\n\t            var displaybles = this._displayables;\r\n\t            var handles = displaybles.handles = [];\r\n\t            var handleLabels = displaybles.handleLabels = [];\r\n\t            var barGroup = this._displayables.barGroup;\r\n\t            var size = this._size;\r\n\t            var dataZoomModel = this.dataZoomModel;\r\n\r\n\t            barGroup.add(displaybles.filler = new Rect({\r\n\t                draggable: true,\r\n\t                cursor: 'move',\r\n\t                drift: bind(this._onDragMove, this, 'all'),\r\n\t                ondragstart: bind(this._showDataInfo, this, true),\r\n\t                ondragend: bind(this._onDragEnd, this),\r\n\t                onmouseover: bind(this._showDataInfo, this, true),\r\n\t                onmouseout: bind(this._showDataInfo, this, false),\r\n\t                style: {\r\n\t                    fill: dataZoomModel.get('fillerColor'),\r\n\t                    textPosition : 'inside'\r\n\t                }\r\n\t            }));\r\n\r\n\t            // Frame border.\r\n\t            barGroup.add(new Rect(graphic.subPixelOptimizeRect({\r\n\t                silent: true,\r\n\t                shape: {\r\n\t                    x: 0,\r\n\t                    y: 0,\r\n\t                    width: size[0],\r\n\t                    height: size[1]\r\n\t                },\r\n\t                style: {\r\n\t                    stroke: dataZoomModel.get('dataBackgroundColor')\r\n\t                        || dataZoomModel.get('borderColor'),\r\n\t                    lineWidth: DEFAULT_FRAME_BORDER_WIDTH,\r\n\t                    fill: 'rgba(0,0,0,0)'\r\n\t                }\r\n\t            })));\r\n\r\n\t            var iconStr = dataZoomModel.get('handleIcon');\r\n\t            each([0, 1], function (handleIndex) {\r\n\t                var path = graphic.makePath(iconStr, {\r\n\t                    style: {\r\n\t                        strokeNoScale: true\r\n\t                    },\r\n\t                    rectHover: true,\r\n\t                    cursor: this._orient === 'vertical' ? 'ns-resize' : 'ew-resize',\r\n\t                    draggable: true,\r\n\t                    drift: bind(this._onDragMove, this, handleIndex),\r\n\t                    ondragend: bind(this._onDragEnd, this),\r\n\t                    onmouseover: bind(this._showDataInfo, this, true),\r\n\t                    onmouseout: bind(this._showDataInfo, this, false)\r\n\t                }, {\r\n\t                    x: -0.5,\r\n\t                    y: 0,\r\n\t                    width: 1,\r\n\t                    height: 1\r\n\t                }, 'center');\r\n\r\n\t                var bRect = path.getBoundingRect();\r\n\t                this._handleHeight = numberUtil.parsePercent(dataZoomModel.get('handleSize'), this._size[1]);\r\n\t                this._handleWidth = bRect.width / bRect.height * this._handleHeight;\r\n\r\n\t                path.setStyle(dataZoomModel.getModel('handleStyle').getItemStyle());\r\n\t                var handleColor = dataZoomModel.get('handleColor');\r\n\t                // Compatitable with previous version\r\n\t                if (handleColor != null) {\r\n\t                    path.style.fill = handleColor;\r\n\t                }\r\n\r\n\t                barGroup.add(handles[handleIndex] = path);\r\n\r\n\t                var textStyleModel = dataZoomModel.textStyleModel;\r\n\r\n\t                this.group.add(\r\n\t                    handleLabels[handleIndex] = new graphic.Text({\r\n\t                    silent: true,\r\n\t                    invisible: true,\r\n\t                    style: {\r\n\t                        x: 0, y: 0, text: '',\r\n\t                        textVerticalAlign: 'middle',\r\n\t                        textAlign: 'center',\r\n\t                        fill: textStyleModel.getTextColor(),\r\n\t                        textFont: textStyleModel.getFont()\r\n\t                    },\r\n\t                    z2: 10\r\n\t                }));\r\n\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _resetInterval: function () {\r\n\t            var range = this._range = this.dataZoomModel.getPercentRange();\r\n\t            var viewExtent = this._getViewExtent();\r\n\r\n\t            this._handleEnds = [\r\n\t                linearMap(range[0], [0, 100], viewExtent, true),\r\n\t                linearMap(range[1], [0, 100], viewExtent, true)\r\n\t            ];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @param {(number|string)} handleIndex 0 or 1 or 'all'\r\n\t         * @param {number} dx\r\n\t         * @param {number} dy\r\n\t         */\r\n\t        _updateInterval: function (handleIndex, delta) {\r\n\t            var handleEnds = this._handleEnds;\r\n\t            var viewExtend = this._getViewExtent();\r\n\r\n\t            sliderMove(\r\n\t                delta,\r\n\t                handleEnds,\r\n\t                viewExtend,\r\n\t                (handleIndex === 'all' || this.dataZoomModel.get('zoomLock'))\r\n\t                    ? 'rigid' : 'cross',\r\n\t                handleIndex\r\n\t            );\r\n\r\n\t            this._range = asc([\r\n\t                linearMap(handleEnds[0], viewExtend, [0, 100], true),\r\n\t                linearMap(handleEnds[1], viewExtend, [0, 100], true)\r\n\t            ]);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _updateView: function () {\r\n\t            var displaybles = this._displayables;\r\n\t            var handleEnds = this._handleEnds;\r\n\t            var handleInterval = asc(handleEnds.slice());\r\n\t            var size = this._size;\r\n\r\n\t            each([0, 1], function (handleIndex) {\r\n\t                // Handles\r\n\t                var handle = displaybles.handles[handleIndex];\r\n\t                var handleHeight = this._handleHeight;\r\n\t                handle.attr({\r\n\t                    scale: [handleHeight, handleHeight],\r\n\t                    position: [handleEnds[handleIndex], size[1] / 2 - handleHeight / 2]\r\n\t                });\r\n\t            }, this);\r\n\r\n\t            // Filler\r\n\t            displaybles.filler.setShape({\r\n\t                x: handleInterval[0],\r\n\t                y: 0,\r\n\t                width: handleInterval[1] - handleInterval[0],\r\n\t                height: size[1]\r\n\t            });\r\n\r\n\t            this._updateDataInfo();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _updateDataInfo: function () {\r\n\t            var dataZoomModel = this.dataZoomModel;\r\n\t            var displaybles = this._displayables;\r\n\t            var handleLabels = displaybles.handleLabels;\r\n\t            var orient = this._orient;\r\n\t            var labelTexts = ['', ''];\r\n\r\n\t            // FIXME\r\n\t            // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）\r\n\t            if (dataZoomModel.get('showDetail')) {\r\n\t                var dataInterval;\r\n\t                var axis;\r\n\t                dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {\r\n\t                    // Using dataInterval of the first axis.\r\n\t                    if (!dataInterval) {\r\n\t                        dataInterval = dataZoomModel\r\n\t                            .getAxisProxy(dimNames.name, axisIndex)\r\n\t                            .getDataValueWindow();\r\n\t                        axis = this.ecModel.getComponent(dimNames.axis, axisIndex).axis;\r\n\t                    }\r\n\t                }, this);\r\n\r\n\t                if (dataInterval) {\r\n\t                    labelTexts = [\r\n\t                        this._formatLabel(dataInterval[0], axis),\r\n\t                        this._formatLabel(dataInterval[1], axis)\r\n\t                    ];\r\n\t                }\r\n\t            }\r\n\r\n\t            var orderedHandleEnds = asc(this._handleEnds.slice());\r\n\r\n\t            setLabel.call(this, 0);\r\n\t            setLabel.call(this, 1);\r\n\r\n\t            function setLabel(handleIndex) {\r\n\t                // Label\r\n\t                // Text should not transform by barGroup.\r\n\t                // Ignore handlers transform\r\n\t                var barTransform = graphic.getTransform(\r\n\t                    displaybles.handles[handleIndex].parent, this.group\r\n\t                );\r\n\t                var direction = graphic.transformDirection(\r\n\t                    handleIndex === 0 ? 'right' : 'left', barTransform\r\n\t                );\r\n\t                var offset = this._handleWidth / 2 + LABEL_GAP;\r\n\t                var textPoint = graphic.applyTransform(\r\n\t                    [\r\n\t                        orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset),\r\n\t                        this._size[1] / 2\r\n\t                    ],\r\n\t                    barTransform\r\n\t                );\r\n\t                handleLabels[handleIndex].setStyle({\r\n\t                    x: textPoint[0],\r\n\t                    y: textPoint[1],\r\n\t                    textVerticalAlign: orient === HORIZONTAL ? 'middle' : direction,\r\n\t                    textAlign: orient === HORIZONTAL ? direction : 'center',\r\n\t                    text: labelTexts[handleIndex]\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _formatLabel: function (value, axis) {\r\n\t            var dataZoomModel = this.dataZoomModel;\r\n\t            var labelFormatter = dataZoomModel.get('labelFormatter');\r\n\r\n\t            var labelPrecision = dataZoomModel.get('labelPrecision');\r\n\t            if (labelPrecision == null || labelPrecision === 'auto') {\r\n\t                labelPrecision = axis.getPixelPrecision();\r\n\t            }\r\n\r\n\t            var valueStr = (value == null && isNaN(value))\r\n\t                ? ''\r\n\t                // FIXME Glue code\r\n\t                : (axis.type === 'category' || axis.type === 'time')\r\n\t                    ? axis.scale.getLabel(Math.round(value))\r\n\t                    // param of toFixed should less then 20.\r\n\t                    : value.toFixed(Math.min(labelPrecision, 20));\r\n\r\n\t            return zrUtil.isFunction(labelFormatter)\r\n\t                ? labelFormatter(value, valueStr)\r\n\t                : zrUtil.isString(labelFormatter)\r\n\t                ? labelFormatter.replace('{value}', valueStr)\r\n\t                : valueStr;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @param {boolean} showOrHide true: show, false: hide\r\n\t         */\r\n\t        _showDataInfo: function (showOrHide) {\r\n\t            // Always show when drgging.\r\n\t            showOrHide = this._dragging || showOrHide;\r\n\r\n\t            var handleLabels = this._displayables.handleLabels;\r\n\t            handleLabels[0].attr('invisible', !showOrHide);\r\n\t            handleLabels[1].attr('invisible', !showOrHide);\r\n\t        },\r\n\r\n\t        _onDragMove: function (handleIndex, dx, dy) {\r\n\t            this._dragging = true;\r\n\r\n\t            // Transform dx, dy to bar coordination.\r\n\t            var vertex = this._applyBarTransform([dx, dy], true);\r\n\r\n\t            this._updateInterval(handleIndex, vertex[0]);\r\n\t            this._updateView();\r\n\r\n\t            if (this.dataZoomModel.get('realtime')) {\r\n\t                this._dispatchZoomAction();\r\n\t            }\r\n\t        },\r\n\r\n\t        _onDragEnd: function () {\r\n\t            this._dragging = false;\r\n\t            this._showDataInfo(false);\r\n\t            this._dispatchZoomAction();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * This action will be throttled.\r\n\t         * @private\r\n\t         */\r\n\t        _dispatchZoomAction: function () {\r\n\t            var range = this._range;\r\n\r\n\t            this.api.dispatchAction({\r\n\t                type: 'dataZoom',\r\n\t                from: this.uid,\r\n\t                dataZoomId: this.dataZoomModel.id,\r\n\t                start: range[0],\r\n\t                end: range[1]\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _applyBarTransform: function (vertex, inverse) {\r\n\t            var barTransform = this._displayables.barGroup.getLocalTransform();\r\n\t            return graphic.applyTransform(vertex, barTransform, inverse);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _findCoordRect: function () {\r\n\t            // Find the grid coresponding to the first axis referred by dataZoom.\r\n\t            var targetInfo = this.getTargetInfo();\r\n\r\n\t            // FIXME\r\n\t            // 判断是catesian还是polar\r\n\t            var rect;\r\n\t            if (targetInfo.cartesians.length) {\r\n\t                rect = targetInfo.cartesians[0].model.coordinateSystem.getRect();\r\n\t            }\r\n\t            else { // Polar\r\n\t                // FIXME\r\n\t                // 暂时随便写的\r\n\t                var width = this.api.getWidth();\r\n\t                var height = this.api.getHeight();\r\n\t                rect = {\r\n\t                    x: width * 0.2,\r\n\t                    y: height * 0.2,\r\n\t                    width: width * 0.6,\r\n\t                    height: height * 0.6\r\n\t                };\r\n\t            }\r\n\r\n\t            return rect;\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    function getOtherDim(thisDim) {\r\n\t        // FIXME\r\n\t        // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好\r\n\t        return thisDim === 'x' ? 'y' : 'x';\r\n\t    }\r\n\r\n\t    module.exports = SliderZoomView;\r\n\r\n\r\n\r\n/***/ },\r\n/* 325 */\r\n/***/ function(module, exports) {\r\n\r\n\t\r\n\r\n\t    /**\r\n\t     * Calculate slider move result.\r\n\t     *\r\n\t     * @param {number} delta Move length.\r\n\t     * @param {Array.<number>} handleEnds handleEnds[0] and be bigger then handleEnds[1].\r\n\t     *                                    handleEnds will be modified in this method.\r\n\t     * @param {Array.<number>} extent handleEnds is restricted by extent.\r\n\t     *                                extent[0] should less or equals than extent[1].\r\n\t     * @param {string} mode 'rigid': Math.abs(handleEnds[0] - handleEnds[1]) remain unchanged,\r\n\t     *                      'cross' handleEnds[0] can be bigger then handleEnds[1],\r\n\t     *                      'push' handleEnds[0] can not be bigger then handleEnds[1],\r\n\t     *                              when they touch, one push other.\r\n\t     * @param {number} handleIndex If mode is 'rigid', handleIndex is not required.\r\n\t     * @param {Array.<number>} The input handleEnds.\r\n\t     */\r\n\t    module.exports = function (delta, handleEnds, extent, mode, handleIndex) {\r\n\t        if (!delta) {\r\n\t            return handleEnds;\r\n\t        }\r\n\r\n\t        if (mode === 'rigid') {\r\n\t            delta = getRealDelta(delta, handleEnds, extent);\r\n\t            handleEnds[0] += delta;\r\n\t            handleEnds[1] += delta;\r\n\t        }\r\n\t        else {\r\n\t            delta = getRealDelta(delta, handleEnds[handleIndex], extent);\r\n\t            handleEnds[handleIndex] += delta;\r\n\r\n\t            if (mode === 'push' && handleEnds[0] > handleEnds[1]) {\r\n\t                handleEnds[1 - handleIndex] = handleEnds[handleIndex];\r\n\t            }\r\n\t        }\r\n\r\n\t        return handleEnds;\r\n\r\n\t        function getRealDelta(delta, handleEnds, extent) {\r\n\t            var handleMinMax = !handleEnds.length\r\n\t                ? [handleEnds, handleEnds]\r\n\t                : handleEnds.slice();\r\n\t            handleEnds[0] > handleEnds[1] && handleMinMax.reverse();\r\n\r\n\t            if (delta < 0 && handleMinMax[0] + delta < extent[0]) {\r\n\t                delta = extent[0] - handleMinMax[0];\r\n\t            }\r\n\t            if (delta > 0 && handleMinMax[1] + delta > extent[1]) {\r\n\t                delta = extent[1] - handleMinMax[1];\r\n\t            }\r\n\t            return delta;\r\n\t        }\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 326 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Data zoom model\r\n\t */\r\n\r\n\r\n\t    module.exports = __webpack_require__(319).extend({\r\n\r\n\t        type: 'dataZoom.inside',\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        defaultOption: {\r\n\t            silent: false,   // Whether disable this inside zoom.\r\n\t            zoomLock: false  // Whether disable zoom but only pan.\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 327 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var DataZoomView = __webpack_require__(322);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var sliderMove = __webpack_require__(325);\r\n\t    var roams = __webpack_require__(328);\r\n\t    var bind = zrUtil.bind;\r\n\r\n\t    var InsideZoomView = DataZoomView.extend({\r\n\r\n\t        type: 'dataZoom.inside',\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        init: function (ecModel, api) {\r\n\t            /**\r\n\t             * 'throttle' is used in this.dispatchAction, so we save range\r\n\t             * to avoid missing some 'pan' info.\r\n\t             * @private\r\n\t             * @type {Array.<number>}\r\n\t             */\r\n\t            this._range;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        render: function (dataZoomModel, ecModel, api, payload) {\r\n\t            InsideZoomView.superApply(this, 'render', arguments);\r\n\r\n\t            // Notice: origin this._range should be maintained, and should not be re-fetched\r\n\t            // from dataZoomModel when payload.type is 'dataZoom', otherwise 'pan' or 'zoom'\r\n\t            // info will be missed because of 'throttle' of this.dispatchAction.\r\n\t            if (roams.shouldRecordRange(payload, dataZoomModel.id)) {\r\n\t                this._range = dataZoomModel.getPercentRange();\r\n\t            }\r\n\r\n\t            var targetInfo = this.getTargetInfo();\r\n\r\n\t            // Reset controllers.\r\n\t            zrUtil.each(['cartesians', 'polars'], function (coordSysName) {\r\n\r\n\t                var coordInfoList = targetInfo[coordSysName];\r\n\t                var allCoordIds = zrUtil.map(coordInfoList, function (coordInfo) {\r\n\t                    return roams.generateCoordId(coordInfo.model);\r\n\t                });\r\n\r\n\t                zrUtil.each(coordInfoList, function (coordInfo) {\r\n\t                    var coordModel = coordInfo.model;\r\n\t                    var coordinateSystem = coordModel.coordinateSystem;\r\n\r\n\t                    roams.register(\r\n\t                        api,\r\n\t                        {\r\n\t                            coordId: roams.generateCoordId(coordModel),\r\n\t                            allCoordIds: allCoordIds,\r\n\t                            coordinateSystem: coordinateSystem,\r\n\t                            containsPoint: bind(operations[coordSysName].containsPoint, this, coordinateSystem),\r\n\t                            dataZoomId: dataZoomModel.id,\r\n\t                            throttleRate: dataZoomModel.get('throttle', true),\r\n\t                            panGetRange: bind(this._onPan, this, coordInfo, coordSysName),\r\n\t                            zoomGetRange: bind(this._onZoom, this, coordInfo, coordSysName)\r\n\t                        }\r\n\t                    );\r\n\t                }, this);\r\n\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        dispose: function () {\r\n\t            roams.unregister(this.api, this.dataZoomModel.id);\r\n\t            InsideZoomView.superApply(this, 'dispose', arguments);\r\n\t            this._range = null;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _onPan: function (coordInfo, coordSysName, controller, dx, dy, oldX, oldY, newX, newY) {\r\n\t            if (this.dataZoomModel.option.silent) {\r\n\t                return this._range;\r\n\t            }\r\n\r\n\t            var range = this._range.slice();\r\n\r\n\t            // Calculate transform by the first axis.\r\n\t            var axisModel = coordInfo.axisModels[0];\r\n\t            if (!axisModel) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var directionInfo = operations[coordSysName].getDirectionInfo(\r\n\t                [oldX, oldY], [newX, newY], axisModel, controller, coordInfo\r\n\t            );\r\n\r\n\t            var percentDelta = directionInfo.signal\r\n\t                * (range[1] - range[0])\r\n\t                * directionInfo.pixel / directionInfo.pixelLength;\r\n\r\n\t            sliderMove(percentDelta, range, [0, 100], 'rigid');\r\n\r\n\t            return (this._range = range);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _onZoom: function (coordInfo, coordSysName, controller, scale, mouseX, mouseY) {\r\n\t            var option = this.dataZoomModel.option;\r\n\r\n\t            if (option.silent || option.zoomLock) {\r\n\t                return this._range;\r\n\t            }\r\n\r\n\t            var range = this._range.slice();\r\n\r\n\t            // Calculate transform by the first axis.\r\n\t            var axisModel = coordInfo.axisModels[0];\r\n\t            if (!axisModel) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var directionInfo = operations[coordSysName].getDirectionInfo(\r\n\t                null, [mouseX, mouseY], axisModel, controller, coordInfo\r\n\t            );\r\n\r\n\t            var percentPoint = (directionInfo.pixel - directionInfo.pixelStart) /\r\n\t                directionInfo.pixelLength * (range[1] - range[0]) + range[0];\r\n\r\n\t            scale = Math.max(1 / scale, 0);\r\n\t            range[0] = (range[0] - percentPoint) * scale + percentPoint;\r\n\t            range[1] = (range[1] - percentPoint) * scale + percentPoint;\r\n\t            return (this._range = fixRange(range));\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    var operations = {\r\n\r\n\t        cartesians: {\r\n\r\n\t            getDirectionInfo: function (oldPoint, newPoint, axisModel, controller, coordInfo) {\r\n\t                var axis = axisModel.axis;\r\n\t                var ret = {};\r\n\t                var rect = coordInfo.model.coordinateSystem.getRect();\r\n\t                oldPoint = oldPoint || [0, 0];\r\n\r\n\t                if (axis.dim === 'x') {\r\n\t                    ret.pixel = newPoint[0] - oldPoint[0];\r\n\t                    ret.pixelLength = rect.width;\r\n\t                    ret.pixelStart = rect.x;\r\n\t                    ret.signal = axis.inverse ? 1 : -1;\r\n\t                }\r\n\t                else { // axis.dim === 'y'\r\n\t                    ret.pixel = newPoint[1] - oldPoint[1];\r\n\t                    ret.pixelLength = rect.height;\r\n\t                    ret.pixelStart = rect.y;\r\n\t                    ret.signal = axis.inverse ? -1 : 1;\r\n\t                }\r\n\r\n\t                return ret;\r\n\t            },\r\n\r\n\t            containsPoint: function (coordinateSystem, x, y) {\r\n\t                return coordinateSystem.getRect().contain(x, y);\r\n\t            }\r\n\t        },\r\n\r\n\t        polars: {\r\n\r\n\t            getDirectionInfo: function (oldPoint, newPoint, axisModel, controller, coordInfo) {\r\n\t                var axis = axisModel.axis;\r\n\t                var ret = {};\r\n\t                var polar = coordInfo.model.coordinateSystem;\r\n\t                var radiusExtent = polar.getRadiusAxis().getExtent();\r\n\t                var angleExtent = polar.getAngleAxis().getExtent();\r\n\r\n\t                oldPoint = oldPoint ? polar.pointToCoord(oldPoint) : [0, 0];\r\n\t                newPoint = polar.pointToCoord(newPoint);\r\n\r\n\t                if (axisModel.mainType === 'radiusAxis') {\r\n\t                    ret.pixel = newPoint[0] - oldPoint[0];\r\n\t                    // ret.pixelLength = Math.abs(radiusExtent[1] - radiusExtent[0]);\r\n\t                    // ret.pixelStart = Math.min(radiusExtent[0], radiusExtent[1]);\r\n\t                    ret.pixelLength = radiusExtent[1] - radiusExtent[0];\r\n\t                    ret.pixelStart = radiusExtent[0];\r\n\t                    ret.signal = axis.inverse ? 1 : -1;\r\n\t                }\r\n\t                else { // 'angleAxis'\r\n\t                    ret.pixel = newPoint[1] - oldPoint[1];\r\n\t                    // ret.pixelLength = Math.abs(angleExtent[1] - angleExtent[0]);\r\n\t                    // ret.pixelStart = Math.min(angleExtent[0], angleExtent[1]);\r\n\t                    ret.pixelLength = angleExtent[1] - angleExtent[0];\r\n\t                    ret.pixelStart = angleExtent[0];\r\n\t                    ret.signal = axis.inverse ? -1 : 1;\r\n\t                }\r\n\r\n\t                return ret;\r\n\t            },\r\n\r\n\t            containsPoint: function (coordinateSystem, x, y) {\r\n\t                var radius = coordinateSystem.getRadiusAxis().getExtent()[1];\r\n\t                var cx = coordinateSystem.cx;\r\n\t                var cy = coordinateSystem.cy;\r\n\r\n\t                return Math.pow(x - cx, 2) + Math.pow(y - cy, 2) <= Math.pow(radius, 2);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    function fixRange(range) {\r\n\t        // Clamp, using !(<= or >=) to handle NaN.\r\n\t        // jshint ignore:start\r\n\t        var bound = [0, 100];\r\n\t        !(range[0] <= bound[1]) && (range[0] = bound[1]);\r\n\t        !(range[1] <= bound[1]) && (range[1] = bound[1]);\r\n\t        !(range[0] >= bound[0]) && (range[0] = bound[0]);\r\n\t        !(range[1] >= bound[0]) && (range[1] = bound[0]);\r\n\t        // jshint ignore:end\r\n\r\n\t        return range;\r\n\t    }\r\n\r\n\t    module.exports = InsideZoomView;\r\n\r\n\r\n/***/ },\r\n/* 328 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Roam controller manager.\r\n\t */\r\n\r\n\r\n\t    // Only create one roam controller for each coordinate system.\r\n\t    // one roam controller might be refered by two inside data zoom\r\n\t    // components (for example, one for x and one for y). When user\r\n\t    // pan or zoom, only dispatch one action for those data zoom\r\n\t    // components.\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var RoamController = __webpack_require__(175);\r\n\t    var throttle = __webpack_require__(309);\r\n\t    var curry = zrUtil.curry;\r\n\r\n\t    var ATTR = '\\0_ec_dataZoom_roams';\r\n\r\n\t    var roams = {\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {module:echarts/ExtensionAPI} api\r\n\t         * @param {Object} dataZoomInfo\r\n\t         * @param {string} dataZoomInfo.coordId\r\n\t         * @param {Function} dataZoomInfo.containsPoint\r\n\t         * @param {Array.<string>} dataZoomInfo.allCoordIds\r\n\t         * @param {string} dataZoomInfo.dataZoomId\r\n\t         * @param {number} dataZoomInfo.throttleRate\r\n\t         * @param {Function} dataZoomInfo.panGetRange\r\n\t         * @param {Function} dataZoomInfo.zoomGetRange\r\n\t         */\r\n\t        register: function (api, dataZoomInfo) {\r\n\t            var store = giveStore(api);\r\n\t            var theDataZoomId = dataZoomInfo.dataZoomId;\r\n\t            var theCoordId = dataZoomInfo.coordId;\r\n\r\n\t            // Do clean when a dataZoom changes its target coordnate system.\r\n\t            // Avoid memory leak, dispose all not-used-registered.\r\n\t            zrUtil.each(store, function (record, coordId) {\r\n\t                var dataZoomInfos = record.dataZoomInfos;\r\n\t                if (dataZoomInfos[theDataZoomId]\r\n\t                    && zrUtil.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0\r\n\t                ) {\r\n\t                    delete dataZoomInfos[theDataZoomId];\r\n\t                    record.count--;\r\n\t                }\r\n\t            });\r\n\r\n\t            cleanStore(store);\r\n\r\n\t            var record = store[theCoordId];\r\n\t            // Create if needed.\r\n\t            if (!record) {\r\n\t                record = store[theCoordId] = {\r\n\t                    coordId: theCoordId,\r\n\t                    dataZoomInfos: {},\r\n\t                    count: 0\r\n\t                };\r\n\t                record.controller = createController(api, dataZoomInfo, record);\r\n\t                record.dispatchAction = zrUtil.curry(dispatchAction, api);\r\n\t            }\r\n\r\n\t            // Consider resize, area should be always updated.\r\n\t            record.controller.setContainsPoint(dataZoomInfo.containsPoint);\r\n\r\n\t            // Update throttle.\r\n\t            throttle.createOrUpdate(\r\n\t                record,\r\n\t                'dispatchAction',\r\n\t                dataZoomInfo.throttleRate,\r\n\t                'fixRate'\r\n\t            );\r\n\r\n\t            // Update reference of dataZoom.\r\n\t            !(record.dataZoomInfos[theDataZoomId]) && record.count++;\r\n\t            record.dataZoomInfos[theDataZoomId] = dataZoomInfo;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {module:echarts/ExtensionAPI} api\r\n\t         * @param {string} dataZoomId\r\n\t         */\r\n\t        unregister: function (api, dataZoomId) {\r\n\t            var store = giveStore(api);\r\n\r\n\t            zrUtil.each(store, function (record) {\r\n\t                record.controller.dispose();\r\n\t                var dataZoomInfos = record.dataZoomInfos;\r\n\t                if (dataZoomInfos[dataZoomId]) {\r\n\t                    delete dataZoomInfos[dataZoomId];\r\n\t                    record.count--;\r\n\t                }\r\n\t            });\r\n\r\n\t            cleanStore(store);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         */\r\n\t        shouldRecordRange: function (payload, dataZoomId) {\r\n\t            if (payload && payload.type === 'dataZoom' && payload.batch) {\r\n\t                for (var i = 0, len = payload.batch.length; i < len; i++) {\r\n\t                    if (payload.batch[i].dataZoomId === dataZoomId) {\r\n\t                        return false;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            return true;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         */\r\n\t        generateCoordId: function (coordModel) {\r\n\t            return coordModel.type + '\\0_' + coordModel.id;\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Key: coordId, value: {dataZoomInfos: [], count, controller}\r\n\t     * @type {Array.<Object>}\r\n\t     */\r\n\t    function giveStore(api) {\r\n\t        // Mount store on zrender instance, so that we do not\r\n\t        // need to worry about dispose.\r\n\t        var zr = api.getZr();\r\n\t        return zr[ATTR] || (zr[ATTR] = {});\r\n\t    }\r\n\r\n\t    function createController(api, dataZoomInfo, newRecord) {\r\n\t        var controller = new RoamController(api.getZr());\r\n\t        controller.enable();\r\n\t        controller.on('pan', curry(onPan, newRecord));\r\n\t        controller.on('zoom', curry(onZoom, newRecord));\r\n\r\n\t        return controller;\r\n\t    }\r\n\r\n\t    function cleanStore(store) {\r\n\t        zrUtil.each(store, function (record, coordId) {\r\n\t            if (!record.count) {\r\n\t                record.controller.dispose();\r\n\t                delete store[coordId];\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    function onPan(record, dx, dy, oldX, oldY, newX, newY) {\r\n\t        wrapAndDispatch(record, function (info) {\r\n\t            return info.panGetRange(record.controller, dx, dy, oldX, oldY, newX, newY);\r\n\t        });\r\n\t    }\r\n\r\n\t    function onZoom(record, scale, mouseX, mouseY) {\r\n\t        wrapAndDispatch(record, function (info) {\r\n\t            return info.zoomGetRange(record.controller, scale, mouseX, mouseY);\r\n\t        });\r\n\t    }\r\n\r\n\t    function wrapAndDispatch(record, getRange) {\r\n\t        var batch = [];\r\n\r\n\t        zrUtil.each(record.dataZoomInfos, function (info) {\r\n\t            var range = getRange(info);\r\n\t            range && batch.push({\r\n\t                dataZoomId: info.dataZoomId,\r\n\t                start: range[0],\r\n\t                end: range[1]\r\n\t            });\r\n\t        });\r\n\r\n\t        record.dispatchAction(batch);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * This action will be throttled.\r\n\t     */\r\n\t    function dispatchAction(api, batch) {\r\n\t        api.dispatchAction({\r\n\t            type: 'dataZoom',\r\n\t            batch: batch\r\n\t        });\r\n\t    }\r\n\r\n\t    module.exports = roams;\r\n\r\n\r\n\r\n/***/ },\r\n/* 329 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Data zoom processor\r\n\t */\r\n\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    echarts.registerProcessor(function (ecModel, api) {\r\n\r\n\t        ecModel.eachComponent('dataZoom', function (dataZoomModel) {\r\n\t            // We calculate window and reset axis here but not in model\r\n\t            // init stage and not after action dispatch handler, because\r\n\t            // reset should be called after seriesData.restoreData.\r\n\t            dataZoomModel.eachTargetAxis(resetSingleAxis);\r\n\r\n\t            // Caution: data zoom filtering is order sensitive when using\r\n\t            // percent range and no min/max/scale set on axis.\r\n\t            // For example, we have dataZoom definition:\r\n\t            // [\r\n\t            //      {xAxisIndex: 0, start: 30, end: 70},\r\n\t            //      {yAxisIndex: 0, start: 20, end: 80}\r\n\t            // ]\r\n\t            // In this case, [20, 80] of y-dataZoom should be based on data\r\n\t            // that have filtered by x-dataZoom using range of [30, 70],\r\n\t            // but should not be based on full raw data. Thus sliding\r\n\t            // x-dataZoom will change both ranges of xAxis and yAxis,\r\n\t            // while sliding y-dataZoom will only change the range of yAxis.\r\n\t            // So we should filter x-axis after reset x-axis immediately,\r\n\t            // and then reset y-axis and filter y-axis.\r\n\t            dataZoomModel.eachTargetAxis(filterSingleAxis);\r\n\t        });\r\n\r\n\t        ecModel.eachComponent('dataZoom', function (dataZoomModel) {\r\n\t            // Fullfill all of the range props so that user\r\n\t            // is able to get them from chart.getOption().\r\n\t            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\r\n\t            var percentRange = axisProxy.getDataPercentWindow();\r\n\t            var valueRange = axisProxy.getDataValueWindow();\r\n\r\n\t            dataZoomModel.setRawRange({\r\n\t                start: percentRange[0],\r\n\t                end: percentRange[1],\r\n\t                startValue: valueRange[0],\r\n\t                endValue: valueRange[1]\r\n\t            });\r\n\t        });\r\n\t    });\r\n\r\n\t    function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {\r\n\t        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);\r\n\t    }\r\n\r\n\t    function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {\r\n\t        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);\r\n\t    }\r\n\r\n\r\n\r\n\r\n/***/ },\r\n/* 330 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Data zoom action\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var helper = __webpack_require__(320);\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\r\n\t    echarts.registerAction('dataZoom', function (payload, ecModel) {\r\n\r\n\t        var linkedNodesFinder = helper.createLinkedNodesFinder(\r\n\t            zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'),\r\n\t            helper.eachAxisDim,\r\n\t            function (model, dimNames) {\r\n\t                return model.get(dimNames.axisIndex);\r\n\t            }\r\n\t        );\r\n\r\n\t        var effectedModels = [];\r\n\r\n\t        ecModel.eachComponent(\r\n\t            {mainType: 'dataZoom', query: payload},\r\n\t            function (model, index) {\r\n\t                effectedModels.push.apply(\r\n\t                    effectedModels, linkedNodesFinder(model).nodes\r\n\t                );\r\n\t            }\r\n\t        );\r\n\r\n\t        zrUtil.each(effectedModels, function (dataZoomModel, index) {\r\n\t            dataZoomModel.setRawRange({\r\n\t                start: payload.start,\r\n\t                end: payload.end,\r\n\t                startValue: payload.startValue,\r\n\t                endValue: payload.endValue\r\n\t            });\r\n\t        });\r\n\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 331 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * visualMap component entry\r\n\t */\r\n\r\n\r\n\t    __webpack_require__(332);\r\n\t    __webpack_require__(343);\r\n\r\n\r\n\r\n/***/ },\r\n/* 332 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * DataZoom component entry\r\n\t */\r\n\r\n\r\n\t    __webpack_require__(1).registerPreprocessor(\r\n\t        __webpack_require__(333)\r\n\t    );\r\n\r\n\t    __webpack_require__(334);\r\n\t    __webpack_require__(335);\r\n\t    __webpack_require__(336);\r\n\t    __webpack_require__(339);\r\n\t    __webpack_require__(342);\r\n\r\n\r\n\r\n/***/ },\r\n/* 333 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file VisualMap preprocessor\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var each = zrUtil.each;\r\n\r\n\t    module.exports = function (option) {\r\n\t        var visualMap = option && option.visualMap;\r\n\r\n\t        if (!zrUtil.isArray(visualMap)) {\r\n\t            visualMap = visualMap ? [visualMap] : [];\r\n\t        }\r\n\r\n\t        each(visualMap, function (opt) {\r\n\t            if (!opt) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            // rename splitList to pieces\r\n\t            if (has(opt, 'splitList') && !has(opt, 'pieces')) {\r\n\t                opt.pieces = opt.splitList;\r\n\t                delete opt.splitList;\r\n\t            }\r\n\r\n\t            var pieces = opt.pieces;\r\n\t            if (pieces && zrUtil.isArray(pieces)) {\r\n\t                each(pieces, function (piece) {\r\n\t                    if (zrUtil.isObject(piece)) {\r\n\t                        if (has(piece, 'start') && !has(piece, 'min')) {\r\n\t                            piece.min = piece.start;\r\n\t                        }\r\n\t                        if (has(piece, 'end') && !has(piece, 'max')) {\r\n\t                            piece.max = piece.end;\r\n\t                        }\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        });\r\n\t    };\r\n\r\n\t    function has(obj, name) {\r\n\t        return obj && obj.hasOwnProperty && obj.hasOwnProperty(name);\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 334 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(19).registerSubTypeDefaulter('visualMap', function (option) {\r\n\t        // Compatible with ec2, when splitNumber === 0, continuous visualMap will be used.\r\n\t        return (\r\n\t                !option.categories\r\n\t                && (\r\n\t                    !(\r\n\t                        option.pieces\r\n\t                            ? option.pieces.length > 0\r\n\t                            : option.splitNumber > 0\r\n\t                    )\r\n\t                    || option.calculable\r\n\t                )\r\n\t            )\r\n\t            ? 'continuous' : 'piecewise';\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 335 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Data range visual coding.\r\n\t */\r\n\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var visualSolution = __webpack_require__(307);\r\n\t    var VisualMapping = __webpack_require__(193);\r\n\r\n\t    echarts.registerVisual(echarts.PRIORITY.VISUAL.COMPONENT, function (ecModel) {\r\n\t        ecModel.eachComponent('visualMap', function (visualMapModel) {\r\n\t            processSingleVisualMap(visualMapModel, ecModel);\r\n\t        });\r\n\r\n\t        prepareVisualMeta(ecModel);\r\n\t    });\r\n\r\n\t    function processSingleVisualMap(visualMapModel, ecModel) {\r\n\t        visualMapModel.eachTargetSeries(function (seriesModel) {\r\n\t            var data = seriesModel.getData();\r\n\r\n\t            visualSolution.applyVisual(\r\n\t                visualMapModel.stateList,\r\n\t                visualMapModel.targetVisuals,\r\n\t                data,\r\n\t                visualMapModel.getValueState,\r\n\t                visualMapModel,\r\n\t                visualMapModel.getDataDimension(data)\r\n\t            );\r\n\t        });\r\n\t    }\r\n\r\n\t    // Only support color.\r\n\t    function prepareVisualMeta(ecModel) {\r\n\t        ecModel.eachSeries(function (seriesModel) {\r\n\t            var data = seriesModel.getData();\r\n\t            var visualMetaList = [];\r\n\r\n\t            ecModel.eachComponent('visualMap', function (visualMapModel) {\r\n\t                if (visualMapModel.isTargetSeries(seriesModel)) {\r\n\t                    var visualMeta = {};\r\n\t                    visualMetaList.push(visualMeta);\r\n\t                    visualMeta.stops = visualMapModel.getStops(seriesModel, getColorVisual);\r\n\t                    visualMeta.dimension = visualMapModel.getDataDimension(data);\r\n\t                }\r\n\t            });\r\n\r\n\t            // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));\r\n\t            seriesModel.getData().setVisual('visualMeta', visualMetaList);\r\n\t        });\r\n\t    }\r\n\r\n\t    // FIXME\r\n\t    // performance and export for heatmap?\r\n\t    function getColorVisual(visualMapModel, value, valueState) {\r\n\t        var mappings = visualMapModel.targetVisuals[valueState];\r\n\t        var visualTypes = VisualMapping.prepareVisualTypes(mappings);\r\n\t        var resultVisual = {};\r\n\r\n\t        for (var i = 0, len = visualTypes.length; i < len; i++) {\r\n\t            var type = visualTypes[i];\r\n\t            var mapping = mappings[\r\n\t                type === 'colorAlpha' ? '__alphaForOpacity' : type\r\n\t            ];\r\n\t            mapping && mapping.applyVisual(value, getVisual, setVisual);\r\n\t        }\r\n\r\n\t        return resultVisual.color;\r\n\r\n\t        function getVisual(key) {\r\n\t            return resultVisual[key];\r\n\t        }\r\n\r\n\t        function setVisual(key, value) {\r\n\t            resultVisual[key] = value;\r\n\t        }\r\n\t    }\r\n\r\n\r\n\r\n\r\n/***/ },\r\n/* 336 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Data zoom model\r\n\t */\r\n\r\n\r\n\t    var VisualMapModel = __webpack_require__(337);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\r\n\t    // Constant\r\n\t    var DEFAULT_BAR_BOUND = [20, 140];\r\n\r\n\t    var ContinuousModel = VisualMapModel.extend({\r\n\r\n\t        type: 'visualMap.continuous',\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        defaultOption: {\r\n\t            align: 'auto',          // 'auto', 'left', 'right', 'top', 'bottom'\r\n\t            calculable: false,      // This prop effect default component type determine,\r\n\t                                    // See echarts/component/visualMap/typeDefaulter.\r\n\t            range: null,            // selected range. In default case `range` is [min, max]\r\n\t                                    // and can auto change along with modification of min max,\r\n\t                                    // util use specifid a range.\r\n\t            realtime: true,         // Whether realtime update.\r\n\t            itemHeight: null,       // The length of the range control edge.\r\n\t            itemWidth: null,        // The length of the other side.\r\n\t            hoverLink: true,        // Enable hover highlight.\r\n\t            hoverLinkDataSize: null,// The size of hovered data.\r\n\t            hoverLinkOnHandle: true // Whether trigger hoverLink when hover handle.\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        optionUpdated: function (newOption, isInit) {\r\n\t            ContinuousModel.superApply(this, 'optionUpdated', arguments);\r\n\r\n\t            this.resetTargetSeries();\r\n\t            this.resetExtent();\r\n\r\n\t            this.resetVisual(function (mappingOption) {\r\n\t                mappingOption.mappingMethod = 'linear';\r\n\t                mappingOption.dataExtent = this.getExtent();\r\n\t            });\r\n\r\n\t            this._resetRange();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         * @override\r\n\t         */\r\n\t        resetItemSize: function () {\r\n\t            ContinuousModel.superApply(this, 'resetItemSize', arguments);\r\n\r\n\t            var itemSize = this.itemSize;\r\n\r\n\t            this._orient === 'horizontal' && itemSize.reverse();\r\n\r\n\t            (itemSize[0] == null || isNaN(itemSize[0])) && (itemSize[0] = DEFAULT_BAR_BOUND[0]);\r\n\t            (itemSize[1] == null || isNaN(itemSize[1])) && (itemSize[1] = DEFAULT_BAR_BOUND[1]);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _resetRange: function () {\r\n\t            var dataExtent = this.getExtent();\r\n\t            var range = this.option.range;\r\n\r\n\t            if (!range || range.auto) {\r\n\t                // `range` should always be array (so we dont use other\r\n\t                // value like 'auto') for user-friend. (consider getOption).\r\n\t                dataExtent.auto = 1;\r\n\t                this.option.range = dataExtent;\r\n\t            }\r\n\t            else if (zrUtil.isArray(range)) {\r\n\t                if (range[0] > range[1]) {\r\n\t                    range.reverse();\r\n\t                }\r\n\t                range[0] = Math.max(range[0], dataExtent[0]);\r\n\t                range[1] = Math.min(range[1], dataExtent[1]);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         * @override\r\n\t         */\r\n\t        completeVisualOption: function () {\r\n\t            VisualMapModel.prototype.completeVisualOption.apply(this, arguments);\r\n\r\n\t            zrUtil.each(this.stateList, function (state) {\r\n\t                var symbolSize = this.option.controller[state].symbolSize;\r\n\t                if (symbolSize && symbolSize[0] !== symbolSize[1]) {\r\n\t                    symbolSize[0] = 0; // For good looking.\r\n\t                }\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        setSelected: function (selected) {\r\n\t            this.option.range = selected.slice();\r\n\t            this._resetRange();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         */\r\n\t        getSelected: function () {\r\n\t            var dataExtent = this.getExtent();\r\n\r\n\t            var dataInterval = numberUtil.asc(\r\n\t                (this.get('range') || []).slice()\r\n\t            );\r\n\r\n\t            // Clamp\r\n\t            dataInterval[0] > dataExtent[1] && (dataInterval[0] = dataExtent[1]);\r\n\t            dataInterval[1] > dataExtent[1] && (dataInterval[1] = dataExtent[1]);\r\n\t            dataInterval[0] < dataExtent[0] && (dataInterval[0] = dataExtent[0]);\r\n\t            dataInterval[1] < dataExtent[0] && (dataInterval[1] = dataExtent[0]);\r\n\r\n\t            return dataInterval;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        getValueState: function (value) {\r\n\t            var range = this.option.range;\r\n\t            var dataExtent = this.getExtent();\r\n\r\n\t            // When range[0] === dataExtent[0], any value larger than dataExtent[0] maps to 'inRange'.\r\n\t            // range[1] is processed likewise.\r\n\t            return (\r\n\t                (range[0] <= dataExtent[0] || range[0] <= value)\r\n\t                && (range[1] >= dataExtent[1] || value <= range[1])\r\n\t            ) ? 'inRange' : 'outOfRange';\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @params {Array.<number>} range target value: range[0] <= value && value <= range[1]\r\n\t         * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]\r\n\t         */\r\n\t        findTargetDataIndices: function (range) {\r\n\t            var result = [];\r\n\r\n\t            this.eachTargetSeries(function (seriesModel) {\r\n\t                var dataIndices = [];\r\n\t                var data = seriesModel.getData();\r\n\r\n\t                data.each(this.getDataDimension(data), function (value, dataIndex) {\r\n\t                    range[0] <= value && value <= range[1] && dataIndices.push(dataIndex);\r\n\t                }, true, this);\r\n\r\n\t                result.push({seriesId: seriesModel.id, dataIndex: dataIndices});\r\n\t            }, this);\r\n\r\n\t            return result;\r\n\t        },\r\n\r\n\t        getStops: function (seriesModel, getColorVisual) {\r\n\t            var result = [];\r\n\t            insertStopList(this, 'outOfRange', this.getExtent(), result);\r\n\t            insertStopList(this, 'inRange', this.option.range.slice(), result);\r\n\r\n\t            zrUtil.each(result, function (item) {\r\n\t                item.color = getColorVisual(this, item.value, item.valueState);\r\n\t            }, this);\r\n\r\n\t            return result;\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    function getColorStopValues(visualMapModel, valueState, dataExtent) {\r\n\t        var mapping = visualMapModel.targetVisuals[valueState].color;\r\n\r\n\t        if (!mapping) {\r\n\t            return dataExtent.slice();\r\n\t        }\r\n\r\n\t        var count = mapping.option.visual.length;\r\n\r\n\t        if (count <= 1 || dataExtent[0] === dataExtent[1]) {\r\n\t            return dataExtent.slice();\r\n\t        }\r\n\r\n\t        // We only use linear mappping for color, so we can do inverse mapping:\r\n\t        var step = (dataExtent[1] - dataExtent[0]) / (count - 1);\r\n\t        var value = dataExtent[0];\r\n\t        var stopValues = [];\r\n\t        for (var i = 0; i < count && value < dataExtent[1]; i++) {\r\n\t            stopValues.push(value);\r\n\t            value += step;\r\n\t        }\r\n\t        stopValues.push(dataExtent[1]);\r\n\r\n\t        return stopValues;\r\n\t    }\r\n\r\n\t    function insertStopList(visualMapModel, valueState, dataExtent, result) {\r\n\t        var stops = getColorStopValues(visualMapModel, valueState, dataExtent);\r\n\r\n\t        zrUtil.each(stops, function (val) {\r\n\t            var stop = {value: val, valueState: valueState};\r\n\t            var inRange = 0;\r\n\t            for (var i = 0; i < result.length; i++) {\r\n\t                // Format to: outOfRange -- inRange -- outOfRange.\r\n\t                inRange |= result[i].valueState === 'inRange';\r\n\t                if (val < result[i].value) {\r\n\t                    result.splice(i, 0, stop);\r\n\t                    return;\r\n\t                }\r\n\t                inRange && (result[i].valueState = 'inRange');\r\n\t            }\r\n\t            result.push(stop);\r\n\t        });\r\n\t    }\r\n\r\n\t    module.exports = ContinuousModel;\r\n\r\n\r\n\r\n/***/ },\r\n/* 337 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Controller visual map model\r\n\t */\r\n\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var env = __webpack_require__(2);\r\n\t    var visualDefault = __webpack_require__(338);\r\n\t    var VisualMapping = __webpack_require__(193);\r\n\t    var visualSolution = __webpack_require__(307);\r\n\t    var mapVisual = VisualMapping.mapVisual;\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var eachVisual = VisualMapping.eachVisual;\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var isArray = zrUtil.isArray;\r\n\t    var each = zrUtil.each;\r\n\t    var asc = numberUtil.asc;\r\n\t    var linearMap = numberUtil.linearMap;\r\n\t    var noop = zrUtil.noop;\r\n\r\n\t    var DEFAULT_COLOR = ['#f6efa6', '#d88273', '#bf444c'];\r\n\r\n\t    var VisualMapModel = echarts.extendComponentModel({\r\n\r\n\t        type: 'visualMap',\r\n\r\n\t        dependencies: ['series'],\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {Array.<string>}\r\n\t         */\r\n\t        stateList: ['inRange', 'outOfRange'],\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {Array.<string>}\r\n\t         */\r\n\t        replacableOptionKeys: [\r\n\t            'inRange', 'outOfRange', 'target', 'controller', 'color'\r\n\t        ],\r\n\r\n\t        /**\r\n\t         * [lowerBound, upperBound]\r\n\t         *\r\n\t         * @readOnly\r\n\t         * @type {Array.<number>}\r\n\t         */\r\n\t        dataBound: [-Infinity, Infinity],\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {string|Object}\r\n\t         */\r\n\t        layoutMode: {type: 'box', ignoreSize: true},\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        defaultOption: {\r\n\t            show: true,\r\n\r\n\t            zlevel: 0,\r\n\t            z: 4,\r\n\r\n\t            seriesIndex: null,       // 所控制的series indices，默认所有有value的series.\r\n\r\n\t                                    // set min: 0, max: 200, only for campatible with ec2.\r\n\t                                    // In fact min max should not have default value.\r\n\t            min: 0,                 // min value, must specified if pieces is not specified.\r\n\t            max: 200,               // max value, must specified if pieces is not specified.\r\n\r\n\t            dimension: null,\r\n\t            inRange: null,          // 'color', 'colorHue', 'colorSaturation', 'colorLightness', 'colorAlpha',\r\n\t                                    // 'symbol', 'symbolSize'\r\n\t            outOfRange: null,       // 'color', 'colorHue', 'colorSaturation',\r\n\t                                    // 'colorLightness', 'colorAlpha',\r\n\t                                    // 'symbol', 'symbolSize'\r\n\r\n\t            left: 0,                // 'center' ¦ 'left' ¦ 'right' ¦ {number} (px)\r\n\t            right: null,            // The same as left.\r\n\t            top: null,              // 'top' ¦ 'bottom' ¦ 'center' ¦ {number} (px)\r\n\t            bottom: 0,              // The same as top.\r\n\r\n\t            itemWidth: null,\r\n\t            itemHeight: null,\r\n\t            inverse: false,\r\n\t            orient: 'vertical',        // 'horizontal' ¦ 'vertical'\r\n\r\n\t            backgroundColor: 'rgba(0,0,0,0)',\r\n\t            borderColor: '#ccc',       // 值域边框颜色\r\n\t            contentColor: '#5793f3',\r\n\t            inactiveColor: '#aaa',\r\n\t            borderWidth: 0,            // 值域边框线宽，单位px，默认为0（无边框）\r\n\t            padding: 5,                // 值域内边距，单位px，默认各方向内边距为5，\r\n\t                                       // 接受数组分别设定上右下左边距，同css\r\n\t            textGap: 10,               //\r\n\t            precision: 0,              // 小数精度，默认为0，无小数点\r\n\t            color: null,               //颜色（deprecated，兼容ec2，顺序同pieces，不同于inRange/outOfRange）\r\n\r\n\t            formatter: null,\r\n\t            text: null,                // 文本，如['高', '低']，兼容ec2，text[0]对应高值，text[1]对应低值\r\n\t            textStyle: {\r\n\t                color: '#333'          // 值域文字颜色\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        init: function (option, parentModel, ecModel) {\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {Array.<number>}\r\n\t             */\r\n\t            this._dataExtent;\r\n\r\n\t            /**\r\n\t             * @readOnly\r\n\t             */\r\n\t            this.targetVisuals = {};\r\n\r\n\t            /**\r\n\t             * @readOnly\r\n\t             */\r\n\t            this.controllerVisuals = {};\r\n\r\n\t            /**\r\n\t             * @readOnly\r\n\t             */\r\n\t            this.textStyleModel;\r\n\r\n\t            /**\r\n\t             * [width, height]\r\n\t             * @readOnly\r\n\t             * @type {Array.<number>}\r\n\t             */\r\n\t            this.itemSize;\r\n\r\n\t            this.mergeDefaultAndTheme(option, ecModel);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        optionUpdated: function (newOption, isInit) {\r\n\t            var thisOption = this.option;\r\n\r\n\t            // FIXME\r\n\t            // necessary?\r\n\t            // Disable realtime view update if canvas is not supported.\r\n\t            if (!env.canvasSupported) {\r\n\t                thisOption.realtime = false;\r\n\t            }\r\n\r\n\t            !isInit && visualSolution.replaceVisualOption(\r\n\t                thisOption, newOption, this.replacableOptionKeys\r\n\t            );\r\n\r\n\t            this.textStyleModel = this.getModel('textStyle');\r\n\r\n\t            this.resetItemSize();\r\n\r\n\t            this.completeVisualOption();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        resetVisual: function (supplementVisualOption) {\r\n\t            var stateList = this.stateList;\r\n\t            supplementVisualOption = zrUtil.bind(supplementVisualOption, this);\r\n\r\n\t            this.controllerVisuals = visualSolution.createVisualMappings(\r\n\t                this.option.controller, stateList, supplementVisualOption\r\n\t            );\r\n\t            this.targetVisuals = visualSolution.createVisualMappings(\r\n\t                this.option.target, stateList, supplementVisualOption\r\n\t            );\r\n\t        },\r\n\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        resetTargetSeries: function () {\r\n\t            var thisOption = this.option;\r\n\t            var allSeriesIndex = thisOption.seriesIndex == null;\r\n\t            thisOption.seriesIndex = allSeriesIndex\r\n\t                ? [] : modelUtil.normalizeToArray(thisOption.seriesIndex);\r\n\r\n\t            allSeriesIndex && this.ecModel.eachSeries(function (seriesModel, index) {\r\n\t                thisOption.seriesIndex.push(index);\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         */\r\n\t        eachTargetSeries: function (callback, context) {\r\n\t            zrUtil.each(this.option.seriesIndex, function (seriesIndex) {\r\n\t                callback.call(context, this.ecModel.getSeriesByIndex(seriesIndex));\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @pubilc\r\n\t         */\r\n\t        isTargetSeries: function (seriesModel) {\r\n\t            var is = false;\r\n\t            this.eachTargetSeries(function (model) {\r\n\t                model === seriesModel && (is = true);\r\n\t            });\r\n\t            return is;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @example\r\n\t         * this.formatValueText(someVal); // format single numeric value to text.\r\n\t         * this.formatValueText(someVal, true); // format single category value to text.\r\n\t         * this.formatValueText([min, max]); // format numeric min-max to text.\r\n\t         * this.formatValueText([this.dataBound[0], max]); // using data lower bound.\r\n\t         * this.formatValueText([min, this.dataBound[1]]); // using data upper bound.\r\n\t         *\r\n\t         * @param {number|Array.<number>} value Real value, or this.dataBound[0 or 1].\r\n\t         * @param {boolean} [isCategory=false] Only available when value is number.\r\n\t         * @param {Array.<string>} edgeSymbols Open-close symbol when value is interval.\r\n\t         * @return {string}\r\n\t         * @protected\r\n\t         */\r\n\t        formatValueText: function(value, isCategory, edgeSymbols) {\r\n\t            var option = this.option;\r\n\t            var precision = option.precision;\r\n\t            var dataBound = this.dataBound;\r\n\t            var formatter = option.formatter;\r\n\t            var isMinMax;\r\n\t            var textValue;\r\n\t            edgeSymbols = edgeSymbols || ['<', '>'];\r\n\r\n\t            if (zrUtil.isArray(value)) {\r\n\t                value = value.slice();\r\n\t                isMinMax = true;\r\n\t            }\r\n\r\n\t            textValue = isCategory\r\n\t                ? value\r\n\t                : (isMinMax\r\n\t                    ? [toFixed(value[0]), toFixed(value[1])]\r\n\t                    : toFixed(value)\r\n\t                );\r\n\r\n\t            if (zrUtil.isString(formatter)) {\r\n\t                return formatter\r\n\t                    .replace('{value}', isMinMax ? textValue[0] : textValue)\r\n\t                    .replace('{value2}', isMinMax ? textValue[1] : textValue);\r\n\t            }\r\n\t            else if (zrUtil.isFunction(formatter)) {\r\n\t                return isMinMax\r\n\t                    ? formatter(value[0], value[1])\r\n\t                    : formatter(value);\r\n\t            }\r\n\r\n\t            if (isMinMax) {\r\n\t                if (value[0] === dataBound[0]) {\r\n\t                    return edgeSymbols[0] + ' ' + textValue[1];\r\n\t                }\r\n\t                else if (value[1] === dataBound[1]) {\r\n\t                    return edgeSymbols[1] + ' ' + textValue[0];\r\n\t                }\r\n\t                else {\r\n\t                    return textValue[0] + ' - ' + textValue[1];\r\n\t                }\r\n\t            }\r\n\t            else { // Format single value (includes category case).\r\n\t                return textValue;\r\n\t            }\r\n\r\n\t            function toFixed(val) {\r\n\t                return val === dataBound[0]\r\n\t                    ? 'min'\r\n\t                    : val === dataBound[1]\r\n\t                    ? 'max'\r\n\t                    : (+val).toFixed(precision);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        resetExtent: function () {\r\n\t            var thisOption = this.option;\r\n\r\n\t            // Can not calculate data extent by data here.\r\n\t            // Because series and data may be modified in processing stage.\r\n\t            // So we do not support the feature \"auto min/max\".\r\n\r\n\t            var extent = asc([thisOption.min, thisOption.max]);\r\n\r\n\t            this._dataExtent = extent;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {module:echarts/data/List} list\r\n\t         * @return {string} Concrete dimention. If return null/undefined,\r\n\t         *                  no dimension used.\r\n\t         */\r\n\t        getDataDimension: function (list) {\r\n\t            var optDim = this.option.dimension;\r\n\t            return optDim != null\r\n\t                ? optDim : list.dimensions.length - 1;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @override\r\n\t         */\r\n\t        getExtent: function () {\r\n\t            return this._dataExtent.slice();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        completeVisualOption: function () {\r\n\t            var thisOption = this.option;\r\n\t            var base = {inRange: thisOption.inRange, outOfRange: thisOption.outOfRange};\r\n\r\n\t            var target = thisOption.target || (thisOption.target = {});\r\n\t            var controller = thisOption.controller || (thisOption.controller = {});\r\n\r\n\t            zrUtil.merge(target, base); // Do not override\r\n\t            zrUtil.merge(controller, base); // Do not override\r\n\r\n\t            var isCategory = this.isCategory();\r\n\r\n\t            completeSingle.call(this, target);\r\n\t            completeSingle.call(this, controller);\r\n\t            completeInactive.call(this, target, 'inRange', 'outOfRange');\r\n\t            // completeInactive.call(this, target, 'outOfRange', 'inRange');\r\n\t            completeController.call(this, controller);\r\n\r\n\t            function completeSingle(base) {\r\n\t                // Compatible with ec2 dataRange.color.\r\n\t                // The mapping order of dataRange.color is: [high value, ..., low value]\r\n\t                // whereas inRange.color and outOfRange.color is [low value, ..., high value]\r\n\t                // Notice: ec2 has no inverse.\r\n\t                if (isArray(thisOption.color)\r\n\t                    // If there has been inRange: {symbol: ...}, adding color is a mistake.\r\n\t                    // So adding color only when no inRange defined.\r\n\t                    && !base.inRange\r\n\t                ) {\r\n\t                    base.inRange = {color: thisOption.color.slice().reverse()};\r\n\t                }\r\n\r\n\t                // Compatible with previous logic, always give a defautl color, otherwise\r\n\t                // simple config with no inRange and outOfRange will not work.\r\n\t                // Originally we use visualMap.color as the default color, but setOption at\r\n\t                // the second time the default color will be erased. So we change to use\r\n\t                // constant DEFAULT_COLOR.\r\n\t                // If user do not want the defualt color, set inRange: {color: null}.\r\n\t                base.inRange = base.inRange || {color: DEFAULT_COLOR};\r\n\r\n\t                // If using shortcut like: {inRange: 'symbol'}, complete default value.\r\n\t                each(this.stateList, function (state) {\r\n\t                    var visualType = base[state];\r\n\r\n\t                    if (zrUtil.isString(visualType)) {\r\n\t                        var defa = visualDefault.get(visualType, 'active', isCategory);\r\n\t                        if (defa) {\r\n\t                            base[state] = {};\r\n\t                            base[state][visualType] = defa;\r\n\t                        }\r\n\t                        else {\r\n\t                            // Mark as not specified.\r\n\t                            delete base[state];\r\n\t                        }\r\n\t                    }\r\n\t                }, this);\r\n\t            }\r\n\r\n\t            function completeInactive(base, stateExist, stateAbsent) {\r\n\t                var optExist = base[stateExist];\r\n\t                var optAbsent = base[stateAbsent];\r\n\r\n\t                if (optExist && !optAbsent) {\r\n\t                    optAbsent = base[stateAbsent] = {};\r\n\t                    each(optExist, function (visualData, visualType) {\r\n\t                        if (!VisualMapping.isValidType(visualType)) {\r\n\t                            return;\r\n\t                        }\r\n\r\n\t                        var defa = visualDefault.get(visualType, 'inactive', isCategory);\r\n\r\n\t                        if (defa != null) {\r\n\t                            optAbsent[visualType] = defa;\r\n\r\n\t                            // Compatibable with ec2:\r\n\t                            // Only inactive color to rgba(0,0,0,0) can not\r\n\t                            // make label transparent, so use opacity also.\r\n\t                            if (visualType === 'color'\r\n\t                                && !optAbsent.hasOwnProperty('opacity')\r\n\t                                && !optAbsent.hasOwnProperty('colorAlpha')\r\n\t                            ) {\r\n\t                                optAbsent.opacity = [0, 0];\r\n\t                            }\r\n\t                        }\r\n\t                    });\r\n\t                }\r\n\t            }\r\n\r\n\t            function completeController(controller) {\r\n\t                var symbolExists = (controller.inRange || {}).symbol\r\n\t                    || (controller.outOfRange || {}).symbol;\r\n\t                var symbolSizeExists = (controller.inRange || {}).symbolSize\r\n\t                    || (controller.outOfRange || {}).symbolSize;\r\n\t                var inactiveColor = this.get('inactiveColor');\r\n\r\n\t                each(this.stateList, function (state) {\r\n\r\n\t                    var itemSize = this.itemSize;\r\n\t                    var visuals = controller[state];\r\n\r\n\t                    // Set inactive color for controller if no other color\r\n\t                    // attr (like colorAlpha) specified.\r\n\t                    if (!visuals) {\r\n\t                        visuals = controller[state] = {\r\n\t                            color: isCategory ? inactiveColor : [inactiveColor]\r\n\t                        };\r\n\t                    }\r\n\r\n\t                    // Consistent symbol and symbolSize if not specified.\r\n\t                    if (visuals.symbol == null) {\r\n\t                        visuals.symbol = symbolExists\r\n\t                            && zrUtil.clone(symbolExists)\r\n\t                            || (isCategory ? 'roundRect' : ['roundRect']);\r\n\t                    }\r\n\t                    if (visuals.symbolSize == null) {\r\n\t                        visuals.symbolSize = symbolSizeExists\r\n\t                            && zrUtil.clone(symbolSizeExists)\r\n\t                            || (isCategory ? itemSize[0] : [itemSize[0], itemSize[0]]);\r\n\t                    }\r\n\r\n\t                    // Filter square and none.\r\n\t                    visuals.symbol = mapVisual(visuals.symbol, function (symbol) {\r\n\t                        return (symbol === 'none' || symbol === 'square') ? 'roundRect' : symbol;\r\n\t                    });\r\n\r\n\t                    // Normalize symbolSize\r\n\t                    var symbolSize = visuals.symbolSize;\r\n\r\n\t                    if (symbolSize != null) {\r\n\t                        var max = -Infinity;\r\n\t                        // symbolSize can be object when categories defined.\r\n\t                        eachVisual(symbolSize, function (value) {\r\n\t                            value > max && (max = value);\r\n\t                        });\r\n\t                        visuals.symbolSize = mapVisual(symbolSize, function (value) {\r\n\t                            return linearMap(value, [0, max], [0, itemSize[0]], true);\r\n\t                        });\r\n\t                    }\r\n\r\n\t                }, this);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        resetItemSize: function () {\r\n\t            this.itemSize = [\r\n\t                parseFloat(this.get('itemWidth')),\r\n\t                parseFloat(this.get('itemHeight'))\r\n\t            ];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         */\r\n\t        isCategory: function () {\r\n\t            return !!this.option.categories;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @abstract\r\n\t         */\r\n\t        setSelected: noop,\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @abstract\r\n\t         * @param {*|module:echarts/data/List} valueOrData\r\n\t         * @param {number} dataIndex\r\n\t         * @return {string} state See this.stateList\r\n\t         */\r\n\t        getValueState: noop\r\n\r\n\t    });\r\n\r\n\t    module.exports = VisualMapModel;\r\n\r\n\r\n\r\n/***/ },\r\n/* 338 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Visual mapping.\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var visualDefault = {\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         */\r\n\t        get: function (visualType, key, isCategory) {\r\n\t            var value = zrUtil.clone(\r\n\t                (defaultOption[visualType] || {})[key]\r\n\t            );\r\n\r\n\t            return isCategory\r\n\t                ? (zrUtil.isArray(value) ? value[value.length - 1] : value)\r\n\t                : value;\r\n\t        }\r\n\r\n\t    };\r\n\r\n\t    var defaultOption = {\r\n\r\n\t        color: {\r\n\t            active: ['#006edd', '#e0ffff'],\r\n\t            inactive: ['rgba(0,0,0,0)']\r\n\t        },\r\n\r\n\t        colorHue: {\r\n\t            active: [0, 360],\r\n\t            inactive: [0, 0]\r\n\t        },\r\n\r\n\t        colorSaturation: {\r\n\t            active: [0.3, 1],\r\n\t            inactive: [0, 0]\r\n\t        },\r\n\r\n\t        colorLightness: {\r\n\t            active: [0.9, 0.5],\r\n\t            inactive: [0, 0]\r\n\t        },\r\n\r\n\t        colorAlpha: {\r\n\t            active: [0.3, 1],\r\n\t            inactive: [0, 0]\r\n\t        },\r\n\r\n\t        opacity: {\r\n\t            active: [0.3, 1],\r\n\t            inactive: [0, 0]\r\n\t        },\r\n\r\n\t        symbol: {\r\n\t            active: ['circle', 'roundRect', 'diamond'],\r\n\t            inactive: ['none']\r\n\t        },\r\n\r\n\t        symbolSize: {\r\n\t            active: [10, 50],\r\n\t            inactive: [0, 0]\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = visualDefault;\r\n\r\n\r\n\r\n\r\n/***/ },\r\n/* 339 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var VisualMapView = __webpack_require__(340);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var sliderMove = __webpack_require__(325);\r\n\t    var LinearGradient = __webpack_require__(79);\r\n\t    var helper = __webpack_require__(341);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\r\n\t    var linearMap = numberUtil.linearMap;\r\n\t    var each = zrUtil.each;\r\n\t    var mathMin = Math.min;\r\n\t    var mathMax = Math.max;\r\n\r\n\t    // Arbitrary value\r\n\t    var HOVER_LINK_SIZE = 12;\r\n\t    var HOVER_LINK_OUT = 6;\r\n\r\n\t    // Notice:\r\n\t    // Any \"interval\" should be by the order of [low, high].\r\n\t    // \"handle0\" (handleIndex === 0) maps to\r\n\t    // low data value: this._dataInterval[0] and has low coord.\r\n\t    // \"handle1\" (handleIndex === 1) maps to\r\n\t    // high data value: this._dataInterval[1] and has high coord.\r\n\t    // The logic of transform is implemented in this._createBarGroup.\r\n\r\n\t    var ContinuousView = VisualMapView.extend({\r\n\r\n\t        type: 'visualMap.continuous',\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        init: function () {\r\n\r\n\t            ContinuousView.superApply(this, 'init', arguments);\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._shapes = {};\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._dataInterval = [];\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._handleEnds = [];\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._orient;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._useHandle;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._hoverLinkDataIndices = [];\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._dragging;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             */\r\n\t            this._hovering;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         * @override\r\n\t         */\r\n\t        doRender: function (visualMapModel, ecModel, api, payload) {\r\n\t            if (!payload || payload.type !== 'selectDataRange' || payload.from !== this.uid) {\r\n\t                this._buildView();\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _buildView: function () {\r\n\t            this.group.removeAll();\r\n\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var thisGroup = this.group;\r\n\r\n\t            this._orient = visualMapModel.get('orient');\r\n\t            this._useHandle = visualMapModel.get('calculable');\r\n\r\n\t            this._resetInterval();\r\n\r\n\t            this._renderBar(thisGroup);\r\n\r\n\t            var dataRangeText = visualMapModel.get('text');\r\n\t            this._renderEndsText(thisGroup, dataRangeText, 0);\r\n\t            this._renderEndsText(thisGroup, dataRangeText, 1);\r\n\r\n\t            // Do this for background size calculation.\r\n\t            this._updateView(true);\r\n\r\n\t            // After updating view, inner shapes is built completely,\r\n\t            // and then background can be rendered.\r\n\t            this.renderBackground(thisGroup);\r\n\r\n\t            // Real update view\r\n\t            this._updateView();\r\n\r\n\t            this._enableHoverLinkToSeries();\r\n\t            this._enableHoverLinkFromSeries();\r\n\r\n\t            this.positionGroup(thisGroup);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _renderEndsText: function (group, dataRangeText, endsIndex) {\r\n\t            if (!dataRangeText) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            // Compatible with ec2, text[0] map to high value, text[1] map low value.\r\n\t            var text = dataRangeText[1 - endsIndex];\r\n\t            text = text != null ? text + '' : '';\r\n\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var textGap = visualMapModel.get('textGap');\r\n\t            var itemSize = visualMapModel.itemSize;\r\n\r\n\t            var barGroup = this._shapes.barGroup;\r\n\t            var position = this._applyTransform(\r\n\t                [\r\n\t                    itemSize[0] / 2,\r\n\t                    endsIndex === 0 ? -textGap : itemSize[1] + textGap\r\n\t                ],\r\n\t                barGroup\r\n\t            );\r\n\t            var align = this._applyTransform(\r\n\t                endsIndex === 0 ? 'bottom' : 'top',\r\n\t                barGroup\r\n\t            );\r\n\t            var orient = this._orient;\r\n\t            var textStyleModel = this.visualMapModel.textStyleModel;\r\n\r\n\t            this.group.add(new graphic.Text({\r\n\t                style: {\r\n\t                    x: position[0],\r\n\t                    y: position[1],\r\n\t                    textVerticalAlign: orient === 'horizontal' ? 'middle' : align,\r\n\t                    textAlign: orient === 'horizontal' ? align : 'center',\r\n\t                    text: text,\r\n\t                    textFont: textStyleModel.getFont(),\r\n\t                    fill: textStyleModel.getTextColor()\r\n\t                }\r\n\t            }));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _renderBar: function (targetGroup) {\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var shapes = this._shapes;\r\n\t            var itemSize = visualMapModel.itemSize;\r\n\t            var orient = this._orient;\r\n\t            var useHandle = this._useHandle;\r\n\t            var itemAlign = helper.getItemAlign(visualMapModel, this.api, itemSize);\r\n\t            var barGroup = shapes.barGroup = this._createBarGroup(itemAlign);\r\n\r\n\t            // Bar\r\n\t            barGroup.add(shapes.outOfRange = createPolygon());\r\n\t            barGroup.add(shapes.inRange = createPolygon(\r\n\t                null,\r\n\t                useHandle ? 'move' : null,\r\n\t                zrUtil.bind(this._dragHandle, this, 'all', false),\r\n\t                zrUtil.bind(this._dragHandle, this, 'all', true)\r\n\t            ));\r\n\r\n\t            var textRect = visualMapModel.textStyleModel.getTextRect('国');\r\n\t            var textSize = mathMax(textRect.width, textRect.height);\r\n\r\n\t            // Handle\r\n\t            if (useHandle) {\r\n\t                shapes.handleThumbs = [];\r\n\t                shapes.handleLabels = [];\r\n\t                shapes.handleLabelPoints = [];\r\n\r\n\t                this._createHandle(barGroup, 0, itemSize, textSize, orient, itemAlign);\r\n\t                this._createHandle(barGroup, 1, itemSize, textSize, orient, itemAlign);\r\n\t            }\r\n\r\n\t            this._createIndicator(barGroup, itemSize, textSize, orient);\r\n\r\n\t            targetGroup.add(barGroup);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _createHandle: function (barGroup, handleIndex, itemSize, textSize, orient) {\r\n\t            var onDrift = zrUtil.bind(this._dragHandle, this, handleIndex, false);\r\n\t            var onDragEnd = zrUtil.bind(this._dragHandle, this, handleIndex, true);\r\n\t            var handleThumb = createPolygon(\r\n\t                createHandlePoints(handleIndex, textSize),\r\n\t                'move',\r\n\t                onDrift,\r\n\t                onDragEnd\r\n\t            );\r\n\t            handleThumb.position[0] = itemSize[0];\r\n\t            barGroup.add(handleThumb);\r\n\r\n\t            // Text is always horizontal layout but should not be effected by\r\n\t            // transform (orient/inverse). So label is built separately but not\r\n\t            // use zrender/graphic/helper/RectText, and is located based on view\r\n\t            // group (according to handleLabelPoint) but not barGroup.\r\n\t            var textStyleModel = this.visualMapModel.textStyleModel;\r\n\t            var handleLabel = new graphic.Text({\r\n\t                draggable: true,\r\n\t                drift: onDrift,\r\n\t                ondragend: onDragEnd,\r\n\t                style: {\r\n\t                    x: 0, y: 0, text: '',\r\n\t                    textFont: textStyleModel.getFont(),\r\n\t                    fill: textStyleModel.getTextColor()\r\n\t                }\r\n\t            });\r\n\t            this.group.add(handleLabel);\r\n\r\n\t            var handleLabelPoint = [\r\n\t                orient === 'horizontal'\r\n\t                    ? textSize / 2\r\n\t                    : textSize * 1.5,\r\n\t                orient === 'horizontal'\r\n\t                    ? (handleIndex === 0 ? -(textSize * 1.5) : (textSize * 1.5))\r\n\t                    : (handleIndex === 0 ? -textSize / 2 : textSize / 2)\r\n\t            ];\r\n\r\n\t            var shapes = this._shapes;\r\n\t            shapes.handleThumbs[handleIndex] = handleThumb;\r\n\t            shapes.handleLabelPoints[handleIndex] = handleLabelPoint;\r\n\t            shapes.handleLabels[handleIndex] = handleLabel;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _createIndicator: function (barGroup, itemSize, textSize, orient) {\r\n\t            var indicator = createPolygon([[0, 0]], 'move');\r\n\t            indicator.position[0] = itemSize[0];\r\n\t            indicator.attr({invisible: true, silent: true});\r\n\t            barGroup.add(indicator);\r\n\r\n\t            var textStyleModel = this.visualMapModel.textStyleModel;\r\n\t            var indicatorLabel = new graphic.Text({\r\n\t                silent: true,\r\n\t                invisible: true,\r\n\t                style: {\r\n\t                    x: 0, y: 0, text: '',\r\n\t                    textFont: textStyleModel.getFont(),\r\n\t                    fill: textStyleModel.getTextColor()\r\n\t                }\r\n\t            });\r\n\t            this.group.add(indicatorLabel);\r\n\r\n\t            var indicatorLabelPoint = [\r\n\t                orient === 'horizontal' ? textSize / 2 : HOVER_LINK_OUT + 3,\r\n\t                0\r\n\t            ];\r\n\r\n\t            var shapes = this._shapes;\r\n\t            shapes.indicator = indicator;\r\n\t            shapes.indicatorLabel = indicatorLabel;\r\n\t            shapes.indicatorLabelPoint = indicatorLabelPoint;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _dragHandle: function (handleIndex, isEnd, dx, dy) {\r\n\t            if (!this._useHandle) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            this._dragging = !isEnd;\r\n\r\n\t            if (!isEnd) {\r\n\t                // Transform dx, dy to bar coordination.\r\n\t                var vertex = this._applyTransform([dx, dy], this._shapes.barGroup, true);\r\n\t                this._updateInterval(handleIndex, vertex[1]);\r\n\r\n\t                // Considering realtime, update view should be executed\r\n\t                // before dispatch action.\r\n\t                this._updateView();\r\n\t            }\r\n\r\n\t            // dragEnd do not dispatch action when realtime.\r\n\t            if (isEnd === !this.visualMapModel.get('realtime')) { // jshint ignore:line\r\n\t                this.api.dispatchAction({\r\n\t                    type: 'selectDataRange',\r\n\t                    from: this.uid,\r\n\t                    visualMapId: this.visualMapModel.id,\r\n\t                    selected: this._dataInterval.slice()\r\n\t                });\r\n\t            }\r\n\r\n\t            if (isEnd) {\r\n\t                !this._hovering && this._clearHoverLinkToSeries();\r\n\t            }\r\n\t            else if (useHoverLinkOnHandle(this.visualMapModel)) {\r\n\t                this._doHoverLinkToSeries(this._handleEnds[handleIndex], false);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _resetInterval: function () {\r\n\t            var visualMapModel = this.visualMapModel;\r\n\r\n\t            var dataInterval = this._dataInterval = visualMapModel.getSelected();\r\n\t            var dataExtent = visualMapModel.getExtent();\r\n\t            var sizeExtent = [0, visualMapModel.itemSize[1]];\r\n\r\n\t            this._handleEnds = [\r\n\t                linearMap(dataInterval[0], dataExtent, sizeExtent, true),\r\n\t                linearMap(dataInterval[1], dataExtent, sizeExtent, true)\r\n\t            ];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @param {(number|string)} handleIndex 0 or 1 or 'all'\r\n\t         * @param {number} dx\r\n\t         * @param {number} dy\r\n\t         */\r\n\t        _updateInterval: function (handleIndex, delta) {\r\n\t            delta = delta || 0;\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var handleEnds = this._handleEnds;\r\n\r\n\t            sliderMove(\r\n\t                delta,\r\n\t                handleEnds,\r\n\t                [0, visualMapModel.itemSize[1]],\r\n\t                handleIndex === 'all' ? 'rigid' : 'push',\r\n\t                handleIndex\r\n\t            );\r\n\t            var dataExtent = visualMapModel.getExtent();\r\n\t            var sizeExtent = [0, visualMapModel.itemSize[1]];\r\n\t            // Update data interval.\r\n\t            this._dataInterval = [\r\n\t                linearMap(handleEnds[0], sizeExtent, dataExtent, true),\r\n\t                linearMap(handleEnds[1], sizeExtent, dataExtent, true)\r\n\t            ];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _updateView: function (forSketch) {\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var dataExtent = visualMapModel.getExtent();\r\n\t            var shapes = this._shapes;\r\n\r\n\t            var outOfRangeHandleEnds = [0, visualMapModel.itemSize[1]];\r\n\t            var inRangeHandleEnds = forSketch ? outOfRangeHandleEnds : this._handleEnds;\r\n\r\n\t            var visualInRange = this._createBarVisual(\r\n\t                this._dataInterval, dataExtent, inRangeHandleEnds, 'inRange'\r\n\t            );\r\n\t            var visualOutOfRange = this._createBarVisual(\r\n\t                dataExtent, dataExtent, outOfRangeHandleEnds, 'outOfRange'\r\n\t            );\r\n\r\n\t            shapes.inRange\r\n\t                .setStyle({\r\n\t                    fill: visualInRange.barColor,\r\n\t                    opacity: visualInRange.opacity\r\n\t                })\r\n\t                .setShape('points', visualInRange.barPoints);\r\n\t            shapes.outOfRange\r\n\t                .setStyle({\r\n\t                    fill: visualOutOfRange.barColor,\r\n\t                    opacity: visualOutOfRange.opacity\r\n\t                })\r\n\t                .setShape('points', visualOutOfRange.barPoints);\r\n\r\n\t            this._updateHandle(inRangeHandleEnds, visualInRange);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _createBarVisual: function (dataInterval, dataExtent, handleEnds, forceState) {\r\n\t            var opts = {\r\n\t                forceState: forceState,\r\n\t                convertOpacityToAlpha: true\r\n\t            };\r\n\t            var colorStops = this._makeColorGradient(dataInterval, opts);\r\n\r\n\t            var symbolSizes = [\r\n\t                this.getControllerVisual(dataInterval[0], 'symbolSize', opts),\r\n\t                this.getControllerVisual(dataInterval[1], 'symbolSize', opts)\r\n\t            ];\r\n\t            var barPoints = this._createBarPoints(handleEnds, symbolSizes);\r\n\r\n\t            return {\r\n\t                barColor: new LinearGradient(0, 0, 0, 1, colorStops),\r\n\t                barPoints: barPoints,\r\n\t                handlesColor: [\r\n\t                    colorStops[0].color,\r\n\t                    colorStops[colorStops.length - 1].color\r\n\t                ]\r\n\t            };\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _makeColorGradient: function (dataInterval, opts) {\r\n\t            // Considering colorHue, which is not linear, so we have to sample\r\n\t            // to calculate gradient color stops, but not only caculate head\r\n\t            // and tail.\r\n\t            var sampleNumber = 100; // Arbitrary value.\r\n\t            var colorStops = [];\r\n\t            var step = (dataInterval[1] - dataInterval[0]) / sampleNumber;\r\n\r\n\t            colorStops.push({\r\n\t                color: this.getControllerVisual(dataInterval[0], 'color', opts),\r\n\t                offset: 0\r\n\t            });\r\n\r\n\t            for (var i = 1; i < sampleNumber; i++) {\r\n\t                var currValue = dataInterval[0] + step * i;\r\n\t                if (currValue > dataInterval[1]) {\r\n\t                    break;\r\n\t                }\r\n\t                colorStops.push({\r\n\t                    color: this.getControllerVisual(currValue, 'color', opts),\r\n\t                    offset: i / sampleNumber\r\n\t                });\r\n\t            }\r\n\r\n\t            colorStops.push({\r\n\t                color: this.getControllerVisual(dataInterval[1], 'color', opts),\r\n\t                offset: 1\r\n\t            });\r\n\r\n\t            return colorStops;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _createBarPoints: function (handleEnds, symbolSizes) {\r\n\t            var itemSize = this.visualMapModel.itemSize;\r\n\r\n\t            return [\r\n\t                [itemSize[0] - symbolSizes[0], handleEnds[0]],\r\n\t                [itemSize[0], handleEnds[0]],\r\n\t                [itemSize[0], handleEnds[1]],\r\n\t                [itemSize[0] - symbolSizes[1], handleEnds[1]]\r\n\t            ];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _createBarGroup: function (itemAlign) {\r\n\t            var orient = this._orient;\r\n\t            var inverse = this.visualMapModel.get('inverse');\r\n\r\n\t            return new graphic.Group(\r\n\t                (orient === 'horizontal' && !inverse)\r\n\t                ? {scale: itemAlign === 'bottom' ? [1, 1] : [-1, 1], rotation: Math.PI / 2}\r\n\t                : (orient === 'horizontal' && inverse)\r\n\t                ? {scale: itemAlign === 'bottom' ? [-1, 1] : [1, 1], rotation: -Math.PI / 2}\r\n\t                : (orient === 'vertical' && !inverse)\r\n\t                ? {scale: itemAlign === 'left' ? [1, -1] : [-1, -1]}\r\n\t                : {scale: itemAlign === 'left' ? [1, 1] : [-1, 1]}\r\n\t            );\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _updateHandle: function (handleEnds, visualInRange) {\r\n\t            if (!this._useHandle) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var shapes = this._shapes;\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var handleThumbs = shapes.handleThumbs;\r\n\t            var handleLabels = shapes.handleLabels;\r\n\r\n\t            each([0, 1], function (handleIndex) {\r\n\t                var handleThumb = handleThumbs[handleIndex];\r\n\t                handleThumb.setStyle('fill', visualInRange.handlesColor[handleIndex]);\r\n\t                handleThumb.position[1] = handleEnds[handleIndex];\r\n\r\n\t                // Update handle label position.\r\n\t                var textPoint = graphic.applyTransform(\r\n\t                    shapes.handleLabelPoints[handleIndex],\r\n\t                    graphic.getTransform(handleThumb, this.group)\r\n\t                );\r\n\t                handleLabels[handleIndex].setStyle({\r\n\t                    x: textPoint[0],\r\n\t                    y: textPoint[1],\r\n\t                    text: visualMapModel.formatValueText(this._dataInterval[handleIndex]),\r\n\t                    textVerticalAlign: 'middle',\r\n\t                    textAlign: this._applyTransform(\r\n\t                        this._orient === 'horizontal'\r\n\t                            ? (handleIndex === 0 ? 'bottom' : 'top')\r\n\t                            : 'left',\r\n\t                        shapes.barGroup\r\n\t                    )\r\n\t                });\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @param {number} cursorValue\r\n\t         * @param {number} textValue\r\n\t         * @param {string} [rangeSymbol]\r\n\t         * @param {number} [halfHoverLinkSize]\r\n\t         */\r\n\t        _showIndicator: function (cursorValue, textValue, rangeSymbol, halfHoverLinkSize) {\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var dataExtent = visualMapModel.getExtent();\r\n\t            var itemSize = visualMapModel.itemSize;\r\n\t            var sizeExtent = [0, itemSize[1]];\r\n\t            var pos = linearMap(cursorValue, dataExtent, sizeExtent, true);\r\n\r\n\t            var shapes = this._shapes;\r\n\t            var indicator = shapes.indicator;\r\n\t            if (!indicator) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            indicator.position[1] = pos;\r\n\t            indicator.attr('invisible', false);\r\n\t            indicator.setShape('points', createIndicatorPoints(\r\n\t                !!rangeSymbol, halfHoverLinkSize, pos, itemSize[1]\r\n\t            ));\r\n\r\n\t            var opts = {convertOpacityToAlpha: true};\r\n\t            var color = this.getControllerVisual(cursorValue, 'color', opts);\r\n\t            indicator.setStyle('fill', color);\r\n\r\n\t            // Update handle label position.\r\n\t            var textPoint = graphic.applyTransform(\r\n\t                shapes.indicatorLabelPoint,\r\n\t                graphic.getTransform(indicator, this.group)\r\n\t            );\r\n\r\n\t            var indicatorLabel = shapes.indicatorLabel;\r\n\t            indicatorLabel.attr('invisible', false);\r\n\t            var align = this._applyTransform('left', shapes.barGroup);\r\n\t            var orient = this._orient;\r\n\t            indicatorLabel.setStyle({\r\n\t                text: (rangeSymbol ? rangeSymbol : '') + visualMapModel.formatValueText(textValue),\r\n\t                textVerticalAlign: orient === 'horizontal' ? align : 'middle',\r\n\t                textAlign: orient === 'horizontal' ? 'center' : align,\r\n\t                x: textPoint[0],\r\n\t                y: textPoint[1]\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _enableHoverLinkToSeries: function () {\r\n\t            var self = this;\r\n\t            this._shapes.barGroup\r\n\r\n\t                .on('mousemove', function (e) {\r\n\t                    self._hovering = true;\r\n\r\n\t                    if (!self._dragging) {\r\n\t                        var itemSize = self.visualMapModel.itemSize;\r\n\t                        var pos = self._applyTransform(\r\n\t                            [e.offsetX, e.offsetY], self._shapes.barGroup, true, true\r\n\t                        );\r\n\t                        // For hover link show when hover handle, which might be\r\n\t                        // below or upper than sizeExtent.\r\n\t                        pos[1] = mathMin(mathMax(0, pos[1]), itemSize[1]);\r\n\r\n\t                        self._doHoverLinkToSeries(\r\n\t                            pos[1],\r\n\t                            0 <= pos[0] && pos[0] <= itemSize[0]\r\n\t                        );\r\n\t                    }\r\n\t                })\r\n\r\n\t                .on('mouseout', function () {\r\n\t                    // When mouse is out of handle, hoverLink still need\r\n\t                    // to be displayed when realtime is set as false.\r\n\t                    self._hovering = false;\r\n\t                    !self._dragging && self._clearHoverLinkToSeries();\r\n\t                });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _enableHoverLinkFromSeries: function () {\r\n\t            var zr = this.api.getZr();\r\n\r\n\t            if (this.visualMapModel.option.hoverLink) {\r\n\t                zr.on('mouseover', this._hoverLinkFromSeriesMouseOver, this);\r\n\t                zr.on('mouseout', this._hideIndicator, this);\r\n\t            }\r\n\t            else {\r\n\t                this._clearHoverLinkFromSeries();\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _doHoverLinkToSeries: function (cursorPos, hoverOnBar) {\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var itemSize = visualMapModel.itemSize;\r\n\r\n\t            if (!visualMapModel.option.hoverLink) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var sizeExtent = [0, itemSize[1]];\r\n\t            var dataExtent = visualMapModel.getExtent();\r\n\r\n\t            // For hover link show when hover handle, which might be below or upper than sizeExtent.\r\n\t            cursorPos = mathMin(mathMax(sizeExtent[0], cursorPos), sizeExtent[1]);\r\n\r\n\t            var halfHoverLinkSize = getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent);\r\n\t            var hoverRange = [cursorPos - halfHoverLinkSize, cursorPos + halfHoverLinkSize];\r\n\t            var cursorValue = linearMap(cursorPos, sizeExtent, dataExtent, true);\r\n\t            var valueRange = [\r\n\t                linearMap(hoverRange[0], sizeExtent, dataExtent, true),\r\n\t                linearMap(hoverRange[1], sizeExtent, dataExtent, true)\r\n\t            ];\r\n\t            // Consider data range is out of visualMap range, see test/visualMap-continuous.html,\r\n\t            // where china and india has very large population.\r\n\t            hoverRange[0] < sizeExtent[0] && (valueRange[0] = -Infinity);\r\n\t            hoverRange[1] > sizeExtent[1] && (valueRange[1] = Infinity);\r\n\r\n\t            // Do not show indicator when mouse is over handle,\r\n\t            // otherwise labels overlap, especially when dragging.\r\n\t            if (hoverOnBar) {\r\n\t                if (valueRange[0] === -Infinity) {\r\n\t                    this._showIndicator(cursorValue, valueRange[1], '< ', halfHoverLinkSize);\r\n\t                }\r\n\t                else if (valueRange[1] === Infinity) {\r\n\t                    this._showIndicator(cursorValue, valueRange[0], '> ', halfHoverLinkSize);\r\n\t                }\r\n\t                else {\r\n\t                    this._showIndicator(cursorValue, cursorValue, '≈ ', halfHoverLinkSize);\r\n\t                }\r\n\t            }\r\n\r\n\t            // When realtime is set as false, handles, which are in barGroup,\r\n\t            // also trigger hoverLink, which help user to realize where they\r\n\t            // focus on when dragging. (see test/heatmap-large.html)\r\n\t            // When realtime is set as true, highlight will not show when hover\r\n\t            // handle, because the label on handle, which displays a exact value\r\n\t            // but not range, might mislead users.\r\n\t            var oldBatch = this._hoverLinkDataIndices;\r\n\t            var newBatch = [];\r\n\t            if (hoverOnBar || useHoverLinkOnHandle(visualMapModel)) {\r\n\t                newBatch = this._hoverLinkDataIndices = visualMapModel.findTargetDataIndices(valueRange);\r\n\t            }\r\n\r\n\t            var resultBatches = modelUtil.compressBatches(oldBatch, newBatch);\r\n\t            this._dispatchHighDown('downplay', helper.convertDataIndex(resultBatches[0]));\r\n\t            this._dispatchHighDown('highlight', helper.convertDataIndex(resultBatches[1]));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _hoverLinkFromSeriesMouseOver: function (e) {\r\n\t            var el = e.target;\r\n\r\n\t            if (!el || el.dataIndex == null) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var dataModel = el.dataModel || this.ecModel.getSeriesByIndex(el.seriesIndex);\r\n\t            var data = dataModel.getData(el.dataType);\r\n\t            var dim = data.getDimension(this.visualMapModel.getDataDimension(data));\r\n\t            var value = data.get(dim, el.dataIndex, true);\r\n\r\n\t            if (!isNaN(value)) {\r\n\t                this._showIndicator(value, value);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _hideIndicator: function () {\r\n\t            var shapes = this._shapes;\r\n\t            shapes.indicator && shapes.indicator.attr('invisible', true);\r\n\t            shapes.indicatorLabel && shapes.indicatorLabel.attr('invisible', true);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _clearHoverLinkToSeries: function () {\r\n\t            this._hideIndicator();\r\n\r\n\t            var indices = this._hoverLinkDataIndices;\r\n\r\n\t            this._dispatchHighDown('downplay', helper.convertDataIndex(indices));\r\n\r\n\t            indices.length = 0;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _clearHoverLinkFromSeries: function () {\r\n\t            this._hideIndicator();\r\n\r\n\t            var zr = this.api.getZr();\r\n\t            zr.off('mouseover', this._hoverLinkFromSeriesMouseOver);\r\n\t            zr.off('mouseout', this._hideIndicator);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _applyTransform: function (vertex, element, inverse, global) {\r\n\t            var transform = graphic.getTransform(element, global ? null : this.group);\r\n\r\n\t            return graphic[\r\n\t                zrUtil.isArray(vertex) ? 'applyTransform' : 'transformDirection'\r\n\t            ](vertex, transform, inverse);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _dispatchHighDown: function (type, batch) {\r\n\t            batch && batch.length && this.api.dispatchAction({\r\n\t                type: type,\r\n\t                batch: batch\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        dispose: function () {\r\n\t            this._clearHoverLinkFromSeries();\r\n\t            this._clearHoverLinkToSeries();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        remove: function () {\r\n\t            this._clearHoverLinkFromSeries();\r\n\t            this._clearHoverLinkToSeries();\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    function createPolygon(points, cursor, onDrift, onDragEnd) {\r\n\t        return new graphic.Polygon({\r\n\t            shape: {points: points},\r\n\t            draggable: !!onDrift,\r\n\t            cursor: cursor,\r\n\t            drift: onDrift,\r\n\t            ondragend: onDragEnd\r\n\t        });\r\n\t    }\r\n\r\n\t    function createHandlePoints(handleIndex, textSize) {\r\n\t        return handleIndex === 0\r\n\t            ? [[0, 0], [textSize, 0], [textSize, -textSize]]\r\n\t            : [[0, 0], [textSize, 0], [textSize, textSize]];\r\n\t    }\r\n\r\n\t    function createIndicatorPoints(isRange, halfHoverLinkSize, pos, extentMax) {\r\n\t        return isRange\r\n\t            ? [ // indicate range\r\n\t                [0, -mathMin(halfHoverLinkSize, mathMax(pos, 0))],\r\n\t                [HOVER_LINK_OUT, 0],\r\n\t                [0, mathMin(halfHoverLinkSize, mathMax(extentMax - pos, 0))]\r\n\t            ]\r\n\t            : [ // indicate single value\r\n\t                [0, 0], [5, -5], [5, 5]\r\n\t            ];\r\n\t    }\r\n\r\n\t    function getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent) {\r\n\t        var halfHoverLinkSize = HOVER_LINK_SIZE / 2;\r\n\t        var hoverLinkDataSize = visualMapModel.get('hoverLinkDataSize');\r\n\t        if (hoverLinkDataSize) {\r\n\t            halfHoverLinkSize = linearMap(hoverLinkDataSize, dataExtent, sizeExtent, true) / 2;\r\n\t        }\r\n\t        return halfHoverLinkSize;\r\n\t    }\r\n\r\n\t    function useHoverLinkOnHandle(visualMapModel) {\r\n\t        return !visualMapModel.get('realtime') && visualMapModel.get('hoverLinkOnHandle');\r\n\t    }\r\n\r\n\t    module.exports = ContinuousView;\r\n\r\n\r\n\r\n/***/ },\r\n/* 340 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var layout = __webpack_require__(21);\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var VisualMapping = __webpack_require__(193);\r\n\r\n\t    module.exports = echarts.extendComponentView({\r\n\r\n\t        type: 'visualMap',\r\n\r\n\t        /**\r\n\t         * @readOnly\r\n\t         * @type {Object}\r\n\t         */\r\n\t        autoPositionValues: {left: 1, right: 1, top: 1, bottom: 1},\r\n\r\n\t        init: function (ecModel, api) {\r\n\t            /**\r\n\t             * @readOnly\r\n\t             * @type {module:echarts/model/Global}\r\n\t             */\r\n\t            this.ecModel = ecModel;\r\n\r\n\t            /**\r\n\t             * @readOnly\r\n\t             * @type {module:echarts/ExtensionAPI}\r\n\t             */\r\n\t            this.api = api;\r\n\r\n\t            /**\r\n\t             * @readOnly\r\n\t             * @type {module:echarts/component/visualMap/visualMapModel}\r\n\t             */\r\n\t            this.visualMapModel;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        render: function (visualMapModel, ecModel, api, payload) {\r\n\t            this.visualMapModel = visualMapModel;\r\n\r\n\t            if (visualMapModel.get('show') === false) {\r\n\t                this.group.removeAll();\r\n\t                return;\r\n\t            }\r\n\r\n\t            this.doRender.apply(this, arguments);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        renderBackground: function (group) {\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var padding = formatUtil.normalizeCssArray(visualMapModel.get('padding') || 0);\r\n\t            var rect = group.getBoundingRect();\r\n\r\n\t            group.add(new graphic.Rect({\r\n\t                z2: -1, // Lay background rect on the lowest layer.\r\n\t                silent: true,\r\n\t                shape: {\r\n\t                    x: rect.x - padding[3],\r\n\t                    y: rect.y - padding[0],\r\n\t                    width: rect.width + padding[3] + padding[1],\r\n\t                    height: rect.height + padding[0] + padding[2]\r\n\t                },\r\n\t                style: {\r\n\t                    fill: visualMapModel.get('backgroundColor'),\r\n\t                    stroke: visualMapModel.get('borderColor'),\r\n\t                    lineWidth: visualMapModel.get('borderWidth')\r\n\t                }\r\n\t            }));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         * @param {number} targetValue\r\n\t         * @param {string=} visualCluster Only can be 'color' 'opacity' 'symbol' 'symbolSize'\r\n\t         * @param {Object} [opts]\r\n\t         * @param {string=} [opts.forceState] Specify state, instead of using getValueState method.\r\n\t         * @param {string=} [opts.convertOpacityToAlpha=false] For color gradient in controller widget.\r\n\t         * @return {*} Visual value.\r\n\t         */\r\n\t        getControllerVisual: function (targetValue, visualCluster, opts) {\r\n\t            opts = opts || {};\r\n\r\n\t            var forceState = opts.forceState;\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var visualObj = {};\r\n\r\n\t            // Default values.\r\n\t            if (visualCluster === 'symbol') {\r\n\t                visualObj.symbol = visualMapModel.get('itemSymbol');\r\n\t            }\r\n\t            if (visualCluster === 'color') {\r\n\t                var defaultColor = visualMapModel.get('contentColor');\r\n\t                visualObj.color = defaultColor;\r\n\t            }\r\n\r\n\t            function getter(key) {\r\n\t                return visualObj[key];\r\n\t            }\r\n\r\n\t            function setter(key, value) {\r\n\t                visualObj[key] = value;\r\n\t            }\r\n\r\n\t            var mappings = visualMapModel.controllerVisuals[\r\n\t                forceState || visualMapModel.getValueState(targetValue)\r\n\t            ];\r\n\t            var visualTypes = VisualMapping.prepareVisualTypes(mappings);\r\n\r\n\t            zrUtil.each(visualTypes, function (type) {\r\n\t                var visualMapping = mappings[type];\r\n\t                if (opts.convertOpacityToAlpha && type === 'opacity') {\r\n\t                    type = 'colorAlpha';\r\n\t                    visualMapping = mappings.__alphaForOpacity;\r\n\t                }\r\n\t                if (VisualMapping.dependsOn(type, visualCluster)) {\r\n\t                    visualMapping && visualMapping.applyVisual(\r\n\t                        targetValue, getter, setter\r\n\t                    );\r\n\t                }\r\n\t            });\r\n\r\n\t            return visualObj[visualCluster];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        positionGroup: function (group) {\r\n\t            var model = this.visualMapModel;\r\n\t            var api = this.api;\r\n\r\n\t            layout.positionGroup(\r\n\t                group,\r\n\t                model.getBoxLayoutParams(),\r\n\t                {width: api.getWidth(), height: api.getHeight()}\r\n\t            );\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         * @abstract\r\n\t         */\r\n\t        doRender: zrUtil.noop\r\n\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 341 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var layout = __webpack_require__(21);\r\n\r\n\t    var helper = {\r\n\r\n\t        /**\r\n\t         * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\\\r\n\t         * @param {module:echarts/ExtensionAPI} api\r\n\t         * @param {Array.<number>} itemSize always [short, long]\r\n\t         * @return {string} 'left' or 'right' or 'top' or 'bottom'\r\n\t         */\r\n\t        getItemAlign: function (visualMapModel, api, itemSize) {\r\n\t            var modelOption = visualMapModel.option;\r\n\t            var itemAlign = modelOption.align;\r\n\r\n\t            if (itemAlign != null && itemAlign !== 'auto') {\r\n\t                return itemAlign;\r\n\t            }\r\n\r\n\t            // Auto decision align.\r\n\t            var ecSize = {width: api.getWidth(), height: api.getHeight()};\r\n\t            var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;\r\n\r\n\t            var paramsSet = [\r\n\t                ['left', 'right', 'width'],\r\n\t                ['top', 'bottom', 'height']\r\n\t            ];\r\n\t            var reals = paramsSet[realIndex];\r\n\t            var fakeValue = [0, null, 10];\r\n\r\n\t            var layoutInput = {};\r\n\t            for (var i = 0; i < 3; i++) {\r\n\t                layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];\r\n\t                layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];\r\n\t            }\r\n\r\n\t            var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];\r\n\t            var rect = layout.getLayoutRect(layoutInput, ecSize, modelOption.padding);\r\n\r\n\t            return reals[\r\n\t                (rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5\r\n\t                    < ecSize[rParam[1]] * 0.5 ? 0 : 1\r\n\t            ];\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Prepare dataIndex for outside usage, where dataIndex means rawIndex, and\r\n\t         * dataIndexInside means filtered index.\r\n\t         */\r\n\t        convertDataIndex: function (batch) {\r\n\t            zrUtil.each(batch || [], function (batchItem) {\r\n\t                if (batch.dataIndex != null) {\r\n\t                    batch.dataIndexInside = batch.dataIndex;\r\n\t                    batch.dataIndex = null;\r\n\t                }\r\n\t            });\r\n\t            return batch;\r\n\t        }\r\n\r\n\t    };\r\n\r\n\r\n\t    module.exports = helper;\r\n\r\n\r\n\r\n/***/ },\r\n/* 342 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Data range action\r\n\t */\r\n\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    var actionInfo = {\r\n\t        type: 'selectDataRange',\r\n\t        event: 'dataRangeSelected',\r\n\t        // FIXME use updateView appears wrong\r\n\t        update: 'update'\r\n\t    };\r\n\r\n\t    echarts.registerAction(actionInfo, function (payload, ecModel) {\r\n\r\n\t        ecModel.eachComponent({mainType: 'visualMap', query: payload}, function (model) {\r\n\t            model.setSelected(payload.selected);\r\n\t        });\r\n\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 343 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * DataZoom component entry\r\n\t */\r\n\r\n\r\n\t    __webpack_require__(1).registerPreprocessor(\r\n\t        __webpack_require__(333)\r\n\t    );\r\n\r\n\t    __webpack_require__(334);\r\n\t    __webpack_require__(335);\r\n\t    __webpack_require__(344);\r\n\t    __webpack_require__(345);\r\n\t    __webpack_require__(342);\r\n\r\n\r\n\r\n/***/ },\r\n/* 344 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var VisualMapModel = __webpack_require__(337);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var VisualMapping = __webpack_require__(193);\r\n\r\n\t    var PiecewiseModel = VisualMapModel.extend({\r\n\r\n\t        type: 'visualMap.piecewise',\r\n\r\n\t        /**\r\n\t         * Order Rule:\r\n\t         *\r\n\t         * option.categories / option.pieces / option.text / option.selected:\r\n\t         *     If !option.inverse,\r\n\t         *     Order when vertical: ['top', ..., 'bottom'].\r\n\t         *     Order when horizontal: ['left', ..., 'right'].\r\n\t         *     If option.inverse, the meaning of\r\n\t         *     the order should be reversed.\r\n\t         *\r\n\t         * this._pieceList:\r\n\t         *     The order is always [low, ..., high].\r\n\t         *\r\n\t         * Mapping from location to low-high:\r\n\t         *     If !option.inverse\r\n\t         *     When vertical, top is high.\r\n\t         *     When horizontal, right is high.\r\n\t         *     If option.inverse, reverse.\r\n\t         */\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        defaultOption: {\r\n\t            selected: null,             // Object. If not specified, means selected.\r\n\t                                        // When pieces and splitNumber: {'0': true, '5': true}\r\n\t                                        // When categories: {'cate1': false, 'cate3': true}\r\n\t                                        // When selected === false, means all unselected.\r\n\r\n\t            minOpen: false,             // Whether include values that smaller than `min`.\r\n\t            maxOpen: false,             // Whether include values that bigger than `max`.\r\n\r\n\t            align: 'auto',              // 'auto', 'left', 'right'\r\n\t            itemWidth: 20,              // When put the controller vertically, it is the length of\r\n\t                                        // horizontal side of each item. Otherwise, vertical side.\r\n\t            itemHeight: 14,             // When put the controller vertically, it is the length of\r\n\t                                        // vertical side of each item. Otherwise, horizontal side.\r\n\t            itemSymbol: 'roundRect',\r\n\t            pieceList: null,            // Each item is Object, with some of those attrs:\r\n\t                                        // {min, max, lt, gt, lte, gte, value,\r\n\t                                        // color, colorSaturation, colorAlpha, opacity,\r\n\t                                        // symbol, symbolSize}, which customize the range or visual\r\n\t                                        // coding of the certain piece. Besides, see \"Order Rule\".\r\n\t            categories: null,           // category names, like: ['some1', 'some2', 'some3'].\r\n\t                                        // Attr min/max are ignored when categories set. See \"Order Rule\"\r\n\t            splitNumber: 5,             // If set to 5, auto split five pieces equally.\r\n\t                                        // If set to 0 and component type not set, component type will be\r\n\t                                        // determined as \"continuous\". (It is less reasonable but for ec2\r\n\t                                        // compatibility, see echarts/component/visualMap/typeDefaulter)\r\n\t            selectedMode: 'multiple',   // Can be 'multiple' or 'single'.\r\n\t            itemGap: 10,                // The gap between two items, in px.\r\n\t            hoverLink: true             // Enable hover highlight.\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        optionUpdated: function (newOption, isInit) {\r\n\t            PiecewiseModel.superApply(this, 'optionUpdated', arguments);\r\n\r\n\t            /**\r\n\t             * The order is always [low, ..., high].\r\n\t             * [{text: string, interval: Array.<number>}, ...]\r\n\t             * @private\r\n\t             * @type {Array.<Object>}\r\n\t             */\r\n\t            this._pieceList = [];\r\n\r\n\t            this.resetTargetSeries();\r\n\t            this.resetExtent();\r\n\r\n\t            /**\r\n\t             * 'pieces', 'categories', 'splitNumber'\r\n\t             * @type {string}\r\n\t             */\r\n\t            var mode = this._mode = this._determineMode();\r\n\r\n\t            resetMethods[this._mode].call(this);\r\n\r\n\t            this._resetSelected(newOption, isInit);\r\n\r\n\t            var categories = this.option.categories;\r\n\r\n\t            this.resetVisual(function (mappingOption, state) {\r\n\t                if (mode === 'categories') {\r\n\t                    mappingOption.mappingMethod = 'category';\r\n\t                    mappingOption.categories = zrUtil.clone(categories);\r\n\t                }\r\n\t                else {\r\n\t                    mappingOption.dataExtent = this.getExtent();\r\n\t                    mappingOption.mappingMethod = 'piecewise';\r\n\t                    mappingOption.pieceList = zrUtil.map(this._pieceList, function (piece) {\r\n\t                        var piece = zrUtil.clone(piece);\r\n\t                        if (state !== 'inRange') {\r\n\t                            piece.visual = null;\r\n\t                        }\r\n\t                        return piece;\r\n\t                    });\r\n\t                }\r\n\t            });\r\n\t        },\r\n\r\n\t        _resetSelected: function (newOption, isInit) {\r\n\t            var thisOption = this.option;\r\n\t            var pieceList = this._pieceList;\r\n\r\n\t            // Selected do not merge but all override.\r\n\t            var selected = (isInit ? thisOption : newOption).selected || {};\r\n\t            thisOption.selected = selected;\r\n\r\n\t            // Consider 'not specified' means true.\r\n\t            zrUtil.each(pieceList, function (piece, index) {\r\n\t                var key = this.getSelectedMapKey(piece);\r\n\t                if (!selected.hasOwnProperty(key)) {\r\n\t                    selected[key] = true;\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            if (thisOption.selectedMode === 'single') {\r\n\t                // Ensure there is only one selected.\r\n\t                var hasSel = false;\r\n\r\n\t                zrUtil.each(pieceList, function (piece, index) {\r\n\t                    var key = this.getSelectedMapKey(piece);\r\n\t                    if (selected[key]) {\r\n\t                        hasSel\r\n\t                            ? (selected[key] = false)\r\n\t                            : (hasSel = true);\r\n\t                    }\r\n\t                }, this);\r\n\t            }\r\n\t            // thisOption.selectedMode === 'multiple', default: all selected.\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         */\r\n\t        getSelectedMapKey: function (piece) {\r\n\t            return this._mode === 'categories'\r\n\t                ? piece.value + '' : piece.index + '';\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         */\r\n\t        getPieceList: function () {\r\n\t            return this._pieceList;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @return {string}\r\n\t         */\r\n\t        _determineMode: function () {\r\n\t            var option = this.option;\r\n\r\n\t            return option.pieces && option.pieces.length > 0\r\n\t                ? 'pieces'\r\n\t                : this.option.categories\r\n\t                ? 'categories'\r\n\t                : 'splitNumber';\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @override\r\n\t         */\r\n\t        setSelected: function (selected) {\r\n\t            this.option.selected = zrUtil.clone(selected);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @override\r\n\t         */\r\n\t        getValueState: function (value) {\r\n\t            var index = VisualMapping.findPieceIndex(value, this._pieceList);\r\n\r\n\t            return index != null\r\n\t                ? (this.option.selected[this.getSelectedMapKey(this._pieceList[index])]\r\n\t                    ? 'inRange' : 'outOfRange'\r\n\t                )\r\n\t                : 'outOfRange';\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @params {number} pieceIndex piece index in visualMapModel.getPieceList()\r\n\t         * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]\r\n\t         */\r\n\t        findTargetDataIndices: function (pieceIndex) {\r\n\t            var result = [];\r\n\r\n\t            this.eachTargetSeries(function (seriesModel) {\r\n\t                var dataIndices = [];\r\n\t                var data = seriesModel.getData();\r\n\r\n\t                data.each(this.getDataDimension(data), function (value, dataIndex) {\r\n\t                    // Should always base on model pieceList, because it is order sensitive.\r\n\t                    var pIdx = VisualMapping.findPieceIndex(value, this._pieceList);\r\n\t                    pIdx === pieceIndex && dataIndices.push(dataIndex);\r\n\t                }, true, this);\r\n\r\n\t                result.push({seriesId: seriesModel.id, dataIndex: dataIndices});\r\n\t            }, this);\r\n\r\n\t            return result;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        getRepresentValue: function (piece) {\r\n\t            var representValue;\r\n\t            if (this.isCategory()) {\r\n\t                representValue = piece.value;\r\n\t            }\r\n\t            else {\r\n\t                if (piece.value != null) {\r\n\t                    representValue = piece.value;\r\n\t                }\r\n\t                else {\r\n\t                    var pieceInterval = piece.interval || [];\r\n\t                    representValue = (pieceInterval[0] + pieceInterval[1]) / 2;\r\n\t                }\r\n\t            }\r\n\t            return representValue;\r\n\t        },\r\n\r\n\t        getStops: function (seriesModel, getColorVisual) {\r\n\t            var result = [];\r\n\t            var model = this;\r\n\r\n\t            var curr = -Infinity;\r\n\t            zrUtil.each(this._pieceList, function (piece) {\r\n\t                // Do not support category yet.\r\n\t                var interval = piece.interval;\r\n\t                if (interval) {\r\n\t                    interval[0] > curr && setPiece({\r\n\t                        interval: [curr, interval[0]],\r\n\t                        valueState: 'outOfRange'\r\n\t                    });\r\n\t                    setPiece({\r\n\t                        interval: interval.slice(),\r\n\t                        valueState: this.getValueState((interval[0] + interval[1]) / 2)\r\n\t                    });\r\n\t                    curr = interval[1];\r\n\t                }\r\n\t            }, this);\r\n\r\n\t            return result;\r\n\r\n\t            function setPiece(piece) {\r\n\t                result.push(piece);\r\n\t                piece.color = getColorVisual(\r\n\t                    model, model.getRepresentValue(piece), piece.valueState\r\n\t                );\r\n\t            }\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Key is this._mode\r\n\t     * @type {Object}\r\n\t     * @this {module:echarts/component/viusalMap/PiecewiseMode}\r\n\t     */\r\n\t    var resetMethods = {\r\n\r\n\t        splitNumber: function () {\r\n\t            var thisOption = this.option;\r\n\t            var pieceList = this._pieceList;\r\n\t            var precision = thisOption.precision;\r\n\t            var dataExtent = this.getExtent();\r\n\t            var splitNumber = thisOption.splitNumber;\r\n\t            splitNumber = Math.max(parseInt(splitNumber, 10), 1);\r\n\t            thisOption.splitNumber = splitNumber;\r\n\r\n\t            var splitStep = (dataExtent[1] - dataExtent[0]) / splitNumber;\r\n\t            // Precision auto-adaption\r\n\t            while (+splitStep.toFixed(precision) !== splitStep && precision < 5) {\r\n\t                precision++;\r\n\t            }\r\n\t            thisOption.precision = precision;\r\n\t            splitStep = +splitStep.toFixed(precision);\r\n\r\n\t            var index = 0;\r\n\r\n\t            if (thisOption.minOpen) {\r\n\t                pieceList.push({\r\n\t                    index: index++,\r\n\t                    interval: [-Infinity, dataExtent[0]],\r\n\t                    close: [0, 0]\r\n\t                });\r\n\t            }\r\n\r\n\t            for (\r\n\t                var curr = dataExtent[0], len = index + splitNumber;\r\n\t                index < len;\r\n\t                curr += splitStep\r\n\t            ) {\r\n\t                var max = index === splitNumber - 1 ? dataExtent[1] : (curr + splitStep);\r\n\r\n\t                pieceList.push({\r\n\t                    index: index++,\r\n\t                    interval: [curr, max],\r\n\t                    close: [1, 1]\r\n\t                });\r\n\t            }\r\n\r\n\t            if (thisOption.maxOpen) {\r\n\t                pieceList.push({\r\n\t                    index: index++,\r\n\t                    interval: [dataExtent[1], Infinity],\r\n\t                    close: [0, 0]\r\n\t                });\r\n\t            }\r\n\r\n\t            normalizePieces(pieceList);\r\n\r\n\t            zrUtil.each(pieceList, function (piece) {\r\n\t                piece.text = this.formatValueText(piece.interval);\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        categories: function () {\r\n\t            var thisOption = this.option;\r\n\t            zrUtil.each(thisOption.categories, function (cate) {\r\n\t                // FIXME category模式也使用pieceList，但在visualMapping中不是使用pieceList。\r\n\t                // 是否改一致。\r\n\t                this._pieceList.push({\r\n\t                    text: this.formatValueText(cate, true),\r\n\t                    value: cate\r\n\t                });\r\n\t            }, this);\r\n\r\n\t            // See \"Order Rule\".\r\n\t            normalizeReverse(thisOption, this._pieceList);\r\n\t        },\r\n\r\n\t        pieces: function () {\r\n\t            var thisOption = this.option;\r\n\t            var pieceList = this._pieceList;\r\n\r\n\t            zrUtil.each(thisOption.pieces, function (pieceListItem, index) {\r\n\r\n\t                if (!zrUtil.isObject(pieceListItem)) {\r\n\t                    pieceListItem = {value: pieceListItem};\r\n\t                }\r\n\r\n\t                var item = {text: '', index: index};\r\n\r\n\t                if (pieceListItem.label != null) {\r\n\t                    item.text = pieceListItem.label;\r\n\t                }\r\n\r\n\t                if (pieceListItem.hasOwnProperty('value')) {\r\n\t                    var value = item.value = pieceListItem.value;\r\n\t                    item.interval = [value, value];\r\n\t                    item.close = [1, 1];\r\n\t                }\r\n\t                else {\r\n\t                    // `min` `max` is legacy option.\r\n\t                    // `lt` `gt` `lte` `gte` is recommanded.\r\n\t                    var interval = item.interval = [];\r\n\t                    var close = item.close = [0, 0];\r\n\r\n\t                    var closeList = [1, 0, 1];\r\n\t                    var infinityList = [-Infinity, Infinity];\r\n\r\n\t                    var useMinMax = [];\r\n\t                    for (var lg = 0; lg < 2; lg++) {\r\n\t                        var names = [['gte', 'gt', 'min'], ['lte', 'lt', 'max']][lg];\r\n\t                        for (var i = 0; i < 3 && interval[lg] == null; i++) {\r\n\t                            interval[lg] = pieceListItem[names[i]];\r\n\t                            close[lg] = closeList[i];\r\n\t                            useMinMax[lg] = i === 2;\r\n\t                        }\r\n\t                        interval[lg] == null && (interval[lg] = infinityList[lg]);\r\n\t                    }\r\n\t                    useMinMax[0] && interval[1] === Infinity && (close[0] = 0);\r\n\t                    useMinMax[1] && interval[0] === -Infinity && (close[1] = 0);\r\n\r\n\t                    if (true) {\r\n\t                        if (interval[0] > interval[1]) {\r\n\t                            console.warn(\r\n\t                                'Piece ' + index + 'is illegal: ' + interval\r\n\t                                + ' lower bound should not greater then uppper bound.'\r\n\t                            );\r\n\t                        }\r\n\t                    }\r\n\r\n\t                    if (interval[0] === interval[1] && close[0] && close[1]) {\r\n\t                        // Consider: [{min: 5, max: 5, visual: {...}}, {min: 0, max: 5}],\r\n\t                        // we use value to lift the priority when min === max\r\n\t                        item.value = interval[0];\r\n\t                    }\r\n\t                }\r\n\r\n\t                item.visual = VisualMapping.retrieveVisuals(pieceListItem);\r\n\r\n\t                pieceList.push(item);\r\n\r\n\t            }, this);\r\n\r\n\t            // See \"Order Rule\".\r\n\t            normalizeReverse(thisOption, pieceList);\r\n\t            // Only pieces\r\n\t            normalizePieces(pieceList);\r\n\r\n\t            zrUtil.each(pieceList, function (piece) {\r\n\t                var close = piece.close;\r\n\t                var edgeSymbols = [['<', '≤'][close[1]], ['>', '≥'][close[0]]];\r\n\t                piece.text = piece.text || this.formatValueText(\r\n\t                    piece.value != null ? piece.value : piece.interval,\r\n\t                    false,\r\n\t                    edgeSymbols\r\n\t                );\r\n\t            }, this);\r\n\t        }\r\n\t    };\r\n\r\n\t    function normalizeReverse(thisOption, pieceList) {\r\n\t        var inverse = thisOption.inverse;\r\n\t        if (thisOption.orient === 'vertical' ? !inverse : inverse) {\r\n\t             pieceList.reverse();\r\n\t        }\r\n\t    }\r\n\r\n\t    // Reorder, remove duplicate, which are needed when using gradient.\r\n\t    // Not applicable for categories.\r\n\t    function normalizePieces(pieceList) {\r\n\t        pieceList.sort(function (a, b) {\r\n\t            return littleThan(a, b) ? -1 : 1;\r\n\t        });\r\n\r\n\t        var curr = -Infinity;\r\n\t        for (var i = 0; i < pieceList.length; i++) {\r\n\t            var interval = pieceList[i].interval;\r\n\t            var close = pieceList[i].close;\r\n\t            for (var lg = 0; lg < 2; lg++) {\r\n\t                if (interval[lg] < curr) {\r\n\t                    interval[lg] = curr;\r\n\t                    close[lg] = 1 - lg;\r\n\t                }\r\n\t                curr = interval[lg];\r\n\t            }\r\n\t        }\r\n\r\n\t        function littleThan(piece, standard, lg) {\r\n\t            lg = lg || 0;\r\n\t            return piece.interval[lg] < standard.interval[lg]\r\n\t                || (\r\n\t                    piece.interval[lg] === standard.interval[lg]\r\n\t                    && (\r\n\t                        +piece.close[lg] > standard.close[lg]\r\n\t                        || littleThan(piece, standard, 1)\r\n\t                    )\r\n\t                );\r\n\t        }\r\n\t    }\r\n\r\n\t    module.exports = PiecewiseModel;\r\n\r\n\r\n/***/ },\r\n/* 345 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var VisualMapView = __webpack_require__(340);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var symbolCreators = __webpack_require__(106);\r\n\t    var layout = __webpack_require__(21);\r\n\t    var helper = __webpack_require__(341);\r\n\r\n\t    var PiecewiseVisualMapView = VisualMapView.extend({\r\n\r\n\t        type: 'visualMap.piecewise',\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         * @override\r\n\t         */\r\n\t        doRender: function () {\r\n\t            var thisGroup = this.group;\r\n\r\n\t            thisGroup.removeAll();\r\n\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var textGap = visualMapModel.get('textGap');\r\n\t            var textStyleModel = visualMapModel.textStyleModel;\r\n\t            var textFont = textStyleModel.getFont();\r\n\t            var textFill = textStyleModel.getTextColor();\r\n\t            var itemAlign = this._getItemAlign();\r\n\t            var itemSize = visualMapModel.itemSize;\r\n\r\n\t            var viewData = this._getViewData();\r\n\t            var showLabel = !viewData.endsText;\r\n\t            var showEndsText = !showLabel;\r\n\r\n\t            showEndsText && this._renderEndsText(thisGroup, viewData.endsText[0], itemSize);\r\n\r\n\t            zrUtil.each(viewData.viewPieceList, renderItem, this);\r\n\r\n\t            showEndsText && this._renderEndsText(thisGroup, viewData.endsText[1], itemSize);\r\n\r\n\t            layout.box(\r\n\t                visualMapModel.get('orient'), thisGroup, visualMapModel.get('itemGap')\r\n\t            );\r\n\r\n\t            this.renderBackground(thisGroup);\r\n\r\n\t            this.positionGroup(thisGroup);\r\n\r\n\t            function renderItem(item) {\r\n\t                var piece = item.piece;\r\n\r\n\t                var itemGroup = new graphic.Group();\r\n\t                itemGroup.onclick = zrUtil.bind(this._onItemClick, this, piece);\r\n\r\n\t                this._enableHoverLink(itemGroup, item.indexInModelPieceList);\r\n\r\n\t                var representValue = visualMapModel.getRepresentValue(piece);\r\n\r\n\t                this._createItemSymbol(\r\n\t                    itemGroup, representValue, [0, 0, itemSize[0], itemSize[1]]\r\n\t                );\r\n\r\n\t                if (showLabel) {\r\n\t                    var visualState = this.visualMapModel.getValueState(representValue);\r\n\r\n\t                    itemGroup.add(new graphic.Text({\r\n\t                        style: {\r\n\t                            x: itemAlign === 'right' ? -textGap : itemSize[0] + textGap,\r\n\t                            y: itemSize[1] / 2,\r\n\t                            text: piece.text,\r\n\t                            textVerticalAlign: 'middle',\r\n\t                            textAlign: itemAlign,\r\n\t                            textFont: textFont,\r\n\t                            fill: textFill,\r\n\t                            opacity: visualState === 'outOfRange' ? 0.5 : 1\r\n\t                        }\r\n\t                    }));\r\n\t                }\r\n\r\n\t                thisGroup.add(itemGroup);\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _enableHoverLink: function (itemGroup, pieceIndex) {\r\n\t            itemGroup\r\n\t                .on('mouseover', zrUtil.bind(onHoverLink, this, 'highlight'))\r\n\t                .on('mouseout', zrUtil.bind(onHoverLink, this, 'downplay'));\r\n\r\n\t            function onHoverLink(method) {\r\n\t                var visualMapModel = this.visualMapModel;\r\n\r\n\t                visualMapModel.option.hoverLink && this.api.dispatchAction({\r\n\t                    type: method,\r\n\t                    batch: helper.convertDataIndex(\r\n\t                        visualMapModel.findTargetDataIndices(pieceIndex)\r\n\t                    )\r\n\t                });\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _getItemAlign: function () {\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var modelOption = visualMapModel.option;\r\n\r\n\t            if (modelOption.orient === 'vertical') {\r\n\t                return helper.getItemAlign(\r\n\t                    visualMapModel, this.api, visualMapModel.itemSize\r\n\t                );\r\n\t            }\r\n\t            else { // horizontal, most case left unless specifying right.\r\n\t                var align = modelOption.align;\r\n\t                if (!align || align === 'auto') {\r\n\t                    align = 'left';\r\n\t                }\r\n\t                return align;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _renderEndsText: function (group, text, itemSize) {\r\n\t            if (!text) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var itemGroup = new graphic.Group();\r\n\t            var textStyleModel = this.visualMapModel.textStyleModel;\r\n\r\n\t            itemGroup.add(new graphic.Text({\r\n\t                style: {\r\n\t                    x: itemSize[0] / 2,\r\n\t                    y: itemSize[1] / 2,\r\n\t                    textVerticalAlign: 'middle',\r\n\t                    textAlign: 'center',\r\n\t                    text: text,\r\n\t                    textFont: textStyleModel.getFont(),\r\n\t                    fill: textStyleModel.getTextColor()\r\n\t                }\r\n\t            }));\r\n\r\n\t            group.add(itemGroup);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @return {Object} {peiceList, endsText} The order is the same as screen pixel order.\r\n\t         */\r\n\t        _getViewData: function () {\r\n\t            var visualMapModel = this.visualMapModel;\r\n\r\n\t            var viewPieceList = zrUtil.map(visualMapModel.getPieceList(), function (piece, index) {\r\n\t                return {piece: piece, indexInModelPieceList: index};\r\n\t            });\r\n\t            var endsText = visualMapModel.get('text');\r\n\r\n\t            // Consider orient and inverse.\r\n\t            var orient = visualMapModel.get('orient');\r\n\t            var inverse = visualMapModel.get('inverse');\r\n\r\n\t            // Order of model pieceList is always [low, ..., high]\r\n\t            if (orient === 'horizontal' ? inverse : !inverse) {\r\n\t                viewPieceList.reverse();\r\n\t            }\r\n\t            // Origin order of endsText is [high, low]\r\n\t            else if (endsText) {\r\n\t                endsText = endsText.slice().reverse();\r\n\t            }\r\n\r\n\t            return {viewPieceList: viewPieceList, endsText: endsText};\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _createItemSymbol: function (group, representValue, shapeParam) {\r\n\t            group.add(symbolCreators.createSymbol(\r\n\t                this.getControllerVisual(representValue, 'symbol'),\r\n\t                shapeParam[0], shapeParam[1], shapeParam[2], shapeParam[3],\r\n\t                this.getControllerVisual(representValue, 'color')\r\n\t            ));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _onItemClick: function (piece) {\r\n\t            var visualMapModel = this.visualMapModel;\r\n\t            var option = visualMapModel.option;\r\n\t            var selected = zrUtil.clone(option.selected);\r\n\t            var newKey = visualMapModel.getSelectedMapKey(piece);\r\n\r\n\t            if (option.selectedMode === 'single') {\r\n\t                selected[newKey] = true;\r\n\t                zrUtil.each(selected, function (o, key) {\r\n\t                    selected[key] = key === newKey;\r\n\t                });\r\n\t            }\r\n\t            else {\r\n\t                selected[newKey] = !selected[newKey];\r\n\t            }\r\n\r\n\t            this.api.dispatchAction({\r\n\t                type: 'selectDataRange',\r\n\t                from: this.uid,\r\n\t                visualMapId: this.visualMapModel.id,\r\n\t                selected: selected\r\n\t            });\r\n\t        }\r\n\t    });\r\n\r\n\t    module.exports = PiecewiseVisualMapView;\r\n\r\n\r\n\r\n/***/ },\r\n/* 346 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// HINT Markpoint can't be used too much\r\n\r\n\r\n\t    __webpack_require__(347);\r\n\t    __webpack_require__(349);\r\n\r\n\t    __webpack_require__(1).registerPreprocessor(function (opt) {\r\n\t        // Make sure markPoint component is enabled\r\n\t        opt.markPoint = opt.markPoint || {};\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 347 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    module.exports = __webpack_require__(348).extend({\r\n\r\n\t        type: 'markPoint',\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,\r\n\t            z: 5,\r\n\t            symbol: 'pin',\r\n\t            symbolSize: 50,\r\n\t            //symbolRotate: 0,\r\n\t            //symbolOffset: [0, 0]\r\n\t            tooltip: {\r\n\t                trigger: 'item'\r\n\t            },\r\n\t            label: {\r\n\t                normal: {\r\n\t                    show: true,\r\n\t                    position: 'inside'\r\n\t                },\r\n\t                emphasis: {\r\n\t                    show: true\r\n\t                }\r\n\t            },\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    borderWidth: 2\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 348 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var modelUtil = __webpack_require__(5);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var env = __webpack_require__(2);\r\n\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var addCommas = formatUtil.addCommas;\r\n\t    var encodeHTML = formatUtil.encodeHTML;\r\n\r\n\t    function fillLabel(opt) {\r\n\t        modelUtil.defaultEmphasis(\r\n\t            opt.label,\r\n\t            modelUtil.LABEL_OPTIONS\r\n\t        );\r\n\t    }\r\n\t    var MarkerModel = __webpack_require__(1).extendComponentModel({\r\n\r\n\t        type: 'marker',\r\n\r\n\t        dependencies: ['series', 'grid', 'polar', 'geo'],\r\n\t        /**\r\n\t         * @overrite\r\n\t         */\r\n\t        init: function (option, parentModel, ecModel, extraOpt) {\r\n\r\n\t            if (true) {\r\n\t                if (this.type === 'marker') {\r\n\t                    throw new Error('Marker component is abstract component. Use markLine, markPoint, markArea instead.');\r\n\t                }\r\n\t            }\r\n\t            this.mergeDefaultAndTheme(option, ecModel);\r\n\t            this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        ifEnableAnimation: function () {\r\n\t            if (env.node) {\r\n\t                return false;\r\n\t            }\r\n\r\n\t            var hostSeries = this.__hostSeries;\r\n\t            return this.getShallow('animation') && hostSeries && hostSeries.ifEnableAnimation();\r\n\t        },\r\n\r\n\t        mergeOption: function (newOpt, ecModel, createdBySelf, isInit) {\r\n\t            var MarkerModel = this.constructor;\r\n\t            var modelPropName = this.mainType + 'Model';\r\n\t            if (!createdBySelf) {\r\n\t                ecModel.eachSeries(function (seriesModel) {\r\n\r\n\t                    var markerOpt = seriesModel.get(this.mainType);\r\n\r\n\t                    var markerModel = seriesModel[modelPropName];\r\n\t                    if (!markerOpt || !markerOpt.data) {\r\n\t                        seriesModel[modelPropName] = null;\r\n\t                        return;\r\n\t                    }\r\n\t                    if (!markerModel) {\r\n\t                        if (isInit) {\r\n\t                            // Default label emphasis `position` and `show`\r\n\t                            fillLabel(markerOpt);\r\n\t                        }\r\n\t                        zrUtil.each(markerOpt.data, function (item) {\r\n\t                            // FIXME Overwrite fillLabel method ?\r\n\t                            if (item instanceof Array) {\r\n\t                                fillLabel(item[0]);\r\n\t                                fillLabel(item[1]);\r\n\t                            }\r\n\t                            else {\r\n\t                                fillLabel(item);\r\n\t                            }\r\n\t                        });\r\n\r\n\t                        markerModel = new MarkerModel(\r\n\t                            markerOpt, this, ecModel\r\n\t                        );\r\n\r\n\t                        zrUtil.extend(markerModel, {\r\n\t                            mainType: this.mainType,\r\n\t                            // Use the same series index and name\r\n\t                            seriesIndex: seriesModel.seriesIndex,\r\n\t                            name: seriesModel.name,\r\n\t                            createdBySelf: true\r\n\t                        });\r\n\r\n\t                        markerModel.__hostSeries = seriesModel;\r\n\t                    }\r\n\t                    else {\r\n\t                        markerModel.mergeOption(markerOpt, ecModel, true);\r\n\t                    }\r\n\t                    seriesModel[modelPropName] = markerModel;\r\n\t                }, this);\r\n\t            }\r\n\t        },\r\n\r\n\t        formatTooltip: function (dataIndex) {\r\n\t            var data = this.getData();\r\n\t            var value = this.getRawValue(dataIndex);\r\n\t            var formattedValue = zrUtil.isArray(value)\r\n\t                ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);\r\n\t            var name = data.getName(dataIndex);\r\n\t            var html = this.name;\r\n\t            if (value != null || name) {\r\n\t                html += '<br />';\r\n\t            }\r\n\t            if (name) {\r\n\t                html += encodeHTML(name);\r\n\t                if (value != null) {\r\n\t                    html += ' : ';\r\n\t                }\r\n\t            }\r\n\t            if (value != null) {\r\n\t                html += formattedValue;\r\n\t            }\r\n\t            return html;\r\n\t        },\r\n\r\n\t        getData: function () {\r\n\t            return this._data;\r\n\t        },\r\n\r\n\t        setData: function (data) {\r\n\t            this._data = data;\r\n\t        }\r\n\t    });\r\n\r\n\t    zrUtil.mixin(MarkerModel, modelUtil.dataFormatMixin);\r\n\r\n\t    module.exports = MarkerModel;\r\n\r\n\r\n/***/ },\r\n/* 349 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var SymbolDraw = __webpack_require__(104);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\r\n\t    var List = __webpack_require__(97);\r\n\r\n\t    var markerHelper = __webpack_require__(350);\r\n\r\n\t    function updateMarkerLayout(mpData, seriesModel, api) {\r\n\t        var coordSys = seriesModel.coordinateSystem;\r\n\t        mpData.each(function (idx) {\r\n\t            var itemModel = mpData.getItemModel(idx);\r\n\t            var point;\r\n\t            var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());\r\n\t            var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());\r\n\t            if (!isNaN(xPx) && !isNaN(yPx)) {\r\n\t                point = [xPx, yPx];\r\n\t            }\r\n\t            // Chart like bar may have there own marker positioning logic\r\n\t            else if (seriesModel.getMarkerPosition) {\r\n\t                // Use the getMarkerPoisition\r\n\t                point = seriesModel.getMarkerPosition(\r\n\t                    mpData.getValues(mpData.dimensions, idx)\r\n\t                );\r\n\t            }\r\n\t            else if (coordSys) {\r\n\t                var x = mpData.get(coordSys.dimensions[0], idx);\r\n\t                var y = mpData.get(coordSys.dimensions[1], idx);\r\n\t                point = coordSys.dataToPoint([x, y]);\r\n\r\n\t            }\r\n\r\n\t            // Use x, y if has any\r\n\t            if (!isNaN(xPx)) {\r\n\t                point[0] = xPx;\r\n\t            }\r\n\t            if (!isNaN(yPx)) {\r\n\t                point[1] = yPx;\r\n\t            }\r\n\r\n\t            mpData.setItemLayout(idx, point);\r\n\t        });\r\n\t    }\r\n\r\n\t    __webpack_require__(351).extend({\r\n\r\n\t        type: 'markPoint',\r\n\r\n\t        updateLayout: function (markPointModel, ecModel, api) {\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\t                var mpModel = seriesModel.markPointModel;\r\n\t                if (mpModel) {\r\n\t                    updateMarkerLayout(mpModel.getData(), seriesModel, api);\r\n\t                    this.markerGroupMap[seriesModel.name].updateLayout(mpModel);\r\n\t                }\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        renderSeries: function (seriesModel, mpModel, ecModel, api) {\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            var seriesName = seriesModel.name;\r\n\t            var seriesData = seriesModel.getData();\r\n\r\n\t            var symbolDrawMap = this.markerGroupMap;\r\n\t            var symbolDraw = symbolDrawMap[seriesName];\r\n\t            if (!symbolDraw) {\r\n\t                symbolDraw = symbolDrawMap[seriesName] = new SymbolDraw();\r\n\t            }\r\n\r\n\t            var mpData = createList(coordSys, seriesModel, mpModel);\r\n\r\n\t            // FIXME\r\n\t            mpModel.setData(mpData);\r\n\r\n\t            updateMarkerLayout(mpModel.getData(), seriesModel, api);\r\n\r\n\t            mpData.each(function (idx) {\r\n\t                var itemModel = mpData.getItemModel(idx);\r\n\t                var symbolSize = itemModel.getShallow('symbolSize');\r\n\t                if (typeof symbolSize === 'function') {\r\n\t                    // FIXME 这里不兼容 ECharts 2.x，2.x 貌似参数是整个数据？\r\n\t                    symbolSize = symbolSize(\r\n\t                        mpModel.getRawValue(idx), mpModel.getDataParams(idx)\r\n\t                    );\r\n\t                }\r\n\t                mpData.setItemVisual(idx, {\r\n\t                    symbolSize: symbolSize,\r\n\t                    color: itemModel.get('itemStyle.normal.color')\r\n\t                        || seriesData.getVisual('color'),\r\n\t                    symbol: itemModel.getShallow('symbol')\r\n\t                });\r\n\t            });\r\n\r\n\t            // TODO Text are wrong\r\n\t            symbolDraw.updateData(mpData);\r\n\t            this.group.add(symbolDraw.group);\r\n\r\n\t            // Set host model for tooltip\r\n\t            // FIXME\r\n\t            mpData.eachItemGraphicEl(function (el) {\r\n\t                el.traverse(function (child) {\r\n\t                    child.dataModel = mpModel;\r\n\t                });\r\n\t            });\r\n\r\n\t            symbolDraw.__keep = true;\r\n\r\n\t            symbolDraw.group.silent = mpModel.get('silent') || seriesModel.get('silent');\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     * @param {module:echarts/coord/*} [coordSys]\r\n\t     * @param {module:echarts/model/Series} seriesModel\r\n\t     * @param {module:echarts/model/Model} mpModel\r\n\t     */\r\n\t    function createList(coordSys, seriesModel, mpModel) {\r\n\t        var coordDimsInfos;\r\n\t        if (coordSys) {\r\n\t            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {\r\n\t                var info = seriesModel.getData().getDimensionInfo(\r\n\t                    seriesModel.coordDimToDataDim(coordDim)[0]\r\n\t                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys\r\n\t                info.name = coordDim;\r\n\t                return info;\r\n\t            });\r\n\t        }\r\n\t        else {\r\n\t            coordDimsInfos =[{\r\n\t                name: 'value',\r\n\t                type: 'float'\r\n\t            }];\r\n\t        }\r\n\r\n\t        var mpData = new List(coordDimsInfos, mpModel);\r\n\t        var dataOpt = zrUtil.map(mpModel.get('data'), zrUtil.curry(\r\n\t                markerHelper.dataTransform, seriesModel\r\n\t            ));\r\n\t        if (coordSys) {\r\n\t            dataOpt = zrUtil.filter(\r\n\t                dataOpt, zrUtil.curry(markerHelper.dataFilter, coordSys)\r\n\t            );\r\n\t        }\r\n\r\n\t        mpData.initData(dataOpt, null,\r\n\t            coordSys ? markerHelper.dimValueGetter : function (item) {\r\n\t                return item.value;\r\n\t            }\r\n\t        );\r\n\t        return mpData;\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 350 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var indexOf = zrUtil.indexOf;\r\n\r\n\t    function hasXOrY(item) {\r\n\t        return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));\r\n\t    }\r\n\r\n\t    function hasXAndY(item) {\r\n\t        return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));\r\n\t    }\r\n\r\n\t    function getPrecision(data, valueAxisDim, dataIndex) {\r\n\t        var precision = -1;\r\n\t        do {\r\n\t            precision = Math.max(\r\n\t                numberUtil.getPrecision(data.get(\r\n\t                    valueAxisDim, dataIndex\r\n\t                )),\r\n\t                precision\r\n\t            );\r\n\t            data = data.stackedOn;\r\n\t        } while (data);\r\n\r\n\t        return precision;\r\n\t    }\r\n\r\n\t    function markerTypeCalculatorWithExtent(\r\n\t        mlType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex\r\n\t    ) {\r\n\t        var coordArr = [];\r\n\t        var value = numCalculate(data, targetDataDim, mlType);\r\n\r\n\t        var dataIndex = data.indexOfNearest(targetDataDim, value, true);\r\n\t        coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex, true);\r\n\t        coordArr[targetCoordIndex] = data.get(targetDataDim, dataIndex, true);\r\n\r\n\t        var precision = getPrecision(data, targetDataDim, dataIndex);\r\n\t        if (precision >= 0) {\r\n\t            coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);\r\n\t        }\r\n\r\n\t        return coordArr;\r\n\t    }\r\n\r\n\t    var curry = zrUtil.curry;\r\n\t    // TODO Specified percent\r\n\t    var markerTypeCalculator = {\r\n\t        /**\r\n\t         * @method\r\n\t         * @param {module:echarts/data/List} data\r\n\t         * @param {string} baseAxisDim\r\n\t         * @param {string} valueAxisDim\r\n\t         */\r\n\t        min: curry(markerTypeCalculatorWithExtent, 'min'),\r\n\t        /**\r\n\t         * @method\r\n\t         * @param {module:echarts/data/List} data\r\n\t         * @param {string} baseAxisDim\r\n\t         * @param {string} valueAxisDim\r\n\t         */\r\n\t        max: curry(markerTypeCalculatorWithExtent, 'max'),\r\n\r\n\t        /**\r\n\t         * @method\r\n\t         * @param {module:echarts/data/List} data\r\n\t         * @param {string} baseAxisDim\r\n\t         * @param {string} valueAxisDim\r\n\t         */\r\n\t        average: curry(markerTypeCalculatorWithExtent, 'average')\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Transform markPoint data item to format used in List by do the following\r\n\t     * 1. Calculate statistic like `max`, `min`, `average`\r\n\t     * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array\r\n\t     * @param  {module:echarts/model/Series} seriesModel\r\n\t     * @param  {module:echarts/coord/*} [coordSys]\r\n\t     * @param  {Object} item\r\n\t     * @return {Object}\r\n\t     */\r\n\t    var dataTransform = function (seriesModel, item) {\r\n\t        var data = seriesModel.getData();\r\n\t        var coordSys = seriesModel.coordinateSystem;\r\n\r\n\t        // 1. If not specify the position with pixel directly\r\n\t        // 2. If `coord` is not a data array. Which uses `xAxis`,\r\n\t        // `yAxis` to specify the coord on each dimension\r\n\r\n\t        // parseFloat first because item.x and item.y can be percent string like '20%'\r\n\t        if (item && !hasXAndY(item) && !zrUtil.isArray(item.coord) && coordSys) {\r\n\t            var dims = coordSys.dimensions;\r\n\t            var axisInfo = getAxisInfo(item, data, coordSys, seriesModel);\r\n\r\n\t            // Clone the option\r\n\t            // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value\r\n\t            item = zrUtil.clone(item);\r\n\r\n\t            if (item.type\r\n\t                && markerTypeCalculator[item.type]\r\n\t                && axisInfo.baseAxis && axisInfo.valueAxis\r\n\t            ) {\r\n\t                var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);\r\n\t                var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);\r\n\r\n\t                item.coord = markerTypeCalculator[item.type](\r\n\t                    data, axisInfo.baseDataDim, axisInfo.valueDataDim,\r\n\t                    otherCoordIndex, targetCoordIndex\r\n\t                );\r\n\t                // Force to use the value of calculated value.\r\n\t                item.value = item.coord[targetCoordIndex];\r\n\t            }\r\n\t            else {\r\n\t                // FIXME Only has one of xAxis and yAxis.\r\n\t                var coord = [\r\n\t                    item.xAxis != null ? item.xAxis : item.radiusAxis,\r\n\t                    item.yAxis != null ? item.yAxis : item.angleAxis\r\n\t                ];\r\n\t                // Each coord support max, min, average\r\n\t                for (var i = 0; i < 2; i++) {\r\n\t                    if (markerTypeCalculator[coord[i]]) {\r\n\t                        var dataDim = seriesModel.coordDimToDataDim(dims[i])[0];\r\n\t                        coord[i] = numCalculate(data, dataDim, coord[i]);\r\n\t                    }\r\n\t                }\r\n\t                item.coord = coord;\r\n\t            }\r\n\t        }\r\n\t        return item;\r\n\t    };\r\n\r\n\t    var getAxisInfo = function (item, data, coordSys, seriesModel) {\r\n\t        var ret = {};\r\n\r\n\t        if (item.valueIndex != null || item.valueDim != null) {\r\n\t            ret.valueDataDim = item.valueIndex != null\r\n\t                ? data.getDimension(item.valueIndex) : item.valueDim;\r\n\t            ret.valueAxis = coordSys.getAxis(seriesModel.dataDimToCoordDim(ret.valueDataDim));\r\n\t            ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);\r\n\t            ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];\r\n\t        }\r\n\t        else {\r\n\t            ret.baseAxis = seriesModel.getBaseAxis();\r\n\t            ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);\r\n\t            ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];\r\n\t            ret.valueDataDim = seriesModel.coordDimToDataDim(ret.valueAxis.dim)[0];\r\n\t        }\r\n\r\n\t        return ret;\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Filter data which is out of coordinateSystem range\r\n\t     * [dataFilter description]\r\n\t     * @param  {module:echarts/coord/*} [coordSys]\r\n\t     * @param  {Object} item\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    var dataFilter = function (coordSys, item) {\r\n\t        // Alwalys return true if there is no coordSys\r\n\t        return (coordSys && coordSys.containData && item.coord && !hasXOrY(item))\r\n\t            ? coordSys.containData(item.coord) : true;\r\n\t    };\r\n\r\n\t    var dimValueGetter = function (item, dimName, dataIndex, dimIndex) {\r\n\t        // x, y, radius, angle\r\n\t        if (dimIndex < 2) {\r\n\t            return item.coord && item.coord[dimIndex];\r\n\t        }\r\n\t        return item.value;\r\n\t    };\r\n\r\n\t    var numCalculate = function (data, valueDataDim, type) {\r\n\t        if (type === 'average') {\r\n\t            var sum = 0;\r\n\t            var count = 0;\r\n\t            data.each(valueDataDim, function (val, idx) {\r\n\t                if (!isNaN(val)) {\r\n\t                    sum += val;\r\n\t                    count++;\r\n\t                }\r\n\t            }, true);\r\n\t            return sum / count;\r\n\t        }\r\n\t        else {\r\n\t            return data.getDataExtent(valueDataDim, true)[type === 'max' ? 1 : 0];\r\n\t        }\r\n\t    };\r\n\r\n\t    module.exports = {\r\n\t        dataTransform: dataTransform,\r\n\t        dataFilter: dataFilter,\r\n\t        dimValueGetter: dimValueGetter,\r\n\t        getAxisInfo: getAxisInfo,\r\n\t        numCalculate: numCalculate\r\n\t    };\r\n\r\n\r\n/***/ },\r\n/* 351 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    module.exports = __webpack_require__(1).extendComponentView({\r\n\r\n\t        type: 'marker',\r\n\r\n\t        init: function () {\r\n\t            /**\r\n\t             * Markline grouped by series\r\n\t             * @private\r\n\t             * @type {Object}\r\n\t             */\r\n\t            this.markerGroupMap = {};\r\n\t        },\r\n\r\n\t        render: function (markerModel, ecModel, api) {\r\n\t            var markerGroupMap = this.markerGroupMap;\r\n\t            for (var name in markerGroupMap) {\r\n\t                if (markerGroupMap.hasOwnProperty(name)) {\r\n\t                    markerGroupMap[name].__keep = false;\r\n\t                }\r\n\t            }\r\n\r\n\t            var markerModelKey = this.type + 'Model';\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\t                var markerModel = seriesModel[markerModelKey];\r\n\t                markerModel && this.renderSeries(seriesModel, markerModel, ecModel, api);\r\n\t            }, this);\r\n\r\n\t            for (var name in markerGroupMap) {\r\n\t                if (markerGroupMap.hasOwnProperty(name) && !markerGroupMap[name].__keep) {\r\n\t                    this.group.remove(markerGroupMap[name].group);\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        renderSeries: function () {}\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 352 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(353);\r\n\t    __webpack_require__(354);\r\n\r\n\t    __webpack_require__(1).registerPreprocessor(function (opt) {\r\n\t        // Make sure markLine component is enabled\r\n\t        opt.markLine = opt.markLine || {};\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 353 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    module.exports = __webpack_require__(348).extend({\r\n\r\n\t        type: 'markLine',\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,\r\n\t            z: 5,\r\n\r\n\t            symbol: ['circle', 'arrow'],\r\n\t            symbolSize: [8, 16],\r\n\r\n\t            //symbolRotate: 0,\r\n\r\n\t            precision: 2,\r\n\t            tooltip: {\r\n\t                trigger: 'item'\r\n\t            },\r\n\t            label: {\r\n\t                normal: {\r\n\t                    show: true,\r\n\t                    position: 'end'\r\n\t                },\r\n\t                emphasis: {\r\n\t                    show: true\r\n\t                }\r\n\t            },\r\n\t            lineStyle: {\r\n\t                normal: {\r\n\t                    type: 'dashed'\r\n\t                },\r\n\t                emphasis: {\r\n\t                    width: 3\r\n\t                }\r\n\t            },\r\n\t            animationEasing: 'linear'\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 354 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var List = __webpack_require__(97);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\r\n\t    var markerHelper = __webpack_require__(350);\r\n\r\n\t    var LineDraw = __webpack_require__(200);\r\n\r\n\t    var markLineTransform = function (seriesModel, coordSys, mlModel, item) {\r\n\t        var data = seriesModel.getData();\r\n\t        // Special type markLine like 'min', 'max', 'average'\r\n\t        var mlType = item.type;\r\n\r\n\t        if (!zrUtil.isArray(item)\r\n\t            && (\r\n\t                mlType === 'min' || mlType === 'max' || mlType === 'average'\r\n\t                // In case\r\n\t                // data: [{\r\n\t                //   yAxis: 10\r\n\t                // }]\r\n\t                || (item.xAxis != null || item.yAxis != null)\r\n\t            )\r\n\t        ) {\r\n\t            var valueAxis;\r\n\t            var valueDataDim;\r\n\t            var value;\r\n\r\n\t            if (item.yAxis != null || item.xAxis != null) {\r\n\t                valueDataDim = item.yAxis != null ? 'y' : 'x';\r\n\t                valueAxis = coordSys.getAxis(valueDataDim);\r\n\r\n\t                value = zrUtil.retrieve(item.yAxis, item.xAxis);\r\n\t            }\r\n\t            else {\r\n\t                var axisInfo = markerHelper.getAxisInfo(item, data, coordSys, seriesModel);\r\n\t                valueDataDim = axisInfo.valueDataDim;\r\n\t                valueAxis = axisInfo.valueAxis;\r\n\t                value = markerHelper.numCalculate(data, valueDataDim, mlType);\r\n\t            }\r\n\t            var valueIndex = valueDataDim === 'x' ? 0 : 1;\r\n\t            var baseIndex = 1 - valueIndex;\r\n\r\n\t            var mlFrom = zrUtil.clone(item);\r\n\t            var mlTo = {};\r\n\r\n\t            mlFrom.type = null;\r\n\r\n\t            mlFrom.coord = [];\r\n\t            mlTo.coord = [];\r\n\t            mlFrom.coord[baseIndex] = -Infinity;\r\n\t            mlTo.coord[baseIndex] = Infinity;\r\n\r\n\t            var precision = mlModel.get('precision');\r\n\t            if (precision >= 0 && typeof value === 'number') {\r\n\t                value = +value.toFixed(precision);\r\n\t            }\r\n\r\n\t            mlFrom.coord[valueIndex] = mlTo.coord[valueIndex] = value;\r\n\r\n\t            item = [mlFrom, mlTo, { // Extra option for tooltip and label\r\n\t                type: mlType,\r\n\t                valueIndex: item.valueIndex,\r\n\t                // Force to use the value of calculated value.\r\n\t                value: value\r\n\t            }];\r\n\t        }\r\n\r\n\t        item = [\r\n\t            markerHelper.dataTransform(seriesModel, item[0]),\r\n\t            markerHelper.dataTransform(seriesModel, item[1]),\r\n\t            zrUtil.extend({}, item[2])\r\n\t        ];\r\n\r\n\t        // Avoid line data type is extended by from(to) data type\r\n\t        item[2].type = item[2].type || '';\r\n\r\n\t        // Merge from option and to option into line option\r\n\t        zrUtil.merge(item[2], item[0]);\r\n\t        zrUtil.merge(item[2], item[1]);\r\n\r\n\t        return item;\r\n\t    };\r\n\r\n\t    function isInifinity(val) {\r\n\t        return !isNaN(val) && !isFinite(val);\r\n\t    }\r\n\r\n\t    // If a markLine has one dim\r\n\t    function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {\r\n\t        var otherDimIndex = 1 - dimIndex;\r\n\t        var dimName = coordSys.dimensions[dimIndex];\r\n\t        return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex])\r\n\t            && fromCoord[dimIndex] === toCoord[dimIndex] && coordSys.getAxis(dimName).containData(fromCoord[dimIndex]);\r\n\t    }\r\n\r\n\t    function markLineFilter(coordSys, item) {\r\n\t        if (coordSys.type === 'cartesian2d') {\r\n\t            var fromCoord = item[0].coord;\r\n\t            var toCoord = item[1].coord;\r\n\t            // In case\r\n\t            // {\r\n\t            //  markLine: {\r\n\t            //    data: [{ yAxis: 2 }]\r\n\t            //  }\r\n\t            // }\r\n\t            if (\r\n\t                fromCoord && toCoord &&\r\n\t                (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys)\r\n\t                || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))\r\n\t            ) {\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t        return markerHelper.dataFilter(coordSys, item[0])\r\n\t            && markerHelper.dataFilter(coordSys, item[1]);\r\n\t    }\r\n\r\n\t    function updateSingleMarkerEndLayout(\r\n\t        data, idx, isFrom, seriesModel, api\r\n\t    ) {\r\n\t        var coordSys = seriesModel.coordinateSystem;\r\n\t        var itemModel = data.getItemModel(idx);\r\n\r\n\t        var point;\r\n\t        var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());\r\n\t        var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());\r\n\t        if (!isNaN(xPx) && !isNaN(yPx)) {\r\n\t            point = [xPx, yPx];\r\n\t        }\r\n\t        else {\r\n\t            // Chart like bar may have there own marker positioning logic\r\n\t            if (seriesModel.getMarkerPosition) {\r\n\t                // Use the getMarkerPoisition\r\n\t                point = seriesModel.getMarkerPosition(\r\n\t                    data.getValues(data.dimensions, idx)\r\n\t                );\r\n\t            }\r\n\t            else {\r\n\t                var dims = coordSys.dimensions;\r\n\t                var x = data.get(dims[0], idx);\r\n\t                var y = data.get(dims[1], idx);\r\n\t                point = coordSys.dataToPoint([x, y]);\r\n\t            }\r\n\t            // Expand line to the edge of grid if value on one axis is Inifnity\r\n\t            // In case\r\n\t            //  markLine: {\r\n\t            //    data: [{\r\n\t            //      yAxis: 2\r\n\t            //      // or\r\n\t            //      type: 'average'\r\n\t            //    }]\r\n\t            //  }\r\n\t            if (coordSys.type === 'cartesian2d') {\r\n\t                var xAxis = coordSys.getAxis('x');\r\n\t                var yAxis = coordSys.getAxis('y');\r\n\t                var dims = coordSys.dimensions;\r\n\t                if (isInifinity(data.get(dims[0], idx))) {\r\n\t                    point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[isFrom ? 0 : 1]);\r\n\t                }\r\n\t                else if (isInifinity(data.get(dims[1], idx))) {\r\n\t                    point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[isFrom ? 0 : 1]);\r\n\t                }\r\n\t            }\r\n\r\n\t            // Use x, y if has any\r\n\t            if (!isNaN(xPx)) {\r\n\t                point[0] = xPx;\r\n\t            }\r\n\t            if (!isNaN(yPx)) {\r\n\t                point[1] = yPx;\r\n\t            }\r\n\t        }\r\n\r\n\t        data.setItemLayout(idx, point);\r\n\t    }\r\n\r\n\t    __webpack_require__(351).extend({\r\n\r\n\t        type: 'markLine',\r\n\r\n\t        updateLayout: function (markLineModel, ecModel, api) {\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\t                var mlModel = seriesModel.markLineModel;\r\n\t                if (mlModel) {\r\n\t                    var mlData = mlModel.getData();\r\n\t                    var fromData = mlModel.__from;\r\n\t                    var toData = mlModel.__to;\r\n\t                    // Update visual and layout of from symbol and to symbol\r\n\t                    fromData.each(function (idx) {\r\n\t                        updateSingleMarkerEndLayout(fromData, idx, true, seriesModel, api);\r\n\t                        updateSingleMarkerEndLayout(toData, idx, false, seriesModel, api);\r\n\t                    });\r\n\t                    // Update layout of line\r\n\t                    mlData.each(function (idx) {\r\n\t                        mlData.setItemLayout(idx, [\r\n\t                            fromData.getItemLayout(idx),\r\n\t                            toData.getItemLayout(idx)\r\n\t                        ]);\r\n\t                    });\r\n\r\n\t                    this.markerGroupMap[seriesModel.name].updateLayout();\r\n\r\n\t                }\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        renderSeries: function (seriesModel, mlModel, ecModel, api) {\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            var seriesName = seriesModel.name;\r\n\t            var seriesData = seriesModel.getData();\r\n\r\n\t            var lineDrawMap = this.markerGroupMap;\r\n\t            var lineDraw = lineDrawMap[seriesName];\r\n\t            if (!lineDraw) {\r\n\t                lineDraw = lineDrawMap[seriesName] = new LineDraw();\r\n\t            }\r\n\t            this.group.add(lineDraw.group);\r\n\r\n\t            var mlData = createList(coordSys, seriesModel, mlModel);\r\n\r\n\t            var fromData = mlData.from;\r\n\t            var toData = mlData.to;\r\n\t            var lineData = mlData.line;\r\n\r\n\t            mlModel.__from = fromData;\r\n\t            mlModel.__to = toData;\r\n\t            // Line data for tooltip and formatter\r\n\t            mlModel.setData(lineData);\r\n\r\n\t            var symbolType = mlModel.get('symbol');\r\n\t            var symbolSize = mlModel.get('symbolSize');\r\n\t            if (!zrUtil.isArray(symbolType)) {\r\n\t                symbolType = [symbolType, symbolType];\r\n\t            }\r\n\t            if (typeof symbolSize === 'number') {\r\n\t                symbolSize = [symbolSize, symbolSize];\r\n\t            }\r\n\r\n\t            // Update visual and layout of from symbol and to symbol\r\n\t            mlData.from.each(function (idx) {\r\n\t                updateDataVisualAndLayout(fromData, idx, true);\r\n\t                updateDataVisualAndLayout(toData, idx, false);\r\n\t            });\r\n\r\n\t            // Update visual and layout of line\r\n\t            lineData.each(function (idx) {\r\n\t                var lineColor = lineData.getItemModel(idx).get('lineStyle.normal.color');\r\n\t                lineData.setItemVisual(idx, {\r\n\t                    color: lineColor || fromData.getItemVisual(idx, 'color')\r\n\t                });\r\n\t                lineData.setItemLayout(idx, [\r\n\t                    fromData.getItemLayout(idx),\r\n\t                    toData.getItemLayout(idx)\r\n\t                ]);\r\n\r\n\t                lineData.setItemVisual(idx, {\r\n\t                    'fromSymbolSize': fromData.getItemVisual(idx, 'symbolSize'),\r\n\t                    'fromSymbol': fromData.getItemVisual(idx, 'symbol'),\r\n\t                    'toSymbolSize': toData.getItemVisual(idx, 'symbolSize'),\r\n\t                    'toSymbol': toData.getItemVisual(idx, 'symbol')\r\n\t                });\r\n\t            });\r\n\r\n\t            lineDraw.updateData(lineData);\r\n\r\n\t            // Set host model for tooltip\r\n\t            // FIXME\r\n\t            mlData.line.eachItemGraphicEl(function (el, idx) {\r\n\t                el.traverse(function (child) {\r\n\t                    child.dataModel = mlModel;\r\n\t                });\r\n\t            });\r\n\r\n\t            function updateDataVisualAndLayout(data, idx, isFrom) {\r\n\t                var itemModel = data.getItemModel(idx);\r\n\r\n\t                updateSingleMarkerEndLayout(\r\n\t                    data, idx, isFrom, seriesModel, api\r\n\t                );\r\n\r\n\t                data.setItemVisual(idx, {\r\n\t                    symbolSize: itemModel.get('symbolSize') || symbolSize[isFrom ? 0 : 1],\r\n\t                    symbol: itemModel.get('symbol', true) || symbolType[isFrom ? 0 : 1],\r\n\t                    color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color')\r\n\t                });\r\n\t            }\r\n\r\n\t            lineDraw.__keep = true;\r\n\r\n\t            lineDraw.group.silent = mlModel.get('silent') || seriesModel.get('silent');\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     * @param {module:echarts/coord/*} coordSys\r\n\t     * @param {module:echarts/model/Series} seriesModel\r\n\t     * @param {module:echarts/model/Model} mpModel\r\n\t     */\r\n\t    function createList(coordSys, seriesModel, mlModel) {\r\n\r\n\t        var coordDimsInfos;\r\n\t        if (coordSys) {\r\n\t            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {\r\n\t                var info = seriesModel.getData().getDimensionInfo(\r\n\t                    seriesModel.coordDimToDataDim(coordDim)[0]\r\n\t                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys\r\n\t                info.name = coordDim;\r\n\t                return info;\r\n\t            });\r\n\t        }\r\n\t        else {\r\n\t            coordDimsInfos =[{\r\n\t                name: 'value',\r\n\t                type: 'float'\r\n\t            }];\r\n\t        }\r\n\r\n\t        var fromData = new List(coordDimsInfos, mlModel);\r\n\t        var toData = new List(coordDimsInfos, mlModel);\r\n\t        // No dimensions\r\n\t        var lineData = new List([], mlModel);\r\n\r\n\t        var optData = zrUtil.map(mlModel.get('data'), zrUtil.curry(\r\n\t            markLineTransform, seriesModel, coordSys, mlModel\r\n\t        ));\r\n\t        if (coordSys) {\r\n\t            optData = zrUtil.filter(\r\n\t                optData, zrUtil.curry(markLineFilter, coordSys)\r\n\t            );\r\n\t        }\r\n\t        var dimValueGetter = coordSys ? markerHelper.dimValueGetter : function (item) {\r\n\t            return item.value;\r\n\t        };\r\n\t        fromData.initData(\r\n\t            zrUtil.map(optData, function (item) { return item[0]; }),\r\n\t            null, dimValueGetter\r\n\t        );\r\n\t        toData.initData(\r\n\t            zrUtil.map(optData, function (item) { return item[1]; }),\r\n\t            null, dimValueGetter\r\n\t        );\r\n\t        lineData.initData(\r\n\t            zrUtil.map(optData, function (item) { return item[2]; })\r\n\t        );\r\n\t        lineData.hasItemOption = true;\r\n\t        return {\r\n\t            from: fromData,\r\n\t            to: toData,\r\n\t            line: lineData\r\n\t        };\r\n\t    }\r\n\r\n\r\n/***/ },\r\n/* 355 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(356);\r\n\t    __webpack_require__(357);\r\n\r\n\t    __webpack_require__(1).registerPreprocessor(function (opt) {\r\n\t        // Make sure markArea component is enabled\r\n\t        opt.markArea = opt.markArea || {};\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 356 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    module.exports = __webpack_require__(348).extend({\r\n\r\n\t        type: 'markArea',\r\n\r\n\t        defaultOption: {\r\n\t            zlevel: 0,\r\n\t            // PENDING\r\n\t            z: 1,\r\n\t            tooltip: {\r\n\t                trigger: 'item'\r\n\t            },\r\n\t            // markArea should fixed on the coordinate system\r\n\t            animation: false,\r\n\t            label: {\r\n\t                normal: {\r\n\t                    show: true,\r\n\t                    position: 'top'\r\n\t                },\r\n\t                emphasis: {\r\n\t                    show: true,\r\n\t                    position: 'top'\r\n\t                }\r\n\t            },\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    // color and borderColor default to use color from series\r\n\t                    // color: 'auto'\r\n\t                    // borderColor: 'auto'\r\n\t                    borderWidth: 0\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\r\n/***/ },\r\n/* 357 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// TODO Better on polar\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var List = __webpack_require__(97);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var colorUtil = __webpack_require__(39);\r\n\r\n\t    var markerHelper = __webpack_require__(350);\r\n\r\n\t    var markAreaTransform = function (seriesModel, coordSys, maModel, item) {\r\n\t        var lt = markerHelper.dataTransform(seriesModel, item[0]);\r\n\t        var rb = markerHelper.dataTransform(seriesModel, item[1]);\r\n\t        var retrieve = zrUtil.retrieve;\r\n\r\n\t        // FIXME make sure lt is less than rb\r\n\t        var ltCoord = lt.coord;\r\n\t        var rbCoord = rb.coord;\r\n\t        ltCoord[0] = retrieve(ltCoord[0], -Infinity);\r\n\t        ltCoord[1] = retrieve(ltCoord[1], -Infinity);\r\n\r\n\t        rbCoord[0] = retrieve(rbCoord[0], Infinity);\r\n\t        rbCoord[1] = retrieve(rbCoord[1], Infinity);\r\n\r\n\t        // Merge option into one\r\n\t        var result = zrUtil.mergeAll([{}, lt, rb]);\r\n\r\n\t        result.coord = [\r\n\t            lt.coord, rb.coord\r\n\t        ];\r\n\t        result.x0 = lt.x;\r\n\t        result.y0 = lt.y;\r\n\t        result.x1 = rb.x;\r\n\t        result.y1 = rb.y;\r\n\t        return result;\r\n\t    };\r\n\r\n\t    function isInifinity(val) {\r\n\t        return !isNaN(val) && !isFinite(val);\r\n\t    }\r\n\r\n\t    // If a markArea has one dim\r\n\t    function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {\r\n\t        var otherDimIndex = 1 - dimIndex;\r\n\t        return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]);\r\n\t    }\r\n\r\n\t    function markAreaFilter(coordSys, item) {\r\n\t        var fromCoord = item.coord[0];\r\n\t        var toCoord = item.coord[1];\r\n\t        if (coordSys.type === 'cartesian2d') {\r\n\t            // In case\r\n\t            // {\r\n\t            //  markArea: {\r\n\t            //    data: [{ yAxis: 2 }]\r\n\t            //  }\r\n\t            // }\r\n\t            if (\r\n\t                fromCoord && toCoord &&\r\n\t                (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys)\r\n\t                || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))\r\n\t            ) {\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t        return markerHelper.dataFilter(coordSys, {\r\n\t                coord: fromCoord,\r\n\t                x: item.x0,\r\n\t                y: item.y0\r\n\t            })\r\n\t            || markerHelper.dataFilter(coordSys, {\r\n\t                coord: toCoord,\r\n\t                x: item.x1,\r\n\t                y: item.y1\r\n\t            });\r\n\t    }\r\n\r\n\t    // dims can be ['x0', 'y0'], ['x1', 'y1'], ['x0', 'y1'], ['x1', 'y0']\r\n\t    function getSingleMarkerEndPoint(data, idx, dims, seriesModel, api) {\r\n\t        var coordSys = seriesModel.coordinateSystem;\r\n\t        var itemModel = data.getItemModel(idx);\r\n\r\n\t        var point;\r\n\t        var xPx = numberUtil.parsePercent(itemModel.get(dims[0]), api.getWidth());\r\n\t        var yPx = numberUtil.parsePercent(itemModel.get(dims[1]), api.getHeight());\r\n\t        if (!isNaN(xPx) && !isNaN(yPx)) {\r\n\t            point = [xPx, yPx];\r\n\t        }\r\n\t        else {\r\n\t            // Chart like bar may have there own marker positioning logic\r\n\t            if (seriesModel.getMarkerPosition) {\r\n\t                // Use the getMarkerPoisition\r\n\t                point = seriesModel.getMarkerPosition(\r\n\t                    data.getValues(dims, idx)\r\n\t                );\r\n\t            }\r\n\t            else {\r\n\t                var x = data.get(dims[0], idx);\r\n\t                var y = data.get(dims[1], idx);\r\n\t                point = coordSys.dataToPoint([x, y], true);\r\n\t            }\r\n\t            if (coordSys.type === 'cartesian2d') {\r\n\t                var xAxis = coordSys.getAxis('x');\r\n\t                var yAxis = coordSys.getAxis('y');\r\n\t                var x = data.get(dims[0], idx);\r\n\t                var y = data.get(dims[1], idx);\r\n\t                if (isInifinity(x)) {\r\n\t                    point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[dims[0] === 'x0' ? 0 : 1]);\r\n\t                }\r\n\t                else if (isInifinity(y)) {\r\n\t                    point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[dims[1] === 'y0' ? 0 : 1]);\r\n\t                }\r\n\t            }\r\n\r\n\t            // Use x, y if has any\r\n\t            if (!isNaN(xPx)) {\r\n\t                point[0] = xPx;\r\n\t            }\r\n\t            if (!isNaN(yPx)) {\r\n\t                point[1] = yPx;\r\n\t            }\r\n\t        }\r\n\r\n\t        return point;\r\n\t    }\r\n\r\n\t    var dimPermutations = [['x0', 'y0'], ['x1', 'y0'], ['x1', 'y1'], ['x0', 'y1']];\r\n\r\n\t    __webpack_require__(351).extend({\r\n\r\n\t        type: 'markArea',\r\n\r\n\t        updateLayout: function (markAreaModel, ecModel, api) {\r\n\t            ecModel.eachSeries(function (seriesModel) {\r\n\t                var maModel = seriesModel.markAreaModel;\r\n\t                if (maModel) {\r\n\t                    var areaData = maModel.getData();\r\n\t                    areaData.each(function (idx) {\r\n\t                        var points = zrUtil.map(dimPermutations, function (dim) {\r\n\t                            return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);\r\n\t                        });\r\n\t                        // Layout\r\n\t                        areaData.setItemLayout(idx, points);\r\n\t                        var el = areaData.getItemGraphicEl(idx);\r\n\t                        el.setShape('points', points);\r\n\t                    });\r\n\t                }\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        renderSeries: function (seriesModel, maModel, ecModel, api) {\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            var seriesName = seriesModel.name;\r\n\t            var seriesData = seriesModel.getData();\r\n\r\n\t            var areaGroupMap = this.markerGroupMap;\r\n\t            var polygonGroup = areaGroupMap[seriesName];\r\n\t            if (!polygonGroup) {\r\n\t                polygonGroup = areaGroupMap[seriesName] = {\r\n\t                    group: new graphic.Group()\r\n\t                };\r\n\t            }\r\n\t            this.group.add(polygonGroup.group);\r\n\t            polygonGroup.__keep = true;\r\n\r\n\t            var areaData = createList(coordSys, seriesModel, maModel);\r\n\r\n\t            // Line data for tooltip and formatter\r\n\t            maModel.setData(areaData);\r\n\r\n\t            // Update visual and layout of line\r\n\t            areaData.each(function (idx) {\r\n\t                // Layout\r\n\t                areaData.setItemLayout(idx, zrUtil.map(dimPermutations, function (dim) {\r\n\t                    return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);\r\n\t                }));\r\n\r\n\t                // Visual\r\n\t                areaData.setItemVisual(idx, {\r\n\t                    color: seriesData.getVisual('color')\r\n\t                });\r\n\t            });\r\n\r\n\r\n\t            areaData.diff(polygonGroup.__data)\r\n\t                .add(function (idx) {\r\n\t                    var polygon = new graphic.Polygon({\r\n\t                        shape: {\r\n\t                            points: areaData.getItemLayout(idx)\r\n\t                        }\r\n\t                    });\r\n\t                    areaData.setItemGraphicEl(idx, polygon);\r\n\t                    polygonGroup.group.add(polygon);\r\n\t                })\r\n\t                .update(function (newIdx, oldIdx) {\r\n\t                    var polygon = polygonGroup.__data.getItemGraphicEl(oldIdx);\r\n\t                    graphic.updateProps(polygon, {\r\n\t                        shape: {\r\n\t                            points: areaData.getItemLayout(newIdx)\r\n\t                        }\r\n\t                    }, maModel, newIdx);\r\n\t                    polygonGroup.group.add(polygon);\r\n\t                    areaData.setItemGraphicEl(newIdx, polygon);\r\n\t                })\r\n\t                .remove(function (idx) {\r\n\t                    var polygon = polygonGroup.__data.getItemGraphicEl(idx);\r\n\t                    polygonGroup.group.remove(polygon);\r\n\t                })\r\n\t                .execute();\r\n\r\n\t            areaData.eachItemGraphicEl(function (polygon, idx) {\r\n\t                var itemModel = areaData.getItemModel(idx);\r\n\t                var labelModel = itemModel.getModel('label.normal');\r\n\t                var labelHoverModel = itemModel.getModel('label.emphasis');\r\n\t                var color = areaData.getItemVisual(idx, 'color');\r\n\t                polygon.useStyle(\r\n\t                    zrUtil.defaults(\r\n\t                        itemModel.getModel('itemStyle.normal').getItemStyle(),\r\n\t                        {\r\n\t                            fill: colorUtil.modifyAlpha(color, 0.4),\r\n\t                            stroke: color\r\n\t                        }\r\n\t                    )\r\n\t                );\r\n\r\n\t                polygon.hoverStyle = itemModel.getModel('itemStyle.normal').getItemStyle();\r\n\r\n\t                var defaultValue = areaData.getName(idx) || '';\r\n\t                var textColor = color || polygon.style.fill;\r\n\t                graphic.setText(polygon.style, labelModel, textColor);\r\n\t                polygon.style.text = zrUtil.retrieve(\r\n\t                    maModel.getFormattedLabel(idx, 'normal'),\r\n\t                    defaultValue\r\n\t                );\r\n\r\n\t                graphic.setText(polygon.hoverStyle, labelHoverModel, textColor);\r\n\t                polygon.hoverStyle.text = zrUtil.retrieve(\r\n\t                    maModel.getFormattedLabel(idx, 'emphasis'),\r\n\t                    defaultValue\r\n\t                );\r\n\r\n\t                graphic.setHoverStyle(polygon, {});\r\n\r\n\t                polygon.dataModel = maModel;\r\n\t            });\r\n\r\n\t            polygonGroup.__data = areaData;\r\n\r\n\t            polygonGroup.group.silent = maModel.get('silent') || seriesModel.get('silent');\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     * @param {module:echarts/coord/*} coordSys\r\n\t     * @param {module:echarts/model/Series} seriesModel\r\n\t     * @param {module:echarts/model/Model} mpModel\r\n\t     */\r\n\t    function createList(coordSys, seriesModel, maModel) {\r\n\r\n\t        var coordDimsInfos;\r\n\t        var areaData;\r\n\t        var dims = ['x0', 'y0', 'x1', 'y1'];\r\n\t        if (coordSys) {\r\n\t            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {\r\n\t                var info = seriesModel.getData().getDimensionInfo(\r\n\t                    seriesModel.coordDimToDataDim(coordDim)[0]\r\n\t                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys\r\n\t                info.name = coordDim;\r\n\t                return info;\r\n\t            });\r\n\t            areaData = new List(zrUtil.map(dims, function (dim, idx) {\r\n\t                return {\r\n\t                    name: dim,\r\n\t                    type: coordDimsInfos[idx % 2].type\r\n\t                };\r\n\t            }), maModel);\r\n\t        }\r\n\t        else {\r\n\t            coordDimsInfos =[{\r\n\t                name: 'value',\r\n\t                type: 'float'\r\n\t            }];\r\n\t            areaData = new List(coordDimsInfos, maModel);\r\n\t        }\r\n\r\n\t        var optData = zrUtil.map(maModel.get('data'), zrUtil.curry(\r\n\t            markAreaTransform, seriesModel, coordSys, maModel\r\n\t        ));\r\n\t        if (coordSys) {\r\n\t            optData = zrUtil.filter(\r\n\t                optData, zrUtil.curry(markAreaFilter, coordSys)\r\n\t            );\r\n\t        }\r\n\r\n\t        var dimValueGetter = coordSys ? function (item, dimName, dataIndex, dimIndex) {\r\n\t            return item.coord[Math.floor(dimIndex / 2)][dimIndex % 2];\r\n\t        } : function (item) {\r\n\t            return item.value;\r\n\t        };\r\n\t        areaData.initData(optData, null, dimValueGetter);\r\n\t        areaData.hasItemOption = true;\r\n\t        return areaData;\r\n\t    }\r\n\r\n\r\n/***/ },\r\n/* 358 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * DataZoom component entry\r\n\t */\r\n\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\r\n\t    echarts.registerPreprocessor(__webpack_require__(359));\r\n\r\n\t    __webpack_require__(360);\r\n\t    __webpack_require__(361);\r\n\t    __webpack_require__(362);\r\n\t    __webpack_require__(364);\r\n\r\n\r\n\r\n/***/ },\r\n/* 359 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Timeline preprocessor\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    module.exports = function (option) {\r\n\t        var timelineOpt = option && option.timeline;\r\n\r\n\t        if (!zrUtil.isArray(timelineOpt)) {\r\n\t            timelineOpt = timelineOpt ? [timelineOpt] : [];\r\n\t        }\r\n\r\n\t        zrUtil.each(timelineOpt, function (opt) {\r\n\t            if (!opt) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            compatibleEC2(opt);\r\n\t        });\r\n\t    };\r\n\r\n\t    function compatibleEC2(opt) {\r\n\t        var type = opt.type;\r\n\r\n\t        var ec2Types = {'number': 'value', 'time': 'time'};\r\n\r\n\t        // Compatible with ec2\r\n\t        if (ec2Types[type]) {\r\n\t            opt.axisType = ec2Types[type];\r\n\t            delete opt.type;\r\n\t        }\r\n\r\n\t        transferItem(opt);\r\n\r\n\t        if (has(opt, 'controlPosition')) {\r\n\t            var controlStyle = opt.controlStyle || (opt.controlStyle = {});\r\n\t            if (!has(controlStyle, 'position')) {\r\n\t                controlStyle.position = opt.controlPosition;\r\n\t            }\r\n\t            if (controlStyle.position === 'none' && !has(controlStyle, 'show')) {\r\n\t                controlStyle.show = false;\r\n\t                delete controlStyle.position;\r\n\t            }\r\n\t            delete opt.controlPosition;\r\n\t        }\r\n\r\n\t        zrUtil.each(opt.data || [], function (dataItem) {\r\n\t            if (zrUtil.isObject(dataItem) && !zrUtil.isArray(dataItem)) {\r\n\t                if (!has(dataItem, 'value') && has(dataItem, 'name')) {\r\n\t                    // In ec2, using name as value.\r\n\t                    dataItem.value = dataItem.name;\r\n\t                }\r\n\t                transferItem(dataItem);\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    function transferItem(opt) {\r\n\t        var itemStyle = opt.itemStyle || (opt.itemStyle = {});\r\n\r\n\t        var itemStyleEmphasis = itemStyle.emphasis || (itemStyle.emphasis = {});\r\n\r\n\t        // Transfer label out\r\n\t        var label = opt.label || (opt.label || {});\r\n\t        var labelNormal = label.normal || (label.normal = {});\r\n\t        var excludeLabelAttr = {normal: 1, emphasis: 1};\r\n\r\n\t        zrUtil.each(label, function (value, name) {\r\n\t            if (!excludeLabelAttr[name] && !has(labelNormal, name)) {\r\n\t                labelNormal[name] = value;\r\n\t            }\r\n\t        });\r\n\r\n\t        if (itemStyleEmphasis.label && !has(label, 'emphasis')) {\r\n\t            label.emphasis = itemStyleEmphasis.label;\r\n\t            delete itemStyleEmphasis.label;\r\n\t        }\r\n\t    }\r\n\r\n\t    function has(obj, attr) {\r\n\t        return obj.hasOwnProperty(attr);\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 360 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(19).registerSubTypeDefaulter('timeline', function () {\r\n\t        // Only slider now.\r\n\t        return 'slider';\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 361 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Timeilne action\r\n\t */\r\n\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    echarts.registerAction(\r\n\r\n\t        {type: 'timelineChange', event: 'timelineChanged', update: 'prepareAndUpdate'},\r\n\r\n\t        function (payload, ecModel) {\r\n\r\n\t            var timelineModel = ecModel.getComponent('timeline');\r\n\t            if (timelineModel && payload.currentIndex != null) {\r\n\t                timelineModel.setCurrentIndex(payload.currentIndex);\r\n\r\n\t                if (!timelineModel.get('loop', true) && timelineModel.isIndexMax()) {\r\n\t                    timelineModel.setPlayState(false);\r\n\t                }\r\n\t            }\r\n\r\n\t            // Set normalized currentIndex to payload.\r\n\t            ecModel.resetOption('timeline');\r\n\r\n\t            return zrUtil.defaults({\r\n\t                currentIndex: timelineModel.option.currentIndex\r\n\t            }, payload);\r\n\t        }\r\n\t    );\r\n\r\n\t    echarts.registerAction(\r\n\r\n\t        {type: 'timelinePlayChange', event: 'timelinePlayChanged', update: 'update'},\r\n\r\n\t        function (payload, ecModel) {\r\n\t            var timelineModel = ecModel.getComponent('timeline');\r\n\t            if (timelineModel && payload.playState != null) {\r\n\t                timelineModel.setPlayState(payload.playState);\r\n\t            }\r\n\t        }\r\n\t    );\r\n\r\n\r\n\r\n/***/ },\r\n/* 362 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Silder timeline model\r\n\t */\r\n\r\n\r\n\t    var TimelineModel = __webpack_require__(363);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\r\n\t    var SliderTimelineModel = TimelineModel.extend({\r\n\r\n\t        type: 'timeline.slider',\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        defaultOption: {\r\n\r\n\t            backgroundColor: 'rgba(0,0,0,0)',   // 时间轴背景颜色\r\n\t            borderColor: '#ccc',               // 时间轴边框颜色\r\n\t            borderWidth: 0,                    // 时间轴边框线宽，单位px，默认为0（无边框）\r\n\r\n\t            orient: 'horizontal',              // 'vertical'\r\n\t            inverse: false,\r\n\r\n\t            tooltip: {                          // boolean or Object\r\n\t                trigger: 'item'                 // data item may also have tootip attr.\r\n\t            },\r\n\r\n\t            symbol: 'emptyCircle',\r\n\t            symbolSize: 10,\r\n\r\n\t            lineStyle: {\r\n\t                show: true,\r\n\t                width: 2,\r\n\t                color: '#304654'\r\n\t            },\r\n\t            label: {                            // 文本标签\r\n\t                position: 'auto',           // auto left right top bottom\r\n\t                                            // When using number, label position is not\r\n\t                                            // restricted by viewRect.\r\n\t                                            // positive: right/bottom, negative: left/top\r\n\t                normal: {\r\n\t                    show: true,\r\n\t                    interval: 'auto',\r\n\t                    rotate: 0,\r\n\t                    // formatter: null,\r\n\t                    textStyle: {                // 其余属性默认使用全局文本样式，详见TEXTSTYLE\r\n\t                        color: '#304654'\r\n\t                    }\r\n\t                },\r\n\t                emphasis: {\r\n\t                    show: true,\r\n\t                    textStyle: {                // 其余属性默认使用全局文本样式，详见TEXTSTYLE\r\n\t                        color: '#c23531'\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\t            itemStyle: {\r\n\t                normal: {\r\n\t                    color: '#304654',\r\n\t                    borderWidth: 1\r\n\t                },\r\n\t                emphasis: {\r\n\t                    color: '#c23531'\r\n\t                }\r\n\t            },\r\n\r\n\t            checkpointStyle: {\r\n\t                symbol: 'circle',\r\n\t                symbolSize: 13,\r\n\t                color: '#c23531',\r\n\t                borderWidth: 5,\r\n\t                borderColor: 'rgba(194,53,49, 0.5)',\r\n\t                animation: true,\r\n\t                animationDuration: 300,\r\n\t                animationEasing: 'quinticInOut'\r\n\t            },\r\n\r\n\t            controlStyle: {\r\n\t                show: true,\r\n\t                showPlayBtn: true,\r\n\t                showPrevBtn: true,\r\n\t                showNextBtn: true,\r\n\t                itemSize: 22,\r\n\t                itemGap: 12,\r\n\t                position: 'left',  // 'left' 'right' 'top' 'bottom'\r\n\t                playIcon: 'path://M31.6,53C17.5,53,6,41.5,6,27.4S17.5,1.8,31.6,1.8C45.7,1.8,57.2,13.3,57.2,27.4S45.7,53,31.6,53z M31.6,3.3 C18.4,3.3,7.5,14.1,7.5,27.4c0,13.3,10.8,24.1,24.1,24.1C44.9,51.5,55.7,40.7,55.7,27.4C55.7,14.1,44.9,3.3,31.6,3.3z M24.9,21.3 c0-2.2,1.6-3.1,3.5-2l10.5,6.1c1.899,1.1,1.899,2.9,0,4l-10.5,6.1c-1.9,1.1-3.5,0.2-3.5-2V21.3z', // jshint ignore:line\r\n\t                stopIcon: 'path://M30.9,53.2C16.8,53.2,5.3,41.7,5.3,27.6S16.8,2,30.9,2C45,2,56.4,13.5,56.4,27.6S45,53.2,30.9,53.2z M30.9,3.5C17.6,3.5,6.8,14.4,6.8,27.6c0,13.3,10.8,24.1,24.101,24.1C44.2,51.7,55,40.9,55,27.6C54.9,14.4,44.1,3.5,30.9,3.5z M36.9,35.8c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H36c0.5,0,0.9,0.4,0.9,1V35.8z M27.8,35.8 c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H27c0.5,0,0.9,0.4,0.9,1L27.8,35.8L27.8,35.8z', // jshint ignore:line\r\n\t                nextIcon: 'path://M18.6,50.8l22.5-22.5c0.2-0.2,0.3-0.4,0.3-0.7c0-0.3-0.1-0.5-0.3-0.7L18.7,4.4c-0.1-0.1-0.2-0.3-0.2-0.5 c0-0.4,0.3-0.8,0.8-0.8c0.2,0,0.5,0.1,0.6,0.3l23.5,23.5l0,0c0.2,0.2,0.3,0.4,0.3,0.7c0,0.3-0.1,0.5-0.3,0.7l-0.1,0.1L19.7,52 c-0.1,0.1-0.3,0.2-0.5,0.2c-0.4,0-0.8-0.3-0.8-0.8C18.4,51.2,18.5,51,18.6,50.8z', // jshint ignore:line\r\n\t                prevIcon: 'path://M43,52.8L20.4,30.3c-0.2-0.2-0.3-0.4-0.3-0.7c0-0.3,0.1-0.5,0.3-0.7L42.9,6.4c0.1-0.1,0.2-0.3,0.2-0.5 c0-0.4-0.3-0.8-0.8-0.8c-0.2,0-0.5,0.1-0.6,0.3L18.3,28.8l0,0c-0.2,0.2-0.3,0.4-0.3,0.7c0,0.3,0.1,0.5,0.3,0.7l0.1,0.1L41.9,54 c0.1,0.1,0.3,0.2,0.5,0.2c0.4,0,0.8-0.3,0.8-0.8C43.2,53.2,43.1,53,43,52.8z', // jshint ignore:line\r\n\t                normal: {\r\n\t                    color: '#304654',\r\n\t                    borderColor: '#304654',\r\n\t                    borderWidth: 1\r\n\t                },\r\n\t                emphasis: {\r\n\t                    color: '#c23531',\r\n\t                    borderColor: '#c23531',\r\n\t                    borderWidth: 2\r\n\t                }\r\n\t            },\r\n\t            data: []\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    zrUtil.mixin(SliderTimelineModel, modelUtil.dataFormatMixin);\r\n\r\n\t    module.exports = SliderTimelineModel;\r\n\r\n\r\n/***/ },\r\n/* 363 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Timeline model\r\n\t */\r\n\r\n\r\n\t    var ComponentModel = __webpack_require__(19);\r\n\t    var List = __webpack_require__(97);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var modelUtil = __webpack_require__(5);\r\n\r\n\t    var TimelineModel = ComponentModel.extend({\r\n\r\n\t        type: 'timeline',\r\n\r\n\t        layoutMode: 'box',\r\n\r\n\t        /**\r\n\t         * @protected\r\n\t         */\r\n\t        defaultOption: {\r\n\r\n\t            zlevel: 0,                  // 一级层叠\r\n\t            z: 4,                       // 二级层叠\r\n\t            show: true,\r\n\r\n\t            axisType: 'time',  // 模式是时间类型，支持 value, category\r\n\r\n\t            realtime: true,\r\n\r\n\t            left: '20%',\r\n\t            top: null,\r\n\t            right: '20%',\r\n\t            bottom: 0,\r\n\t            width: null,\r\n\t            height: 40,\r\n\t            padding: 5,\r\n\r\n\t            controlPosition: 'left',           // 'left' 'right' 'top' 'bottom' 'none'\r\n\t            autoPlay: false,\r\n\t            rewind: false,                     // 反向播放\r\n\t            loop: true,\r\n\t            playInterval: 2000,                // 播放时间间隔，单位ms\r\n\r\n\t            currentIndex: 0,\r\n\r\n\t            itemStyle: {\r\n\t                normal: {},\r\n\t                emphasis: {}\r\n\t            },\r\n\t            label: {\r\n\t                normal: {\r\n\t                    textStyle: {\r\n\t                        color: '#000'\r\n\t                    }\r\n\t                },\r\n\t                emphasis: {}\r\n\t            },\r\n\r\n\t            data: []\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        init: function (option, parentModel, ecModel) {\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {module:echarts/data/List}\r\n\t             */\r\n\t            this._data;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {Array.<string>}\r\n\t             */\r\n\t            this._names;\r\n\r\n\t            this.mergeDefaultAndTheme(option, ecModel);\r\n\t            this._initData();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        mergeOption: function (option) {\r\n\t            TimelineModel.superApply(this, 'mergeOption', arguments);\r\n\t            this._initData();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {number} [currentIndex]\r\n\t         */\r\n\t        setCurrentIndex: function (currentIndex) {\r\n\t            if (currentIndex == null) {\r\n\t                currentIndex = this.option.currentIndex;\r\n\t            }\r\n\t            var count = this._data.count();\r\n\r\n\t            if (this.option.loop) {\r\n\t                currentIndex = (currentIndex % count + count) % count;\r\n\t            }\r\n\t            else {\r\n\t                currentIndex >= count && (currentIndex = count - 1);\r\n\t                currentIndex < 0 && (currentIndex = 0);\r\n\t            }\r\n\r\n\t            this.option.currentIndex = currentIndex;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {number} currentIndex\r\n\t         */\r\n\t        getCurrentIndex: function () {\r\n\t            return this.option.currentIndex;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        isIndexMax: function () {\r\n\t            return this.getCurrentIndex() >= this._data.count() - 1;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @param {boolean} state true: play, false: stop\r\n\t         */\r\n\t        setPlayState: function (state) {\r\n\t            this.option.autoPlay = !!state;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @return {boolean} true: play, false: stop\r\n\t         */\r\n\t        getPlayState: function () {\r\n\t            return !!this.option.autoPlay;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _initData: function () {\r\n\t            var thisOption = this.option;\r\n\t            var dataArr = thisOption.data || [];\r\n\t            var axisType = thisOption.axisType;\r\n\t            var names = this._names = [];\r\n\r\n\t            if (axisType === 'category') {\r\n\t                var idxArr = [];\r\n\t                zrUtil.each(dataArr, function (item, index) {\r\n\t                    var value = modelUtil.getDataItemValue(item);\r\n\t                    var newItem;\r\n\r\n\t                    if (zrUtil.isObject(item)) {\r\n\t                        newItem = zrUtil.clone(item);\r\n\t                        newItem.value = index;\r\n\t                    }\r\n\t                    else {\r\n\t                        newItem = index;\r\n\t                    }\r\n\r\n\t                    idxArr.push(newItem);\r\n\r\n\t                    if (!zrUtil.isString(value) && (value == null || isNaN(value))) {\r\n\t                        value = '';\r\n\t                    }\r\n\r\n\t                    names.push(value + '');\r\n\t                });\r\n\t                dataArr = idxArr;\r\n\t            }\r\n\r\n\t            var dimType = ({category: 'ordinal', time: 'time'})[axisType] || 'number';\r\n\r\n\t            var data = this._data = new List([{name: 'value', type: dimType}], this);\r\n\r\n\t            data.initData(dataArr, names);\r\n\t        },\r\n\r\n\t        getData: function () {\r\n\t            return this._data;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @return {Array.<string>} categoreis\r\n\t         */\r\n\t        getCategories: function () {\r\n\t            if (this.get('axisType') === 'category') {\r\n\t                return this._names.slice();\r\n\t            }\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    module.exports = TimelineModel;\r\n\r\n\r\n/***/ },\r\n/* 364 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Silder timeline view\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var layout = __webpack_require__(21);\r\n\t    var TimelineView = __webpack_require__(365);\r\n\t    var TimelineAxis = __webpack_require__(366);\r\n\t    var symbolUtil = __webpack_require__(106);\r\n\t    var axisHelper = __webpack_require__(114);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\t    var matrix = __webpack_require__(11);\r\n\t    var numberUtil = __webpack_require__(7);\r\n\t    var formatUtil = __webpack_require__(6);\r\n\t    var encodeHTML = formatUtil.encodeHTML;\r\n\r\n\t    var bind = zrUtil.bind;\r\n\t    var each = zrUtil.each;\r\n\r\n\t    var PI = Math.PI;\r\n\r\n\t    module.exports = TimelineView.extend({\r\n\r\n\t        type: 'timeline.slider',\r\n\r\n\t        init: function (ecModel, api) {\r\n\r\n\t            this.api = api;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {module:echarts/component/timeline/TimelineAxis}\r\n\t             */\r\n\t            this._axis;\r\n\r\n\t            /**\r\n\t             * @private\r\n\t             * @type {module:zrender/core/BoundingRect}\r\n\t             */\r\n\t            this._viewRect;\r\n\r\n\t            /**\r\n\t             * @type {number}\r\n\t             */\r\n\t            this._timer;\r\n\r\n\t            /**\r\n\t             * @type {module:zrende/Element}\r\n\t             */\r\n\t            this._currentPointer;\r\n\r\n\t            /**\r\n\t             * @type {module:zrender/container/Group}\r\n\t             */\r\n\t            this._mainGroup;\r\n\r\n\t            /**\r\n\t             * @type {module:zrender/container/Group}\r\n\t             */\r\n\t            this._labelGroup;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        render: function (timelineModel, ecModel, api, payload) {\r\n\t            this.model = timelineModel;\r\n\t            this.api = api;\r\n\t            this.ecModel = ecModel;\r\n\r\n\t            this.group.removeAll();\r\n\r\n\t            if (timelineModel.get('show', true)) {\r\n\r\n\t                var layoutInfo = this._layout(timelineModel, api);\r\n\t                var mainGroup = this._createGroup('mainGroup');\r\n\t                var labelGroup = this._createGroup('labelGroup');\r\n\r\n\t                /**\r\n\t                 * @private\r\n\t                 * @type {module:echarts/component/timeline/TimelineAxis}\r\n\t                 */\r\n\t                var axis = this._axis = this._createAxis(layoutInfo, timelineModel);\r\n\r\n\t                timelineModel.formatTooltip = function (dataIndex) {\r\n\t                    return encodeHTML(axis.scale.getLabel(dataIndex));\r\n\t                };\r\n\r\n\t                each(\r\n\t                    ['AxisLine', 'AxisTick', 'Control', 'CurrentPointer'],\r\n\t                    function (name) {\r\n\t                        this['_render' + name](layoutInfo, mainGroup, axis, timelineModel);\r\n\t                    },\r\n\t                    this\r\n\t                );\r\n\r\n\t                this._renderAxisLabel(layoutInfo, labelGroup, axis, timelineModel);\r\n\t                this._position(layoutInfo, timelineModel);\r\n\t            }\r\n\r\n\t            this._doPlayStop();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        remove: function () {\r\n\t            this._clearTimer();\r\n\t            this.group.removeAll();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @override\r\n\t         */\r\n\t        dispose: function () {\r\n\t            this._clearTimer();\r\n\t        },\r\n\r\n\t        _layout: function (timelineModel, api) {\r\n\t            var labelPosOpt = timelineModel.get('label.normal.position');\r\n\t            var orient = timelineModel.get('orient');\r\n\t            var viewRect = getViewRect(timelineModel, api);\r\n\t            // Auto label offset.\r\n\t            if (labelPosOpt == null || labelPosOpt === 'auto') {\r\n\t                labelPosOpt = orient === 'horizontal'\r\n\t                    ? ((viewRect.y + viewRect.height / 2) < api.getHeight() / 2 ? '-' : '+')\r\n\t                    : ((viewRect.x + viewRect.width / 2) < api.getWidth() / 2 ? '+' : '-');\r\n\t            }\r\n\t            else if (isNaN(labelPosOpt)) {\r\n\t                labelPosOpt = ({\r\n\t                    horizontal: {top: '-', bottom: '+'},\r\n\t                    vertical: {left: '-', right: '+'}\r\n\t                })[orient][labelPosOpt];\r\n\t            }\r\n\r\n\t            // FIXME\r\n\t            // 暂没有实现用户传入\r\n\t            // var labelAlign = timelineModel.get('label.normal.textStyle.align');\r\n\t            // var labelBaseline = timelineModel.get('label.normal.textStyle.baseline');\r\n\t            var labelAlignMap = {\r\n\t                horizontal: 'center',\r\n\t                vertical: (labelPosOpt >= 0 || labelPosOpt === '+') ? 'left' : 'right'\r\n\t            };\r\n\r\n\t            var labelBaselineMap = {\r\n\t                horizontal: (labelPosOpt >= 0 || labelPosOpt === '+') ? 'top' : 'bottom',\r\n\t                vertical: 'middle'\r\n\t            };\r\n\t            var rotationMap = {\r\n\t                horizontal: 0,\r\n\t                vertical: PI / 2\r\n\t            };\r\n\r\n\t            // Position\r\n\t            var mainLength = orient === 'vertical' ? viewRect.height : viewRect.width;\r\n\r\n\t            var controlModel = timelineModel.getModel('controlStyle');\r\n\t            var showControl = controlModel.get('show');\r\n\t            var controlSize = showControl ? controlModel.get('itemSize') : 0;\r\n\t            var controlGap = showControl ? controlModel.get('itemGap') : 0;\r\n\t            var sizePlusGap = controlSize + controlGap;\r\n\r\n\t            // Special label rotate.\r\n\t            var labelRotation = timelineModel.get('label.normal.rotate') || 0;\r\n\t            labelRotation = labelRotation * PI / 180; // To radian.\r\n\r\n\t            var playPosition;\r\n\t            var prevBtnPosition;\r\n\t            var nextBtnPosition;\r\n\t            var axisExtent;\r\n\t            var controlPosition = controlModel.get('position', true);\r\n\t            var showControl = controlModel.get('show', true);\r\n\t            var showPlayBtn = showControl && controlModel.get('showPlayBtn', true);\r\n\t            var showPrevBtn = showControl && controlModel.get('showPrevBtn', true);\r\n\t            var showNextBtn = showControl && controlModel.get('showNextBtn', true);\r\n\t            var xLeft = 0;\r\n\t            var xRight = mainLength;\r\n\r\n\t            // position[0] means left, position[1] means middle.\r\n\t            if (controlPosition === 'left' || controlPosition === 'bottom') {\r\n\t                showPlayBtn && (playPosition = [0, 0], xLeft += sizePlusGap);\r\n\t                showPrevBtn && (prevBtnPosition = [xLeft, 0], xLeft += sizePlusGap);\r\n\t                showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);\r\n\t            }\r\n\t            else { // 'top' 'right'\r\n\t                showPlayBtn && (playPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);\r\n\t                showPrevBtn && (prevBtnPosition = [0, 0], xLeft += sizePlusGap);\r\n\t                showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);\r\n\t            }\r\n\t            axisExtent = [xLeft, xRight];\r\n\r\n\t            if (timelineModel.get('inverse')) {\r\n\t                axisExtent.reverse();\r\n\t            }\r\n\r\n\t            return {\r\n\t                viewRect: viewRect,\r\n\t                mainLength: mainLength,\r\n\t                orient: orient,\r\n\r\n\t                rotation: rotationMap[orient],\r\n\t                labelRotation: labelRotation,\r\n\t                labelPosOpt: labelPosOpt,\r\n\t                labelAlign: labelAlignMap[orient],\r\n\t                labelBaseline: labelBaselineMap[orient],\r\n\r\n\t                // Based on mainGroup.\r\n\t                playPosition: playPosition,\r\n\t                prevBtnPosition: prevBtnPosition,\r\n\t                nextBtnPosition: nextBtnPosition,\r\n\t                axisExtent: axisExtent,\r\n\r\n\t                controlSize: controlSize,\r\n\t                controlGap: controlGap\r\n\t            };\r\n\t        },\r\n\r\n\t        _position: function (layoutInfo, timelineModel) {\r\n\t            // Position is be called finally, because bounding rect is needed for\r\n\t            // adapt content to fill viewRect (auto adapt offset).\r\n\r\n\t            // Timeline may be not all in the viewRect when 'offset' is specified\r\n\t            // as a number, because it is more appropriate that label aligns at\r\n\t            // 'offset' but not the other edge defined by viewRect.\r\n\r\n\t            var mainGroup = this._mainGroup;\r\n\t            var labelGroup = this._labelGroup;\r\n\r\n\t            var viewRect = layoutInfo.viewRect;\r\n\t            if (layoutInfo.orient === 'vertical') {\r\n\t                // transfrom to horizontal, inverse rotate by left-top point.\r\n\t                var m = matrix.create();\r\n\t                var rotateOriginX = viewRect.x;\r\n\t                var rotateOriginY = viewRect.y + viewRect.height;\r\n\t                matrix.translate(m, m, [-rotateOriginX, -rotateOriginY]);\r\n\t                matrix.rotate(m, m, -PI / 2);\r\n\t                matrix.translate(m, m, [rotateOriginX, rotateOriginY]);\r\n\t                viewRect = viewRect.clone();\r\n\t                viewRect.applyTransform(m);\r\n\t            }\r\n\r\n\t            var viewBound = getBound(viewRect);\r\n\t            var mainBound = getBound(mainGroup.getBoundingRect());\r\n\t            var labelBound = getBound(labelGroup.getBoundingRect());\r\n\r\n\t            var mainPosition = mainGroup.position;\r\n\t            var labelsPosition = labelGroup.position;\r\n\r\n\t            labelsPosition[0] = mainPosition[0] = viewBound[0][0];\r\n\r\n\t            var labelPosOpt = layoutInfo.labelPosOpt;\r\n\r\n\t            if (isNaN(labelPosOpt)) { // '+' or '-'\r\n\t                var mainBoundIdx = labelPosOpt === '+' ? 0 : 1;\r\n\t                toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);\r\n\t                toBound(labelsPosition, labelBound, viewBound, 1, 1 - mainBoundIdx);\r\n\t            }\r\n\t            else {\r\n\t                var mainBoundIdx = labelPosOpt >= 0 ? 0 : 1;\r\n\t                toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);\r\n\t                labelsPosition[1] = mainPosition[1] + labelPosOpt;\r\n\t            }\r\n\r\n\t            mainGroup.attr('position', mainPosition);\r\n\t            labelGroup.attr('position', labelsPosition);\r\n\t            mainGroup.rotation = labelGroup.rotation = layoutInfo.rotation;\r\n\r\n\t            setOrigin(mainGroup);\r\n\t            setOrigin(labelGroup);\r\n\r\n\t            function setOrigin(targetGroup) {\r\n\t                var pos = targetGroup.position;\r\n\t                targetGroup.origin = [\r\n\t                    viewBound[0][0] - pos[0],\r\n\t                    viewBound[1][0] - pos[1]\r\n\t                ];\r\n\t            }\r\n\r\n\t            function getBound(rect) {\r\n\t                // [[xmin, xmax], [ymin, ymax]]\r\n\t                return [\r\n\t                    [rect.x, rect.x + rect.width],\r\n\t                    [rect.y, rect.y + rect.height]\r\n\t                ];\r\n\t            }\r\n\r\n\t            function toBound(fromPos, from, to, dimIdx, boundIdx) {\r\n\t                fromPos[dimIdx] += to[dimIdx][boundIdx] - from[dimIdx][boundIdx];\r\n\t            }\r\n\t        },\r\n\r\n\t        _createAxis: function (layoutInfo, timelineModel) {\r\n\t            var data = timelineModel.getData();\r\n\t            var axisType = timelineModel.get('axisType');\r\n\r\n\t            var scale = axisHelper.createScaleByModel(timelineModel, axisType);\r\n\t            var dataExtent = data.getDataExtent('value');\r\n\t            scale.setExtent(dataExtent[0], dataExtent[1]);\r\n\t            this._customizeScale(scale, data);\r\n\t            scale.niceTicks();\r\n\r\n\t            var axis = new TimelineAxis('value', scale, layoutInfo.axisExtent, axisType);\r\n\t            axis.model = timelineModel;\r\n\r\n\t            return axis;\r\n\t        },\r\n\r\n\t        _customizeScale: function (scale, data) {\r\n\r\n\t            scale.getTicks = function () {\r\n\t                return data.mapArray(['value'], function (value) {\r\n\t                    return value;\r\n\t                });\r\n\t            };\r\n\r\n\t            scale.getTicksLabels = function () {\r\n\t                return zrUtil.map(this.getTicks(), scale.getLabel, scale);\r\n\t            };\r\n\t        },\r\n\r\n\t        _createGroup: function (name) {\r\n\t            var newGroup = this['_' + name] = new graphic.Group();\r\n\t            this.group.add(newGroup);\r\n\t            return newGroup;\r\n\t        },\r\n\r\n\t        _renderAxisLine: function (layoutInfo, group, axis, timelineModel) {\r\n\t            var axisExtent = axis.getExtent();\r\n\r\n\t            if (!timelineModel.get('lineStyle.show')) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            group.add(new graphic.Line({\r\n\t                shape: {\r\n\t                    x1: axisExtent[0], y1: 0,\r\n\t                    x2: axisExtent[1], y2: 0\r\n\t                },\r\n\t                style: zrUtil.extend(\r\n\t                    {lineCap: 'round'},\r\n\t                    timelineModel.getModel('lineStyle').getLineStyle()\r\n\t                ),\r\n\t                silent: true,\r\n\t                z2: 1\r\n\t            }));\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _renderAxisTick: function (layoutInfo, group, axis, timelineModel) {\r\n\t            var data = timelineModel.getData();\r\n\t            var ticks = axis.scale.getTicks();\r\n\r\n\t            each(ticks, function (value, dataIndex) {\r\n\r\n\t                var tickCoord = axis.dataToCoord(value);\r\n\t                var itemModel = data.getItemModel(dataIndex);\r\n\t                var itemStyleModel = itemModel.getModel('itemStyle.normal');\r\n\t                var hoverStyleModel = itemModel.getModel('itemStyle.emphasis');\r\n\t                var symbolOpt = {\r\n\t                    position: [tickCoord, 0],\r\n\t                    onclick: bind(this._changeTimeline, this, dataIndex)\r\n\t                };\r\n\t                var el = giveSymbol(itemModel, itemStyleModel, group, symbolOpt);\r\n\t                graphic.setHoverStyle(el, hoverStyleModel.getItemStyle());\r\n\r\n\t                if (itemModel.get('tooltip')) {\r\n\t                    el.dataIndex = dataIndex;\r\n\t                    el.dataModel = timelineModel;\r\n\t                }\r\n\t                else {\r\n\t                    el.dataIndex = el.dataModel = null;\r\n\t                }\r\n\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _renderAxisLabel: function (layoutInfo, group, axis, timelineModel) {\r\n\t            var labelModel = timelineModel.getModel('label.normal');\r\n\r\n\t            if (!labelModel.get('show')) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var data = timelineModel.getData();\r\n\t            var ticks = axis.scale.getTicks();\r\n\t            var labels = axisHelper.getFormattedLabels(\r\n\t                axis, labelModel.get('formatter')\r\n\t            );\r\n\t            var labelInterval = axis.getLabelInterval();\r\n\r\n\t            each(ticks, function (tick, dataIndex) {\r\n\t                if (axis.isLabelIgnored(dataIndex, labelInterval)) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                var itemModel = data.getItemModel(dataIndex);\r\n\t                var itemTextStyleModel = itemModel.getModel('label.normal.textStyle');\r\n\t                var hoverTextStyleModel = itemModel.getModel('label.emphasis.textStyle');\r\n\t                var tickCoord = axis.dataToCoord(tick);\r\n\t                var textEl = new graphic.Text({\r\n\t                    style: {\r\n\t                        text: labels[dataIndex],\r\n\t                        textAlign: layoutInfo.labelAlign,\r\n\t                        textVerticalAlign: layoutInfo.labelBaseline,\r\n\t                        textFont: itemTextStyleModel.getFont(),\r\n\t                        fill: itemTextStyleModel.getTextColor()\r\n\t                    },\r\n\t                    position: [tickCoord, 0],\r\n\t                    rotation: layoutInfo.labelRotation - layoutInfo.rotation,\r\n\t                    onclick: bind(this._changeTimeline, this, dataIndex),\r\n\t                    silent: false\r\n\t                });\r\n\r\n\t                group.add(textEl);\r\n\t                graphic.setHoverStyle(textEl, hoverTextStyleModel.getItemStyle());\r\n\r\n\t            }, this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         */\r\n\t        _renderControl: function (layoutInfo, group, axis, timelineModel) {\r\n\t            var controlSize = layoutInfo.controlSize;\r\n\t            var rotation = layoutInfo.rotation;\r\n\r\n\t            var itemStyle = timelineModel.getModel('controlStyle.normal').getItemStyle();\r\n\t            var hoverStyle = timelineModel.getModel('controlStyle.emphasis').getItemStyle();\r\n\t            var rect = [0, -controlSize / 2, controlSize, controlSize];\r\n\t            var playState = timelineModel.getPlayState();\r\n\t            var inverse = timelineModel.get('inverse', true);\r\n\r\n\t            makeBtn(\r\n\t                layoutInfo.nextBtnPosition,\r\n\t                'controlStyle.nextIcon',\r\n\t                bind(this._changeTimeline, this, inverse ? '-' : '+')\r\n\t            );\r\n\t            makeBtn(\r\n\t                layoutInfo.prevBtnPosition,\r\n\t                'controlStyle.prevIcon',\r\n\t                bind(this._changeTimeline, this, inverse ? '+' : '-')\r\n\t            );\r\n\t            makeBtn(\r\n\t                layoutInfo.playPosition,\r\n\t                'controlStyle.' + (playState ? 'stopIcon' : 'playIcon'),\r\n\t                bind(this._handlePlayClick, this, !playState),\r\n\t                true\r\n\t            );\r\n\r\n\t            function makeBtn(position, iconPath, onclick, willRotate) {\r\n\t                if (!position) {\r\n\t                    return;\r\n\t                }\r\n\t                var opt = {\r\n\t                    position: position,\r\n\t                    origin: [controlSize / 2, 0],\r\n\t                    rotation: willRotate ? -rotation : 0,\r\n\t                    rectHover: true,\r\n\t                    style: itemStyle,\r\n\t                    onclick: onclick\r\n\t                };\r\n\t                var btn = makeIcon(timelineModel, iconPath, rect, opt);\r\n\t                group.add(btn);\r\n\t                graphic.setHoverStyle(btn, hoverStyle);\r\n\t            }\r\n\t        },\r\n\r\n\t        _renderCurrentPointer: function (layoutInfo, group, axis, timelineModel) {\r\n\t            var data = timelineModel.getData();\r\n\t            var currentIndex = timelineModel.getCurrentIndex();\r\n\t            var pointerModel = data.getItemModel(currentIndex).getModel('checkpointStyle');\r\n\t            var me = this;\r\n\r\n\t            var callback = {\r\n\t                onCreate: function (pointer) {\r\n\t                    pointer.draggable = true;\r\n\t                    pointer.drift = bind(me._handlePointerDrag, me);\r\n\t                    pointer.ondragend = bind(me._handlePointerDragend, me);\r\n\t                    pointerMoveTo(pointer, currentIndex, axis, timelineModel, true);\r\n\t                },\r\n\t                onUpdate: function (pointer) {\r\n\t                    pointerMoveTo(pointer, currentIndex, axis, timelineModel);\r\n\t                }\r\n\t            };\r\n\r\n\t            // Reuse when exists, for animation and drag.\r\n\t            this._currentPointer = giveSymbol(\r\n\t                pointerModel, pointerModel, this._mainGroup, {}, this._currentPointer, callback\r\n\t            );\r\n\t        },\r\n\r\n\t        _handlePlayClick: function (nextState) {\r\n\t            this._clearTimer();\r\n\t            this.api.dispatchAction({\r\n\t                type: 'timelinePlayChange',\r\n\t                playState: nextState,\r\n\t                from: this.uid\r\n\t            });\r\n\t        },\r\n\r\n\t        _handlePointerDrag: function (dx, dy, e) {\r\n\t            this._clearTimer();\r\n\t            this._pointerChangeTimeline([e.offsetX, e.offsetY]);\r\n\t        },\r\n\r\n\t        _handlePointerDragend: function (e) {\r\n\t            this._pointerChangeTimeline([e.offsetX, e.offsetY], true);\r\n\t        },\r\n\r\n\t        _pointerChangeTimeline: function (mousePos, trigger) {\r\n\t            var toCoord = this._toAxisCoord(mousePos)[0];\r\n\r\n\t            var axis = this._axis;\r\n\t            var axisExtent = numberUtil.asc(axis.getExtent().slice());\r\n\r\n\t            toCoord > axisExtent[1] && (toCoord = axisExtent[1]);\r\n\t            toCoord < axisExtent[0] && (toCoord = axisExtent[0]);\r\n\r\n\t            this._currentPointer.position[0] = toCoord;\r\n\t            this._currentPointer.dirty();\r\n\r\n\t            var targetDataIndex = this._findNearestTick(toCoord);\r\n\t            var timelineModel = this.model;\r\n\r\n\t            if (trigger || (\r\n\t                targetDataIndex !== timelineModel.getCurrentIndex()\r\n\t                && timelineModel.get('realtime')\r\n\t            )) {\r\n\t                this._changeTimeline(targetDataIndex);\r\n\t            }\r\n\t        },\r\n\r\n\t        _doPlayStop: function () {\r\n\t            this._clearTimer();\r\n\r\n\t            if (this.model.getPlayState()) {\r\n\t                this._timer = setTimeout(\r\n\t                    bind(handleFrame, this),\r\n\t                    this.model.get('playInterval')\r\n\t                );\r\n\t            }\r\n\r\n\t            function handleFrame() {\r\n\t                // Do not cache\r\n\t                var timelineModel = this.model;\r\n\t                this._changeTimeline(\r\n\t                    timelineModel.getCurrentIndex()\r\n\t                    + (timelineModel.get('rewind', true) ? -1 : 1)\r\n\t                );\r\n\t            }\r\n\t        },\r\n\r\n\t        _toAxisCoord: function (vertex) {\r\n\t            var trans = this._mainGroup.getLocalTransform();\r\n\t            return graphic.applyTransform(vertex, trans, true);\r\n\t        },\r\n\r\n\t        _findNearestTick: function (axisCoord) {\r\n\t            var data = this.model.getData();\r\n\t            var dist = Infinity;\r\n\t            var targetDataIndex;\r\n\t            var axis = this._axis;\r\n\r\n\t            data.each(['value'], function (value, dataIndex) {\r\n\t                var coord = axis.dataToCoord(value);\r\n\t                var d = Math.abs(coord - axisCoord);\r\n\t                if (d < dist) {\r\n\t                    dist = d;\r\n\t                    targetDataIndex = dataIndex;\r\n\t                }\r\n\t            });\r\n\r\n\t            return targetDataIndex;\r\n\t        },\r\n\r\n\t        _clearTimer: function () {\r\n\t            if (this._timer) {\r\n\t                clearTimeout(this._timer);\r\n\t                this._timer = null;\r\n\t            }\r\n\t        },\r\n\r\n\t        _changeTimeline: function (nextIndex) {\r\n\t            var currentIndex = this.model.getCurrentIndex();\r\n\r\n\t            if (nextIndex === '+') {\r\n\t                nextIndex = currentIndex + 1;\r\n\t            }\r\n\t            else if (nextIndex === '-') {\r\n\t                nextIndex = currentIndex - 1;\r\n\t            }\r\n\r\n\t            this.api.dispatchAction({\r\n\t                type: 'timelineChange',\r\n\t                currentIndex: nextIndex,\r\n\t                from: this.uid\r\n\t            });\r\n\t        }\r\n\r\n\t    });\r\n\r\n\t    function getViewRect(model, api) {\r\n\t        return layout.getLayoutRect(\r\n\t            model.getBoxLayoutParams(),\r\n\t            {\r\n\t                width: api.getWidth(),\r\n\t                height: api.getHeight()\r\n\t            },\r\n\t            model.get('padding')\r\n\t        );\r\n\t    }\r\n\r\n\t    function makeIcon(timelineModel, objPath, rect, opts) {\r\n\t        var icon = graphic.makePath(\r\n\t            timelineModel.get(objPath).replace(/^path:\\/\\//, ''),\r\n\t            zrUtil.clone(opts || {}),\r\n\t            new BoundingRect(rect[0], rect[1], rect[2], rect[3]),\r\n\t            'center'\r\n\t        );\r\n\r\n\t        return icon;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Create symbol or update symbol\r\n\t     * opt: basic position and event handlers\r\n\t     */\r\n\t    function giveSymbol(hostModel, itemStyleModel, group, opt, symbol, callback) {\r\n\t        var color = itemStyleModel.get('color');\r\n\r\n\t        if (!symbol) {\r\n\t            var symbolType = hostModel.get('symbol');\r\n\t            symbol = symbolUtil.createSymbol(symbolType, -1, -1, 2, 2, color);\r\n\t            symbol.setStyle('strokeNoScale', true);\r\n\t            group.add(symbol);\r\n\t            callback && callback.onCreate(symbol);\r\n\t        }\r\n\t        else {\r\n\t            symbol.setColor(color);\r\n\t            group.add(symbol); // Group may be new, also need to add.\r\n\t            callback && callback.onUpdate(symbol);\r\n\t        }\r\n\r\n\t        // Style\r\n\t        var itemStyle = itemStyleModel.getItemStyle(['color', 'symbol', 'symbolSize']);\r\n\t        symbol.setStyle(itemStyle);\r\n\r\n\t        // Transform and events.\r\n\t        opt = zrUtil.merge({\r\n\t            rectHover: true,\r\n\t            z2: 100\r\n\t        }, opt, true);\r\n\r\n\t        var symbolSize = hostModel.get('symbolSize');\r\n\t        symbolSize = symbolSize instanceof Array\r\n\t            ? symbolSize.slice()\r\n\t            : [+symbolSize, +symbolSize];\r\n\t        symbolSize[0] /= 2;\r\n\t        symbolSize[1] /= 2;\r\n\t        opt.scale = symbolSize;\r\n\r\n\t        var symbolOffset = hostModel.get('symbolOffset');\r\n\t        if (symbolOffset) {\r\n\t            var pos = opt.position = opt.position || [0, 0];\r\n\t            pos[0] += numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);\r\n\t            pos[1] += numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);\r\n\t        }\r\n\r\n\t        var symbolRotate = hostModel.get('symbolRotate');\r\n\t        opt.rotation = (symbolRotate || 0) * Math.PI / 180 || 0;\r\n\r\n\t        symbol.attr(opt);\r\n\r\n\t        // FIXME\r\n\t        // (1) When symbol.style.strokeNoScale is true and updateTransform is not performed,\r\n\t        // getBoundingRect will return wrong result.\r\n\t        // (This is supposed to be resolved in zrender, but it is a little difficult to\r\n\t        // leverage performance and auto updateTransform)\r\n\t        // (2) All of ancesters of symbol do not scale, so we can just updateTransform symbol.\r\n\t        symbol.updateTransform();\r\n\r\n\t        return symbol;\r\n\t    }\r\n\r\n\t    function pointerMoveTo(pointer, dataIndex, axis, timelineModel, noAnimation) {\r\n\t        if (pointer.dragging) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var pointerModel = timelineModel.getModel('checkpointStyle');\r\n\t        var toCoord = axis.dataToCoord(timelineModel.getData().get(['value'], dataIndex));\r\n\r\n\t        if (noAnimation || !pointerModel.get('animation', true)) {\r\n\t            pointer.attr({position: [toCoord, 0]});\r\n\t        }\r\n\t        else {\r\n\t            pointer.stopAnimation(true);\r\n\t            pointer.animateTo(\r\n\t                {position: [toCoord, 0]},\r\n\t                pointerModel.get('animationDuration', true),\r\n\t                pointerModel.get('animationEasing', true)\r\n\t            );\r\n\t        }\r\n\t    }\r\n\r\n\r\n\r\n/***/ },\r\n/* 365 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Timeline view\r\n\t */\r\n\r\n\r\n\t    // var zrUtil = require('zrender/lib/core/util');\r\n\t    // var graphic = require('../../util/graphic');\r\n\t    var ComponentView = __webpack_require__(29);\r\n\r\n\t    module.exports = ComponentView.extend({\r\n\r\n\t        type: 'timeline'\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 366 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var Axis = __webpack_require__(123);\r\n\t    var axisHelper = __webpack_require__(114);\r\n\r\n\t    /**\r\n\t     * Extend axis 2d\r\n\t     * @constructor module:echarts/coord/cartesian/Axis2D\r\n\t     * @extends {module:echarts/coord/cartesian/Axis}\r\n\t     * @param {string} dim\r\n\t     * @param {*} scale\r\n\t     * @param {Array.<number>} coordExtent\r\n\t     * @param {string} axisType\r\n\t     * @param {string} position\r\n\t     */\r\n\t    var TimelineAxis = function (dim, scale, coordExtent, axisType) {\r\n\r\n\t        Axis.call(this, dim, scale, coordExtent);\r\n\r\n\t        /**\r\n\t         * Axis type\r\n\t         *  - 'category'\r\n\t         *  - 'value'\r\n\t         *  - 'time'\r\n\t         *  - 'log'\r\n\t         * @type {string}\r\n\t         */\r\n\t        this.type = axisType || 'value';\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {number}\r\n\t         */\r\n\t        this._autoLabelInterval;\r\n\r\n\t        /**\r\n\t         * Axis model\r\n\t         * @param {module:echarts/component/TimelineModel}\r\n\t         */\r\n\t        this.model = null;\r\n\t    };\r\n\r\n\t    TimelineAxis.prototype = {\r\n\r\n\t        constructor: TimelineAxis,\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @return {number}\r\n\t         */\r\n\t        getLabelInterval: function () {\r\n\t            var timelineModel = this.model;\r\n\t            var labelModel = timelineModel.getModel('label.normal');\r\n\t            var labelInterval = labelModel.get('interval');\r\n\r\n\t            if (labelInterval != null && labelInterval != 'auto') {\r\n\t                return labelInterval;\r\n\t            }\r\n\r\n\t            var labelInterval = this._autoLabelInterval;\r\n\r\n\t            if (!labelInterval) {\r\n\t                labelInterval = this._autoLabelInterval = axisHelper.getAxisLabelInterval(\r\n\t                    zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),\r\n\t                    axisHelper.getFormattedLabels(this, labelModel.get('formatter')),\r\n\t                    labelModel.getModel('textStyle').getFont(),\r\n\t                    timelineModel.get('orient') === 'horizontal'\r\n\t                );\r\n\t            }\r\n\r\n\t            return labelInterval;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If label is ignored.\r\n\t         * Automatically used when axis is category and label can not be all shown\r\n\t         * @public\r\n\t         * @param  {number} idx\r\n\t         * @return {boolean}\r\n\t         */\r\n\t        isLabelIgnored: function (idx) {\r\n\t            if (this.type === 'category') {\r\n\t                var labelInterval = this.getLabelInterval();\r\n\t                return ((typeof labelInterval === 'function')\r\n\t                    && !labelInterval(idx, this.scale.getLabel(idx)))\r\n\t                    || idx % (labelInterval + 1);\r\n\t            }\r\n\t        }\r\n\r\n\t    };\r\n\r\n\t    zrUtil.inherits(TimelineAxis, Axis);\r\n\r\n\t    module.exports = TimelineAxis;\r\n\r\n\r\n/***/ },\r\n/* 367 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    __webpack_require__(368);\r\n\t    __webpack_require__(369);\r\n\r\n\t    __webpack_require__(371);\r\n\t    __webpack_require__(372);\r\n\t    __webpack_require__(373);\r\n\t    __webpack_require__(374);\r\n\t    __webpack_require__(379);\r\n\r\n\r\n/***/ },\r\n/* 368 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var featureManager = __webpack_require__(315);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    var ToolboxModel = __webpack_require__(1).extendComponentModel({\r\n\r\n\t        type: 'toolbox',\r\n\r\n\t        layoutMode: {\r\n\t            type: 'box',\r\n\t            ignoreSize: true\r\n\t        },\r\n\r\n\t        mergeDefaultAndTheme: function (option) {\r\n\t            ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);\r\n\r\n\t            zrUtil.each(this.option.feature, function (featureOpt, featureName) {\r\n\t                var Feature = featureManager.get(featureName);\r\n\t                Feature && zrUtil.merge(featureOpt, Feature.defaultOption);\r\n\t            });\r\n\t        },\r\n\r\n\t        defaultOption: {\r\n\r\n\t            show: true,\r\n\r\n\t            z: 6,\r\n\r\n\t            zlevel: 0,\r\n\r\n\t            orient: 'horizontal',\r\n\r\n\t            left: 'right',\r\n\r\n\t            top: 'top',\r\n\r\n\t            // right\r\n\t            // bottom\r\n\r\n\t            backgroundColor: 'transparent',\r\n\r\n\t            borderColor: '#ccc',\r\n\r\n\t            borderWidth: 0,\r\n\r\n\t            padding: 5,\r\n\r\n\t            itemSize: 15,\r\n\r\n\t            itemGap: 8,\r\n\r\n\t            showTitle: true,\r\n\r\n\t            iconStyle: {\r\n\t                normal: {\r\n\t                    borderColor: '#666',\r\n\t                    color: 'none'\r\n\t                },\r\n\t                emphasis: {\r\n\t                    borderColor: '#3E98C5'\r\n\t                }\r\n\t            }\r\n\t            // textStyle: {},\r\n\r\n\t            // feature\r\n\t        }\r\n\t    });\r\n\r\n\t    module.exports = ToolboxModel;\r\n\r\n\r\n/***/ },\r\n/* 369 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/* WEBPACK VAR INJECTION */(function(process) {\r\n\r\n\t    var featureManager = __webpack_require__(315);\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var graphic = __webpack_require__(43);\r\n\t    var Model = __webpack_require__(12);\r\n\t    var DataDiffer = __webpack_require__(98);\r\n\t    var listComponentHelper = __webpack_require__(278);\r\n\t    var textContain = __webpack_require__(8);\r\n\r\n\t    module.exports = __webpack_require__(1).extendComponentView({\r\n\r\n\t        type: 'toolbox',\r\n\r\n\t        render: function (toolboxModel, ecModel, api, payload) {\r\n\t            var group = this.group;\r\n\t            group.removeAll();\r\n\r\n\t            if (!toolboxModel.get('show')) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var itemSize = +toolboxModel.get('itemSize');\r\n\t            var featureOpts = toolboxModel.get('feature') || {};\r\n\t            var features = this._features || (this._features = {});\r\n\r\n\t            var featureNames = [];\r\n\t            zrUtil.each(featureOpts, function (opt, name) {\r\n\t                featureNames.push(name);\r\n\t            });\r\n\r\n\t            (new DataDiffer(this._featureNames || [], featureNames))\r\n\t                .add(process)\r\n\t                .update(process)\r\n\t                .remove(zrUtil.curry(process, null))\r\n\t                .execute();\r\n\r\n\t            // Keep for diff.\r\n\t            this._featureNames = featureNames;\r\n\r\n\t            function process(newIndex, oldIndex) {\r\n\t                var featureName = featureNames[newIndex];\r\n\t                var oldName = featureNames[oldIndex];\r\n\t                var featureOpt = featureOpts[featureName];\r\n\t                var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);\r\n\t                var feature;\r\n\r\n\t                if (featureName && !oldName) { // Create\r\n\t                    if (isUserFeatureName(featureName)) {\r\n\t                        feature = {\r\n\t                            model: featureModel,\r\n\t                            onclick: featureModel.option.onclick,\r\n\t                            featureName: featureName\r\n\t                        };\r\n\t                    }\r\n\t                    else {\r\n\t                        var Feature = featureManager.get(featureName);\r\n\t                        if (!Feature) {\r\n\t                            return;\r\n\t                        }\r\n\t                        feature = new Feature(featureModel, ecModel, api);\r\n\t                    }\r\n\t                    features[featureName] = feature;\r\n\t                }\r\n\t                else {\r\n\t                    feature = features[oldName];\r\n\t                    // If feature does not exsit.\r\n\t                    if (!feature) {\r\n\t                        return;\r\n\t                    }\r\n\t                    feature.model = featureModel;\r\n\t                    feature.ecModel = ecModel;\r\n\t                    feature.api = api;\r\n\t                }\r\n\r\n\t                if (!featureName && oldName) {\r\n\t                    feature.dispose && feature.dispose(ecModel, api);\r\n\t                    return;\r\n\t                }\r\n\r\n\t                if (!featureModel.get('show') || feature.unusable) {\r\n\t                    feature.remove && feature.remove(ecModel, api);\r\n\t                    return;\r\n\t                }\r\n\r\n\t                createIconPaths(featureModel, feature, featureName);\r\n\r\n\t                featureModel.setIconStatus = function (iconName, status) {\r\n\t                    var option = this.option;\r\n\t                    var iconPaths = this.iconPaths;\r\n\t                    option.iconStatus = option.iconStatus || {};\r\n\t                    option.iconStatus[iconName] = status;\r\n\t                    // FIXME\r\n\t                    iconPaths[iconName] && iconPaths[iconName].trigger(status);\r\n\t                };\r\n\r\n\t                if (feature.render) {\r\n\t                    feature.render(featureModel, ecModel, api, payload);\r\n\t                }\r\n\t            }\r\n\r\n\t            function createIconPaths(featureModel, feature, featureName) {\r\n\t                var iconStyleModel = featureModel.getModel('iconStyle');\r\n\r\n\t                // If one feature has mutiple icon. they are orginaized as\r\n\t                // {\r\n\t                //     icon: {\r\n\t                //         foo: '',\r\n\t                //         bar: ''\r\n\t                //     },\r\n\t                //     title: {\r\n\t                //         foo: '',\r\n\t                //         bar: ''\r\n\t                //     }\r\n\t                // }\r\n\t                var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');\r\n\t                var titles = featureModel.get('title') || {};\r\n\t                if (typeof icons === 'string') {\r\n\t                    var icon = icons;\r\n\t                    var title = titles;\r\n\t                    icons = {};\r\n\t                    titles = {};\r\n\t                    icons[featureName] = icon;\r\n\t                    titles[featureName] = title;\r\n\t                }\r\n\t                var iconPaths = featureModel.iconPaths = {};\r\n\t                zrUtil.each(icons, function (icon, iconName) {\r\n\t                    var normalStyle = iconStyleModel.getModel('normal').getItemStyle();\r\n\t                    var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();\r\n\r\n\t                    var style = {\r\n\t                        x: -itemSize / 2,\r\n\t                        y: -itemSize / 2,\r\n\t                        width: itemSize,\r\n\t                        height: itemSize\r\n\t                    };\r\n\t                    var path = icon.indexOf('image://') === 0\r\n\t                        ? (\r\n\t                            style.image = icon.slice(8),\r\n\t                            new graphic.Image({style: style})\r\n\t                        )\r\n\t                        : graphic.makePath(\r\n\t                            icon.replace('path://', ''),\r\n\t                            {\r\n\t                                style: normalStyle,\r\n\t                                hoverStyle: hoverStyle,\r\n\t                                rectHover: true\r\n\t                            },\r\n\t                            style,\r\n\t                            'center'\r\n\t                        );\r\n\r\n\t                    graphic.setHoverStyle(path);\r\n\r\n\t                    if (toolboxModel.get('showTitle')) {\r\n\t                        path.__title = titles[iconName];\r\n\t                        path.on('mouseover', function () {\r\n\t                                // Should not reuse above hoverStyle, which might be modified.\r\n\t                                var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();\r\n\t                                path.setStyle({\r\n\t                                    text: titles[iconName],\r\n\t                                    textPosition: hoverStyle.textPosition || 'bottom',\r\n\t                                    textFill: hoverStyle.fill || hoverStyle.stroke || '#000',\r\n\t                                    textAlign: hoverStyle.textAlign || 'center'\r\n\t                                });\r\n\t                            })\r\n\t                            .on('mouseout', function () {\r\n\t                                path.setStyle({\r\n\t                                    textFill: null\r\n\t                                });\r\n\t                            });\r\n\t                    }\r\n\t                    path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');\r\n\r\n\t                    group.add(path);\r\n\t                    path.on('click', zrUtil.bind(\r\n\t                        feature.onclick, feature, ecModel, api, iconName\r\n\t                    ));\r\n\r\n\t                    iconPaths[iconName] = path;\r\n\t                });\r\n\t            }\r\n\r\n\t            listComponentHelper.layout(group, toolboxModel, api);\r\n\t            // Render background after group is layout\r\n\t            // FIXME\r\n\t            listComponentHelper.addBackground(group, toolboxModel);\r\n\r\n\t            // Adjust icon title positions to avoid them out of screen\r\n\t            group.eachChild(function (icon) {\r\n\t                var titleText = icon.__title;\r\n\t                var hoverStyle = icon.hoverStyle;\r\n\t                // May be background element\r\n\t                if (hoverStyle && titleText) {\r\n\t                    var rect = textContain.getBoundingRect(\r\n\t                        titleText, hoverStyle.font\r\n\t                    );\r\n\t                    var offsetX = icon.position[0] + group.position[0];\r\n\t                    var offsetY = icon.position[1] + group.position[1] + itemSize;\r\n\r\n\t                    var needPutOnTop = false;\r\n\t                    if (offsetY + rect.height > api.getHeight()) {\r\n\t                        hoverStyle.textPosition = 'top';\r\n\t                        needPutOnTop = true;\r\n\t                    }\r\n\t                    var topOffset = needPutOnTop ? (-5 - rect.height) : (itemSize + 8);\r\n\t                    if (offsetX + rect.width /  2 > api.getWidth()) {\r\n\t                        hoverStyle.textPosition = ['100%', topOffset];\r\n\t                        hoverStyle.textAlign = 'right';\r\n\t                    }\r\n\t                    else if (offsetX - rect.width / 2 < 0) {\r\n\t                        hoverStyle.textPosition = [0, topOffset];\r\n\t                        hoverStyle.textAlign = 'left';\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\t        },\r\n\r\n\t        updateView: function (toolboxModel, ecModel, api, payload) {\r\n\t            zrUtil.each(this._features, function (feature) {\r\n\t                feature.updateView && feature.updateView(feature.model, ecModel, api, payload);\r\n\t            });\r\n\t        },\r\n\r\n\t        updateLayout: function (toolboxModel, ecModel, api, payload) {\r\n\t            zrUtil.each(this._features, function (feature) {\r\n\t                feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);\r\n\t            });\r\n\t        },\r\n\r\n\t        remove: function (ecModel, api) {\r\n\t            zrUtil.each(this._features, function (feature) {\r\n\t                feature.remove && feature.remove(ecModel, api);\r\n\t            });\r\n\t            this.group.removeAll();\r\n\t        },\r\n\r\n\t        dispose: function (ecModel, api) {\r\n\t            zrUtil.each(this._features, function (feature) {\r\n\t                feature.dispose && feature.dispose(ecModel, api);\r\n\t            });\r\n\t        }\r\n\t    });\r\n\r\n\t    function isUserFeatureName(featureName) {\r\n\t        return featureName.indexOf('my') === 0;\r\n\t    }\r\n\r\n\r\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(370)))\r\n\r\n/***/ },\r\n/* 370 */\r\n/***/ function(module, exports) {\r\n\r\n\t// shim for using process in browser\r\n\tvar process = module.exports = {};\r\n\r\n\t// cached from whatever global is present so that test runners that stub it\r\n\t// don't break things.  But we need to wrap it in a try catch in case it is\r\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\r\n\t// function because try/catches deoptimize in certain engines.\r\n\r\n\tvar cachedSetTimeout;\r\n\tvar cachedClearTimeout;\r\n\r\n\tfunction defaultSetTimout() {\r\n\t    throw new Error('setTimeout has not been defined');\r\n\t}\r\n\tfunction defaultClearTimeout () {\r\n\t    throw new Error('clearTimeout has not been defined');\r\n\t}\r\n\t(function () {\r\n\t    try {\r\n\t        if (typeof setTimeout === 'function') {\r\n\t            cachedSetTimeout = setTimeout;\r\n\t        } else {\r\n\t            cachedSetTimeout = defaultSetTimout;\r\n\t        }\r\n\t    } catch (e) {\r\n\t        cachedSetTimeout = defaultSetTimout;\r\n\t    }\r\n\t    try {\r\n\t        if (typeof clearTimeout === 'function') {\r\n\t            cachedClearTimeout = clearTimeout;\r\n\t        } else {\r\n\t            cachedClearTimeout = defaultClearTimeout;\r\n\t        }\r\n\t    } catch (e) {\r\n\t        cachedClearTimeout = defaultClearTimeout;\r\n\t    }\r\n\t} ())\r\n\tfunction runTimeout(fun) {\r\n\t    if (cachedSetTimeout === setTimeout) {\r\n\t        //normal enviroments in sane situations\r\n\t        return setTimeout(fun, 0);\r\n\t    }\r\n\t    // if setTimeout wasn't available but was latter defined\r\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\r\n\t        cachedSetTimeout = setTimeout;\r\n\t        return setTimeout(fun, 0);\r\n\t    }\r\n\t    try {\r\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\r\n\t        return cachedSetTimeout(fun, 0);\r\n\t    } catch(e){\r\n\t        try {\r\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\r\n\t            return cachedSetTimeout.call(null, fun, 0);\r\n\t        } catch(e){\r\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\r\n\t            return cachedSetTimeout.call(this, fun, 0);\r\n\t        }\r\n\t    }\r\n\r\n\r\n\t}\r\n\tfunction runClearTimeout(marker) {\r\n\t    if (cachedClearTimeout === clearTimeout) {\r\n\t        //normal enviroments in sane situations\r\n\t        return clearTimeout(marker);\r\n\t    }\r\n\t    // if clearTimeout wasn't available but was latter defined\r\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\r\n\t        cachedClearTimeout = clearTimeout;\r\n\t        return clearTimeout(marker);\r\n\t    }\r\n\t    try {\r\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\r\n\t        return cachedClearTimeout(marker);\r\n\t    } catch (e){\r\n\t        try {\r\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\r\n\t            return cachedClearTimeout.call(null, marker);\r\n\t        } catch (e){\r\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\r\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\r\n\t            return cachedClearTimeout.call(this, marker);\r\n\t        }\r\n\t    }\r\n\r\n\r\n\r\n\t}\r\n\tvar queue = [];\r\n\tvar draining = false;\r\n\tvar currentQueue;\r\n\tvar queueIndex = -1;\r\n\r\n\tfunction cleanUpNextTick() {\r\n\t    if (!draining || !currentQueue) {\r\n\t        return;\r\n\t    }\r\n\t    draining = false;\r\n\t    if (currentQueue.length) {\r\n\t        queue = currentQueue.concat(queue);\r\n\t    } else {\r\n\t        queueIndex = -1;\r\n\t    }\r\n\t    if (queue.length) {\r\n\t        drainQueue();\r\n\t    }\r\n\t}\r\n\r\n\tfunction drainQueue() {\r\n\t    if (draining) {\r\n\t        return;\r\n\t    }\r\n\t    var timeout = runTimeout(cleanUpNextTick);\r\n\t    draining = true;\r\n\r\n\t    var len = queue.length;\r\n\t    while(len) {\r\n\t        currentQueue = queue;\r\n\t        queue = [];\r\n\t        while (++queueIndex < len) {\r\n\t            if (currentQueue) {\r\n\t                currentQueue[queueIndex].run();\r\n\t            }\r\n\t        }\r\n\t        queueIndex = -1;\r\n\t        len = queue.length;\r\n\t    }\r\n\t    currentQueue = null;\r\n\t    draining = false;\r\n\t    runClearTimeout(timeout);\r\n\t}\r\n\r\n\tprocess.nextTick = function (fun) {\r\n\t    var args = new Array(arguments.length - 1);\r\n\t    if (arguments.length > 1) {\r\n\t        for (var i = 1; i < arguments.length; i++) {\r\n\t            args[i - 1] = arguments[i];\r\n\t        }\r\n\t    }\r\n\t    queue.push(new Item(fun, args));\r\n\t    if (queue.length === 1 && !draining) {\r\n\t        runTimeout(drainQueue);\r\n\t    }\r\n\t};\r\n\r\n\t// v8 likes predictible objects\r\n\tfunction Item(fun, array) {\r\n\t    this.fun = fun;\r\n\t    this.array = array;\r\n\t}\r\n\tItem.prototype.run = function () {\r\n\t    this.fun.apply(null, this.array);\r\n\t};\r\n\tprocess.title = 'browser';\r\n\tprocess.browser = true;\r\n\tprocess.env = {};\r\n\tprocess.argv = [];\r\n\tprocess.version = ''; // empty string to avoid regexp issues\r\n\tprocess.versions = {};\r\n\r\n\tfunction noop() {}\r\n\r\n\tprocess.on = noop;\r\n\tprocess.addListener = noop;\r\n\tprocess.once = noop;\r\n\tprocess.off = noop;\r\n\tprocess.removeListener = noop;\r\n\tprocess.removeAllListeners = noop;\r\n\tprocess.emit = noop;\r\n\r\n\tprocess.binding = function (name) {\r\n\t    throw new Error('process.binding is not supported');\r\n\t};\r\n\r\n\tprocess.cwd = function () { return '/' };\r\n\tprocess.chdir = function (dir) {\r\n\t    throw new Error('process.chdir is not supported');\r\n\t};\r\n\tprocess.umask = function() { return 0; };\r\n\r\n\r\n/***/ },\r\n/* 371 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    var env = __webpack_require__(2);\r\n\r\n\t    function SaveAsImage (model) {\r\n\t        this.model = model;\r\n\t    }\r\n\r\n\t    SaveAsImage.defaultOption = {\r\n\t        show: true,\r\n\t        icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',\r\n\t        title: '保存为图片',\r\n\t        type: 'png',\r\n\t        // Default use option.backgroundColor\r\n\t        // backgroundColor: '#fff',\r\n\t        name: '',\r\n\t        excludeComponents: ['toolbox'],\r\n\t        pixelRatio: 1,\r\n\t        lang: ['右键另存为图片']\r\n\t    };\r\n\r\n\t    SaveAsImage.prototype.unusable = !env.canvasSupported;\r\n\r\n\t    var proto = SaveAsImage.prototype;\r\n\r\n\t    proto.onclick = function (ecModel, api) {\r\n\t        var model = this.model;\r\n\t        var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';\r\n\t        var $a = document.createElement('a');\r\n\t        var type = model.get('type', true) || 'png';\r\n\t        $a.download = title + '.' + type;\r\n\t        $a.target = '_blank';\r\n\t        var url = api.getConnectedDataURL({\r\n\t            type: type,\r\n\t            backgroundColor: model.get('backgroundColor', true)\r\n\t                || ecModel.get('backgroundColor') || '#fff',\r\n\t            excludeComponents: model.get('excludeComponents'),\r\n\t            pixelRatio: model.get('pixelRatio')\r\n\t        });\r\n\t        $a.href = url;\r\n\t        // Chrome and Firefox\r\n\t        if (typeof MouseEvent === 'function') {\r\n\t            var evt = new MouseEvent('click', {\r\n\t                view: window,\r\n\t                bubbles: true,\r\n\t                cancelable: false\r\n\t            });\r\n\t            $a.dispatchEvent(evt);\r\n\t        }\r\n\t        // IE\r\n\t        else {\r\n\t            var lang = model.get('lang');\r\n\t            var html = ''\r\n\t                + '<body style=\"margin:0;\">'\r\n\t                + '<img src=\"' + url + '\" style=\"max-width:100%;\" title=\"' + ((lang && lang[0]) || '') + '\" />'\r\n\t                + '</body>';\r\n\t            var tab = window.open();\r\n\t            tab.document.write(html);\r\n\t        }\r\n\t    };\r\n\r\n\t    __webpack_require__(315).register(\r\n\t        'saveAsImage', SaveAsImage\r\n\t    );\r\n\r\n\t    module.exports = SaveAsImage;\r\n\r\n\r\n/***/ },\r\n/* 372 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\r\n\t    function MagicType(model) {\r\n\t        this.model = model;\r\n\t    }\r\n\r\n\t    MagicType.defaultOption = {\r\n\t        show: true,\r\n\t        type: [],\r\n\t        // Icon group\r\n\t        icon: {\r\n\t            line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',\r\n\t            bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',\r\n\t            stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z', // jshint ignore:line\r\n\t            tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'\r\n\t        },\r\n\t        title: {\r\n\t            line: '切换为折线图',\r\n\t            bar: '切换为柱状图',\r\n\t            stack: '切换为堆叠',\r\n\t            tiled: '切换为平铺'\r\n\t        },\r\n\t        option: {},\r\n\t        seriesIndex: {}\r\n\t    };\r\n\r\n\t    var proto = MagicType.prototype;\r\n\r\n\t    proto.getIcons = function () {\r\n\t        var model = this.model;\r\n\t        var availableIcons = model.get('icon');\r\n\t        var icons = {};\r\n\t        zrUtil.each(model.get('type'), function (type) {\r\n\t            if (availableIcons[type]) {\r\n\t                icons[type] = availableIcons[type];\r\n\t            }\r\n\t        });\r\n\t        return icons;\r\n\t    };\r\n\r\n\t    var seriesOptGenreator = {\r\n\t        'line': function (seriesType, seriesId, seriesModel, model) {\r\n\t            if (seriesType === 'bar') {\r\n\t                return zrUtil.merge({\r\n\t                    id: seriesId,\r\n\t                    type: 'line',\r\n\t                    // Preserve data related option\r\n\t                    data: seriesModel.get('data'),\r\n\t                    stack: seriesModel.get('stack'),\r\n\t                    markPoint: seriesModel.get('markPoint'),\r\n\t                    markLine: seriesModel.get('markLine')\r\n\t                }, model.get('option.line') || {}, true);\r\n\t            }\r\n\t        },\r\n\t        'bar': function (seriesType, seriesId, seriesModel, model) {\r\n\t            if (seriesType === 'line') {\r\n\t                return zrUtil.merge({\r\n\t                    id: seriesId,\r\n\t                    type: 'bar',\r\n\t                    // Preserve data related option\r\n\t                    data: seriesModel.get('data'),\r\n\t                    stack: seriesModel.get('stack'),\r\n\t                    markPoint: seriesModel.get('markPoint'),\r\n\t                    markLine: seriesModel.get('markLine')\r\n\t                }, model.get('option.bar') || {}, true);\r\n\t            }\r\n\t        },\r\n\t        'stack': function (seriesType, seriesId, seriesModel, model) {\r\n\t            if (seriesType === 'line' || seriesType === 'bar') {\r\n\t                return zrUtil.merge({\r\n\t                    id: seriesId,\r\n\t                    stack: '__ec_magicType_stack__'\r\n\t                }, model.get('option.stack') || {}, true);\r\n\t            }\r\n\t        },\r\n\t        'tiled': function (seriesType, seriesId, seriesModel, model) {\r\n\t            if (seriesType === 'line' || seriesType === 'bar') {\r\n\t                return zrUtil.merge({\r\n\t                    id: seriesId,\r\n\t                    stack: ''\r\n\t                }, model.get('option.tiled') || {}, true);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    var radioTypes = [\r\n\t        ['line', 'bar'],\r\n\t        ['stack', 'tiled']\r\n\t    ];\r\n\r\n\t    proto.onclick = function (ecModel, api, type) {\r\n\t        var model = this.model;\r\n\t        var seriesIndex = model.get('seriesIndex.' + type);\r\n\t        // Not supported magicType\r\n\t        if (!seriesOptGenreator[type]) {\r\n\t            return;\r\n\t        }\r\n\t        var newOption = {\r\n\t            series: []\r\n\t        };\r\n\t        var generateNewSeriesTypes = function (seriesModel) {\r\n\t            var seriesType = seriesModel.subType;\r\n\t            var seriesId = seriesModel.id;\r\n\t            var newSeriesOpt = seriesOptGenreator[type](\r\n\t                seriesType, seriesId, seriesModel, model\r\n\t            );\r\n\t            if (newSeriesOpt) {\r\n\t                // PENDING If merge original option?\r\n\t                zrUtil.defaults(newSeriesOpt, seriesModel.option);\r\n\t                newOption.series.push(newSeriesOpt);\r\n\t            }\r\n\t            // Modify boundaryGap\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\t            if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {\r\n\t                var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\r\n\t                if (categoryAxis) {\r\n\t                    var axisDim = categoryAxis.dim;\r\n\t                    var axisType = axisDim + 'Axis';\r\n\t                    var axisModel = ecModel.queryComponents({\r\n\t                        mainType: axisType,\r\n\t                        index: seriesModel.get(name + 'Index'),\r\n\t                        id: seriesModel.get(name + 'Id')\r\n\t                    })[0];\r\n\t                    var axisIndex = axisModel.componentIndex;\r\n\r\n\t                    newOption[axisType] = newOption[axisType] || [];\r\n\t                    for (var i = 0; i <= axisIndex; i++) {\r\n\t                        newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};\r\n\t                    }\r\n\t                    newOption[axisType][axisIndex].boundaryGap = type === 'bar' ? true : false;\r\n\t                }\r\n\t            }\r\n\t        };\r\n\r\n\t        zrUtil.each(radioTypes, function (radio) {\r\n\t            if (zrUtil.indexOf(radio, type) >= 0) {\r\n\t                zrUtil.each(radio, function (item) {\r\n\t                    model.setIconStatus(item, 'normal');\r\n\t                });\r\n\t            }\r\n\t        });\r\n\r\n\t        model.setIconStatus(type, 'emphasis');\r\n\r\n\t        ecModel.eachComponent(\r\n\t            {\r\n\t                mainType: 'series',\r\n\t                query: seriesIndex == null ? null : {\r\n\t                    seriesIndex: seriesIndex\r\n\t                }\r\n\t            }, generateNewSeriesTypes\r\n\t        );\r\n\t        api.dispatchAction({\r\n\t            type: 'changeMagicType',\r\n\t            currentType: type,\r\n\t            newOption: newOption\r\n\t        });\r\n\t    };\r\n\r\n\t    var echarts = __webpack_require__(1);\r\n\t    echarts.registerAction({\r\n\t        type: 'changeMagicType',\r\n\t        event: 'magicTypeChanged',\r\n\t        update: 'prepareAndUpdate'\r\n\t    }, function (payload, ecModel) {\r\n\t        ecModel.mergeOption(payload.newOption);\r\n\t    });\r\n\r\n\t    __webpack_require__(315).register('magicType', MagicType);\r\n\r\n\t    module.exports = MagicType;\r\n\r\n\r\n/***/ },\r\n/* 373 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @module echarts/component/toolbox/feature/DataView\r\n\t */\r\n\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var eventTool = __webpack_require__(87);\r\n\r\n\r\n\t    var BLOCK_SPLITER = new Array(60).join('-');\r\n\t    var ITEM_SPLITER = '\\t';\r\n\t    /**\r\n\t     * Group series into two types\r\n\t     *  1. on category axis, like line, bar\r\n\t     *  2. others, like scatter, pie\r\n\t     * @param {module:echarts/model/Global} ecModel\r\n\t     * @return {Object}\r\n\t     * @inner\r\n\t     */\r\n\t    function groupSeries(ecModel) {\r\n\t        var seriesGroupByCategoryAxis = {};\r\n\t        var otherSeries = [];\r\n\t        var meta = [];\r\n\t        ecModel.eachRawSeries(function (seriesModel) {\r\n\t            var coordSys = seriesModel.coordinateSystem;\r\n\r\n\t            if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {\r\n\t                var baseAxis = coordSys.getBaseAxis();\r\n\t                if (baseAxis.type === 'category') {\r\n\t                    var key = baseAxis.dim + '_' + baseAxis.index;\r\n\t                    if (!seriesGroupByCategoryAxis[key]) {\r\n\t                        seriesGroupByCategoryAxis[key] = {\r\n\t                            categoryAxis: baseAxis,\r\n\t                            valueAxis: coordSys.getOtherAxis(baseAxis),\r\n\t                            series: []\r\n\t                        };\r\n\t                        meta.push({\r\n\t                            axisDim: baseAxis.dim,\r\n\t                            axisIndex: baseAxis.index\r\n\t                        });\r\n\t                    }\r\n\t                    seriesGroupByCategoryAxis[key].series.push(seriesModel);\r\n\t                }\r\n\t                else {\r\n\t                    otherSeries.push(seriesModel);\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                otherSeries.push(seriesModel);\r\n\t            }\r\n\t        });\r\n\r\n\t        return {\r\n\t            seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,\r\n\t            other: otherSeries,\r\n\t            meta: meta\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Assemble content of series on cateogory axis\r\n\t     * @param {Array.<module:echarts/model/Series>} series\r\n\t     * @return {string}\r\n\t     * @inner\r\n\t     */\r\n\t    function assembleSeriesWithCategoryAxis(series) {\r\n\t        var tables = [];\r\n\t        zrUtil.each(series, function (group, key) {\r\n\t            var categoryAxis = group.categoryAxis;\r\n\t            var valueAxis = group.valueAxis;\r\n\t            var valueAxisDim = valueAxis.dim;\r\n\r\n\t            var headers = [' '].concat(zrUtil.map(group.series, function (series) {\r\n\t                return series.name;\r\n\t            }));\r\n\t            var columns = [categoryAxis.model.getCategories()];\r\n\t            zrUtil.each(group.series, function (series) {\r\n\t                columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {\r\n\t                    return val;\r\n\t                }));\r\n\t            });\r\n\t            // Assemble table content\r\n\t            var lines = [headers.join(ITEM_SPLITER)];\r\n\t            for (var i = 0; i < columns[0].length; i++) {\r\n\t                var items = [];\r\n\t                for (var j = 0; j < columns.length; j++) {\r\n\t                    items.push(columns[j][i]);\r\n\t                }\r\n\t                lines.push(items.join(ITEM_SPLITER));\r\n\t            }\r\n\t            tables.push(lines.join('\\n'));\r\n\t        });\r\n\t        return tables.join('\\n\\n' +  BLOCK_SPLITER + '\\n\\n');\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Assemble content of other series\r\n\t     * @param {Array.<module:echarts/model/Series>} series\r\n\t     * @return {string}\r\n\t     * @inner\r\n\t     */\r\n\t    function assembleOtherSeries(series) {\r\n\t        return zrUtil.map(series, function (series) {\r\n\t            var data = series.getRawData();\r\n\t            var lines = [series.name];\r\n\t            var vals = [];\r\n\t            data.each(data.dimensions, function () {\r\n\t                var argLen = arguments.length;\r\n\t                var dataIndex = arguments[argLen - 1];\r\n\t                var name = data.getName(dataIndex);\r\n\t                for (var i = 0; i < argLen - 1; i++) {\r\n\t                    vals[i] = arguments[i];\r\n\t                }\r\n\t                lines.push((name ? (name + ITEM_SPLITER) : '') + vals.join(ITEM_SPLITER));\r\n\t            });\r\n\t            return lines.join('\\n');\r\n\t        }).join('\\n\\n' + BLOCK_SPLITER + '\\n\\n');\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {module:echarts/model/Global}\r\n\t     * @return {string}\r\n\t     * @inner\r\n\t     */\r\n\t    function getContentFromModel(ecModel) {\r\n\r\n\t        var result = groupSeries(ecModel);\r\n\r\n\t        return {\r\n\t            value: zrUtil.filter([\r\n\t                    assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis),\r\n\t                    assembleOtherSeries(result.other)\r\n\t                ], function (str) {\r\n\t                    return str.replace(/[\\n\\t\\s]/g, '');\r\n\t                }).join('\\n\\n' + BLOCK_SPLITER + '\\n\\n'),\r\n\r\n\t            meta: result.meta\r\n\t        };\r\n\t    }\r\n\r\n\r\n\t    function trim(str) {\r\n\t        return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\r\n\t    }\r\n\t    /**\r\n\t     * If a block is tsv format\r\n\t     */\r\n\t    function isTSVFormat(block) {\r\n\t        // Simple method to find out if a block is tsv format\r\n\t        var firstLine = block.slice(0, block.indexOf('\\n'));\r\n\t        if (firstLine.indexOf(ITEM_SPLITER) >= 0) {\r\n\t            return true;\r\n\t        }\r\n\t    }\r\n\r\n\t    var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');\r\n\t    /**\r\n\t     * @param {string} tsv\r\n\t     * @return {Array.<Object>}\r\n\t     */\r\n\t    function parseTSVContents(tsv) {\r\n\t        var tsvLines = tsv.split(/\\n+/g);\r\n\t        var headers = trim(tsvLines.shift()).split(itemSplitRegex);\r\n\r\n\t        var categories = [];\r\n\t        var series = zrUtil.map(headers, function (header) {\r\n\t            return {\r\n\t                name: header,\r\n\t                data: []\r\n\t            };\r\n\t        });\r\n\t        for (var i = 0; i < tsvLines.length; i++) {\r\n\t            var items = trim(tsvLines[i]).split(itemSplitRegex);\r\n\t            categories.push(items.shift());\r\n\t            for (var j = 0; j < items.length; j++) {\r\n\t                series[j] && (series[j].data[i] = items[j]);\r\n\t            }\r\n\t        }\r\n\t        return {\r\n\t            series: series,\r\n\t            categories: categories\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {string} str\r\n\t     * @return {Array.<Object>}\r\n\t     * @inner\r\n\t     */\r\n\t    function parseListContents(str) {\r\n\t        var lines = str.split(/\\n+/g);\r\n\t        var seriesName = trim(lines.shift());\r\n\r\n\t        var data = [];\r\n\t        for (var i = 0; i < lines.length; i++) {\r\n\t            var items = trim(lines[i]).split(itemSplitRegex);\r\n\t            var name = '';\r\n\t            var value;\r\n\t            var hasName = false;\r\n\t            if (isNaN(items[0])) { // First item is name\r\n\t                hasName = true;\r\n\t                name = items[0];\r\n\t                items = items.slice(1);\r\n\t                data[i] = {\r\n\t                    name: name,\r\n\t                    value: []\r\n\t                };\r\n\t                value = data[i].value;\r\n\t            }\r\n\t            else {\r\n\t                value = data[i] = [];\r\n\t            }\r\n\t            for (var j = 0; j < items.length; j++) {\r\n\t                value.push(+items[j]);\r\n\t            }\r\n\t            if (value.length === 1) {\r\n\t                hasName ? (data[i].value = value[0]) : (data[i] = value[0]);\r\n\t            }\r\n\t        }\r\n\r\n\t        return {\r\n\t            name: seriesName,\r\n\t            data: data\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {string} str\r\n\t     * @param {Array.<Object>} blockMetaList\r\n\t     * @return {Object}\r\n\t     * @inner\r\n\t     */\r\n\t    function parseContents(str, blockMetaList) {\r\n\t        var blocks = str.split(new RegExp('\\n*' + BLOCK_SPLITER + '\\n*', 'g'));\r\n\t        var newOption = {\r\n\t            series: []\r\n\t        };\r\n\t        zrUtil.each(blocks, function (block, idx) {\r\n\t            if (isTSVFormat(block)) {\r\n\t                var result = parseTSVContents(block);\r\n\t                var blockMeta = blockMetaList[idx];\r\n\t                var axisKey = blockMeta.axisDim + 'Axis';\r\n\r\n\t                if (blockMeta) {\r\n\t                    newOption[axisKey] = newOption[axisKey] || [];\r\n\t                    newOption[axisKey][blockMeta.axisIndex] = {\r\n\t                        data: result.categories\r\n\t                    };\r\n\t                    newOption.series = newOption.series.concat(result.series);\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                var result = parseListContents(block);\r\n\t                newOption.series.push(result);\r\n\t            }\r\n\t        });\r\n\t        return newOption;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @alias {module:echarts/component/toolbox/feature/DataView}\r\n\t     * @constructor\r\n\t     * @param {module:echarts/model/Model} model\r\n\t     */\r\n\t    function DataView(model) {\r\n\r\n\t        this._dom = null;\r\n\r\n\t        this.model = model;\r\n\t    }\r\n\r\n\t    DataView.defaultOption = {\r\n\t        show: true,\r\n\t        readOnly: false,\r\n\t        optionToContent: null,\r\n\t        contentToOption: null,\r\n\r\n\t        icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',\r\n\t        title: '数据视图',\r\n\t        lang: ['数据视图', '关闭', '刷新'],\r\n\t        backgroundColor: '#fff',\r\n\t        textColor: '#000',\r\n\t        textareaColor: '#fff',\r\n\t        textareaBorderColor: '#333',\r\n\t        buttonColor: '#c23531',\r\n\t        buttonTextColor: '#fff'\r\n\t    };\r\n\r\n\t    DataView.prototype.onclick = function (ecModel, api) {\r\n\t        var container = api.getDom();\r\n\t        var model = this.model;\r\n\t        if (this._dom) {\r\n\t            container.removeChild(this._dom);\r\n\t        }\r\n\t        var root = document.createElement('div');\r\n\t        root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';\r\n\t        root.style.backgroundColor = model.get('backgroundColor') || '#fff';\r\n\r\n\t        // Create elements\r\n\t        var header = document.createElement('h4');\r\n\t        var lang = model.get('lang') || [];\r\n\t        header.innerHTML = lang[0] || model.get('title');\r\n\t        header.style.cssText = 'margin: 10px 20px;';\r\n\t        header.style.color = model.get('textColor');\r\n\r\n\t        var viewMain = document.createElement('div');\r\n\t        var textarea = document.createElement('textarea');\r\n\t        viewMain.style.cssText = 'display:block;width:100%;overflow:hidden;';\r\n\r\n\t        var optionToContent = model.get('optionToContent');\r\n\t        var contentToOption = model.get('contentToOption');\r\n\t        var result = getContentFromModel(ecModel);\r\n\t        if (typeof optionToContent === 'function') {\r\n\t            var htmlOrDom = optionToContent(api.getOption());\r\n\t            if (typeof htmlOrDom === 'string') {\r\n\t                viewMain.innerHTML = htmlOrDom;\r\n\t            }\r\n\t            else if (zrUtil.isDom(htmlOrDom)) {\r\n\t                viewMain.appendChild(htmlOrDom);\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            // Use default textarea\r\n\t            viewMain.appendChild(textarea);\r\n\t            textarea.readOnly = model.get('readOnly');\r\n\t            textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';\r\n\t            textarea.style.color = model.get('textColor');\r\n\t            textarea.style.borderColor = model.get('textareaBorderColor');\r\n\t            textarea.style.backgroundColor = model.get('textareaColor');\r\n\t            textarea.value = result.value;\r\n\t        }\r\n\r\n\t        var blockMetaList = result.meta;\r\n\r\n\t        var buttonContainer = document.createElement('div');\r\n\t        buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';\r\n\r\n\t        var buttonStyle = 'float:right;margin-right:20px;border:none;'\r\n\t            + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';\r\n\t        var closeButton = document.createElement('div');\r\n\t        var refreshButton = document.createElement('div');\r\n\r\n\t        buttonStyle += ';background-color:' + model.get('buttonColor');\r\n\t        buttonStyle += ';color:' + model.get('buttonTextColor');\r\n\r\n\t        var self = this;\r\n\r\n\t        function close() {\r\n\t            container.removeChild(root);\r\n\t            self._dom = null;\r\n\t        }\r\n\t        eventTool.addEventListener(closeButton, 'click', close);\r\n\r\n\t        eventTool.addEventListener(refreshButton, 'click', function () {\r\n\t            var newOption;\r\n\t            try {\r\n\t                if (typeof contentToOption === 'function') {\r\n\t                    newOption = contentToOption(viewMain, api.getOption());\r\n\t                }\r\n\t                else {\r\n\t                    newOption = parseContents(textarea.value, blockMetaList);\r\n\t                }\r\n\t            }\r\n\t            catch (e) {\r\n\t                close();\r\n\t                throw new Error('Data view format error ' + e);\r\n\t            }\r\n\t            if (newOption) {\r\n\t                api.dispatchAction({\r\n\t                    type: 'changeDataView',\r\n\t                    newOption: newOption\r\n\t                });\r\n\t            }\r\n\r\n\t            close();\r\n\t        });\r\n\r\n\t        closeButton.innerHTML = lang[1];\r\n\t        refreshButton.innerHTML = lang[2];\r\n\t        refreshButton.style.cssText = buttonStyle;\r\n\t        closeButton.style.cssText = buttonStyle;\r\n\r\n\t        !model.get('readOnly') && buttonContainer.appendChild(refreshButton);\r\n\t        buttonContainer.appendChild(closeButton);\r\n\r\n\t        // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea\r\n\t        eventTool.addEventListener(textarea, 'keydown', function (e) {\r\n\t            if ((e.keyCode || e.which) === 9) {\r\n\t                // get caret position/selection\r\n\t                var val = this.value;\r\n\t                var start = this.selectionStart;\r\n\t                var end = this.selectionEnd;\r\n\r\n\t                // set textarea value to: text before caret + tab + text after caret\r\n\t                this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end);\r\n\r\n\t                // put caret at right position again\r\n\t                this.selectionStart = this.selectionEnd = start + 1;\r\n\r\n\t                // prevent the focus lose\r\n\t                eventTool.stop(e);\r\n\t            }\r\n\t        });\r\n\r\n\t        root.appendChild(header);\r\n\t        root.appendChild(viewMain);\r\n\t        root.appendChild(buttonContainer);\r\n\r\n\t        viewMain.style.height = (container.clientHeight - 80) + 'px';\r\n\r\n\t        container.appendChild(root);\r\n\t        this._dom = root;\r\n\t    };\r\n\r\n\t    DataView.prototype.remove = function (ecModel, api) {\r\n\t        this._dom && api.getDom().removeChild(this._dom);\r\n\t    };\r\n\r\n\t    DataView.prototype.dispose = function (ecModel, api) {\r\n\t        this.remove(ecModel, api);\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @inner\r\n\t     */\r\n\t    function tryMergeDataOption(newData, originalData) {\r\n\t        return zrUtil.map(newData, function (newVal, idx) {\r\n\t            var original = originalData && originalData[idx];\r\n\t            if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {\r\n\t                if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {\r\n\t                    newVal = newVal.value;\r\n\t                }\r\n\t                // Original data has option\r\n\t                return zrUtil.defaults({\r\n\t                    value: newVal\r\n\t                }, original);\r\n\t            }\r\n\t            else {\r\n\t                return newVal;\r\n\t            }\r\n\t        });\r\n\t    }\r\n\r\n\t    __webpack_require__(315).register('dataView', DataView);\r\n\r\n\t    __webpack_require__(1).registerAction({\r\n\t        type: 'changeDataView',\r\n\t        event: 'dataViewChanged',\r\n\t        update: 'prepareAndUpdate'\r\n\t    }, function (payload, ecModel) {\r\n\t        var newSeriesOptList = [];\r\n\t        zrUtil.each(payload.newOption.series, function (seriesOpt) {\r\n\t            var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];\r\n\t            if (!seriesModel) {\r\n\t                // New created series\r\n\t                // Geuss the series type\r\n\t                newSeriesOptList.push(zrUtil.extend({\r\n\t                    // Default is scatter\r\n\t                    type: 'scatter'\r\n\t                }, seriesOpt));\r\n\t            }\r\n\t            else {\r\n\t                var originalData = seriesModel.get('data');\r\n\t                newSeriesOptList.push({\r\n\t                    name: seriesOpt.name,\r\n\t                    data: tryMergeDataOption(seriesOpt.data, originalData)\r\n\t                });\r\n\t            }\r\n\t        });\r\n\r\n\t        ecModel.mergeOption(zrUtil.defaults({\r\n\t            series: newSeriesOptList\r\n\t        }, payload.newOption));\r\n\t    });\r\n\r\n\t    module.exports = DataView;\r\n\r\n\r\n/***/ },\r\n/* 374 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var BrushController = __webpack_require__(234);\r\n\t    var brushHelper = __webpack_require__(310);\r\n\t    var history = __webpack_require__(375);\r\n\r\n\t    var each = zrUtil.each;\r\n\r\n\t    // Use dataZoomSelect\r\n\t    __webpack_require__(376);\r\n\r\n\t    // Spectial component id start with \\0ec\\0, see echarts/model/Global.js~hasInnerId\r\n\t    var DATA_ZOOM_ID_BASE = '\\0_ec_\\0toolbox-dataZoom_';\r\n\r\n\t    function DataZoom(model, ecModel, api) {\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {module:echarts/component/helper/BrushController}\r\n\t         */\r\n\t        (this._brushController = new BrushController(api.getZr()))\r\n\t            .on('brush', zrUtil.bind(this._onBrush, this))\r\n\t            .mount();\r\n\r\n\t        /**\r\n\t         * @private\r\n\t         * @type {boolean}\r\n\t         */\r\n\t        this._isZoomActive;\r\n\t    }\r\n\r\n\t    DataZoom.defaultOption = {\r\n\t        show: true,\r\n\t        // Icon group\r\n\t        icon: {\r\n\t            zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',\r\n\t            back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'\r\n\t        },\r\n\t        title: {\r\n\t            zoom: '区域缩放',\r\n\t            back: '区域缩放还原'\r\n\t        }\r\n\t    };\r\n\r\n\t    var proto = DataZoom.prototype;\r\n\r\n\t    proto.render = function (featureModel, ecModel, api, payload) {\r\n\t        this.model = featureModel;\r\n\t        this.ecModel = ecModel;\r\n\t        this.api = api;\r\n\r\n\t        updateZoomBtnStatus(featureModel, ecModel, this, payload);\r\n\t        updateBackBtnStatus(featureModel, ecModel);\r\n\t    };\r\n\r\n\t    proto.onclick = function (ecModel, api, type) {\r\n\t        handlers[type].call(this);\r\n\t    };\r\n\r\n\t    proto.remove = function (ecModel, api) {\r\n\t        this._brushController.unmount();\r\n\t    };\r\n\r\n\t    proto.dispose = function (ecModel, api) {\r\n\t        this._brushController.dispose();\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @private\r\n\t     */\r\n\t    var handlers = {\r\n\r\n\t        zoom: function () {\r\n\t            var nextActive = !this._isZoomActive;\r\n\r\n\t            this.api.dispatchAction({\r\n\t                type: 'takeGlobalCursor',\r\n\t                key: 'dataZoomSelect',\r\n\t                dataZoomSelectActive: nextActive\r\n\t            });\r\n\t        },\r\n\r\n\t        back: function () {\r\n\t            this._dispatchZoomAction(history.pop(this.ecModel));\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @private\r\n\t     */\r\n\t    proto._onBrush = function (areas, opt) {\r\n\t        if (!opt.isEnd || !areas.length) {\r\n\t            return;\r\n\t        }\r\n\t        var snapshot = {};\r\n\t        var ecModel = this.ecModel;\r\n\r\n\t        this._brushController.updateCovers([]); // remove cover\r\n\r\n\t        var coordInfoList = brushHelper.makeCoordInfoList(\r\n\t            retrieveAxisSetting(this.model.option), ecModel\r\n\t        );\r\n\t        var rangesCoordInfoList = [];\r\n\t        brushHelper.parseOutputRanges(areas, coordInfoList, ecModel, rangesCoordInfoList);\r\n\r\n\t        var area = areas[0]; // dataZoom can not multiple area.\r\n\t        var coordInfo = rangesCoordInfoList[0];\r\n\t        var coordRange = area.coordRange;\r\n\t        var brushType = area.brushType;\r\n\r\n\t        if (coordInfo && coordRange) {\r\n\t            if (brushType === 'rect') {\r\n\t                setBatch('xAxis', coordRange[0], coordInfo);\r\n\t                setBatch('yAxis', coordRange[1], coordInfo);\r\n\t            }\r\n\t            else {\r\n\t                var axisNames = {lineX: 'xAxis', lineY: 'yAxis'};\r\n\t                setBatch(axisNames[brushType], coordRange, coordInfo);\r\n\t            }\r\n\t        }\r\n\r\n\t        history.push(ecModel, snapshot);\r\n\r\n\t        this._dispatchZoomAction(snapshot);\r\n\r\n\t        function setBatch(axisName, minMax, coordInfo) {\r\n\t            var dataZoomModel = findDataZoom(axisName, coordInfo[axisName], ecModel);\r\n\t            if (dataZoomModel) {\r\n\t                snapshot[dataZoomModel.id] = {\r\n\t                    dataZoomId: dataZoomModel.id,\r\n\t                    startValue: minMax[0],\r\n\t                    endValue: minMax[1]\r\n\t                };\r\n\t            }\r\n\t        }\r\n\r\n\t        function findDataZoom(axisName, axisModel, ecModel) {\r\n\t            var dataZoomModel;\r\n\t            ecModel.eachComponent(\r\n\t                {mainType: 'dataZoom', subType: 'select'},\r\n\t                function (dzModel, dataZoomIndex) {\r\n\t                    var axisIndex = dzModel.get(axisName + 'Index');\r\n\t                    if (axisIndex != null\r\n\t                        && ecModel.getComponent(axisName, axisIndex) === axisModel\r\n\t                    ) {\r\n\t                        dataZoomModel = dzModel;\r\n\t                    }\r\n\t                }\r\n\t            );\r\n\t            return dataZoomModel;\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * @private\r\n\t     */\r\n\t    proto._dispatchZoomAction = function (snapshot) {\r\n\t        var batch = [];\r\n\r\n\t        // Convert from hash map to array.\r\n\t        each(snapshot, function (batchItem, dataZoomId) {\r\n\t            batch.push(zrUtil.clone(batchItem));\r\n\t        });\r\n\r\n\t        batch.length && this.api.dispatchAction({\r\n\t            type: 'dataZoom',\r\n\t            from: this.uid,\r\n\t            batch: batch\r\n\t        });\r\n\t    };\r\n\r\n\t    function retrieveAxisSetting(option) {\r\n\t        var setting = {};\r\n\t        // Compatible with previous setting: null => all axis, false => no axis.\r\n\t        zrUtil.each(['xAxisIndex', 'yAxisIndex'], function (name) {\r\n\t            setting[name] = option[name];\r\n\t            setting[name] == null && (setting[name] = 'all');\r\n\t            (setting[name] === false || setting[name] === 'none') && (setting[name] = []);\r\n\t        });\r\n\t        return setting;\r\n\t    }\r\n\r\n\t    function updateBackBtnStatus(featureModel, ecModel) {\r\n\t        featureModel.setIconStatus(\r\n\t            'back',\r\n\t            history.count(ecModel) > 1 ? 'emphasis' : 'normal'\r\n\t        );\r\n\t    }\r\n\r\n\t    function updateZoomBtnStatus(featureModel, ecModel, view, payload) {\r\n\t        var zoomActive = view._isZoomActive;\r\n\r\n\t        if (payload && payload.type === 'takeGlobalCursor') {\r\n\t            zoomActive = payload.key === 'dataZoomSelect'\r\n\t                ? payload.dataZoomSelectActive : false;\r\n\t        }\r\n\r\n\t        view._isZoomActive = zoomActive;\r\n\r\n\t        featureModel.setIconStatus('zoom', zoomActive ? 'emphasis' : 'normal');\r\n\r\n\t        var coordInfoList = brushHelper.makeCoordInfoList(\r\n\t            retrieveAxisSetting(featureModel.option), ecModel\r\n\t        );\r\n\t        var brushType = (coordInfoList.xAxisHas && !coordInfoList.yAxisHas)\r\n\t            ? 'lineX'\r\n\t            : (!coordInfoList.xAxisHas && coordInfoList.yAxisHas)\r\n\t            ? 'lineY'\r\n\t            : 'rect';\r\n\r\n\t        view._brushController\r\n\t            .setPanels(brushHelper.makePanelOpts(coordInfoList))\r\n\t            .enableBrush(\r\n\t                zoomActive\r\n\t                ? {\r\n\t                    brushType: brushType,\r\n\t                    brushStyle: { // FIXME user customized?\r\n\t                        lineWidth: 0,\r\n\t                        // stroke: '#333',\r\n\t                        fill: 'rgba(0,0,0,0.2)'\r\n\t                    }\r\n\t                }\r\n\t                : false\r\n\t            );\r\n\t    }\r\n\r\n\r\n\t    __webpack_require__(315).register('dataZoom', DataZoom);\r\n\r\n\r\n\t    // Create special dataZoom option for select\r\n\t    __webpack_require__(1).registerPreprocessor(function (option) {\r\n\t        if (!option) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var dataZoomOpts = option.dataZoom || (option.dataZoom = []);\r\n\t        if (!zrUtil.isArray(dataZoomOpts)) {\r\n\t            option.dataZoom = dataZoomOpts = [dataZoomOpts];\r\n\t        }\r\n\r\n\t        var toolboxOpt = option.toolbox;\r\n\t        if (toolboxOpt) {\r\n\t            // Assume there is only one toolbox\r\n\t            if (zrUtil.isArray(toolboxOpt)) {\r\n\t                toolboxOpt = toolboxOpt[0];\r\n\t            }\r\n\r\n\t            if (toolboxOpt && toolboxOpt.feature) {\r\n\t                var dataZoomOpt = toolboxOpt.feature.dataZoom;\r\n\t                addForAxis('xAxis', dataZoomOpt);\r\n\t                addForAxis('yAxis', dataZoomOpt);\r\n\t            }\r\n\t        }\r\n\r\n\t        function addForAxis(axisName, dataZoomOpt) {\r\n\t            if (!dataZoomOpt) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            // Try not to modify model, because it is not merged yet.\r\n\t            var axisIndicesName = axisName + 'Index';\r\n\t            var givenAxisIndices = dataZoomOpt[axisIndicesName];\r\n\t            if (givenAxisIndices != null\r\n\t                && givenAxisIndices != 'all'\r\n\t                && !zrUtil.isArray(givenAxisIndices)\r\n\t            ) {\r\n\t                givenAxisIndices = (givenAxisIndices === false || givenAxisIndices === 'none') ? [] : [givenAxisIndices];\r\n\t            }\r\n\r\n\t            forEachComponent(axisName, function (axisOpt, axisIndex) {\r\n\t                if (givenAxisIndices != null\r\n\t                    && givenAxisIndices != 'all'\r\n\t                    && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1\r\n\t                ) {\r\n\t                    return;\r\n\t                }\r\n\t                var newOpt = {\r\n\t                    type: 'select',\r\n\t                    $fromToolbox: true,\r\n\t                    // Id for merge mapping.\r\n\t                    id: DATA_ZOOM_ID_BASE + axisName + axisIndex\r\n\t                };\r\n\t                // FIXME\r\n\t                // Only support one axis now.\r\n\t                newOpt[axisIndicesName] = axisIndex;\r\n\t                dataZoomOpts.push(newOpt);\r\n\t            });\r\n\t        }\r\n\r\n\t        function forEachComponent(mainType, cb) {\r\n\t            var opts = option[mainType];\r\n\t            if (!zrUtil.isArray(opts)) {\r\n\t                opts = opts ? [opts] : [];\r\n\t            }\r\n\t            each(opts, cb);\r\n\t        }\r\n\t    });\r\n\r\n\t    module.exports = DataZoom;\r\n\r\n\r\n/***/ },\r\n/* 375 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file History manager.\r\n\t */\r\n\r\n\r\n\t    var zrUtil = __webpack_require__(4);\r\n\t    var each = zrUtil.each;\r\n\r\n\t    var ATTR = '\\0_ec_hist_store';\r\n\r\n\t    var history = {\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {module:echarts/model/Global} ecModel\r\n\t         * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}\r\n\t         */\r\n\t        push: function (ecModel, newSnapshot) {\r\n\t            var store = giveStore(ecModel);\r\n\r\n\t            // If previous dataZoom can not be found,\r\n\t            // complete an range with current range.\r\n\t            each(newSnapshot, function (batchItem, dataZoomId) {\r\n\t                var i = store.length - 1;\r\n\t                for (; i >= 0; i--) {\r\n\t                    var snapshot = store[i];\r\n\t                    if (snapshot[dataZoomId]) {\r\n\t                        break;\r\n\t                    }\r\n\t                }\r\n\t                if (i < 0) {\r\n\t                    // No origin range set, create one by current range.\r\n\t                    var dataZoomModel = ecModel.queryComponents(\r\n\t                        {mainType: 'dataZoom', subType: 'select', id: dataZoomId}\r\n\t                    )[0];\r\n\t                    if (dataZoomModel) {\r\n\t                        var percentRange = dataZoomModel.getPercentRange();\r\n\t                        store[0][dataZoomId] = {\r\n\t                            dataZoomId: dataZoomId,\r\n\t                            start: percentRange[0],\r\n\t                            end: percentRange[1]\r\n\t                        };\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\r\n\t            store.push(newSnapshot);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {module:echarts/model/Global} ecModel\r\n\t         * @return {Object} snapshot\r\n\t         */\r\n\t        pop: function (ecModel) {\r\n\t            var store = giveStore(ecModel);\r\n\t            var head = store[store.length - 1];\r\n\t            store.length > 1 && store.pop();\r\n\r\n\t            // Find top for all dataZoom.\r\n\t            var snapshot = {};\r\n\t            each(head, function (batchItem, dataZoomId) {\r\n\t                for (var i = store.length - 1; i >= 0; i--) {\r\n\t                    var batchItem = store[i][dataZoomId];\r\n\t                    if (batchItem) {\r\n\t                        snapshot[dataZoomId] = batchItem;\r\n\t                        break;\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\r\n\t            return snapshot;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         */\r\n\t        clear: function (ecModel) {\r\n\t            ecModel[ATTR] = null;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * @public\r\n\t         * @param {module:echarts/model/Global} ecModel\r\n\t         * @return {number} records. always >= 1.\r\n\t         */\r\n\t        count: function (ecModel) {\r\n\t            return giveStore(ecModel).length;\r\n\t        }\r\n\r\n\t    };\r\n\r\n\t    /**\r\n\t     * [{key: dataZoomId, value: {dataZoomId, range}}, ...]\r\n\t     * History length of each dataZoom may be different.\r\n\t     * this._history[0] is used to store origin range.\r\n\t     * @type {Array.<Object>}\r\n\t     */\r\n\t    function giveStore(ecModel) {\r\n\t        var store = ecModel[ATTR];\r\n\t        if (!store) {\r\n\t            store = ecModel[ATTR] = [{}];\r\n\t        }\r\n\t        return store;\r\n\t    }\r\n\r\n\t    module.exports = history;\r\n\r\n\r\n\r\n/***/ },\r\n/* 376 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * DataZoom component entry\r\n\t */\r\n\r\n\r\n\t    __webpack_require__(318);\r\n\r\n\t    __webpack_require__(319);\r\n\t    __webpack_require__(322);\r\n\r\n\t    __webpack_require__(377);\r\n\t    __webpack_require__(378);\r\n\r\n\t    __webpack_require__(329);\r\n\t    __webpack_require__(330);\r\n\r\n\r\n\r\n/***/ },\r\n/* 377 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * @file Data zoom model\r\n\t */\r\n\r\n\r\n\t    var DataZoomModel = __webpack_require__(319);\r\n\r\n\t    module.exports = DataZoomModel.extend({\r\n\r\n\t        type: 'dataZoom.select'\r\n\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 378 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\t    module.exports = __webpack_require__(322).extend({\r\n\r\n\t        type: 'dataZoom.select'\r\n\r\n\t    });\r\n\r\n\r\n\r\n/***/ },\r\n/* 379 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\r\n\r\n\t    var history = __webpack_require__(375);\r\n\r\n\t    function Restore(model) {\r\n\t        this.model = model;\r\n\t    }\r\n\r\n\t    Restore.defaultOption = {\r\n\t        show: true,\r\n\t        icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',\r\n\t        title: '还原'\r\n\t    };\r\n\r\n\t    var proto = Restore.prototype;\r\n\r\n\t    proto.onclick = function (ecModel, api, type) {\r\n\t        history.clear(ecModel);\r\n\r\n\t        api.dispatchAction({\r\n\t            type: 'restore',\r\n\t            from: this.uid\r\n\t        });\r\n\t    };\r\n\r\n\r\n\t    __webpack_require__(315).register('restore', Restore);\r\n\r\n\r\n\t    __webpack_require__(1).registerAction(\r\n\t        {type: 'restore', event: 'restore', update: 'prepareAndUpdate'},\r\n\t        function (payload, ecModel) {\r\n\t            ecModel.resetOption('recreate');\r\n\t        }\r\n\t    );\r\n\r\n\t    module.exports = Restore;\r\n\r\n\r\n/***/ },\r\n/* 380 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\t    __webpack_require__(381);\r\n\t    __webpack_require__(81).registerPainter('vml', __webpack_require__(383));\r\n\r\n\r\n/***/ },\r\n/* 381 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t// http://www.w3.org/TR/NOTE-VML\r\n\t// TODO Use proxy like svg instead of overwrite brush methods\r\n\r\n\r\n\tif (!__webpack_require__(2).canvasSupported) {\r\n\t    var vec2 = __webpack_require__(10);\r\n\t    var BoundingRect = __webpack_require__(9);\r\n\t    var CMD = __webpack_require__(49).CMD;\r\n\t    var colorTool = __webpack_require__(39);\r\n\t    var textContain = __webpack_require__(8);\r\n\t    var RectText = __webpack_require__(48);\r\n\t    var Displayable = __webpack_require__(46);\r\n\t    var ZImage = __webpack_require__(62);\r\n\t    var Text = __webpack_require__(64);\r\n\t    var Path = __webpack_require__(45);\r\n\r\n\t    var Gradient = __webpack_require__(61);\r\n\r\n\t    var vmlCore = __webpack_require__(382);\r\n\r\n\t    var round = Math.round;\r\n\t    var sqrt = Math.sqrt;\r\n\t    var abs = Math.abs;\r\n\t    var cos = Math.cos;\r\n\t    var sin = Math.sin;\r\n\t    var mathMax = Math.max;\r\n\r\n\t    var applyTransform = vec2.applyTransform;\r\n\r\n\t    var comma = ',';\r\n\t    var imageTransformPrefix = 'progid:DXImageTransform.Microsoft';\r\n\r\n\t    var Z = 21600;\r\n\t    var Z2 = Z / 2;\r\n\r\n\t    var ZLEVEL_BASE = 100000;\r\n\t    var Z_BASE = 1000;\r\n\r\n\t    var initRootElStyle = function (el) {\r\n\t        el.style.cssText = 'position:absolute;left:0;top:0;width:1px;height:1px;';\r\n\t        el.coordsize = Z + ','  + Z;\r\n\t        el.coordorigin = '0,0';\r\n\t    };\r\n\r\n\t    var encodeHtmlAttribute = function (s) {\r\n\t        return String(s).replace(/&/g, '&amp;').replace(/\"/g, '&quot;');\r\n\t    };\r\n\r\n\t    var rgb2Str = function (r, g, b) {\r\n\t        return 'rgb(' + [r, g, b].join(',') + ')';\r\n\t    };\r\n\r\n\t    var append = function (parent, child) {\r\n\t        if (child && parent && child.parentNode !== parent) {\r\n\t            parent.appendChild(child);\r\n\t        }\r\n\t    };\r\n\r\n\t    var remove = function (parent, child) {\r\n\t        if (child && parent && child.parentNode === parent) {\r\n\t            parent.removeChild(child);\r\n\t        }\r\n\t    };\r\n\r\n\t    var getZIndex = function (zlevel, z, z2) {\r\n\t        // z 的取值范围为 [0, 1000]\r\n\t        return (parseFloat(zlevel) || 0) * ZLEVEL_BASE + (parseFloat(z) || 0) * Z_BASE + z2;\r\n\t    };\r\n\r\n\t    var parsePercent = function (value, maxValue) {\r\n\t        if (typeof value === 'string') {\r\n\t            if (value.lastIndexOf('%') >= 0) {\r\n\t                return parseFloat(value) / 100 * maxValue;\r\n\t            }\r\n\t            return parseFloat(value);\r\n\t        }\r\n\t        return value;\r\n\t    };\r\n\r\n\t    /***************************************************\r\n\t     * PATH\r\n\t     **************************************************/\r\n\r\n\t    var setColorAndOpacity = function (el, color, opacity) {\r\n\t        var colorArr = colorTool.parse(color);\r\n\t        opacity = +opacity;\r\n\t        if (isNaN(opacity)) {\r\n\t            opacity = 1;\r\n\t        }\r\n\t        if (colorArr) {\r\n\t            el.color = rgb2Str(colorArr[0], colorArr[1], colorArr[2]);\r\n\t            el.opacity = opacity * colorArr[3];\r\n\t        }\r\n\t    };\r\n\r\n\t    var getColorAndAlpha = function (color) {\r\n\t        var colorArr = colorTool.parse(color);\r\n\t        return [\r\n\t            rgb2Str(colorArr[0], colorArr[1], colorArr[2]),\r\n\t            colorArr[3]\r\n\t        ];\r\n\t    };\r\n\r\n\t    var updateFillNode = function (el, style, zrEl) {\r\n\t        // TODO pattern\r\n\t        var fill = style.fill;\r\n\t        if (fill != null) {\r\n\t            // Modified from excanvas\r\n\t            if (fill instanceof Gradient) {\r\n\t                var gradientType;\r\n\t                var angle = 0;\r\n\t                var focus = [0, 0];\r\n\t                // additional offset\r\n\t                var shift = 0;\r\n\t                // scale factor for offset\r\n\t                var expansion = 1;\r\n\t                var rect = zrEl.getBoundingRect();\r\n\t                var rectWidth = rect.width;\r\n\t                var rectHeight = rect.height;\r\n\t                if (fill.type === 'linear') {\r\n\t                    gradientType = 'gradient';\r\n\t                    var transform = zrEl.transform;\r\n\t                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];\r\n\t                    var p1 = [fill.x2 * rectWidth, fill.y2 * rectHeight];\r\n\t                    if (transform) {\r\n\t                        applyTransform(p0, p0, transform);\r\n\t                        applyTransform(p1, p1, transform);\r\n\t                    }\r\n\t                    var dx = p1[0] - p0[0];\r\n\t                    var dy = p1[1] - p0[1];\r\n\t                    angle = Math.atan2(dx, dy) * 180 / Math.PI;\r\n\t                    // The angle should be a non-negative number.\r\n\t                    if (angle < 0) {\r\n\t                        angle += 360;\r\n\t                    }\r\n\r\n\t                    // Very small angles produce an unexpected result because they are\r\n\t                    // converted to a scientific notation string.\r\n\t                    if (angle < 1e-6) {\r\n\t                        angle = 0;\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    gradientType = 'gradientradial';\r\n\t                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];\r\n\t                    var transform = zrEl.transform;\r\n\t                    var scale = zrEl.scale;\r\n\t                    var width = rectWidth;\r\n\t                    var height = rectHeight;\r\n\t                    focus = [\r\n\t                        // Percent in bounding rect\r\n\t                        (p0[0] - rect.x) / width,\r\n\t                        (p0[1] - rect.y) / height\r\n\t                    ];\r\n\t                    if (transform) {\r\n\t                        applyTransform(p0, p0, transform);\r\n\t                    }\r\n\r\n\t                    width /= scale[0] * Z;\r\n\t                    height /= scale[1] * Z;\r\n\t                    var dimension = mathMax(width, height);\r\n\t                    shift = 2 * 0 / dimension;\r\n\t                    expansion = 2 * fill.r / dimension - shift;\r\n\t                }\r\n\r\n\t                // We need to sort the color stops in ascending order by offset,\r\n\t                // otherwise IE won't interpret it correctly.\r\n\t                var stops = fill.colorStops.slice();\r\n\t                stops.sort(function(cs1, cs2) {\r\n\t                    return cs1.offset - cs2.offset;\r\n\t                });\r\n\r\n\t                var length = stops.length;\r\n\t                // Color and alpha list of first and last stop\r\n\t                var colorAndAlphaList = [];\r\n\t                var colors = [];\r\n\t                for (var i = 0; i < length; i++) {\r\n\t                    var stop = stops[i];\r\n\t                    var colorAndAlpha = getColorAndAlpha(stop.color);\r\n\t                    colors.push(stop.offset * expansion + shift + ' ' + colorAndAlpha[0]);\r\n\t                    if (i === 0 || i === length - 1) {\r\n\t                        colorAndAlphaList.push(colorAndAlpha);\r\n\t                    }\r\n\t                }\r\n\r\n\t                if (length >= 2) {\r\n\t                    var color1 = colorAndAlphaList[0][0];\r\n\t                    var color2 = colorAndAlphaList[1][0];\r\n\t                    var opacity1 = colorAndAlphaList[0][1] * style.opacity;\r\n\t                    var opacity2 = colorAndAlphaList[1][1] * style.opacity;\r\n\r\n\t                    el.type = gradientType;\r\n\t                    el.method = 'none';\r\n\t                    el.focus = '100%';\r\n\t                    el.angle = angle;\r\n\t                    el.color = color1;\r\n\t                    el.color2 = color2;\r\n\t                    el.colors = colors.join(',');\r\n\t                    // When colors attribute is used, the meanings of opacity and o:opacity2\r\n\t                    // are reversed.\r\n\t                    el.opacity = opacity2;\r\n\t                    // FIXME g_o_:opacity ?\r\n\t                    el.opacity2 = opacity1;\r\n\t                }\r\n\t                if (gradientType === 'radial') {\r\n\t                    el.focusposition = focus.join(',');\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                // FIXME Change from Gradient fill to color fill\r\n\t                setColorAndOpacity(el, fill, style.opacity);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\r\n\t    var updateStrokeNode = function (el, style) {\r\n\t        // if (style.lineJoin != null) {\r\n\t        //     el.joinstyle = style.lineJoin;\r\n\t        // }\r\n\t        // if (style.miterLimit != null) {\r\n\t        //     el.miterlimit = style.miterLimit * Z;\r\n\t        // }\r\n\t        // if (style.lineCap != null) {\r\n\t        //     el.endcap = style.lineCap;\r\n\t        // }\r\n\t        if (style.lineDash != null) {\r\n\t            el.dashstyle = style.lineDash.join(' ');\r\n\t        }\r\n\t        if (style.stroke != null && !(style.stroke instanceof Gradient)) {\r\n\t            setColorAndOpacity(el, style.stroke, style.opacity);\r\n\t        }\r\n\t    };\r\n\r\n\t    var updateFillAndStroke = function (vmlEl, type, style, zrEl) {\r\n\t        var isFill = type == 'fill';\r\n\t        var el = vmlEl.getElementsByTagName(type)[0];\r\n\t        // Stroke must have lineWidth\r\n\t        if (style[type] != null && style[type] !== 'none' && (isFill || (!isFill && style.lineWidth))) {\r\n\t            vmlEl[isFill ? 'filled' : 'stroked'] = 'true';\r\n\t            // FIXME Remove before updating, or set `colors` will throw error\r\n\t            if (style[type] instanceof Gradient) {\r\n\t                remove(vmlEl, el);\r\n\t            }\r\n\t            if (!el) {\r\n\t                el = vmlCore.createNode(type);\r\n\t            }\r\n\r\n\t            isFill ? updateFillNode(el, style, zrEl) : updateStrokeNode(el, style);\r\n\t            append(vmlEl, el);\r\n\t        }\r\n\t        else {\r\n\t            vmlEl[isFill ? 'filled' : 'stroked'] = 'false';\r\n\t            remove(vmlEl, el);\r\n\t        }\r\n\t    };\r\n\r\n\t    var points = [[], [], []];\r\n\t    var pathDataToString = function (data, m) {\r\n\t        var M = CMD.M;\r\n\t        var C = CMD.C;\r\n\t        var L = CMD.L;\r\n\t        var A = CMD.A;\r\n\t        var Q = CMD.Q;\r\n\r\n\t        var str = [];\r\n\t        var nPoint;\r\n\t        var cmdStr;\r\n\t        var cmd;\r\n\t        var i;\r\n\t        var xi;\r\n\t        var yi;\r\n\t        for (i = 0; i < data.length;) {\r\n\t            cmd = data[i++];\r\n\t            cmdStr = '';\r\n\t            nPoint = 0;\r\n\t            switch (cmd) {\r\n\t                case M:\r\n\t                    cmdStr = ' m ';\r\n\t                    nPoint = 1;\r\n\t                    xi = data[i++];\r\n\t                    yi = data[i++];\r\n\t                    points[0][0] = xi;\r\n\t                    points[0][1] = yi;\r\n\t                    break;\r\n\t                case L:\r\n\t                    cmdStr = ' l ';\r\n\t                    nPoint = 1;\r\n\t                    xi = data[i++];\r\n\t                    yi = data[i++];\r\n\t                    points[0][0] = xi;\r\n\t                    points[0][1] = yi;\r\n\t                    break;\r\n\t                case Q:\r\n\t                case C:\r\n\t                    cmdStr = ' c ';\r\n\t                    nPoint = 3;\r\n\t                    var x1 = data[i++];\r\n\t                    var y1 = data[i++];\r\n\t                    var x2 = data[i++];\r\n\t                    var y2 = data[i++];\r\n\t                    var x3;\r\n\t                    var y3;\r\n\t                    if (cmd === Q) {\r\n\t                        // Convert quadratic to cubic using degree elevation\r\n\t                        x3 = x2;\r\n\t                        y3 = y2;\r\n\t                        x2 = (x2 + 2 * x1) / 3;\r\n\t                        y2 = (y2 + 2 * y1) / 3;\r\n\t                        x1 = (xi + 2 * x1) / 3;\r\n\t                        y1 = (yi + 2 * y1) / 3;\r\n\t                    }\r\n\t                    else {\r\n\t                        x3 = data[i++];\r\n\t                        y3 = data[i++];\r\n\t                    }\r\n\t                    points[0][0] = x1;\r\n\t                    points[0][1] = y1;\r\n\t                    points[1][0] = x2;\r\n\t                    points[1][1] = y2;\r\n\t                    points[2][0] = x3;\r\n\t                    points[2][1] = y3;\r\n\r\n\t                    xi = x3;\r\n\t                    yi = y3;\r\n\t                    break;\r\n\t                case A:\r\n\t                    var x = 0;\r\n\t                    var y = 0;\r\n\t                    var sx = 1;\r\n\t                    var sy = 1;\r\n\t                    var angle = 0;\r\n\t                    if (m) {\r\n\t                        // Extract SRT from matrix\r\n\t                        x = m[4];\r\n\t                        y = m[5];\r\n\t                        sx = sqrt(m[0] * m[0] + m[1] * m[1]);\r\n\t                        sy = sqrt(m[2] * m[2] + m[3] * m[3]);\r\n\t                        angle = Math.atan2(-m[1] / sy, m[0] / sx);\r\n\t                    }\r\n\r\n\t                    var cx = data[i++];\r\n\t                    var cy = data[i++];\r\n\t                    var rx = data[i++];\r\n\t                    var ry = data[i++];\r\n\t                    var startAngle = data[i++] + angle;\r\n\t                    var endAngle = data[i++] + startAngle + angle;\r\n\t                    // FIXME\r\n\t                    // var psi = data[i++];\r\n\t                    i++;\r\n\t                    var clockwise = data[i++];\r\n\r\n\t                    var x0 = cx + cos(startAngle) * rx;\r\n\t                    var y0 = cy + sin(startAngle) * ry;\r\n\r\n\t                    var x1 = cx + cos(endAngle) * rx;\r\n\t                    var y1 = cy + sin(endAngle) * ry;\r\n\r\n\t                    var type = clockwise ? ' wa ' : ' at ';\r\n\t                    if (Math.abs(x0 - x1) < 1e-10) {\r\n\t                        // IE won't render arches drawn counter clockwise if x0 == x1.\r\n\t                        if (Math.abs(endAngle - startAngle) > 1e-2) {\r\n\t                            // Offset x0 by 1/80 of a pixel. Use something\r\n\t                            // that can be represented in binary\r\n\t                            if (clockwise) {\r\n\t                                x0 += 270 / Z;\r\n\t                            }\r\n\t                        }\r\n\t                        else {\r\n\t                            // Avoid case draw full circle\r\n\t                            if (Math.abs(y0 - cy) < 1e-10) {\r\n\t                                if ((clockwise && x0 < cx) || (!clockwise && x0 > cx)) {\r\n\t                                    y1 -= 270 / Z;\r\n\t                                }\r\n\t                                else {\r\n\t                                    y1 += 270 / Z;\r\n\t                                }\r\n\t                            }\r\n\t                            else if ((clockwise && y0 < cy) || (!clockwise && y0 > cy)) {\r\n\t                                x1 += 270 / Z;\r\n\t                            }\r\n\t                            else {\r\n\t                                x1 -= 270 / Z;\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t                    str.push(\r\n\t                        type,\r\n\t                        round(((cx - rx) * sx + x) * Z - Z2), comma,\r\n\t                        round(((cy - ry) * sy + y) * Z - Z2), comma,\r\n\t                        round(((cx + rx) * sx + x) * Z - Z2), comma,\r\n\t                        round(((cy + ry) * sy + y) * Z - Z2), comma,\r\n\t                        round((x0 * sx + x) * Z - Z2), comma,\r\n\t                        round((y0 * sy + y) * Z - Z2), comma,\r\n\t                        round((x1 * sx + x) * Z - Z2), comma,\r\n\t                        round((y1 * sy + y) * Z - Z2)\r\n\t                    );\r\n\r\n\t                    xi = x1;\r\n\t                    yi = y1;\r\n\t                    break;\r\n\t                case CMD.R:\r\n\t                    var p0 = points[0];\r\n\t                    var p1 = points[1];\r\n\t                    // x0, y0\r\n\t                    p0[0] = data[i++];\r\n\t                    p0[1] = data[i++];\r\n\t                    // x1, y1\r\n\t                    p1[0] = p0[0] + data[i++];\r\n\t                    p1[1] = p0[1] + data[i++];\r\n\r\n\t                    if (m) {\r\n\t                        applyTransform(p0, p0, m);\r\n\t                        applyTransform(p1, p1, m);\r\n\t                    }\r\n\r\n\t                    p0[0] = round(p0[0] * Z - Z2);\r\n\t                    p1[0] = round(p1[0] * Z - Z2);\r\n\t                    p0[1] = round(p0[1] * Z - Z2);\r\n\t                    p1[1] = round(p1[1] * Z - Z2);\r\n\t                    str.push(\r\n\t                        // x0, y0\r\n\t                        ' m ', p0[0], comma, p0[1],\r\n\t                        // x1, y0\r\n\t                        ' l ', p1[0], comma, p0[1],\r\n\t                        // x1, y1\r\n\t                        ' l ', p1[0], comma, p1[1],\r\n\t                        // x0, y1\r\n\t                        ' l ', p0[0], comma, p1[1]\r\n\t                    );\r\n\t                    break;\r\n\t                case CMD.Z:\r\n\t                    // FIXME Update xi, yi\r\n\t                    str.push(' x ');\r\n\t            }\r\n\r\n\t            if (nPoint > 0) {\r\n\t                str.push(cmdStr);\r\n\t                for (var k = 0; k < nPoint; k++) {\r\n\t                    var p = points[k];\r\n\r\n\t                    m && applyTransform(p, p, m);\r\n\t                    // 不 round 会非常慢\r\n\t                    str.push(\r\n\t                        round(p[0] * Z - Z2), comma, round(p[1] * Z - Z2),\r\n\t                        k < nPoint - 1 ? comma : ''\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        return str.join('');\r\n\t    };\r\n\r\n\t    // Rewrite the original path method\r\n\t    Path.prototype.brushVML = function (vmlRoot) {\r\n\t        var style = this.style;\r\n\r\n\t        var vmlEl = this._vmlEl;\r\n\t        if (!vmlEl) {\r\n\t            vmlEl = vmlCore.createNode('shape');\r\n\t            initRootElStyle(vmlEl);\r\n\r\n\t            this._vmlEl = vmlEl;\r\n\t        }\r\n\r\n\t        updateFillAndStroke(vmlEl, 'fill', style, this);\r\n\t        updateFillAndStroke(vmlEl, 'stroke', style, this);\r\n\r\n\t        var m = this.transform;\r\n\t        var needTransform = m != null;\r\n\t        var strokeEl = vmlEl.getElementsByTagName('stroke')[0];\r\n\t        if (strokeEl) {\r\n\t            var lineWidth = style.lineWidth;\r\n\t            // Get the line scale.\r\n\t            // Determinant of this.m_ means how much the area is enlarged by the\r\n\t            // transformation. So its square root can be used as a scale factor\r\n\t            // for width.\r\n\t            if (needTransform && !style.strokeNoScale) {\r\n\t                var det = m[0] * m[3] - m[1] * m[2];\r\n\t                lineWidth *= sqrt(abs(det));\r\n\t            }\r\n\t            strokeEl.weight = lineWidth + 'px';\r\n\t        }\r\n\r\n\t        var path = this.path;\r\n\t        if (this.__dirtyPath) {\r\n\t            path.beginPath();\r\n\t            this.buildPath(path, this.shape);\r\n\t            path.toStatic();\r\n\t            this.__dirtyPath = false;\r\n\t        }\r\n\r\n\t        vmlEl.path = pathDataToString(path.data, this.transform);\r\n\r\n\t        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);\r\n\r\n\t        // Append to root\r\n\t        append(vmlRoot, vmlEl);\r\n\r\n\t        // Text\r\n\t        if (style.text) {\r\n\t            this.drawRectText(vmlRoot, this.getBoundingRect());\r\n\t        }\r\n\t        else {\r\n\t            this.removeRectText(vmlRoot);\r\n\t        }\r\n\t    };\r\n\r\n\t    Path.prototype.onRemove = function (vmlRoot) {\r\n\t        remove(vmlRoot, this._vmlEl);\r\n\t        this.removeRectText(vmlRoot);\r\n\t    };\r\n\r\n\t    Path.prototype.onAdd = function (vmlRoot) {\r\n\t        append(vmlRoot, this._vmlEl);\r\n\t        this.appendRectText(vmlRoot);\r\n\t    };\r\n\r\n\t    /***************************************************\r\n\t     * IMAGE\r\n\t     **************************************************/\r\n\t    var isImage = function (img) {\r\n\t        // FIXME img instanceof Image 如果 img 是一个字符串的时候，IE8 下会报错\r\n\t        return (typeof img === 'object') && img.tagName && img.tagName.toUpperCase() === 'IMG';\r\n\t        // return img instanceof Image;\r\n\t    };\r\n\r\n\t    // Rewrite the original path method\r\n\t    ZImage.prototype.brushVML = function (vmlRoot) {\r\n\t        var style = this.style;\r\n\t        var image = style.image;\r\n\r\n\t        // Image original width, height\r\n\t        var ow;\r\n\t        var oh;\r\n\r\n\t        if (isImage(image)) {\r\n\t            var src = image.src;\r\n\t            if (src === this._imageSrc) {\r\n\t                ow = this._imageWidth;\r\n\t                oh = this._imageHeight;\r\n\t            }\r\n\t            else {\r\n\t                var imageRuntimeStyle = image.runtimeStyle;\r\n\t                var oldRuntimeWidth = imageRuntimeStyle.width;\r\n\t                var oldRuntimeHeight = imageRuntimeStyle.height;\r\n\t                imageRuntimeStyle.width = 'auto';\r\n\t                imageRuntimeStyle.height = 'auto';\r\n\r\n\t                // get the original size\r\n\t                ow = image.width;\r\n\t                oh = image.height;\r\n\r\n\t                // and remove overides\r\n\t                imageRuntimeStyle.width = oldRuntimeWidth;\r\n\t                imageRuntimeStyle.height = oldRuntimeHeight;\r\n\r\n\t                // Caching image original width, height and src\r\n\t                this._imageSrc = src;\r\n\t                this._imageWidth = ow;\r\n\t                this._imageHeight = oh;\r\n\t            }\r\n\t            image = src;\r\n\t        }\r\n\t        else {\r\n\t            if (image === this._imageSrc) {\r\n\t                ow = this._imageWidth;\r\n\t                oh = this._imageHeight;\r\n\t            }\r\n\t        }\r\n\t        if (!image) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var x = style.x || 0;\r\n\t        var y = style.y || 0;\r\n\r\n\t        var dw = style.width;\r\n\t        var dh = style.height;\r\n\r\n\t        var sw = style.sWidth;\r\n\t        var sh = style.sHeight;\r\n\t        var sx = style.sx || 0;\r\n\t        var sy = style.sy || 0;\r\n\r\n\t        var hasCrop = sw && sh;\r\n\r\n\t        var vmlEl = this._vmlEl;\r\n\t        if (!vmlEl) {\r\n\t            // FIXME 使用 group 在 left, top 都不是 0 的时候就无法显示了。\r\n\t            // vmlEl = vmlCore.createNode('group');\r\n\t            vmlEl = vmlCore.doc.createElement('div');\r\n\t            initRootElStyle(vmlEl);\r\n\r\n\t            this._vmlEl = vmlEl;\r\n\t        }\r\n\r\n\t        var vmlElStyle = vmlEl.style;\r\n\t        var hasRotation = false;\r\n\t        var m;\r\n\t        var scaleX = 1;\r\n\t        var scaleY = 1;\r\n\t        if (this.transform) {\r\n\t            m = this.transform;\r\n\t            scaleX = sqrt(m[0] * m[0] + m[1] * m[1]);\r\n\t            scaleY = sqrt(m[2] * m[2] + m[3] * m[3]);\r\n\r\n\t            hasRotation = m[1] || m[2];\r\n\t        }\r\n\t        if (hasRotation) {\r\n\t            // If filters are necessary (rotation exists), create them\r\n\t            // filters are bog-slow, so only create them if abbsolutely necessary\r\n\t            // The following check doesn't account for skews (which don't exist\r\n\t            // in the canvas spec (yet) anyway.\r\n\t            // From excanvas\r\n\t            var p0 = [x, y];\r\n\t            var p1 = [x + dw, y];\r\n\t            var p2 = [x, y + dh];\r\n\t            var p3 = [x + dw, y + dh];\r\n\t            applyTransform(p0, p0, m);\r\n\t            applyTransform(p1, p1, m);\r\n\t            applyTransform(p2, p2, m);\r\n\t            applyTransform(p3, p3, m);\r\n\r\n\t            var maxX = mathMax(p0[0], p1[0], p2[0], p3[0]);\r\n\t            var maxY = mathMax(p0[1], p1[1], p2[1], p3[1]);\r\n\r\n\t            var transformFilter = [];\r\n\t            transformFilter.push('M11=', m[0] / scaleX, comma,\r\n\t                        'M12=', m[2] / scaleY, comma,\r\n\t                        'M21=', m[1] / scaleX, comma,\r\n\t                        'M22=', m[3] / scaleY, comma,\r\n\t                        'Dx=', round(x * scaleX + m[4]), comma,\r\n\t                        'Dy=', round(y * scaleY + m[5]));\r\n\r\n\t            vmlElStyle.padding = '0 ' + round(maxX) + 'px ' + round(maxY) + 'px 0';\r\n\t            // FIXME DXImageTransform 在 IE11 的兼容模式下不起作用\r\n\t            vmlElStyle.filter = imageTransformPrefix + '.Matrix('\r\n\t                + transformFilter.join('') + ', SizingMethod=clip)';\r\n\r\n\t        }\r\n\t        else {\r\n\t            if (m) {\r\n\t                x = x * scaleX + m[4];\r\n\t                y = y * scaleY + m[5];\r\n\t            }\r\n\t            vmlElStyle.filter = '';\r\n\t            vmlElStyle.left = round(x) + 'px';\r\n\t            vmlElStyle.top = round(y) + 'px';\r\n\t        }\r\n\r\n\t        var imageEl = this._imageEl;\r\n\t        var cropEl = this._cropEl;\r\n\r\n\t        if (!imageEl) {\r\n\t            imageEl = vmlCore.doc.createElement('div');\r\n\t            this._imageEl = imageEl;\r\n\t        }\r\n\t        var imageELStyle = imageEl.style;\r\n\t        if (hasCrop) {\r\n\t            // Needs know image original width and height\r\n\t            if (! (ow && oh)) {\r\n\t                var tmpImage = new Image();\r\n\t                var self = this;\r\n\t                tmpImage.onload = function () {\r\n\t                    tmpImage.onload = null;\r\n\t                    ow = tmpImage.width;\r\n\t                    oh = tmpImage.height;\r\n\t                    // Adjust image width and height to fit the ratio destinationSize / sourceSize\r\n\t                    imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';\r\n\t                    imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';\r\n\r\n\t                    // Caching image original width, height and src\r\n\t                    self._imageWidth = ow;\r\n\t                    self._imageHeight = oh;\r\n\t                    self._imageSrc = image;\r\n\t                };\r\n\t                tmpImage.src = image;\r\n\t            }\r\n\t            else {\r\n\t                imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';\r\n\t                imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';\r\n\t            }\r\n\r\n\t            if (! cropEl) {\r\n\t                cropEl = vmlCore.doc.createElement('div');\r\n\t                cropEl.style.overflow = 'hidden';\r\n\t                this._cropEl = cropEl;\r\n\t            }\r\n\t            var cropElStyle = cropEl.style;\r\n\t            cropElStyle.width = round((dw + sx * dw / sw) * scaleX);\r\n\t            cropElStyle.height = round((dh + sy * dh / sh) * scaleY);\r\n\t            cropElStyle.filter = imageTransformPrefix + '.Matrix(Dx='\r\n\t                    + (-sx * dw / sw * scaleX) + ',Dy=' + (-sy * dh / sh * scaleY) + ')';\r\n\r\n\t            if (! cropEl.parentNode) {\r\n\t                vmlEl.appendChild(cropEl);\r\n\t            }\r\n\t            if (imageEl.parentNode != cropEl) {\r\n\t                cropEl.appendChild(imageEl);\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            imageELStyle.width = round(scaleX * dw) + 'px';\r\n\t            imageELStyle.height = round(scaleY * dh) + 'px';\r\n\r\n\t            vmlEl.appendChild(imageEl);\r\n\r\n\t            if (cropEl && cropEl.parentNode) {\r\n\t                vmlEl.removeChild(cropEl);\r\n\t                this._cropEl = null;\r\n\t            }\r\n\t        }\r\n\r\n\t        var filterStr = '';\r\n\t        var alpha = style.opacity;\r\n\t        if (alpha < 1) {\r\n\t            filterStr += '.Alpha(opacity=' + round(alpha * 100) + ') ';\r\n\t        }\r\n\t        filterStr += imageTransformPrefix + '.AlphaImageLoader(src=' + image + ', SizingMethod=scale)';\r\n\r\n\t        imageELStyle.filter = filterStr;\r\n\r\n\t        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);\r\n\r\n\t        // Append to root\r\n\t        append(vmlRoot, vmlEl);\r\n\r\n\t        // Text\r\n\t        if (style.text) {\r\n\t            this.drawRectText(vmlRoot, this.getBoundingRect());\r\n\t        }\r\n\t    };\r\n\r\n\t    ZImage.prototype.onRemove = function (vmlRoot) {\r\n\t        remove(vmlRoot, this._vmlEl);\r\n\r\n\t        this._vmlEl = null;\r\n\t        this._cropEl = null;\r\n\t        this._imageEl = null;\r\n\r\n\t        this.removeRectText(vmlRoot);\r\n\t    };\r\n\r\n\t    ZImage.prototype.onAdd = function (vmlRoot) {\r\n\t        append(vmlRoot, this._vmlEl);\r\n\t        this.appendRectText(vmlRoot);\r\n\t    };\r\n\r\n\r\n\t    /***************************************************\r\n\t     * TEXT\r\n\t     **************************************************/\r\n\r\n\t    var DEFAULT_STYLE_NORMAL = 'normal';\r\n\r\n\t    var fontStyleCache = {};\r\n\t    var fontStyleCacheCount = 0;\r\n\t    var MAX_FONT_CACHE_SIZE = 100;\r\n\t    var fontEl = document.createElement('div');\r\n\r\n\t    var getFontStyle = function (fontString) {\r\n\t        var fontStyle = fontStyleCache[fontString];\r\n\t        if (!fontStyle) {\r\n\t            // Clear cache\r\n\t            if (fontStyleCacheCount > MAX_FONT_CACHE_SIZE) {\r\n\t                fontStyleCacheCount = 0;\r\n\t                fontStyleCache = {};\r\n\t            }\r\n\r\n\t            var style = fontEl.style;\r\n\t            var fontFamily;\r\n\t            try {\r\n\t                style.font = fontString;\r\n\t                fontFamily = style.fontFamily.split(',')[0];\r\n\t            }\r\n\t            catch (e) {\r\n\t            }\r\n\r\n\t            fontStyle = {\r\n\t                style: style.fontStyle || DEFAULT_STYLE_NORMAL,\r\n\t                variant: style.fontVariant || DEFAULT_STYLE_NORMAL,\r\n\t                weight: style.fontWeight || DEFAULT_STYLE_NORMAL,\r\n\t                size: parseFloat(style.fontSize || 12) | 0,\r\n\t                family: fontFamily || 'Microsoft YaHei'\r\n\t            };\r\n\r\n\t            fontStyleCache[fontString] = fontStyle;\r\n\t            fontStyleCacheCount++;\r\n\t        }\r\n\t        return fontStyle;\r\n\t    };\r\n\r\n\t    var textMeasureEl;\r\n\t    // Overwrite measure text method\r\n\t    textContain.measureText = function (text, textFont) {\r\n\t        var doc = vmlCore.doc;\r\n\t        if (!textMeasureEl) {\r\n\t            textMeasureEl = doc.createElement('div');\r\n\t            textMeasureEl.style.cssText = 'position:absolute;top:-20000px;left:0;'\r\n\t                + 'padding:0;margin:0;border:none;white-space:pre;';\r\n\t            vmlCore.doc.body.appendChild(textMeasureEl);\r\n\t        }\r\n\r\n\t        try {\r\n\t            textMeasureEl.style.font = textFont;\r\n\t        } catch (ex) {\r\n\t            // Ignore failures to set to invalid font.\r\n\t        }\r\n\t        textMeasureEl.innerHTML = '';\r\n\t        // Don't use innerHTML or innerText because they allow markup/whitespace.\r\n\t        textMeasureEl.appendChild(doc.createTextNode(text));\r\n\t        return {\r\n\t            width: textMeasureEl.offsetWidth\r\n\t        };\r\n\t    };\r\n\r\n\t    var tmpRect = new BoundingRect();\r\n\r\n\t    var drawRectText = function (vmlRoot, rect, textRect, fromTextEl) {\r\n\r\n\t        var style = this.style;\r\n\t        var text = style.text;\r\n\t        if (!text) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var x;\r\n\t        var y;\r\n\t        var align = style.textAlign;\r\n\t        var fontStyle = getFontStyle(style.textFont);\r\n\t        // FIXME encodeHtmlAttribute ?\r\n\t        var font = fontStyle.style + ' ' + fontStyle.variant + ' ' + fontStyle.weight + ' '\r\n\t            + fontStyle.size + 'px \"' + fontStyle.family + '\"';\r\n\r\n\t        var baseline = style.textBaseline;\r\n\t        var verticalAlign = style.textVerticalAlign;\r\n\r\n\t        textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);\r\n\r\n\t        // Transform rect to view space\r\n\t        var m = this.transform;\r\n\t        // Ignore transform for text in other element\r\n\t        if (m && !fromTextEl) {\r\n\t            tmpRect.copy(rect);\r\n\t            tmpRect.applyTransform(m);\r\n\t            rect = tmpRect;\r\n\t        }\r\n\r\n\t        if (!fromTextEl) {\r\n\t            var textPosition = style.textPosition;\r\n\t            var distance = style.textDistance;\r\n\t            // Text position represented by coord\r\n\t            if (textPosition instanceof Array) {\r\n\t                x = rect.x + parsePercent(textPosition[0], rect.width);\r\n\t                y = rect.y + parsePercent(textPosition[1], rect.height);\r\n\r\n\t                align = align || 'left';\r\n\t                baseline = baseline || 'top';\r\n\t            }\r\n\t            else {\r\n\t                var res = textContain.adjustTextPositionOnRect(\r\n\t                    textPosition, rect, textRect, distance\r\n\t                );\r\n\t                x = res.x;\r\n\t                y = res.y;\r\n\r\n\t                // Default align and baseline when has textPosition\r\n\t                align = align || res.textAlign;\r\n\t                baseline = baseline || res.textBaseline;\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            x = rect.x;\r\n\t            y = rect.y;\r\n\t        }\r\n\t        if (verticalAlign) {\r\n\t            switch (verticalAlign) {\r\n\t                case 'middle':\r\n\t                    y -= textRect.height / 2;\r\n\t                    break;\r\n\t                case 'bottom':\r\n\t                    y -= textRect.height;\r\n\t                    break;\r\n\t                // 'top'\r\n\t            }\r\n\t            // Ignore baseline\r\n\t            baseline = 'top';\r\n\t        }\r\n\r\n\t        var fontSize = fontStyle.size;\r\n\t        // 1.75 is an arbitrary number, as there is no info about the text baseline\r\n\t        switch (baseline) {\r\n\t            case 'hanging':\r\n\t            case 'top':\r\n\t                y += fontSize / 1.75;\r\n\t                break;\r\n\t            case 'middle':\r\n\t                break;\r\n\t            default:\r\n\t            // case null:\r\n\t            // case 'alphabetic':\r\n\t            // case 'ideographic':\r\n\t            // case 'bottom':\r\n\t                y -= fontSize / 2.25;\r\n\t                break;\r\n\t        }\r\n\t        switch (align) {\r\n\t            case 'left':\r\n\t                break;\r\n\t            case 'center':\r\n\t                x -= textRect.width / 2;\r\n\t                break;\r\n\t            case 'right':\r\n\t                x -= textRect.width;\r\n\t                break;\r\n\t            // case 'end':\r\n\t                // align = elementStyle.direction == 'ltr' ? 'right' : 'left';\r\n\t                // break;\r\n\t            // case 'start':\r\n\t                // align = elementStyle.direction == 'rtl' ? 'right' : 'left';\r\n\t                // break;\r\n\t            // default:\r\n\t            //     align = 'left';\r\n\t        }\r\n\r\n\t        var createNode = vmlCore.createNode;\r\n\r\n\t        var textVmlEl = this._textVmlEl;\r\n\t        var pathEl;\r\n\t        var textPathEl;\r\n\t        var skewEl;\r\n\t        if (!textVmlEl) {\r\n\t            textVmlEl = createNode('line');\r\n\t            pathEl = createNode('path');\r\n\t            textPathEl = createNode('textpath');\r\n\t            skewEl = createNode('skew');\r\n\r\n\t            // FIXME Why here is not cammel case\r\n\t            // Align 'center' seems wrong\r\n\t            textPathEl.style['v-text-align'] = 'left';\r\n\r\n\t            initRootElStyle(textVmlEl);\r\n\r\n\t            pathEl.textpathok = true;\r\n\t            textPathEl.on = true;\r\n\r\n\t            textVmlEl.from = '0 0';\r\n\t            textVmlEl.to = '1000 0.05';\r\n\r\n\t            append(textVmlEl, skewEl);\r\n\t            append(textVmlEl, pathEl);\r\n\t            append(textVmlEl, textPathEl);\r\n\r\n\t            this._textVmlEl = textVmlEl;\r\n\t        }\r\n\t        else {\r\n\t            // 这里是在前面 appendChild 保证顺序的前提下\r\n\t            skewEl = textVmlEl.firstChild;\r\n\t            pathEl = skewEl.nextSibling;\r\n\t            textPathEl = pathEl.nextSibling;\r\n\t        }\r\n\r\n\t        var coords = [x, y];\r\n\t        var textVmlElStyle = textVmlEl.style;\r\n\t        // Ignore transform for text in other element\r\n\t        if (m && fromTextEl) {\r\n\t            applyTransform(coords, coords, m);\r\n\r\n\t            skewEl.on = true;\r\n\r\n\t            skewEl.matrix = m[0].toFixed(3) + comma + m[2].toFixed(3) + comma +\r\n\t            m[1].toFixed(3) + comma + m[3].toFixed(3) + ',0,0';\r\n\r\n\t            // Text position\r\n\t            skewEl.offset = (round(coords[0]) || 0) + ',' + (round(coords[1]) || 0);\r\n\t            // Left top point as origin\r\n\t            skewEl.origin = '0 0';\r\n\r\n\t            textVmlElStyle.left = '0px';\r\n\t            textVmlElStyle.top = '0px';\r\n\t        }\r\n\t        else {\r\n\t            skewEl.on = false;\r\n\t            textVmlElStyle.left = round(x) + 'px';\r\n\t            textVmlElStyle.top = round(y) + 'px';\r\n\t        }\r\n\r\n\t        textPathEl.string = encodeHtmlAttribute(text);\r\n\t        // TODO\r\n\t        try {\r\n\t            textPathEl.style.font = font;\r\n\t        }\r\n\t        // Error font format\r\n\t        catch (e) {}\r\n\r\n\t        updateFillAndStroke(textVmlEl, 'fill', {\r\n\t            fill: fromTextEl ? style.fill : style.textFill,\r\n\t            opacity: style.opacity\r\n\t        }, this);\r\n\t        updateFillAndStroke(textVmlEl, 'stroke', {\r\n\t            stroke: fromTextEl ? style.stroke : style.textStroke,\r\n\t            opacity: style.opacity,\r\n\t            lineDash: style.lineDash\r\n\t        }, this);\r\n\r\n\t        textVmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);\r\n\r\n\t        // Attached to root\r\n\t        append(vmlRoot, textVmlEl);\r\n\t    };\r\n\r\n\t    var removeRectText = function (vmlRoot) {\r\n\t        remove(vmlRoot, this._textVmlEl);\r\n\t        this._textVmlEl = null;\r\n\t    };\r\n\r\n\t    var appendRectText = function (vmlRoot) {\r\n\t        append(vmlRoot, this._textVmlEl);\r\n\t    };\r\n\r\n\t    var list = [RectText, Displayable, ZImage, Path, Text];\r\n\r\n\t    // In case Displayable has been mixed in RectText\r\n\t    for (var i = 0; i < list.length; i++) {\r\n\t        var proto = list[i].prototype;\r\n\t        proto.drawRectText = drawRectText;\r\n\t        proto.removeRectText = removeRectText;\r\n\t        proto.appendRectText = appendRectText;\r\n\t    }\r\n\r\n\t    Text.prototype.brushVML = function (vmlRoot) {\r\n\t        var style = this.style;\r\n\t        if (style.text) {\r\n\t            this.drawRectText(vmlRoot, {\r\n\t                x: style.x || 0, y: style.y || 0,\r\n\t                width: 0, height: 0\r\n\t            }, this.getBoundingRect(), true);\r\n\t        }\r\n\t        else {\r\n\t            this.removeRectText(vmlRoot);\r\n\t        }\r\n\t    };\r\n\r\n\t    Text.prototype.onRemove = function (vmlRoot) {\r\n\t        this.removeRectText(vmlRoot);\r\n\t    };\r\n\r\n\t    Text.prototype.onAdd = function (vmlRoot) {\r\n\t        this.appendRectText(vmlRoot);\r\n\t    };\r\n\t}\r\n\r\n\r\n/***/ },\r\n/* 382 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\r\n\r\n\tif (!__webpack_require__(2).canvasSupported) {\r\n\t    var urn = 'urn:schemas-microsoft-com:vml';\r\n\r\n\t    var createNode;\r\n\t    var win = window;\r\n\t    var doc = win.document;\r\n\r\n\t    var vmlInited = false;\r\n\r\n\t    try {\r\n\t        !doc.namespaces.zrvml && doc.namespaces.add('zrvml', urn);\r\n\t        createNode = function (tagName) {\r\n\t            return doc.createElement('<zrvml:' + tagName + ' class=\"zrvml\">');\r\n\t        };\r\n\t    }\r\n\t    catch (e) {\r\n\t        createNode = function (tagName) {\r\n\t            return doc.createElement('<' + tagName + ' xmlns=\"' + urn + '\" class=\"zrvml\">');\r\n\t        };\r\n\t    }\r\n\r\n\t    // From raphael\r\n\t    var initVML = function () {\r\n\t        if (vmlInited) {\r\n\t            return;\r\n\t        }\r\n\t        vmlInited = true;\r\n\r\n\t        var styleSheets = doc.styleSheets;\r\n\t        if (styleSheets.length < 31) {\r\n\t            doc.createStyleSheet().addRule('.zrvml', 'behavior:url(#default#VML)');\r\n\t        }\r\n\t        else {\r\n\t            // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\r\n\t            styleSheets[0].addRule('.zrvml', 'behavior:url(#default#VML)');\r\n\t        }\r\n\t    };\r\n\r\n\t    // Not useing return to avoid error when converting to CommonJS module\r\n\t    module.exports = {\r\n\t        doc: doc,\r\n\t        initVML: initVML,\r\n\t        createNode: createNode\r\n\t    };\r\n\t}\r\n\r\n\r\n/***/ },\r\n/* 383 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t/**\r\n\t * VML Painter.\r\n\t *\r\n\t * @module zrender/vml/Painter\r\n\t */\r\n\r\n\r\n\r\n\t    var zrLog = __webpack_require__(40);\r\n\t    var vmlCore = __webpack_require__(382);\r\n\r\n\t    function parseInt10(val) {\r\n\t        return parseInt(val, 10);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @alias module:zrender/vml/Painter\r\n\t     */\r\n\t    function VMLPainter(root, storage) {\r\n\r\n\t        vmlCore.initVML();\r\n\r\n\t        this.root = root;\r\n\r\n\t        this.storage = storage;\r\n\r\n\t        var vmlViewport = document.createElement('div');\r\n\r\n\t        var vmlRoot = document.createElement('div');\r\n\r\n\t        vmlViewport.style.cssText = 'display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;';\r\n\r\n\t        vmlRoot.style.cssText = 'position:absolute;left:0;top:0;';\r\n\r\n\t        root.appendChild(vmlViewport);\r\n\r\n\t        this._vmlRoot = vmlRoot;\r\n\t        this._vmlViewport = vmlViewport;\r\n\r\n\t        this.resize();\r\n\r\n\t        // Modify storage\r\n\t        var oldDelFromMap = storage.delFromMap;\r\n\t        var oldAddToMap = storage.addToMap;\r\n\t        storage.delFromMap = function (elId) {\r\n\t            var el = storage.get(elId);\r\n\r\n\t            oldDelFromMap.call(storage, elId);\r\n\r\n\t            if (el) {\r\n\t                el.onRemove && el.onRemove(vmlRoot);\r\n\t            }\r\n\t        };\r\n\r\n\t        storage.addToMap = function (el) {\r\n\t            // Displayable already has a vml node\r\n\t            el.onAdd && el.onAdd(vmlRoot);\r\n\r\n\t            oldAddToMap.call(storage, el);\r\n\t        };\r\n\r\n\t        this._firstPaint = true;\r\n\t    }\r\n\r\n\t    VMLPainter.prototype = {\r\n\r\n\t        constructor: VMLPainter,\r\n\r\n\t        /**\r\n\t         * @return {HTMLDivElement}\r\n\t         */\r\n\t        getViewportRoot: function () {\r\n\t            return this._vmlViewport;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * 刷新\r\n\t         */\r\n\t        refresh: function () {\r\n\r\n\t            var list = this.storage.getDisplayList(true, true);\r\n\r\n\t            this._paintList(list);\r\n\t        },\r\n\r\n\t        _paintList: function (list) {\r\n\t            var vmlRoot = this._vmlRoot;\r\n\t            for (var i = 0; i < list.length; i++) {\r\n\t                var el = list[i];\r\n\t                if (el.invisible || el.ignore) {\r\n\t                    if (!el.__alreadyNotVisible) {\r\n\t                        el.onRemove(vmlRoot);\r\n\t                    }\r\n\t                    // Set as already invisible\r\n\t                    el.__alreadyNotVisible = true;\r\n\t                }\r\n\t                else {\r\n\t                    if (el.__alreadyNotVisible) {\r\n\t                        el.onAdd(vmlRoot);\r\n\t                    }\r\n\t                    el.__alreadyNotVisible = false;\r\n\t                    if (el.__dirty) {\r\n\t                        el.beforeBrush && el.beforeBrush();\r\n\t                        (el.brushVML || el.brush).call(el, vmlRoot);\r\n\t                        el.afterBrush && el.afterBrush();\r\n\t                    }\r\n\t                }\r\n\t                el.__dirty = false;\r\n\t            }\r\n\r\n\t            if (this._firstPaint) {\r\n\t                // Detached from document at first time\r\n\t                // to avoid page refreshing too many times\r\n\r\n\t                // FIXME 如果每次都先 removeChild 可能会导致一些填充和描边的效果改变\r\n\t                this._vmlViewport.appendChild(vmlRoot);\r\n\t                this._firstPaint = false;\r\n\t            }\r\n\t        },\r\n\r\n\t        resize: function (width, height) {\r\n\t            var width = width == null ? this._getWidth() : width;\r\n\t            var height = height == null ? this._getHeight() : height;\r\n\r\n\t            if (this._width != width || this._height != height) {\r\n\t                this._width = width;\r\n\t                this._height = height;\r\n\r\n\t                var vmlViewportStyle = this._vmlViewport.style;\r\n\t                vmlViewportStyle.width = width + 'px';\r\n\t                vmlViewportStyle.height = height + 'px';\r\n\t            }\r\n\t        },\r\n\r\n\t        dispose: function () {\r\n\t            this.root.innerHTML = '';\r\n\r\n\t            this._vmlRoot =\r\n\t            this._vmlViewport =\r\n\t            this.storage = null;\r\n\t        },\r\n\r\n\t        getWidth: function () {\r\n\t            return this._width;\r\n\t        },\r\n\r\n\t        getHeight: function () {\r\n\t            return this._height;\r\n\t        },\r\n\r\n\t        clear: function () {\r\n\t            if (this._vmlViewport) {\r\n\t                this.root.removeChild(this._vmlViewport);\r\n\t            }\r\n\t        },\r\n\r\n\t        _getWidth: function () {\r\n\t            var root = this.root;\r\n\t            var stl = root.currentStyle;\r\n\r\n\t            return ((root.clientWidth || parseInt10(stl.width))\r\n\t                    - parseInt10(stl.paddingLeft)\r\n\t                    - parseInt10(stl.paddingRight)) | 0;\r\n\t        },\r\n\r\n\t        _getHeight: function () {\r\n\t            var root = this.root;\r\n\t            var stl = root.currentStyle;\r\n\r\n\t            return ((root.clientHeight || parseInt10(stl.height))\r\n\t                    - parseInt10(stl.paddingTop)\r\n\t                    - parseInt10(stl.paddingBottom)) | 0;\r\n\t        }\r\n\t    };\r\n\r\n\t    // Not supported methods\r\n\t    function createMethodNotSupport(method) {\r\n\t        return function () {\r\n\t            zrLog('In IE8.0 VML mode painter not support method \"' + method + '\"');\r\n\t        };\r\n\t    }\r\n\r\n\t    var notSupportedMethods = [\r\n\t        'getLayer', 'insertLayer', 'eachLayer', 'eachBuildinLayer', 'eachOtherLayer', 'getLayers',\r\n\t        'modLayer', 'delLayer', 'clearLayer', 'toDataURL', 'pathToImage'\r\n\t    ];\r\n\r\n\t    for (var i = 0; i < notSupportedMethods.length; i++) {\r\n\t        var name = notSupportedMethods[i];\r\n\t        VMLPainter.prototype[name] = createMethodNotSupport(name);\r\n\t    }\r\n\r\n\t    module.exports = VMLPainter;\r\n\r\n\r\n/***/ }\r\n/******/ ])\r\n});\r\n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./unit/ECharts/echarts.js\n// module id = 0\n// module chunks = 0 2","\r\nvar echarts = require('../unit/ECharts/echarts');\r\n\r\nvar option = {\r\n\t\ttitle: {\r\n\t\t\ttext: '全局动态'\r\n\t\t},\r\n\t\ttooltip: {\r\n\t\t\ttrigger: 'axis',\r\n\t\t\t\r\n\t\t},\r\n\t\tlegend: {\r\n\t\t\tdata:['车流量1', '车流量2', '车流量3']\r\n\t\t},\r\n\t\t//this is x-axis, the array has only one object,that means one serious elements(on the button)\r\n\t\txAxis: [\r\n\t\t\t{\r\n\t\t\t\ttype: 'category',\r\n\t\t\t\tboundaryGap: true,\r\n\t\t\t\tdata:[getNowFormatDate()],\r\n\t\t\t\tsplitNumber:10,\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t],\r\n\t\t//this is y-axis, the same as x-axis\r\n\t\tyAxis: [\r\n\t\t\t{\r\n\t\t\t\ttype: 'value',\r\n\t\t\t\tboundaryGap: [0, '100%'],\r\n\t\t\t\tsplitLine: {\r\n\t\t\t\t\tshow: false\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t],\r\n\t\tseries: [\r\n\t\t\t{\r\n\t\t\t\tname:'车流量1',\r\n\t\t\t\ttype:'line',\r\n\t\t\t\tdata:[0]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname:'车流量2',\r\n\t\t\t\ttype:'line',\r\n\t\t\t\tdata:[0]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname:'车流量3',\r\n\t\t\t\ttype:'line',\r\n\t\t\t\tdata:[0]\r\n\t\t\t},\r\n\t\t\t]\r\n\t};\r\n\r\nvar domm = $('#main');\r\nvar chart1 = echarts.init(document.getElementById('main'));\r\n\r\nchart1.setOption(option);\r\n\n\n\n// WEBPACK FOOTER //\n// ./appConfig/echart.js"],"sourceRoot":""}